<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://quasar-framework.org/2018/02/21/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Working On The First Release]]></title>
      <url>https://quasar-framework.org/2015/10/02/2015-10-02-Working-On-The-First-Release/</url>
      <content type="html"></content>
      
        
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <url>https://quasar-framework.org/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title></title>
      <url>https://quasar-framework.org/support-quasar-framework.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title></title>
      <url>https://quasar-framework.org/quasar-play-privacy-policy.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title></title>
      <url>https://quasar-framework.org/blog/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Adding Pages and Layouts]]></title>
      <url>https://quasar-framework.org/guide/app-adding-pages-and-layouts.html</url>
      <content type="html"><![CDATA[<p>Your Pages (<code>/src/pages</code>) and Layouts (<code>/src/layouts</code>) are injected into your website/app (and also managed) through Vue Router in <code>/src/router/routes.js</code>. Each Page and Layout needs to be referenced there.</p>
<p>You may want to read <a href="/guide/app-routing.html">Routing</a> first and also understand <a href="/guide/app-lazy-loading---code-splitting.html">Lazy Loading / Code Splitting</a>.</p>
<p>Example of <code>routes.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// we define our routes in this file</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LandingPage <span class="keyword">from</span> <span class="string">'pages/Landing'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    component: LandingPage</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes</span><br></pre></td></tr></table></figure></p>
<p>Example of <code>routes.js</code> using lazy-loading / on-demand loading:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// we define our routes in this file</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'pages/Landing'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes</span><br></pre></td></tr></table></figure></p>
<p><strong>Configuring routes to use Layouts and Pages basically consists of correctly nesting routes, as we’ll see in the next section.</strong></p>
<h2 id="Nested-Routes"><a href="#Nested-Routes" class="headerlink" title="Nested Routes"></a>Nested Routes</h2><p>Real app UIs are usually composed of components that are nested multiple levels deep. It is also very common that the segments of a URL corresponds to a certain structure of nested components, for example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/user/profile                   /user/posts</span><br><span class="line">+------------------+            +-----------------+</span><br><span class="line">| User             |            | User            |</span><br><span class="line">| +--------------+ |            | +-------------+ |</span><br><span class="line">| | Profile      | |  +------&gt;  | | Posts       | |</span><br><span class="line">| |              | |            | |             | |</span><br><span class="line">| +--------------+ |            | +-------------+ |</span><br><span class="line">+------------------+            +-----------------+</span><br></pre></td></tr></table></figure>
<p>With Vue Router, it is very simple to express this relationship using nested route configurations. We notice some things: both pages need to be wrapped by a User component. Hey, User component is then a Layout!</p>
<p>Let’s create these files:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar new layout User</span><br><span class="line"> app:new Generated layout: src/layouts/User.vue +0ms</span><br><span class="line"> app:new Make sure to reference it <span class="keyword">in</span> src/router/routes.js +2ms</span><br><span class="line"></span><br><span class="line">$ quasar new page Profile Posts</span><br><span class="line"> app:new Generated page: src/pages/Profile.vue +0ms</span><br><span class="line"> app:new Make sure to reference it <span class="keyword">in</span> src/router/routes.js +2ms</span><br><span class="line"></span><br><span class="line"> app:new Generated page: src/pages/Posts.vue +1ms</span><br><span class="line"> app:new Make sure to reference it <span class="keyword">in</span> src/router/routes.js +0ms</span><br></pre></td></tr></table></figure></p>
<p>Since User layout wraps inner pages, they need an injection point. This is supplied by the <code>&lt;router-view&gt;</code> component:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- /src/layouts/User.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- this is where the Pages are injected --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-page-container</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-page-container</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- /src/pages/Profile.vue or Posts.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-page</span>&gt;</span></span><br><span class="line">    ...page content...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure>
<p>Our example has some routes specified (/user/profile and /user/posts). <strong>So how can we put everything together now?</strong> We edit the routes file. That’s where we will configure routes, tell which components are Layouts and which are Pages and also reference/import them into our app:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/router/routes.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">'layouts/User'</span></span><br><span class="line"><span class="keyword">import</span> Profile <span class="keyword">from</span> <span class="string">'pages/Profile'</span></span><br><span class="line"><span class="keyword">import</span> Posts <span class="keyword">from</span> <span class="string">'pages/Posts'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/user'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// we use /src/layouts/User component which is imported above</span></span><br><span class="line">    component: User,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// hey, it has children routes and User has &lt;router-view&gt; in it;</span></span><br><span class="line">    <span class="comment">// It is really a Layout then!</span></span><br><span class="line">    children: [</span><br><span class="line">      <span class="comment">// Profile page</span></span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'profile'</span>, <span class="comment">// here it is, route /user/profile</span></span><br><span class="line">        component: Profile <span class="comment">// we reference /src/pages/Profile.vue imported above</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Posts page</span></span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'posts'</span>, <span class="comment">// here it is, route /user/posts</span></span><br><span class="line">        component: Posts <span class="comment">// we reference /src/pages/Posts.vue imported above</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes</span><br></pre></td></tr></table></figure>
<p><strong>Note that nested paths that start with <code>/</code> will be treated as a root path. This allows you to leverage component nesting without having to use a nested URL.</strong></p>
<blockquote>
<p>For further in-detail reading please take a look on <a href="https://router.vuejs.org/en/essentials/nested-routes.html#" target="_blank" rel="noopener">Vue Router</a> documentation.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ajax Requests]]></title>
      <url>https://quasar-framework.org/guide/ajax-requests.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>Quasar recommends Axios during project initialization: <code>Use Axios for Ajax calls? (Y/n)</code></p>
</blockquote>
<p>Then you should create a new plugin <code>axios.js</code> that looks like this:<br>(Here you can also specify additional settings for your axios instance)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import axios from &apos;axios&apos;</span><br><span class="line"></span><br><span class="line">export default (&#123;app, router, Vue&#125;) =&gt; &#123;</span><br><span class="line">  Vue.prototype.$axios = axios</span><br><span class="line">  // ^ ^ ^ this will allow you to use this.$axios</span><br><span class="line">  //       so you won&apos;t necessarily have to import axios in each vue file</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Usage in your single file components methods will be like:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  loadData () &#123;</span><br><span class="line">    this.$axios.get(&apos;/api/backend&apos;)</span><br><span class="line">      .then((response) =&gt; &#123;</span><br><span class="line">        this.data = response.data</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(() =&gt; &#123;</span><br><span class="line">        this.$q.notify(&#123;</span><br><span class="line">          color: &apos;negative&apos;,</span><br><span class="line">          position: &apos;top&apos;,</span><br><span class="line">          message: &apos;Loading failed&apos;,</span><br><span class="line">          icon: &apos;report_problem&apos;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p>
<p>Usage in Vuex Actions for globally adding headers to axios (such as during authentication):<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import axios from &apos;axios&apos;</span><br><span class="line"></span><br><span class="line">export function register (&#123;commit&#125;, form) &#123;</span><br><span class="line">  return axios.post(&apos;api/auth/register&apos;, form)</span><br><span class="line">    .then(response =&gt; &#123;</span><br><span class="line">      commit(&apos;login&apos;, &#123;token: response.data.token, user: response.data.user&#125;)</span><br><span class="line">      setAxiosHeaders(response.data.token)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function setAxiosHeaders (token) &#123;</span><br><span class="line">  axios.defaults.headers.common[&apos;Authorization&apos;] = &apos;Bearer &apos; + token</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Also look at <a href="https://github.com/axios/axios" target="_blank" rel="noopener">Axios docs</a> for more information.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[API Proxying for Dev]]></title>
      <url>https://quasar-framework.org/guide/app-api-proxying.html</url>
      <content type="html"><![CDATA[<p>When integrating a project folder with Quasar CLI and the Main Starter Kit with an existing backend, a common need is to access the backend API when using the dev server. To achieve this, we can run the dev server and the API backend side-by-side (or remotely), and let the dev server proxy all API requests to the actual backend.</p>
<p>This is useful if you access relative paths in your API requests. Obviously, these relative paths will probably not work while you are developing. In order to create an environment similar to the one used by your deployed website/app, you can proxy your API requests.</p>
<p>To configure the proxy rules, edit <code>/quasar.conf.js</code> in <code>devServer.proxy</code>. You should refer to <a href="https://webpack.js.org/configuration/dev-server/#devserver-proxy" target="_blank" rel="noopener">Webpack Dev Server Proxy</a> docs for detailed usage. But here’s a simple example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// quasar.conf.js</span></span><br><span class="line"></span><br><span class="line">devServer: &#123;</span><br><span class="line">  proxy: &#123;</span><br><span class="line">    <span class="comment">// proxy all requests starting with /api to jsonplaceholder</span></span><br><span class="line">    <span class="string">'/api'</span>: &#123;</span><br><span class="line">      target: <span class="string">'http://some.api.target.com:7070'</span>,</span><br><span class="line">      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      pathRewrite: &#123;</span><br><span class="line">        <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The above example will proxy the request <code>/api/posts/1</code> to <code>http://some.api.target.com:7070/posts/1</code>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Build Commands]]></title>
      <url>https://quasar-framework.org/guide/app-build-commands.html</url>
      <content type="html"><![CDATA[<p>We will be covering Development and Production build commands. For a full list of Quasar CLI commands, make sure to read its <a href="/guide/quasar-cli.html">documentation page</a>.</p>
<h3 id="Development"><a href="#Development" class="headerlink" title="Development"></a>Development</h3><blockquote>
<p>Starts a Node.js local development server.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># run development server (with default theme)</span></span><br><span class="line">$ quasar dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># run development server with specific theme</span></span><br><span class="line">$ quasar dev -t mat</span><br><span class="line">$ quasar dev -t ios</span><br><span class="line"></span><br><span class="line"><span class="comment"># on specific port</span></span><br><span class="line">$ quasar dev -p 9090</span><br><span class="line"></span><br><span class="line"><span class="comment"># SSR</span></span><br><span class="line">$ quasar dev -m ssr</span><br><span class="line"></span><br><span class="line"><span class="comment"># PWA</span></span><br><span class="line">$ quasar dev -m pwa</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mobile App</span></span><br><span class="line">$ quasar dev -m cordova -T [android|ios] -t [mat|ios]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Electron App</span></span><br><span class="line">$ quasar dev -m electron</span><br><span class="line"><span class="comment"># with iOS theme...</span></span><br><span class="line">$ quasar dev -m electron -t ios</span><br></pre></td></tr></table></figure>
<p>For a complete list, please read <a href="/guide/quasar-cli.html#dev-Development-Server">Quasar CLI</a> Development Server section.</p>
<p>While developing with the Dev Server you will have:</p>
<ul>
<li>Babel, so you can write ES6 code</li>
<li>Webpack + vue-loader for Vue SFC (single file components)</li>
<li>State preserving hot-reload</li>
<li>State preserving compilation error overlay</li>
<li>Lint-on-save with ESLint</li>
<li>Source maps</li>
<li>Develop right on a device emulator (or a real phone connected to your machine) if you target a Mobile App</li>
<li>Develop right on an Electron window with Developer Tools included if you target an Electron App</li>
</ul>
<h3 id="Production"><a href="#Production" class="headerlink" title="Production"></a>Production</h3><blockquote>
<p>Build assets for production.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># build for production</span></span><br><span class="line">$ quasar build</span><br><span class="line"></span><br><span class="line"><span class="comment"># build for production with specific theme</span></span><br><span class="line">$ quasar build -t mat</span><br><span class="line">$ quasar build -t ios</span><br><span class="line"></span><br><span class="line"><span class="comment"># SSR</span></span><br><span class="line">$ quasar build -m ssr</span><br><span class="line"></span><br><span class="line"><span class="comment"># PWA</span></span><br><span class="line">$ quasar build -m pwa</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mobile App</span></span><br><span class="line">$ quasar build -m cordova -T [android|ios] -t [mat|ios]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Electron App</span></span><br><span class="line">$ quasar build -m electron</span><br><span class="line"><span class="comment"># with iOS theme...</span></span><br><span class="line">$ quasar build -m electron -t ios</span><br></pre></td></tr></table></figure>
<p>For a complete list, please read <a href="/guide/quasar-cli.html#build-clean-Build-App-for-Production">Quasar CLI</a> Build App for Production section.</p>
<p>In addition to what you get while developing your website/app, for production builds you also take advantage of:</p>
<ul>
<li>Javascript minified with <a href="https://github.com/mishoo/UglifyJS2" target="_blank" rel="noopener">UglifyJS</a></li>
<li>HTML minified with <a href="https://github.com/kangax/html-minifier" target="_blank" rel="noopener">html-minifier</a></li>
<li>CSS across all components extracted (and auto-prefixed) into a single file and minified with <a href="https://github.com/ben-eb/cssnano" target="_blank" rel="noopener">cssnano</a></li>
<li>All static assets are compiled with version hashes for efficient long-term caching, and a production index.html is auto-generated with proper URLs to these generated assets.</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Directory Structure]]></title>
      <url>https://quasar-framework.org/guide/app-directory-structure.html</url>
      <content type="html"><![CDATA[<p>This is the structure of a project with all modes installed. There’s no reason to be intimidated though!</p>
<blockquote>
<p>If you are a beginner, all you’ll need to care about is <code>/quasar.conf.js</code> (Quasar App Config file), <code>/src/router</code>, <code>/src/layouts</code>, <code>/src/pages</code> and optionally <code>/src/assets</code>.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── src/</span><br><span class="line">│   ├── assets/              <span class="comment"># dynamic assets (processed by webpack)</span></span><br><span class="line">│   ├── statics/             <span class="comment"># pure static assets (directly copied)</span></span><br><span class="line">│   ├── components/          <span class="comment"># .vue components used in pages &amp; layouts</span></span><br><span class="line">│   ├── css/                 <span class="comment"># CSS/Stylus/Sass/... files for your app</span></span><br><span class="line">|   |   ├── app.styl</span><br><span class="line">|   │   └── themes/          <span class="comment"># Quasar themes entry points for you to tweak</span></span><br><span class="line">|   │       ├── common.variables.styl <span class="comment"># Common Stylus variables for all Quasar themes</span></span><br><span class="line">|   │       ├── variables.mat.styl    <span class="comment"># Variables for Material Design theme</span></span><br><span class="line">|   │       └── variables.ios.styl    <span class="comment"># Variables for iOS theme</span></span><br><span class="line">│   ├── layouts/             <span class="comment"># layout .vue files</span></span><br><span class="line">│   ├── pages/               <span class="comment"># page .vue files</span></span><br><span class="line">│   ├── plugins/             <span class="comment"># app plugins (app initialization code)</span></span><br><span class="line">│   ├── router/              <span class="comment"># Vue Router</span></span><br><span class="line">|   |   ├── index.js         <span class="comment"># Vue Router definition</span></span><br><span class="line">|   │   └── routes.js        <span class="comment"># App Routes definitions</span></span><br><span class="line">│   ├── store/               <span class="comment"># Vuex Store</span></span><br><span class="line">|   |   ├── index.js         <span class="comment"># Vuex Store definition</span></span><br><span class="line">|   │   ├── &lt;folder&gt;         <span class="comment"># Vuex Store Module...</span></span><br><span class="line">|   │   └── &lt;folder&gt;         <span class="comment"># Vuex Store Module...</span></span><br><span class="line">│   ├── App.vue              <span class="comment"># root Vue component of your App</span></span><br><span class="line">│   └── index.template.html  <span class="comment"># Template for index.html</span></span><br><span class="line">├── src-ssr/                 <span class="comment"># SSR specific code (like production Node webserver)</span></span><br><span class="line">├── src-pwa/                 <span class="comment"># PWA specific code (like Service Worker)</span></span><br><span class="line">├── src-cordova/             <span class="comment"># Cordova generated folder used to create Mobile Apps</span></span><br><span class="line">├── src-electron/            <span class="comment"># Electron specific code (like "main" thread)</span></span><br><span class="line">├── dist/                    <span class="comment"># where production builds go</span></span><br><span class="line">│   ├── spa-mat/             <span class="comment"># example when building SPA with MAT theme</span></span><br><span class="line">│   ├── spa-ios/             <span class="comment"># example when building SPA with IOS theme</span></span><br><span class="line">│   ├── electron-mat/        <span class="comment"># example when building Electron with MAT theme</span></span><br><span class="line">│   └── ....</span><br><span class="line">├── quasar.conf.js           <span class="comment"># Quasar App Config file</span></span><br><span class="line">├── .babelrc                 <span class="comment"># babel config</span></span><br><span class="line">├── .editorconfig            <span class="comment"># editor config</span></span><br><span class="line">├── .eslintignore            <span class="comment"># ESlint ignore paths</span></span><br><span class="line">├── .eslintrc.js             <span class="comment"># ESlint config</span></span><br><span class="line">├── .postcssrc.js            <span class="comment"># PostCSS config</span></span><br><span class="line">├── .stylintrc               <span class="comment"># Stylus lint config</span></span><br><span class="line">├── .gitignore               <span class="comment"># GIT ignore paths</span></span><br><span class="line">├── package.json             <span class="comment"># npm scripts and dependencies</span></span><br><span class="line">└── README.md                <span class="comment"># readme for your website/App</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CLI Installation and Development Features]]></title>
      <url>https://quasar-framework.org/guide/app-installation.html</url>
      <content type="html"><![CDATA[<p>Using the CLI is the recommended way to go in order to benefit from all Quasar can do for it. You’ll be able to build:</p>
<ul>
<li>a SPA (Single Page Application/Website),</li>
<li>a SSR (Server-side Rendered App/Website + optional PWA client takeover)</li>
<li>a PWA (Progressive Web App),</li>
<li>a Mobile App (through Cordova),</li>
<li>an Electron App,<br>…<strong>sharing the same base-code</strong>.</li>
</ul>
<p>First, we install Quasar CLI. Make sure you have Node &gt;=8 and NPM &gt;=5 installed on your machine.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Node.js &gt;= 8.9.0 is required.</span></span><br><span class="line">$ yarn global add quasar-cli</span><br><span class="line"><span class="comment"># or:</span></span><br><span class="line">$ npm install -g quasar-cli</span><br></pre></td></tr></table></figure>
<p>Then we create a project folder with Quasar CLI:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar init &lt;folder_name&gt;</span><br></pre></td></tr></table></figure></p>
<p>Note that you don’t need separate projects if you want to build any of the options described above. This one project can seamlessly handle all of them.</p>
<p>To continue your learning about Quasar, you should familiarize yourself with the <a href="/guide/quasar-cli.html">Quasar CLI</a> in depth, because you will be using it a lot.</p>
<h2 id="What’s-Included"><a href="#What’s-Included" class="headerlink" title="What’s Included"></a>What’s Included</h2><p>While developing with Dev Server (<code>$ quasar dev</code>):</p>
<ul>
<li>Babel, so you can write ES6 code</li>
<li>Webpack + vue-loader for Vue SFC (single file components)</li>
<li>State preserving hot-reload</li>
<li>State preserving compilation error overlay</li>
<li>Lint-on-save with ESLint</li>
<li>Source maps</li>
<li>Develop right on a device emulator (or a real phone connected to your machine) if you target a Mobile App</li>
<li>Develop right on an Electron window with Developer Tools included if you target an Electron App</li>
</ul>
<p>Developing for production (<code>$ quasar build</code>):</p>
<ul>
<li>Javascript minified with <a href="https://github.com/mishoo/UglifyJS2" target="_blank" rel="noopener">UglifyJS</a></li>
<li>HTML minified with <a href="https://github.com/kangax/html-minifier" target="_blank" rel="noopener">html-minifier</a></li>
<li>CSS across all components extracted (and auto-prefixed) into a single file and minified with <a href="https://github.com/ben-eb/cssnano" target="_blank" rel="noopener">cssnano</a></li>
<li>All static assets are compiled with version hashes for efficient long-term caching, and a production index.html is auto-generated with proper URLs to these generated assets.</li>
</ul>
<p>Take note of the ‘/quasar.conf.js’ file in the root of your project folder. This file helps you quickly configure the way your website/App works. We’ll go over it in the <a href="/guide/app-quasar.conf.js.html">Configuration</a> section.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Lazy Loading / Code Splitting]]></title>
      <url>https://quasar-framework.org/guide/app-lazy-loading---code-splitting.html</url>
      <content type="html"><![CDATA[<p>When your website/app is small, you can load all layouts/pages/components into the initial bundle and serve everything at startup. But when your code gets complex and has many layouts/pages/components, it won’t be optimal to do this as it will massively impact loading time. Fortunately, there is a way to solve this.</p>
<p>We’ll cover how you can lazy load / code split parts of your app so that they are automatically requested only on demand. This is done through dynamic imports. Let’s start with an example and then convert it so that we use lazy loading – we’ll focus this example on loading a page, but the same principle can be applied to load anything (assets, JSONs, …):</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SomePage <span class="keyword">from</span> <span class="string">'pages/SomePage'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/some-page'</span>,</span><br><span class="line">    component: SomePage</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>Now let’s change this and make the page be loaded on demand only, using dynamic imports:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/some-page'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'pages/SomePage'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>Easy, right? What this does is that it creates a separate chunk for <code>/src/pages/SomePage.vue</code> which is then loaded only when it is needed. In this case, when a user visits the ‘/same-page’ route.</p>
<p>As you noticed above, we’re using dynamic imports (<code>import(&#39;..resource..&#39;)</code>) instead of regular imports (<code>import Resource from &#39;./path/to/resource&#39;</code>). Dynamic imports are essentially returning a Promise that you can use:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">'./categories.json'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">categories</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// hey, we have lazy loaded the file</span></span><br><span class="line">    <span class="comment">// and we have its content in "categories"</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// oops, something went wrong...</span></span><br><span class="line">    <span class="comment">// couldn't load the resource</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<p>One advantage of using dynamic imports as opposed to regular imports is that the import path can be determined at runtime:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">'pages/'</span> + pageName + <span class="string">'/'</span> + <span class="string">'id'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Caveat-for-Dynamic-Imports"><a href="#Caveat-for-Dynamic-Imports" class="headerlink" title="Caveat for Dynamic Imports"></a>Caveat for Dynamic Imports</h2><p>There’s one caveat when using dynamic imports with variable parts like in the previous example. When the website/app is bundled, so at compile time, we have no way of telling what the exact import path will be at runtime. As a result, chunks will be created for each file that could match the variable path. You might see un-necessary files in the build log.</p>
<p>So how can we limit the number of chunks created in this case? The idea is to limit the variable part as much as you can so the matched paths are as few as possible.</p>
<ol>
<li><p>Add file extension, even if it works without it too. This will create chunks only for that file types. Useful when that folder contains many file types.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span>(<span class="string">'./folder/'</span> + pageName)</span><br><span class="line"></span><br><span class="line"><span class="comment">// much better</span></span><br><span class="line"><span class="keyword">import</span>(<span class="string">'./folder/'</span> + pageName + <span class="string">'.vue'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Try to create a folder structure that will limit the files available in that variable path. Make it as specific as possible:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad -- makes chunks for any JSON inside ./folder (recursive search)</span></span><br><span class="line"><span class="keyword">const</span> asset = <span class="string">'my/jsons/categories.json'</span></span><br><span class="line"><span class="keyword">import</span>(<span class="string">'./folder/'</span> + asset)</span><br><span class="line"></span><br><span class="line"><span class="comment">// good -- makes chunks only for JSONs inside ./folder/my/jsons</span></span><br><span class="line"><span class="keyword">const</span> asset = <span class="string">'categories.json'</span></span><br><span class="line"><span class="keyword">import</span>(<span class="string">'./folder/my/jsons/'</span> + asset)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Try to import from folders containing only files. Take the previous example and imagine ./folder/my/jsons further contains sub-folders. We made the dynamic import better by specifying a more specific path, but it’s still not optimal in this case. Best is to use terminal folders that only contain files, so we limit the number of matched paths.</p>
</li>
</ol>
<p>Remember that the number of matched paths equals to the number of chunks being generated.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Deployment of SPA]]></title>
      <url>https://quasar-framework.org/guide/app-deploying-spa.html</url>
      <content type="html"><![CDATA[<p>There exist many services that allow deploying applications with ease.<br>To list all of them would not be possible so we will focus on the general deployment process and some specifics for common services.</p>
<p>If your favorite deployment tool is missing feel free to create a pull request on GitHub to add it to the list.</p>
<h2 id="General-deployment"><a href="#General-deployment" class="headerlink" title="General deployment"></a>General deployment</h2><p>The first step in deploying you Quasar SPA is always to build a production-ready bundle of your files, which gets rid of development statements and minifies your source.</p>
<p>To produce such a build use Quasar CLI with the following command<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar build</span><br></pre></td></tr></table></figure></p>
<p>For possible build options please refer to the <a href="/guide/quasar-cli">Quasar CLI docs</a>.</p>
<p>This command will build your project in SPA mode and output your production ready bundle to a newly created folder <code>/dist/spa-&lt;theme&gt;</code> were <code>&lt;theme&gt;</code> is replaced by the theme you chose to build with.</p>
<p>To serve your production files it is <em>required</em> to use a web server, so to serve over http:// protocol. Simply opening the <code>index.html</code> file from within your browser will not work, since this uses the file:// protocol instead.</p>
<p>Common choices for web servers are <a href="https://www.nginx.com/" target="_blank" rel="noopener">nginx</a>, <a href="https://caddyserver.com/" target="_blank" rel="noopener">Caddy</a>, <a href="https://httpd.apache.org/" target="_blank" rel="noopener">Apache</a>, <a href="https://expressjs.com/" target="_blank" rel="noopener">Express</a>; but you should be able to use whatever web server you want.</p>
<p>The web server requires no special setup (unless you built with Vue Router in “history” mode). The main requirement is to be able to serve static files from a directory, so consult the documentation of your web server on how to set up static file serving.</p>
<p>An example config for nginx may look like this:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80 http2;</span><br><span class="line">    server_name quasar.myapp.com;</span><br><span class="line"></span><br><span class="line">    root /home/user/quasar.myapp.com/public;</span><br><span class="line"></span><br><span class="line">    add_header X-Frame-Options &quot;SAMEORIGIN&quot;;</span><br><span class="line">    add_header X-XSS-Protection &quot;1; mode=block&quot;;</span><br><span class="line">    add_header X-Content-Type-Options &quot;nosniff&quot;;</span><br><span class="line"></span><br><span class="line">    index index.html;</span><br><span class="line"></span><br><span class="line">    charset utf-8;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri $uri/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location = /favicon.ico &#123; access_log off; log_not_found off; &#125;</span><br><span class="line">    location = /robots.txt  &#123; access_log off; log_not_found off; &#125;</span><br><span class="line"></span><br><span class="line">    access_log off;</span><br><span class="line">    error_log  /var/log/nginx/quasar.myapp.com-error.log error;</span><br><span class="line"></span><br><span class="line">    location ~ /\.(?!well-known).* &#123;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Deploying-with-Now"><a href="#Deploying-with-Now" class="headerlink" title="Deploying with Now"></a>Deploying with Now</h2><p>Deploying your Quasar application with <a href="https://zeit.co/now" target="_blank" rel="noopener">now</a> is really easy. All you have to do is to download the <a href="https://zeit.co/download#now-cli" target="_blank" rel="noopener">now-cli</a> and log in by running:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ now login</span><br></pre></td></tr></table></figure></p>
<p>Then proceed to build your Quasar application using the steps described in <a href="#General-deployment">General deployment</a>.</p>
<p>After the build is finished, change directory into your deploy root (example: <code>/dist/spa-mat</code>) and run:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ now</span><br></pre></td></tr></table></figure></p>
<p>The Now CLI should now display information regarding your deployment, like the URL. That’s it. You’re done.</p>
<h2 id="Deploying-with-Heroku"><a href="#Deploying-with-Heroku" class="headerlink" title="Deploying with Heroku"></a>Deploying with Heroku</h2><p>Unfortunately, Heroku does not support static sites out of the box. But don’t worry, we just need to add an HTTP server to our project so Heroku can serve our Quasar application.</p>
<p>In this example, we will use <a href="https://expressjs.com/" target="_blank" rel="noopener">Express</a> to create a minimal server which Heroku can use.</p>
<p>First, we need to install the required dependencies to our project:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install express serve-static connect-history-api-fallback</span><br></pre></td></tr></table></figure></p>
<p>Now that we have installed the required dependencies, we can add our server. Create a file called <code>server.js</code> in the root directory of your project.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span></span><br><span class="line">  express = <span class="built_in">require</span>(<span class="string">'express'</span>),</span><br><span class="line">  serveStatic = <span class="built_in">require</span>(<span class="string">'serve-static'</span>),</span><br><span class="line">  history = <span class="built_in">require</span>(<span class="string">'connect-history-api-fallback'</span>),</span><br><span class="line">  port = process.env.PORT || <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(history())</span><br><span class="line">app.use(serveStatic(__dirname + <span class="string">'/dist/spa-&lt;theme&gt;'</span>))</span><br><span class="line">app.listen(port)</span><br></pre></td></tr></table></figure></p>
<p>Make sure to exchange <code>&lt;theme&gt;</code> to the theme you use.</p>
<p>Heroku assumes a set of npm scripts to be available, so we have to alter our <code>package.json</code> and add the following under the <code>script</code> section:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"build"</span>: <span class="string">"quasar build"</span>,</span><br><span class="line"><span class="string">"start"</span>: <span class="string">"node server.js"</span>,</span><br><span class="line"><span class="string">"heroku-postbuild"</span>: <span class="string">"npm install --only=dev --no-shrinkwrap &amp;&amp; npm run build"</span></span><br></pre></td></tr></table></figure></p>
<p>Now it is time to create an app on Heroku by running:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ heroku create</span><br></pre></td></tr></table></figure></p>
<p>and deploy to Heroku using:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ heroku deploy</span><br></pre></td></tr></table></figure></p>
<h2 id="Deploying-with-Surge"><a href="#Deploying-with-Surge" class="headerlink" title="Deploying with Surge"></a>Deploying with Surge</h2><p><a href="https://surge.sh/" target="_blank" rel="noopener">Surge</a> is a popular tool to host and deploy static sites.</p>
<p>If you want to deploy your application with Surge you first need to install the Surge CLI tool:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g surge</span><br></pre></td></tr></table></figure></p>
<p>Next, we will use Quasar CLI to build our app:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar build</span><br></pre></td></tr></table></figure></p>
<p>Now we can deploy our application using Surge by calling:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># make sure to replace &lt;theme&gt; with your actual theme</span></span><br><span class="line">$ surge dist/spa-&lt;theme&gt;</span><br></pre></td></tr></table></figure></p>
<p>Now your application should be successfully deployed using Surge. You should be able to adapt this guide to any other static site deployment tool.</p>
<h2 id="Deploying-on-GitHub-Pages"><a href="#Deploying-on-GitHub-Pages" class="headerlink" title="Deploying on GitHub Pages"></a>Deploying on GitHub Pages</h2><p>To deploy your Quasar application to GitHub pages the first step is to create a special repository on GitHub which is named <code>&lt;username&gt;.github.io</code>. Clone this repository to your local machine.</p>
<p>Next, you need to build your Quasar application like it is described in <a href="#General-deployment">the general deployment section</a>. This will result in a <code>spa-&lt;theme&gt;</code> directory inside the <code>dist</code> directory. Copy the content of this folder to your cloned repository.</p>
<p>The last step is to add a commit in your repository an push to GitHub. After a short time, you should be able to visit your Quasar application at https://<username>.github.io/.</username></p>
<h3 id="Adding-a-custom-domain-to-GitHub-pages"><a href="#Adding-a-custom-domain-to-GitHub-pages" class="headerlink" title="Adding a custom domain to GitHub pages"></a>Adding a custom domain to GitHub pages</h3><p>Please see the <a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/" target="_blank" rel="noopener">GitHub pages guides</a> for an in-depth explanation on how to set up a custom domain.</p>
<h3 id="Automated-deployment-to-GitHub-pages-with-push-dir"><a href="#Automated-deployment-to-GitHub-pages-with-push-dir" class="headerlink" title="Automated deployment to GitHub pages with push-dir"></a>Automated deployment to GitHub pages with push-dir</h3><p>Manual copying all your files to your GitHub Pages repository can be a cumbersome task to do. This step can be automated by using the <a href="https://github.com/L33T-KR3W/push-dir" target="_blank" rel="noopener">push-dir</a> package.</p>
<p>First, install the package with:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ npm install push-dir --save-dev</span><br></pre></td></tr></table></figure></p>
<p>Then add a <code>deploy</code> script command to your <code>package.json</code>:<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">// replace &lt;theme&gt; with your actual theme (mat, ios)</span><br><span class="line">"scripts": &#123;</span><br><span class="line">  "deploy": "push-dir --dir=dist/spa-&lt;theme&gt; --remote=gh-pages --branch=master"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Add your GitHub Pages repository as a remote named <code>gh-pages</code>:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add gh-pages git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git</span><br></pre></td></tr></table></figure></p>
<p>Now you can build and deploy your application using:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar build</span><br><span class="line">$ npm run deploy</span><br></pre></td></tr></table></figure></p>
<p>which will push the content of your build directory to your master branch on your Github Pages repository.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App Handling Assets]]></title>
      <url>https://quasar-framework.org/guide/app-handling-assets.html</url>
      <content type="html"><![CDATA[<p>You will notice in the project structure we have two directories for assets: <code>/src/statics/</code> and <code>/src/assets/</code>. What is the difference between them? Some are static assets while the others are processed and embedded by the build system.</p>
<h2 id="Type-of-Assets"><a href="#Type-of-Assets" class="headerlink" title="Type of Assets"></a>Type of Assets</h2><p>So let’s try to answer the question above. We’ll first talk about using regular assets then we’ll see what static assets are.</p>
<h3 id="Regular-assets-src-assets"><a href="#Regular-assets-src-assets" class="headerlink" title="Regular assets - /src/assets"></a>Regular assets - <code>/src/assets</code></h3><p>In <code>*.vue</code> components, all your templates and CSS are parsed by <code>vue-html-loader</code> and <code>css-loader</code> to look for asset URLs. For example, in <code>&lt;img src=&quot;./logo.png&quot;&gt;</code> and <code>background: url(./logo.png)</code>, <code>&quot;./logo.png&quot;</code> is a relative asset path and will be resolved by Webpack as a module dependency.</p>
<p>Because <code>logo.png</code> is not JavaScript, when treated as a module dependency, we need to use <code>url-loader</code> and <code>file-loader</code> to process it. Quasar CLI has already configured these webpack loaders for you, so you basically get features such as filename fingerprinting and conditional base64 inlining for free, while being able to use relative/module paths without worrying about deployment.</p>
<p>Since these assets may be inlined/copied/renamed during build, they are essentially part of your source code. This is why it is recommended to place Webpack-processed assets inside <code>/src/assets</code>, along side other source files. In fact, you don’t even have to put them all in <code>/src/assets</code>: you can organize them based on the module/component using them. For example, you can put each component in its own directory, with its static assets right next to it.</p>
<h4 id="Asset-Resolving-Rules"><a href="#Asset-Resolving-Rules" class="headerlink" title="Asset Resolving Rules"></a>Asset Resolving Rules</h4><p>Relative URLs, e.g. <code>./assets/logo.png</code> will be interpreted as a module dependency. They will be replaced with a auto-generated URL based on your Webpack output configuration.</p>
<p>URLs prefixed with <code>~</code> are treated as a module request, similar to <code>require(&#39;some-module/image.png&#39;)</code>. You need to use this prefix if you want to leverage Webpack’s module resolving configurations. Quasar provides <code>assets</code> Webpack alias out of the box, so it is recommended that you use it like this: <code>&lt;img src=&quot;~assets/logo.png&quot;&gt;</code>. Notice <code>~</code> in front of ‘assets’.</p>
<h3 id="Static-Assets-src-statics"><a href="#Static-Assets-src-statics" class="headerlink" title="Static Assets - /src/statics"></a>Static Assets - <code>/src/statics</code></h3><p>Root-relative URLs, e.g. <code>/statics/logo.png</code> or <code>statics/logo.png</code> are not processed at all. This should be placed in <code>src/statics/</code>. These won’t be processed by Webpack at all. The statics folder is simply copied over to the distributable folder as-is.</p>
<p>Quasar has some smart algorithms behind the curtains which ensure that no matter what you build (SPA, PWA, Cordova, Electron), your statics are correctly referenced <em>if and only if</em> all your statics start with <code>statics/</code> string. For this reason, do not use <code>/statics</code> as URL.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Good! --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"statics/logo.png"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- BAD! Don't! --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/statics/logo.png"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Binding-Requires-Statics-Only"><a href="#Vue-Binding-Requires-Statics-Only" class="headerlink" title="Vue Binding Requires Statics Only"></a>Vue Binding Requires Statics Only</h2><p>Please note that whenever you bind “src” to a variable in your Vue scope, it must be one from the statics folder. The reason is simple: the URL is dynamic, so Webpack (which packs up assets at compile time) doesn’t know which file you’ll be referencing at runtime, so it won’t process the URL.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- imageSrc MUST reference a file from /src/statics --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imageSrc"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">      &lt;!--</span></span><br><span class="line"><span class="undefined">        Referencing /src/statics.</span></span><br><span class="line"><span class="undefined">        Notice string doesn't start with a slash. (/)</span></span><br><span class="line"><span class="undefined">      --&gt;</span></span><br><span class="line"><span class="javascript">      imageSrc: <span class="string">'statics/logo.png'</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>IMPORTANT</strong><br><br>You can force serving static assets by using <code>src</code> as a Vue property. Instead of <code>src=&quot;statics/path/to/image&quot;</code> use <code>:src=&quot;&#39;statics/path/to/image&#39;&quot;</code>. Please note the usage of single and double quotes.</p>
</blockquote>
<h2 id="Getting-Asset-Paths-in-JavaScript"><a href="#Getting-Asset-Paths-in-JavaScript" class="headerlink" title="Getting Asset Paths in JavaScript"></a>Getting Asset Paths in JavaScript</h2><p>In order for Webpack to return the correct asset paths, you need to use <code>require(&#39;./relative/path/to/file.jpg&#39;)</code>, which will get processed by <code>file-loader</code> and returns the resolved URL. For example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  background () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'./bgs/'</span> + <span class="keyword">this</span>.id + <span class="string">'.jpg'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Note the above example will include every image under <code>./bgs/</code> in the final build. This is because Webpack cannot guess which of them will be used at runtime, so it includes them all.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App Linter]]></title>
      <url>https://quasar-framework.org/guide/app-linter.html</url>
      <content type="html"><![CDATA[<p>Having a code linter in place is highly recommended and ensures your code looks legible. It also helps you capture some errors before even running the code.</p>
<p>When you create a Quasar project folder with <a href="/guide/quasar-cli.html#init-Create-Project-Folder">Quasar CLI</a> it will ask you if you want a linter and which setup you want for ESLint:</p>
<ul>
<li>Standard - <a href="https://github.com/standard/standard" target="_blank" rel="noopener">https://github.com/standard/standard</a></li>
<li>Airbnb - <a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">https://github.com/airbnb/javascript</a></li>
<li>.. or you can configure one yourself</li>
</ul>
<p>Two dot files will be created:</p>
<ul>
<li>.eslintrc.js – ESLint configuration, including rules</li>
<li>.eslintignore – what ESLint should ignore when linting</li>
</ul>
<p>Further extension of one of the Eslint setups above can be made. Your project will by default use <code>eslint-plugin-vue</code> to handle your Vue files. Take a quick look at .eslintrc.js and notice it:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">extends: [</span><br><span class="line">  <span class="comment">// https://github.com/vuejs/eslint-plugin-vue#priority-a-essential-error-prevention</span></span><br><span class="line">  <span class="comment">// consider switching to `plugin:vue/strongly-recommended` or `plugin:vue/recommended` for stricter rules.</span></span><br><span class="line">  <span class="string">'plugin:vue/strongly-recommended'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>If you chose ESLint when creating your project folder, you’ll also notice that <code>/quasar.conf.js</code> adds the eslint-loader to Webpack configuration for you:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">build: &#123;</span><br><span class="line">  extendWebpack (cfg) &#123;</span><br><span class="line">    cfg.module.rules.push(&#123;</span><br><span class="line">      enforce: <span class="string">'pre'</span>,</span><br><span class="line">      test: <span class="regexp">/\.(js|vue)$/</span>,</span><br><span class="line">      loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">      exclude: <span class="regexp">/(node_modules|quasar)/</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Lint-Rules"><a href="#Lint-Rules" class="headerlink" title="Lint Rules"></a>Lint Rules</h2><p>The linting rules can be removed, changed, or added. Notice some things:</p>
<ul>
<li>Some rules are for the Standard or Airbnb standards (whichever you chose when project was created). Example: ‘brace-style’.</li>
<li>Some rules are for eslint-plugin-vue. Example: ‘vue/max-attributes-per-line’.</li>
</ul>
<p>You can add/remove/change rules by first visiting <a href="https://eslint.org/docs/rules/" target="_blank" rel="noopener">https://eslint.org/docs/rules/</a> or <a href="https://github.com/vuejs/eslint-plugin-vue" target="_blank" rel="noopener">https://github.com/vuejs/eslint-plugin-vue</a>.</p>
<p>Example of ESLint rules below:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.js</span></span><br><span class="line"></span><br><span class="line"><span class="string">'rules'</span>: &#123;</span><br><span class="line">  <span class="string">'brace-style'</span>: [<span class="number">2</span>, <span class="string">'stroustrup'</span>, &#123; <span class="string">'allowSingleLine'</span>: <span class="literal">true</span> &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="string">'vue/max-attributes-per-line'</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">'vue/valid-v-for'</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// allow async-await</span></span><br><span class="line">  <span class="string">'generator-star-spacing'</span>: <span class="string">'off'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// allow paren-less arrow functions</span></span><br><span class="line">  <span class="string">'arrow-parens'</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">'one-var'</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">'import/first'</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">'import/named'</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">'import/namespace'</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">'import/default'</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">'import/export'</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">'import/extensions'</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">'import/no-unresolved'</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">'import/no-extraneous-dependencies'</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// allow debugger during development</span></span><br><span class="line">  <span class="string">'no-debugger'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="number">2</span> : <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Disabling-Linter"><a href="#Disabling-Linter" class="headerlink" title="Disabling Linter"></a>Disabling Linter</h2><p>In order for you to disable ESLint, all you need to do is comment out (or remove) the following code from <code>/quasar.conf.js</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">build: &#123;</span><br><span class="line">  extendWebpack (cfg) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * we comment out this block</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">    cfg.module.rules.push(&#123;</span></span><br><span class="line"><span class="comment">      enforce: 'pre',</span></span><br><span class="line"><span class="comment">      test: /\.(js|vue)$/,</span></span><br><span class="line"><span class="comment">      loader: 'eslint-loader',</span></span><br><span class="line"><span class="comment">      exclude: /(node_modules|quasar)/</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Configuring quasar.conf.js]]></title>
      <url>https://quasar-framework.org/guide/app-quasar.conf.js.html</url>
      <content type="html"><![CDATA[<p>Quasar makes use of some awesome development tools under it’s hood, like <a href="https://webpack.js.org/" target="_blank" rel="noopener">Webpack</a>. One of the great things about Quasar is its handling of most of the complex configuration needed by the underlying tools for you. As a result, you don’t even need to know Webpack or any of the other development tools in order to use Quasar. </p>
<p>So what can you configure through <code>/quasar.conf.js</code>?</p>
<ul>
<li>Quasar components, directives and plugins that you’ll be using in your website/app.</li>
<li>Default Quasar I18n language pack</li>
<li>Icon pack(s) that you wish to use</li>
<li>Default icon set for Quasar components</li>
<li>Development server port, HTTPS mode, hostname and so on</li>
<li><a href="/components/transition.html">CSS animations</a> that you wish to use</li>
<li><a href="/guide/app-plugins.html">App Plugins</a> list (that determines order of execution too) – which are files in <code>/src/plugins</code> that tell how your app is initialized before mounting the root Vue component</li>
<li>Global CSS/Stylus/… files to be included in the bundle</li>
<li>PWA <a href="/guide/pwa-configuring-pwa.html#Configuring-Manifest-File">manifest</a> and <a href="/guide/pwa-configuring-pwa.html#Quasar-conf-js">Workbox options</a></li>
<li><a href="/guide/electron-configuring-electron.html">Electron Packager</a> and/or <a href="/electron-configuring-electron.html">Electron Builder</a></li>
<li>IE11+ support</li>
<li>Extend Webpack config Object</li>
</ul>
<p><strong>You’ll notice that changing any of these settings does not require you to manually reload the dev server. Quasar detects if the changes can be injected through <a href="https://webpack.js.org/concepts/hot-module-replacement/" target="_blank" rel="noopener">Hot Module Replacement</a> and in case it can’t, it will reload the dev server automatically for you. You won’t lose your development flow, because you can just sit back while Quasar CLI quickly reloads the changed code, even keeping the current state. This save tons of your time!</strong></p>
<blockquote>
<p><code>/quasar.conf.js</code> is run by the Quasar CLI build system, so this code runs under Node directly, not in the context of your app. This means you can require modules like ‘fs’, ‘path’, ‘webpack’ and so on. Make sure the ES6 features that you want to write this file with are supported by the installed version of your Node (which should be &gt;= 8.9.0).</p>
</blockquote>
<h2 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h2><p>You’ll notice that <code>/quasar.conf.js</code> exports a function that takes a <code>ctx</code> (context) parameter and returns an Object. This allows you to dynamically change your website/app config based on this context:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ctx)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Example output on console:</span></span><br><span class="line">  &#123;</span><br><span class="line">    dev: <span class="literal">true</span>,</span><br><span class="line">    prod: <span class="literal">false</span>,</span><br><span class="line">    theme: &#123; <span class="attr">mat</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    themeName: <span class="string">'mat'</span>,</span><br><span class="line">    mode: &#123; <span class="attr">spa</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    modeName: <span class="string">'spa'</span>,</span><br><span class="line">    target: &#123;&#125;,</span><br><span class="line">    targetName: <span class="literal">undefined</span>,</span><br><span class="line">    arch: &#123;&#125;,</span><br><span class="line">    archName: <span class="literal">undefined</span>,</span><br><span class="line">    debug: <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// context gets generated based on the parameters</span></span><br><span class="line">  <span class="comment">// with which you run "quasar dev" or "quasar build"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>What this means is that, as an example, you can load a font when building with Quasar Material theme, and pick another one for Quasar iOS theme.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  extras: [</span><br><span class="line">    ctx.theme.mat</span><br><span class="line">      ? <span class="string">'roboto-font'</span> <span class="comment">// we're building with Material theme</span></span><br><span class="line">      : <span class="literal">null</span> <span class="comment">// we're not building with Material theme, so it's iOS theme</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Or you can use a global CSS file for SPA mode and another one for Cordova mode while avoiding loading any such file for the other modes.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  css: [</span><br><span class="line">    ctx.mode.spa ? <span class="string">'app-spa.styl'</span> : <span class="literal">null</span>, <span class="comment">// looks for /src/css/app-spa.styl</span></span><br><span class="line">    ctx.mode.cordova ? <span class="string">'app-cordova.styl'</span> : <span class="literal">null</span>  <span class="comment">// looks for /src/css/app-cordova.styl</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Or you can configure the dev server to run on port 8000 for SPA mode, on port 9000 for PWA mode or on port 9090 for the other modes:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: ctx.mode.spa</span><br><span class="line">      ? <span class="number">8000</span></span><br><span class="line">      : (ctx.mode.pwa ? <span class="number">9000</span> : <span class="number">9090</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>The possibilities are endless.</p>
<h2 id="Options-to-Configure"><a href="#Options-to-Configure" class="headerlink" title="Options to Configure"></a>Options to Configure</h2><p>Let’s take each option one by one:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>css</td>
<td>Array</td>
<td>Global CSS/Stylus/… files from <code>/src/css/</code>, except for theme files, which are included by default. <a href="#css-Property">More info</a></td>
</tr>
<tr>
<td>preFetch</td>
<td>Boolean</td>
<td>Enable <a href="/guide/app-prefetch-feature.html">PreFetch Feature</a>.</td>
</tr>
<tr>
<td>extras</td>
<td>Array</td>
<td>What to import from <a href="https://github.com/quasarframework/quasar-extras" target="_blank" rel="noopener">quasar-extras</a> package. Example: <em>[‘material-icons’, ‘roboto-font’, ‘ionicons’]</em></td>
</tr>
<tr>
<td>vendor</td>
<td>Object</td>
<td>(v0.17+) Add/remove files/3rd party libraries to/from vendor chunk: { add: […], remove: […] }. <a href="#vendor-Property">More info</a></td>
</tr>
<tr>
<td>supportIE</td>
<td>Boolean</td>
<td>Add support for IE11+.</td>
</tr>
<tr>
<td>htmlVariables</td>
<td>Object</td>
<td>(CLI v0.17.11+) Add variables that you can use in index.template.html. <a href="#htmlVariables-Property">More info</a></td>
</tr>
<tr>
<td>framework</td>
<td>Object/String</td>
<td>What Quasar components/directives/plugins to import, what Quasar I18n language pack to use, what icon set to use for Quasar components. <a href="#framework-Property">More info</a></td>
</tr>
<tr>
<td>animations</td>
<td>Object/String</td>
<td>What <a href="/components/transition.html">CSS animations</a> to import. Example: <em>[‘bounceInLeft’, ‘bounceOutRight’]</em></td>
</tr>
<tr>
<td>devServer</td>
<td>Object</td>
<td>Webpack dev server <a href="https://webpack.js.org/configuration/dev-server/" target="_blank" rel="noopener">options</a>. Some properties are overwritten based on the Quasar mode you’re using in order to ensure a correct config. Note: if you’re proxying the development server (i.e. using a cloud IDE), set the <code>public</code> setting to your public application URL.</td>
</tr>
<tr>
<td>build</td>
<td>Object</td>
<td>Build configuration options. <a href="#build-Property">More info</a></td>
</tr>
<tr>
<td>sourceFiles</td>
<td>Object</td>
<td>(v0.16+) Change the default name of parts of your app. <a href="#sourceFiles-Property">More info</a></td>
</tr>
<tr>
<td>cordova</td>
<td>Object</td>
<td>Cordova specific <a href="/guide/cordova-configuring-cordova.html">config</a>.</td>
</tr>
<tr>
<td>pwa</td>
<td>Object</td>
<td>PWA specific <a href="/guide/pwa-configuring-pwa.html">config</a>.</td>
</tr>
<tr>
<td>ssr</td>
<td>Object</td>
<td>SSR specific <a href="/guide/ssr-configuring-ssr.html">config</a>.</td>
</tr>
<tr>
<td>electron</td>
<td>Object</td>
<td>Electron specific <a href="/guide/electron-configuring-electron.html">config</a>.</td>
</tr>
</tbody>
</table>
<h3 id="css-Property"><a href="#css-Property" class="headerlink" title="css Property"></a>css Property</h3><p>Global CSS/Stylus/… files from <code>/src/css/</code>, except for theme files, which are included by default.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// quasar.conf</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  css: [</span><br><span class="line">    <span class="string">'app.styl'</span>, <span class="comment">// referring to /src/css/app.styl</span></span><br><span class="line">    <span class="string">'~some-library/style.css'</span> <span class="comment">// referring to node_modules/some-library/style.css</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="vendor-Property"><a href="#vendor-Property" class="headerlink" title="vendor Property"></a>vendor Property</h3><p>By default, everything that comes from <code>node_modules</code> will be injected into the vendor chunk for performance &amp; caching reasons. However, should you wish to add or remove something from this special chunk, you can do so:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// quasar.conf</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  vendor: &#123;</span><br><span class="line">    add: [<span class="string">'src/plugins/my-special-plugin'</span>],</span><br><span class="line">    remove: [<span class="string">'axios'</span>, <span class="string">'vue$'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="framework-Property"><a href="#framework-Property" class="headerlink" title="framework Property"></a>framework Property</h3><p>Tells the CLI what Quasar components/directives/plugins to import, what Quasar I18n language pack to use, what icon set to use for Quasar components and more.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// quasar.conf</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  <span class="comment">// a list with all options (all are optional)</span></span><br><span class="line">  framework: &#123;</span><br><span class="line">    components: [<span class="string">'QBtn'</span>, <span class="string">'QIcon'</span> <span class="comment">/* ... */</span>],</span><br><span class="line">    directives: [<span class="string">'TouchSwipe'</span> <span class="comment">/* ... */</span>],</span><br><span class="line">    plugins: [<span class="string">'Notify'</span> <span class="comment">/* ... */</span>],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Quasar config</span></span><br><span class="line">    <span class="comment">// You'll see this mentioned for components/directives/plugins which use it</span></span><br><span class="line">    config: &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line"></span><br><span class="line">    iconSet: <span class="string">'fontawesome'</span>, <span class="comment">// requires icon library to be specified in "extras" section too,</span></span><br><span class="line">    i18n: <span class="string">'de'</span>, <span class="comment">// Tell Quasar which language pack to use for its own components</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// v0.17+</span></span><br><span class="line">    cssAddon: <span class="literal">true</span> <span class="comment">// Adds the flex responsive++ CSS classes (noticeable bump in footprint)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>More on cssAddon <a href="/components/flex-css.html#Flex-Addons">here</a>.</p>
<h3 id="devServer-Property"><a href="#devServer-Property" class="headerlink" title="devServer Property"></a>devServer Property</h3><p>Webpack devServer options. Take a look at the <a href="https://webpack.js.org/configuration/dev-server/" target="_blank" rel="noopener">full list</a> of options. Some are overwritten by Quasar CLI based on “quasar dev” parameters and Quasar mode in order to ensure that everything is setup correctly. Note: if you’re proxying the development server (i.e. using a cloud IDE), set the <code>public</code> setting to your public application URL.</p>
<p>Most used properties are:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>port</td>
<td>Number</td>
<td>Port of dev server</td>
</tr>
<tr>
<td>host</td>
<td>String</td>
<td>Local IP/Host to use for dev server</td>
</tr>
<tr>
<td>open</td>
<td>Boolean</td>
<td>Open up browser pointing to dev server address automatically. Applies to SPA, PWA and SSR modes.</td>
</tr>
<tr>
<td>public</td>
<td>String</td>
<td>Public address of the application (for use with reverse proxies)</td>
</tr>
</tbody>
</table>
<h3 id="build-Property"><a href="#build-Property" class="headerlink" title="build Property"></a>build Property</h3><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>transpileDependencies</td>
<td>Array of Regex</td>
<td>(CLI v0.17.6+) Add dependencies for transpiling with Babel (from node_modules, which are by default not transpiled). Example: <code>[ /my-dependency/, ...]</code></td>
</tr>
<tr>
<td>showProgress</td>
<td>Boolean</td>
<td>(CLI v0.17+) Show a progress bar while compiling.</td>
</tr>
<tr>
<td>extendWebpack(cfg)</td>
<td>Function</td>
<td><a href="#Extending-Webpack-Config-Object">Extend Webpack config</a> generated by Quasar CLI. Equivalent to chainWebpack(), but you have direct access to the Webpack config object.</td>
</tr>
<tr>
<td>chainWebpack(chain)</td>
<td>Function</td>
<td>(CLI v0.16.2+) <a href="#Extending-Webpack-Config-Object">Extend Webpack config</a> generated by Quasar CLI. Equivalent to extendWebpack(), but using webpack-chain instead.</td>
</tr>
<tr>
<td>publicPath</td>
<td>String</td>
<td>Public path of your app. By default, it uses the root. Use it when your public path is something else, like “&lt;protocol&gt;://&lt;domain&gt;/some/nested/folder” – in this case, it means the distributables are in “some/nested/folder” on your webserver.</td>
</tr>
<tr>
<td>vueRouterMode</td>
<td>String</td>
<td>Sets <a href="https://router.vuejs.org/en/essentials/history-mode.html" target="_blank" rel="noopener">Vue Router mode</a>: ‘hash’ or ‘history’. Pick wisely. History mode requires configuration on your deployment web server too.</td>
</tr>
<tr>
<td>htmlFilename</td>
<td>String</td>
<td>Default is ‘index.html’.</td>
</tr>
<tr>
<td>productName</td>
<td>String</td>
<td>Default value is taken from package.json &gt; productName field.</td>
</tr>
<tr>
<td>distDir</td>
<td>String</td>
<td>Folder where Quasar CLI should generate the distributables. Relative path to project root directory. Default is ‘dist/{ctx.modeName}-{ctx.themeName}’. Applies to all Modes except for Cordova (which is forced to <code>src-cordova/www</code>).</td>
</tr>
<tr>
<td>devtool</td>
<td>String</td>
<td>Source map <a href="https://webpack.js.org/configuration/devtool/" target="_blank" rel="noopener">strategy</a> to use.</td>
</tr>
<tr>
<td>env</td>
<td>Object</td>
<td>Add properties to <code>process.env</code> that you can use in your website/app JS code. Each property needs to be JSON encoded. Example: { SOMETHING: JSON.stringify(‘someValue’) }.</td>
</tr>
<tr>
<td>gzip</td>
<td>Boolean</td>
<td>Gzip the distributables. Useful when the web server with which you are serving the content does not have gzip.</td>
</tr>
<tr>
<td>scopeHoisting</td>
<td>Boolean</td>
<td>Default: <code>true</code>. Use Webpack scope hoisting for slightly better runtime performance.</td>
</tr>
<tr>
<td>analyze</td>
<td>Boolean/Object</td>
<td>Show analysis of build bundle with webpack-bundle-analyzer. If using as Object, it represents the webpack-bundle-analyzer config Object.</td>
</tr>
<tr>
<td>vueCompiler</td>
<td>Boolean</td>
<td>(v0.15.7+) Include vue runtime + compiler version, instead of default Vue runtime-only</td>
</tr>
<tr>
<td>uglifyOptions</td>
<td>Object</td>
<td>(v0.16+) Minification options. <a href="https://github.com/mishoo/UglifyJS2/tree/harmony#minify-options" target="_blank" rel="noopener">Full list</a>.</td>
</tr>
<tr>
<td>preloadChunks</td>
<td>Boolean</td>
<td>(v0.16+) Default is “true”. Preload chunks when browser is idle to improve user’s later navigation to the other pages.</td>
</tr>
</tbody>
</table>
<p>The following properties of <code>build</code> are automatically configured by Quasar CLI depending on dev/build commands and Quasar mode. But if you like to override some (make sure you know what you are doing), you can do so:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>extractCSS</td>
<td>Boolean</td>
<td>Extract CSS from Vue files</td>
</tr>
<tr>
<td>sourceMap</td>
<td>Boolean</td>
<td>Use source maps</td>
</tr>
<tr>
<td>minify</td>
<td>Boolean</td>
<td>Minify code (html, js, css)</td>
</tr>
<tr>
<td>webpackManifest</td>
<td>Boolean</td>
<td>Improves caching strategy. Use a webpack manifest (runtime) file to avoid cache bust on vendor chunk changing hash on each build.</td>
</tr>
</tbody>
</table>
<p>If, for example, you run “quasar build –debug”, sourceMap and extractCSS will be set to “true” regardless of what you configure.</p>
<h3 id="htmlVariables-Property"><a href="#htmlVariables-Property" class="headerlink" title="htmlVariables Property"></a>htmlVariables Property</h3><p><em>CLI v0.17.11+</em></p>
<p>You can define and then reference variables in <code>src/index.template.html</code>, like this:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// quasar.conf</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    htmlVariables: &#123; <span class="attr">title</span>: <span class="string">'test name'</span> &#125;</span><br></pre></td></tr></table></figure></p>
<p>Then (just an example showing you how to reference a variable defined above, in this case <code>title</code>):<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/index.template.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">htmlWebpackPlugin.options.title</span> %&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="sourceFiles-Property"><a href="#sourceFiles-Property" class="headerlink" title="sourceFiles Property"></a>sourceFiles Property</h3><p><em>Quasar v0.16+</em></p>
<p>Use this property to change the default names of some files of your website/app if you have to. All paths must be relative to the root folder of your project.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// default values:</span></span><br><span class="line">sourceFiles: &#123;</span><br><span class="line">  rootComponent: <span class="string">'src/App.vue'</span>,</span><br><span class="line">  router: <span class="string">'src/router'</span>,</span><br><span class="line">  store: <span class="string">'src/store'</span>,</span><br><span class="line">  indexHtmlTemplate: <span class="string">'src/index.template.html'</span>,</span><br><span class="line">  registerServiceWorker: <span class="string">'src-pwa/register-service-worker.js'</span>,</span><br><span class="line">  serviceWorker: <span class="string">'src-pwa/custom-service-worker.js'</span>,</span><br><span class="line">  electronMainDev: <span class="string">'src-electron/main-process/electron-main.dev.js'</span>,</span><br><span class="line">  electronMainProd: <span class="string">'src-electron/main-process/electron-main.js'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Example-setting-env-for-dev-build"><a href="#Example-setting-env-for-dev-build" class="headerlink" title="Example setting env for dev/build"></a>Example setting env for dev/build</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">build: &#123;</span><br><span class="line">  env: ctx.dev</span><br><span class="line">    ? &#123; <span class="comment">// so on dev we'll have</span></span><br><span class="line">      API: <span class="built_in">JSON</span>.stringify(<span class="string">'https://dev.api.com'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    : &#123; <span class="comment">// and on build (production):</span></span><br><span class="line">      API: <span class="built_in">JSON</span>.stringify(<span class="string">'https://prod.api.com'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Then in your website/app you can access <code>process.env.API</code> and it’s gonna point to one of those two links above, based on dev or production build type.</p>
<p>You can even go one step further. Supply it with values taken from the <code>quasar dev/build</code> env variables:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># we set an env variable in terminal</span><br><span class="line">$ MY_API=api.com quasar build</span><br><span class="line"></span><br><span class="line"># then we pick it up in /quasar.conf.js</span><br><span class="line">build: &#123;</span><br><span class="line">  env: ctx.dev</span><br><span class="line">    ? &#123; // so on dev we&apos;ll have</span><br><span class="line">      API: JSON.stringify(&apos;https://dev.&apos;+ process.env.MY_API)</span><br><span class="line">    &#125;</span><br><span class="line">    : &#123; // and on build (production):</span><br><span class="line">      API: JSON.stringify(&apos;https://prod.&apos;+ process.env.MY_API)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Extending-Webpack-Config-Object"><a href="#Extending-Webpack-Config-Object" class="headerlink" title="Extending Webpack Config Object"></a>Extending Webpack Config Object</h3><p>This is achieved through <code>build &gt; extendWebpack()</code> Function. Example adding a Webpack loader.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// quasar.conf.js</span></span><br><span class="line">build: &#123;</span><br><span class="line">  extendWebpack (cfg, &#123; isServer, isClient &#125;) &#123;</span><br><span class="line">    <span class="comment">// Booleans "isServer" or "isClient" are useful when</span></span><br><span class="line">    <span class="comment">// building for SSR mode, telling if you are extending</span></span><br><span class="line">    <span class="comment">// the server or client webpack config</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// we make in-place changes</span></span><br><span class="line">    cfg.module.rules.push(&#123;</span><br><span class="line">      test: <span class="regexp">/\.json$/</span>,</span><br><span class="line">      loader: <span class="string">'json-loader'</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// no need to return anything</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If you are using Quasar CLI v0.16.2+, then you have another method to tamper with the generated Webpack config, through <code>build &gt; chainWebpack(chain)</code>. The difference is that it is easier because you’ll be using <a href="https://github.com/mozilla-neutrino/webpack-chain" target="_blank" rel="noopener">webpack-chain</a> to do it.</p>
<p>Equivalent with <code>chainWebpack(chain)</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// quasar.conf.js</span></span><br><span class="line">build: &#123;</span><br><span class="line">  chainWebpack (chain, &#123; isServer, isClient &#125;) &#123;</span><br><span class="line">    <span class="comment">// Booleans "isServer" or "isClient" are useful when</span></span><br><span class="line">    <span class="comment">// building for SSR mode, telling if you are extending</span></span><br><span class="line">    <span class="comment">// the server or client webpack config</span></span><br><span class="line"></span><br><span class="line">    chain.module.rule(<span class="string">'json'</span>)</span><br><span class="line">      .test(<span class="regexp">/\.json$/</span>)</span><br><span class="line">      .use(<span class="string">'json-loader'</span>)</span><br><span class="line">        .loader(<span class="string">'json-loader'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// no need to return anything</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>NOTE</strong></p>
<ol>
<li>chainWebpack() gets executed BEFORE extendWebpack()</li>
<li>The two examples above are equivalent. Do NOT use both methods to tamper for the same thing!</li>
</ol>
</blockquote>
<h4 id="Adding-your-own-alias-to-Webpack"><a href="#Adding-your-own-alias-to-Webpack" class="headerlink" title="Adding your own alias to Webpack"></a>Adding your own alias to Webpack</h4><p>To add your own alias you can extend the webpack config and merge it with the existing alias.<br>Use the <code>path.resolve</code> helper to resolve the path to your intended alias.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// quasar.conf.js</span></span><br><span class="line">build: &#123;</span><br><span class="line">  extendWebpack (cfg, &#123; isServer, isClient &#125;) &#123;</span><br><span class="line">    cfg.resolve.alias = &#123;</span><br><span class="line">      ...cfg.resolve.alias, <span class="comment">// This adds the existing alias</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Add your own alias like this</span></span><br><span class="line">      myalias: path.resolve(__dirname, <span class="string">'./src/somefolder'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Equivalent with chainWebpack():<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// quasar.conf.js</span></span><br><span class="line">build: &#123;</span><br><span class="line">  chainWebpack (chain, &#123; isServer, isClient &#125;) &#123;</span><br><span class="line">    chain.resolve.alias</span><br><span class="line">      .set(<span class="string">'myalias'</span>, path.resolve(__dirname, <span class="string">'./src/somefolder'</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App Plugins]]></title>
      <url>https://quasar-framework.org/guide/app-plugins.html</url>
      <content type="html"><![CDATA[<p>A common use case for Quasar applications is to run code before the root Vue instance is instantiated.<br>Quasar provides an elegant solution to that problem by allowing users to define so-called app plugins.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br>Do not confuse app plugins with Quasar plugins, like ActionSheet, Dialog, Notify. Quasar plugins are something else entirely and will be covered in the <a href="/components">Components</a> section.</p>
</blockquote>
<p>In earlier Quasar versions, to run code before the root Vue instance was instantiated, you could alter the <code>/src/main.js</code> file and add any code you needed to execute.</p>
<p>There is a major problem with this approach: With a growing project, your <code>main.js</code> file was very likely to get cluttered and challenging to maintain, which breaks with Quasar’s concept of encouraging developers to write maintainable and elegant cross-platform applications.</p>
<p>With app plugins, it is possible to split each of your dependencies into a self-contained, easy to maintain file. It is also trivial to disable any of the app plugins or even contextually determine which of the app plugins get into the build through <code>quasar.conf.js</code> configuration.</p>
<h2 id="Anatomy-of-an-app-plugin"><a href="#Anatomy-of-an-app-plugin" class="headerlink" title="Anatomy of an app plugin"></a>Anatomy of an app plugin</h2><p>An app plugin is a simple JavaScript file which needs to export a function. Quasar will then call the exported function when it boots the application and additionally pass <strong>an object</strong> with the following properties to the function:</p>
<table>
<thead>
<tr>
<th>Prop name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>app</code></td>
<td>Object with which the root component gets instantiated by Vue</td>
</tr>
<tr>
<td><code>router</code></td>
<td>Instance of Vue Router from ‘src/router/index.js’</td>
</tr>
<tr>
<td><code>store</code></td>
<td>Instance of the app Vuex Store - <strong>store only will be passed if your project uses Vuex (you have src/store)</strong></td>
</tr>
<tr>
<td><code>Vue</code></td>
<td>Is same as if we do <code>import Vue from &#39;vue&#39;</code> and it’s there for convenience</td>
</tr>
<tr>
<td><code>ssrContext</code></td>
<td>Available only on server-side, if building for SSR</td>
</tr>
</tbody>
</table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; app, router, store, Vue &#125;) =&gt; &#123;</span><br><span class="line">  <span class="comment">// something to do</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Notice we are using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noopener">ES6 destructuring assignment</a>. Only assign what you actually need/use.</p>
<h2 id="When-to-use-app-plugins"><a href="#When-to-use-app-plugins" class="headerlink" title="When to use app plugins"></a>When to use app plugins</h2><blockquote>
<p><strong>IMPORTANT</strong><br>Please make sure you understand what problem app plugins solve and when it is appropriate to use them, to avoid applying them in cases where they are not needed.</p>
</blockquote>
<p>App plugins fulfill one special purpose: they run code <strong>before</strong> the App’s Vue root component is instantiated while giving you access to certain variables, which is required if you need to initialize a library, interfere with Vue Router, inject Vue prototype or inject the root instance of the Vue app.</p>
<h3 id="Examples-of-appropriate-usage-of-app-plugins"><a href="#Examples-of-appropriate-usage-of-app-plugins" class="headerlink" title="Examples of appropriate usage of app plugins"></a>Examples of appropriate usage of app plugins</h3><ul>
<li>Your Vue plugin has installation instructions, like needing to call <code>Vue.use()</code> on it.</li>
<li>Your Vue plugin requires instantiation of data that is added to the root instance - An example would be <a href="https://github.com/kazupon/vue-i18n/" target="_blank" rel="noopener">vue-i18n</a>.</li>
<li>You want to add something to the Vue prototype for convenient access - An example would be to conveniently use <code>this.$axios</code> inside your Vue files instead of importing Axios in each such file.</li>
<li>You want to interfere with the router - An example would be to use <code>router.beforeEach</code> for authentication</li>
<li>You want to interfere with the Vuex store instance - An example would be to use <code>vuex-router-sync</code> package</li>
<li>Configure aspects of libraries - An example would be to create an instance of Axios with a base URL; you can then inject it into Vue prototype and/or export it (so you can import the instance from anywhere else in your app)</li>
</ul>
<h3 id="Examples-of-unneeded-usage-of-app-plugins"><a href="#Examples-of-unneeded-usage-of-app-plugins" class="headerlink" title="Examples of unneeded usage of app plugins"></a>Examples of unneeded usage of app plugins</h3><ul>
<li>For plain JavaScript libraries like Lodash, which don’t need any initialization prior to their usage. Lodash, for example, might make sense to use as an app plugin only if you want to inject Vue prototype with it, like being able to use <code>this.$_</code> inside your Vue files.</li>
<li>Make API requests - You probably want to do this inside your pages Vue component</li>
</ul>
<h2 id="Usage-of-app-plugins"><a href="#Usage-of-app-plugins" class="headerlink" title="Usage of app plugins"></a>Usage of app plugins</h2><p>The first step is always to generate a new plugin using Quasar CLI:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar new plugin &lt;name&gt;</span><br></pre></td></tr></table></figure>
<p>Where <code>&lt;name&gt;</code> should be exchanged by a suitable name for your plugin.</p>
<p>This command creates a new file: <code>/src/plugins/&lt;name&gt;.js</code> with the following content:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import something here</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// leave the export, even if you don't use it</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; app, router, store, Vue &#125;) =&gt; &#123;</span><br><span class="line">  <span class="comment">// something to do</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You can now add content to that file depending on the intended use of your plugin.</p>
<blockquote>
<p>Do not forget that your default export needs to be a function.<br>However, you can have as many named exports as you want, should the plugin expose something for later usage. In this case, you can import any of these named exports anywhere in your app.</p>
</blockquote>
<p>The last step is to tell Quasar to use your new plugin. For this to happen you need to add the plugin in <code>/quasar.conf.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="string">'&lt;name&gt;'</span> <span class="comment">// references /src/plugins/&lt;name&gt;.js</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="Quasar-App-Flow"><a href="#Quasar-App-Flow" class="headerlink" title="Quasar App Flow"></a>Quasar App Flow</h3><p>In order to better understand how a plugin works and what it does, you need to understand how your website/app boots:</p>
<ol>
<li>Quasar is initialized (components, directives, plugins, Quasar i18n, Quasar icon sets)</li>
<li>Quasar Extras get imported (Roboto font – if used, icons, animations, …)</li>
<li>Quasar CSS &amp; your app’s global CSS is imported</li>
<li>App.vue is loaded (not yet being used)</li>
<li>Store is imported (if using Vuex Store in src/store)</li>
<li>App plugins are imported</li>
<li>App plugins get their default export function executed, except for App Boot plugin</li>
<li>(if on Electron mode) Electron is imported and injected into Vue prototype</li>
<li>(if on Cordova mode) Listening for “deviceready” event and only then continuing with following steps</li>
<li>(if App Boot plugin exists) Executing App Boot plugin</li>
<li>(if no App Boot plugin exists) Instantiating Vue with root component and attaching to DOM</li>
</ol>
<h2 id="Examples-of-app-plugins"><a href="#Examples-of-app-plugins" class="headerlink" title="Examples of app plugins"></a>Examples of app plugins</h2><h3 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; Vue &#125;) =&gt; &#123;</span><br><span class="line">  <span class="comment">// we add it to Vue prototype</span></span><br><span class="line">  <span class="comment">// so we can reference it in Vue files</span></span><br><span class="line">  <span class="comment">// without the need to import axios</span></span><br><span class="line">  Vue.prototype.$axios = axios</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Example: this.$axios will reference Axios now so you don't need stuff like vue-axios</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="vue-i18n"><a href="#vue-i18n" class="headerlink" title="vue-i18n"></a>vue-i18n</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// we import the external package</span></span><br><span class="line"><span class="keyword">import</span> VueI18n <span class="keyword">from</span> <span class="string">'vue-i18n'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let's say we have a file in /src/i18n containing the language pack</span></span><br><span class="line"><span class="keyword">import</span> messages <span class="keyword">from</span> <span class="string">'src/i18n'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; app, Vue &#125;) =&gt; &#123;</span><br><span class="line">  <span class="comment">// we tell Vue to use our Vue package:</span></span><br><span class="line">  Vue.use(VueI18n)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set i18n instance on app;</span></span><br><span class="line">  <span class="comment">// We inject it into root component by doing so;</span></span><br><span class="line">  <span class="comment">// new Vue(&#123;..., i18n: ... &#125;).$mount(...)</span></span><br><span class="line"></span><br><span class="line">  app.i18n = <span class="keyword">new</span> VueI18n(&#123;</span><br><span class="line">    locale: <span class="string">'en'</span>,</span><br><span class="line">    fallbackLocale: <span class="string">'en'</span>,</span><br><span class="line">    messages</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Router-authentication"><a href="#Router-authentication" class="headerlink" title="Router authentication"></a>Router authentication</h3><p>Some plugins might need to interfere with Vue Router configuration:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; router, store, Vue &#125;) =&gt; &#123;</span><br><span class="line">  router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Now you need to add your authentication logic here, like calling an API endpoint</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Accessing-data-from-plugins"><a href="#Accessing-data-from-plugins" class="headerlink" title="Accessing data from plugins"></a>Accessing data from plugins</h2><p>Sometimes you want to access data that you configure in your app plugin in files where you don’t have access to the root Vue instance.</p>
<p>Fortunately, because app plugins are just normal JavaScript files you can add as many named exports to your app plugin as you want.</p>
<p>Let’s take the example of Axios. Sometimes you want to access your Axios instance inside your JavaScript files, but you can not access the root Vue instance. To solve this you can export the Axios instance in your plugin and import it elsewhere.</p>
<p>Consider the following plugin file for axios:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// axios app plugin file (src/plugins/axios.js)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// We create our own axios instance and set a custom base URL.</span></span><br><span class="line"><span class="comment">// Note that if we wouldn't set any config here we do not need</span></span><br><span class="line"><span class="comment">// a named export, as we could just `import axios from 'axios'`</span></span><br><span class="line"><span class="keyword">const</span> axiosInstance = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'https://api.example.com'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; Vue &#125;) =&gt; &#123;</span><br><span class="line">  <span class="comment">// for use inside Vue files through this.$axios</span></span><br><span class="line">  Vue.prototype.$axios = axiosInstance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Here we define a named export</span></span><br><span class="line"><span class="comment">// that we can later use inside .js files:</span></span><br><span class="line"><span class="keyword">export</span> &#123; axiosInstance &#125;</span><br></pre></td></tr></table></figure>
<p>In any JavaScript file, you’ll be able to import the axios instance like this.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// we import one of the named exports from src/plugins/axios.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; axiosInstance &#125; <span class="keyword">from</span> <span class="string">'plugins/axios'</span></span><br></pre></td></tr></table></figure>
<p>Further reading on syntax: <a href="https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/import" target="_blank" rel="noopener">ES6 import</a>, <a href="https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export" target="_blank" rel="noopener">ES6 export</a>.</p>
<h2 id="Special-App-Plugin-Boot"><a href="#Special-App-Plugin-Boot" class="headerlink" title="Special App Plugin: Boot"></a>Special App Plugin: Boot</h2><blockquote>
<p>This is deprecated and will be removed in next version in favor of using <a href="/guide/app-prefetch-feature.html">PreFetch Feature</a> in <code>src/App.vue</code> and calling <code>redirect(false)</code> to abort app render.</p>
</blockquote>
<blockquote>
<p>IMPORTANT!<br>This special app plugin is ignored for SSR builds.</p>
</blockquote>
<p>Every Quasar website/app is booted up after plugins have been loaded and executed. The last step is to call <code>new Vue()</code> and attach it to the DOM.</p>
<p>If, for whatever reason, you need to control this final step and decide the specific moment when Vue kicks in, you can create a special Quasar plugin named “boot” (<strong>requires Quasar v0.15.6+</strong>).</p>
<blockquote>
<p>Remember to only use this plugin for eventually calling <code>new Vue(app)</code>. Don’t use this for initializing any library you may have – for that, use a regular app plugin.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># we create the boot plugin</span></span><br><span class="line">$ quasar new plugin boot</span><br><span class="line"> app:new Generated plugin: src/plugins/boot.js +0ms</span><br><span class="line"> app:new Make sure to reference it <span class="keyword">in</span> quasar.conf.js &gt; plugins +2ms</span><br></pre></td></tr></table></figure>
<p>We then add this plugin to app plugins list in <code>/quasar.conf.js</code>:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.export = function (ctx) &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">      &apos;boot&apos;</span><br><span class="line">    ],</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>IMPORTANT</strong><br>The name “boot” for your plugin has a special meaning to Quasar CLI. It runs this plugin after all other app initialization has been executed and right before kicking off Vue with <code>new Vue()</code>. By adding this plugin you are responsible for kicking off Vue yourself, as we’ll see next.</p>
</blockquote>
<p>We edit our new plugin (<code>/src/plugins/boot.js</code>):<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; app, Vue &#125;) =&gt; &#123;</span><br><span class="line">  <span class="comment">// do some logic here...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ... then, kick off our Quasar website/app:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* eslint-disable-next-line no-new */</span></span><br><span class="line">  <span class="keyword">new</span> Vue(app)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// "app" has everything cooked in by Quasar CLI,</span></span><br><span class="line">  <span class="comment">// you don't need to inject it with anything at this point</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>IMPORTANT</strong><br>Do not forget to have at least one decisional branch where you call <code>new Vue(app)</code> otherwise your app won’t boot and you’ll only see a blank page!</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PreFetch Feature]]></title>
      <url>https://quasar-framework.org/guide/app-prefetch-feature.html</url>
      <content type="html"><![CDATA[<p>The PreFetch is a feature <strong>available when using Quasar CLI</strong> that allows a way for the components picked up by Vue Router (defined in <code>/src/router/routes.js</code>) to:</p>
<ul>
<li>pre-fetch data</li>
<li>validate the route</li>
<li>redirect to another route should some conditions are not met (like user should be logged in)</li>
<li>can help in initializing the Store state</li>
</ul>
<p>All the above will run before the actual route component gets to be rendered.</p>
<p><strong>It is designed to work with all Quasar modes</strong> (SPA, PWA, SSR, Cordova, Electron), but it is especially useful for SSR builds.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// quasar.conf.js</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  preFetch: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>When you use it to pre-fetch data, you are required to use a Vuex Store, so make sure your project folder has the <code>/src/store</code> folder when you create your project, otherwise generate a new project and copy the store folder contents to your current project.</p>
</blockquote>
<h2 id="How-It-Helps-SSR-Mode"><a href="#How-It-Helps-SSR-Mode" class="headerlink" title="How It Helps SSR Mode"></a>How It Helps SSR Mode</h2><p>This feature is especially useful for the SSR mode (but not limited to it only). During SSR, we are essentially rendering a “snapshot” of our app, so if the app relies on some asynchronous data, <strong>these data need to be pre-fetched and resolved before we start the rendering process</strong>.</p>
<p>Another concern is that on the client, the same data needs to be available before we mount the client side app - otherwise the client app would render using different state and the hydration would fail.</p>
<p>To address this, the fetched data needs to live outside the view components, in a dedicated data store, or a “state container”. On the server, we can pre-fetch and fill data into the store before rendering. The client-side store will directly pick up the server state before we mount the app.</p>
<h2 id="When-It-Gets-Activated"><a href="#When-It-Gets-Activated" class="headerlink" title="When It Gets Activated"></a>When It Gets Activated</h2><p>The <code>preFetch</code> hook (described in next sections) is determined by the route visited - which also determines what components are rendered. In fact, the data needed for a given route is also the data needed by the components rendered at that route. <strong>So it is natural (and also required) to place the hook logic inside route components.</strong> This includes <code>/src/App.vue</code>, which in this case will run only once at the app bootup.</p>
<p>Let’s take an example in order to understand when the hook is being called. Let’s say we have these routes and we’ve written <code>preFetch</code> hooks for all these components:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// routes</span></span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    component: LandingPage</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/shop'</span>,</span><br><span class="line">    component: ShopLayout,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'all'</span>,</span><br><span class="line">        component: ShopAll</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'new'</span>,</span><br><span class="line">        component: ShopNew</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'product/:name'</span>,</span><br><span class="line">        component: ShopProduct,</span><br><span class="line">        children: [&#123;</span><br><span class="line">          path: <span class="string">'overview'</span>,</span><br><span class="line">          component: ShopProductOverview</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>Now, let’s see how the hooks are called when user visits these routes in the order specified below, one after another.</p>
<table>
<thead>
<tr>
<th>Route being visited</th>
<th>Hooks called from</th>
<th>Observations</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/</code></td>
<td>App.vue then LandingPage</td>
<td>App.vue hook is called since our app boots up.</td>
</tr>
<tr>
<td><code>/shop/all</code></td>
<td>ShopLayout then ShopAll</td>
<td>-</td>
</tr>
<tr>
<td><code>/shop/new</code></td>
<td>ShopNew</td>
<td>ShopNew is a child of ShopLayout, and ShopLayout is already rendered, so ShopLayout isn’t called again.</td>
</tr>
<tr>
<td><code>/shop/product/pijamas</code></td>
<td>ShopProduct</td>
<td>-</td>
</tr>
<tr>
<td><code>/shop/product/shoes</code></td>
<td>ShopProduct</td>
<td>Quasar notices the same component is already rendered, but the route has been updated and it has route params, so it calls the hook again.</td>
</tr>
<tr>
<td><code>/shop/product/shoes/overview</code></td>
<td>ShopProduct then ShopProductOverview</td>
<td>ShopProduct has route params so it is called even though it’s already rendered.</td>
</tr>
<tr>
<td><code>/</code></td>
<td>LandingPage</td>
<td>-</td>
</tr>
</tbody>
</table>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>The hook is defined as a custom static function called <code>preFetch</code> on our route components. Note that because this function will be called before the components are instantiated, it doesn’t have access to <code>this</code>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- some .vue component used as route --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// our hook here</span></span></span><br><span class="line"><span class="undefined">  preFetch (&#123; store, currentRoute, previousRoute, redirect, ssrContext &#125;) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// fetch data, validate route and optionally redirect to some other route...</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// ssrContext is available only server-side in SSR mode</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// No access to "this" here as preFetch() is called before</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// the component gets instantiated.</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// Return a Promise if you are running an async job</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// Example:</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> store.dispatch(<span class="string">'fetchItem'</span>, currentRoute.params.id)</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  computed: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// display the item from store state.</span></span></span><br><span class="line"><span class="undefined">    item () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.items[<span class="keyword">this</span>.$route.params.id]</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Redirecting-Example"><a href="#Redirecting-Example" class="headerlink" title="Redirecting Example"></a>Redirecting Example</h3><p>Example of redirecting the user under some circumstances, like when they try to access a page that only an authenticated user should see.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// We assume here we already wrote the authentication logic</span></span><br><span class="line"><span class="comment">// in the Vuex Store, so take as a high-level example only.</span></span><br><span class="line">preFetch (&#123; store, redirect &#125;) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!store.state.authenticated) &#123;</span><br><span class="line">    <span class="comment">// IMPORTANT! Always use the String form of a</span></span><br><span class="line">    <span class="comment">// route if also building for SSR. The Object form</span></span><br><span class="line">    <span class="comment">// won't work on SSR builds.</span></span><br><span class="line">    redirect(<span class="string">'/login'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If <code>redirect(false)</code> is called (supported only on client-side!), it aborts the current route navigation. Note that if you use it like this in <code>src/App.vue</code> it will halt the app bootup, which is undesirable.</p>
<h3 id="Using-preFetch-to-Initialize-the-Store"><a href="#Using-preFetch-to-Initialize-the-Store" class="headerlink" title="Using preFetch to Initialize the Store"></a>Using preFetch to Initialize the Store</h3><p>The <code>preFetch</code> hook runs only once, when the app boots up, so you can use this opportunity to initialize the Vuex Store here.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  preFetch (&#123; store &#125;) &#123;</span><br><span class="line">    <span class="comment">// initialize something in store here</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Store-Code-Splitting"><a href="#Store-Code-Splitting" class="headerlink" title="Store Code Splitting"></a>Store Code Splitting</h3><p>In a large application, your Vuex store will likely be split into multiple modules. Of course, it is also possible to code-split these modules into corresponding route component chunks. Suppose we have the following store module:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/store/foo.js</span></span><br><span class="line"><span class="comment">// we've merged everything into one file here;</span></span><br><span class="line"><span class="comment">// an initialized Quasar project splits every component of a Vuex module</span></span><br><span class="line"><span class="comment">// into separate files, but for the sake of the example</span></span><br><span class="line"><span class="comment">// here in the docs, we show this module as a single file</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespaced: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// IMPORTANT: state must be a function so the module can be</span></span><br><span class="line">  <span class="comment">// instantiated multiple times</span></span><br><span class="line">  state: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  actions: &#123;</span><br><span class="line">    inc: <span class="function">(<span class="params">&#123; commit &#125;</span>) =&gt;</span> commit(<span class="string">'inc'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    inc: <span class="function"><span class="params">state</span> =&gt;</span> state.count++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now, we can use <code>store.registerModule()</code> to lazy-register this module in a route component’s <code>preFetch()</code> hook:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// inside a route component</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; fooCount &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// import the module here instead of in `src/store/index.js`</span></span><br><span class="line"><span class="keyword">import</span> fooStoreModule <span class="keyword">from</span> <span class="string">'store/foo'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  preFetch (&#123; store &#125;) &#123;</span><br><span class="line">    store.registerModule(<span class="string">'foo'</span>, fooStoreModule)</span><br><span class="line">    <span class="keyword">return</span> store.dispatch(<span class="string">'foo/inc'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// IMPORTANT: avoid duplicate module registration on the client</span></span><br><span class="line">  <span class="comment">// when the route is visited multiple times.</span></span><br><span class="line">  destroyed () &#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.unregisterModule(<span class="string">'foo'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  computed: &#123;</span><br><span class="line">    fooCount () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.foo.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>Also note that because the module is now a dependency of the route component, it will be moved into the route component’s async chunk by Webpack.</p>
<h2 id="Loading-State"><a href="#Loading-State" class="headerlink" title="Loading State"></a>Loading State</h2><p>A good UX includes notifying the user that something is being worked on in the background while he/she waits for the page to be ready. Quasar CLI offers two options for this out of the box.</p>
<h3 id="LoadingBar"><a href="#LoadingBar" class="headerlink" title="LoadingBar"></a>LoadingBar</h3><p>When you add Quasar <a href="/components/loading-bar.html">LoadingBar</a> plugin to your app, Quasar CLI will use it while it runs the preFetch hooks by default.</p>
<h3 id="Loading"><a href="#Loading" class="headerlink" title="Loading"></a>Loading</h3><p>There’s also the possibility to use Quasar <a href="/components/loading.html">Loading</a> plugin. Here’s an example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a route .vue component</span></span><br><span class="line"><span class="keyword">import</span> &#123; Loading &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  preFetch (&#123; <span class="comment">/* ... */</span> &#125;) &#123;</span><br><span class="line">    Loading.show()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// do something async here</span></span><br><span class="line">      <span class="comment">// then call "resolve()"</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      Loading.hide()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App Pre-Processors & Webpack]]></title>
      <url>https://quasar-framework.org/guide/app-pre-processors-and-webpack.html</url>
      <content type="html"><![CDATA[<p>The build system uses Webpack to create your website/app. Don’t worry if you aren’t acquainted with Webpack. Out of the box, you won’t need to configure it because it already has everything set up.</p>
<p>However, for cases where you need to tweak the default Webpack config you can do so by editing <code>/quasar.conf.js</code> and configuring <code>build &gt; extendWebpack (cfg)</code> method or (CLI v0.16.2+) <code>build &gt; chainWebpack (chain)</code>.</p>
<p>Example of adding ESLint loader to it (assuming you’ve installed it):<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">build: &#123;</span><br><span class="line">  extendWebpack (cfg) &#123;</span><br><span class="line">    cfg.module.rules.push(&#123;</span><br><span class="line">      enforce: <span class="string">'pre'</span>,</span><br><span class="line">      test: <span class="regexp">/\.(js|vue)$/</span>,</span><br><span class="line">      loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">      exclude: <span class="regexp">/(node_modules|quasar)/</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Notice that you don’t need to return anything. The parameter of extendWebpack(cfg) is the Webpack configuration Object generated by Quasar for you. You can add/remove/replace anything from it, assuming you really know what you are doing.</p>
<p>Equivalent quasar.conf for chainWebpack():<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">build: &#123;</span><br><span class="line">  chainWebpack (chain) &#123;</span><br><span class="line">    chain.module.rule(<span class="string">'eslint'</span>)</span><br><span class="line">      .test(<span class="regexp">/\.(js|vue)$/</span>)</span><br><span class="line">      .enforce(<span class="string">'pre'</span>)</span><br><span class="line">      .exclude(<span class="regexp">/(node_modules|quasar)/</span>)</span><br><span class="line">      .use(<span class="string">'eslint-loader'</span>)</span><br><span class="line">        .loader(<span class="string">'eslint-loader'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Let’s discuss about Webpack loaders now. It’s probably where you’ll make the most additions.</p>
<h2 id="Webpack-Aliases"><a href="#Webpack-Aliases" class="headerlink" title="Webpack Aliases"></a>Webpack Aliases</h2><p>Quasar comes with a bunch of useful Webpack aliases preconfigured.<br>You can use them anywhere in your project and webpack will resolve the correct path. If you want to add you own alias, se the section about <a href="/guide/app-quasar.conf.js.html#Adding-you-own-alias-to-Webpack">adding your own alias to Webpack</a>.</p>
<table>
<thead>
<tr>
<th>Alias</th>
<th>Resolves to</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>quasar</code></td>
<td><code>node_modules/quasar-framework/dist/quasar.&lt;configured-theme&gt;.esm.js</code></td>
</tr>
<tr>
<td><code>src</code></td>
<td><code>/src</code></td>
</tr>
<tr>
<td><code>components</code></td>
<td><code>/src/components</code></td>
</tr>
<tr>
<td><code>layouts</code></td>
<td><code>/src/layouts</code></td>
</tr>
<tr>
<td><code>pages</code></td>
<td><code>/src/pages</code></td>
</tr>
<tr>
<td><code>assets</code></td>
<td><code>/src/assets</code></td>
</tr>
<tr>
<td><code>plugins</code></td>
<td><code>/src/plugins</code></td>
</tr>
<tr>
<td><code>variables</code></td>
<td><code>/.quasar/variables.styl</code></td>
</tr>
</tbody>
</table>
<p>Also if you configure to build with the Vue compiler version (build &gt; vueCompiler: true), <code>vue$</code> resolves to  <code>vue/dist/vue.esm.js</code>.</p>
<h2 id="Webpack-Loaders"><a href="#Webpack-Loaders" class="headerlink" title="Webpack Loaders"></a>Webpack Loaders</h2><p>The build system uses Webpack, so it relies on using webpack loaders to handle different types of files (js, css, styl, scss, json, and so on). By default, the most used loaders are provided by default.</p>
<h3 id="Installing-loaders"><a href="#Installing-loaders" class="headerlink" title="Installing loaders:"></a>Installing loaders:</h3><p>Let’s take an example. You want to be able to import <code>.json</code> files. <strong>Out of the box, Quasar supplies json support so you don’t actually need to follow these steps, but for the sake of demonstrating how to add a loader, we’ll pretend Quasar doesn’t offer it.</strong></p>
<p>So, you need a loader for it. You search Google to see what webpack loader you need. In this case, it’s “json-loader”. We first install it:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn add --dev json-loader</span><br><span class="line"><span class="comment"># or:</span></span><br><span class="line">$ npm install --save-dev json-loader</span><br></pre></td></tr></table></figure></p>
<p>After installing your new loader, we want to tell Webpack to use it. So we edit <code>/quasar.conf.js</code> and change <code>build.extendWebpack()</code> to add entries to <code>module/rules</code> for this new loader:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// quasar.conf</span></span><br><span class="line">build: &#123;</span><br><span class="line">  extendWebpack (cfg) &#123;</span><br><span class="line">    cfg.module.rules.push(&#123;</span><br><span class="line">      test: <span class="regexp">/\.json$/</span>,</span><br><span class="line">      loader: <span class="string">'json-loader'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Equivalent with chainWebpack():<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// quasar.conf</span></span><br><span class="line">build: &#123;</span><br><span class="line">  chainWebpack (chain) &#123;</span><br><span class="line">    chain.module.rule(<span class="string">'json'</span>)</span><br><span class="line">      .test(<span class="regexp">/\.json$/</span>)</span><br><span class="line">      .use(<span class="string">'json-loader'</span>)</span><br><span class="line">        .loader(<span class="string">'json-loader'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>And you’re done.</p>
<h2 id="SASS-SCSS-support"><a href="#SASS-SCSS-support" class="headerlink" title="SASS/SCSS support"></a>SASS/SCSS support</h2><p>So you want to be able to write SASS/SCSS CSS code. You need a loader for it. We first install it. Note that for this particular case you also need to install node-sass because sass-loader depends on it as a peer dependency.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn add --dev sass-loader node-sass</span><br><span class="line"><span class="comment"># or:</span></span><br><span class="line">$ npm install --save-dev sass-loader node-sass</span><br></pre></td></tr></table></figure>
<p>And you’re done. For SCSS/SASS it’s all it takes. You don’t need to further configure <code>/quasar.conf.js</code>.</p>
<p>Once installed, you can use this pre-processor inside your <code>*.vue</code> components using the lang attribute on <code>&lt;style&gt;</code> tags:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">/* We can write SASS now! */</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>A note on SASS syntax:</p>
<ul>
<li>lang=”scss” corresponds to the CSS-superset syntax (with curly braces and semicolons).</li>
<li>lang=”sass” corresponds to the indentation-based syntax.</li>
</ul>
<h2 id="PostCSS"><a href="#PostCSS" class="headerlink" title="PostCSS"></a>PostCSS</h2><p>Styles in <code>*.vue</code> files (and all other style files) are piped through PostCSS by default, so you don’t need to use a specific loader for it.</p>
<p>By default, PostCSS is configured to use Autoprefixer. Take a look at `/.postcssrc.js where you can tweak it if you need to.</p>
<h2 id="Pug"><a href="#Pug" class="headerlink" title="Pug"></a>Pug</h2><p>First, you need to install some dependencies:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn add --dev pug pug-plain-loader</span><br><span class="line"><span class="comment"># or:</span></span><br><span class="line">$ npm install --save-dev pug pug-plain-loader</span><br></pre></td></tr></table></figure>
<p>Then you need to extend the webpack configuration through quasar.conf.js:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// quasar.conf.js</span></span><br><span class="line">build: &#123;</span><br><span class="line">  extendWebpack (cfg) &#123;</span><br><span class="line">    cfg.module.rules.push(&#123;</span><br><span class="line">      test: <span class="regexp">/\.pug$/</span>,</span><br><span class="line">      loader: <span class="string">'pug-plain-loader'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Equivalent with chainWebpack():<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// quasar.conf.js</span></span><br><span class="line">build: &#123;</span><br><span class="line">  chainWebpack (chain) &#123;</span><br><span class="line">    chain.module.rule(<span class="string">'pug'</span>)</span><br><span class="line">      .test(<span class="regexp">/\.pug$/</span>)</span><br><span class="line">      .use(<span class="string">'pug-plain-loader'</span>)</span><br><span class="line">        .loader(<span class="string">'pug-plain-loader'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Coffeescript"><a href="#Coffeescript" class="headerlink" title="Coffeescript"></a>Coffeescript</h2><p>If you are using Coffeescript then you need to EITHER disable ESLint OR tell ESLint which Vue components are using Coffeescript.</p>
<p>Note that <code>vue-loader</code> uses <code>lang=&quot;coffee&quot;</code> to identify components which are using Coffeescript, but <code>lang=&quot;coffee&quot;</code> is not recognizable for ESLint. Fortunately, ESLint (following traditional HTML) uses <code>type=&quot;xxx&quot;</code> to identify the type of scripts. As long as a <code>&lt;script&gt;</code> tag has any <code>type</code> other than <code>javascript</code>, ESLint would mark the script as non-javascript, and skips linting it. Coffeescript’s convention is to use <code>type=&quot;text/coffeescript&quot;</code> to identify itself. Therefore, in your Vue components which are using Coffeescript, using both <code>lang</code> and <code>type</code> to avoid ESLint warnings:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"coffee"</span> <span class="attr">type</span>=<span class="string">"text/coffeescript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  ...</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Supporting IE]]></title>
      <url>https://quasar-framework.org/guide/app-supporting-ie.html</url>
      <content type="html"><![CDATA[<p>If you are building a website, you might want to support IE 11+. This support is not added by default to your website. Quasar CLI provides it on demand only.</p>
<blockquote>
<p><strong>It is strongly recommended to use Yarn instead of NPM when developing on a Windows machine</strong>, to avoid many problems.</p>
</blockquote>
<h2 id="Installation-of-IE-Support"><a href="#Installation-of-IE-Support" class="headerlink" title="Installation of IE Support"></a>Installation of IE Support</h2><p>In order to support IE, you’ll need to edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    supportIE: <span class="literal">true</span>,</span><br><span class="line">    ....</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>That’s it. This will inject the Promise polyfill, along with some other smaller polyfills, adding an extra ~6k worth of code (minified) to your bundle.</p>
<blockquote>
<p><strong>NOTE</strong><br>Quasar CLI is smart enough to include the IE polyfills only if it is really needed. An Electron app for example doesn’t need it and as a result, even if you leave <code>supportIE</code> set to “true” in quasar.conf.js it won’t be bundled.</p>
</blockquote>
<blockquote>
<p><strong>WARNING</strong><br>Running dev server on a Windows machine and consuming the output in IE11 will result in an error (ansi-strip package related used by webpack-dev-server). This is only an issue during development, and if you run the dev server on a Linux or MAC machine you can consume it safely in IE11.<br><strong>The fix is to use “yarn” instead of “npm” as node packager. If you have used npm until now, then delete /node_modules folder and /package-lock.json then run “yarn”.</strong></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App Routing]]></title>
      <url>https://quasar-framework.org/guide/app-routing.html</url>
      <content type="html"><![CDATA[<p>You’ll notice that your Quasar project contains a <code>/src/router</code> folder. This holds the routing configuration of your website/app:</p>
<ul>
<li>“/src/router/index.js” holds the Vue Router initialization code</li>
<li>“/src/router/routes.js” holds the routes of your website/app</li>
</ul>
<p>Make sure to read <a href="https://router.vuejs.org/" target="_blank" rel="noopener">Vue Router documentation</a> to understand how it works.</p>
<p>The <code>/src/router/routes.js</code> needs to import your website/app’s Pages and Layouts. Read more on <a href="/guide/app-adding-pages-and-layouts.html">Adding Pages and Layouts</a> documentation page.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App Vuex Store]]></title>
      <url>https://quasar-framework.org/guide/app-vuex-store.html</url>
      <content type="html"><![CDATA[<p>In large applications, state management often becomes complex due to multiple pieces of state scattered across many components and the interactions between them. It is often overlooked that the source of truth in Vue instances is the raw data object - a Vue instance simply proxies access to it. Therefore, if you have a piece of state that should be shared by multiple instances, you should avoid duplicating it and share it by identity.</p>
<p>The recommended way to go if you want components sharing state is Vuex. Take a look at its <a href="https://vuex.vuejs.org/" target="_blank" rel="noopener">documentation</a> before diving in. It has a great feature when used along the <a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener">Vue dev-tools</a> browser extension like Time Travel debugging.</p>
<p>We won’t go into details on how to configure or use Vuex since it has great docs. Instead we’ll just show you what the folder structure looks like when using it on a Quasar project.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">└── src/</span><br><span class="line">    └── store/               <span class="comment"># Vuex Store</span></span><br><span class="line">        ├── index.js         <span class="comment"># Vuex Store definition</span></span><br><span class="line">        ├── &lt;folder&gt;         <span class="comment"># Vuex Store Module...</span></span><br><span class="line">        └── &lt;folder&gt;         <span class="comment"># Vuex Store Module...</span></span><br></pre></td></tr></table></figure>
<p>By default, if you choose to use Vuex when you create a project folder with Quasar CLI, it will set you up on using Vuex modules. Each sub-folder of <code>/src/store</code> represents a Vuex Module.</p>
<blockquote>
<p>If Vuex Modules is too much for your website app, you can change <code>/src/store/index.js</code> and avoid importing any module.</p>
</blockquote>
<h2 id="Adding-a-Vuex-Module"><a href="#Adding-a-Vuex-Module" class="headerlink" title="Adding a Vuex Module."></a>Adding a Vuex Module.</h2><p>Adding a Vuex Module is made easy by Quasar CLI through the <code>$ quasar new</code> command.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar new store &lt;store_name&gt;</span><br></pre></td></tr></table></figure></p>
<p>It will create a folder in <code>/src/store</code> named by “store_name” from the command above. It will contain all the boilerplate that you need.</p>
<p>Let’s say that you want to create a “showcase” Vuex Module. You issue <code>$ quasar new store showcase</code>. You then notice the newly created <code>/src/store/showcase</code> folder, which holds the following files:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">└── src/</span><br><span class="line">    └── store/</span><br><span class="line">        ├── index.js         <span class="comment"># Vuex Store definition</span></span><br><span class="line">        └── showcase         <span class="comment"># Module "showcase"</span></span><br><span class="line">            ├── index.js     <span class="comment"># Gluing the module together</span></span><br><span class="line">            ├── actions.js   <span class="comment"># Module actions</span></span><br><span class="line">            ├── getters.js   <span class="comment"># Module getters</span></span><br><span class="line">            ├── mutations.js <span class="comment"># Module mutations</span></span><br><span class="line">            └── state.js     <span class="comment"># Module state</span></span><br></pre></td></tr></table></figure>
<p>We’ve created the new Vuex Module, but we haven’t yet informed Vuex to use it. So we edit <code>/src/store/index.js</code> and add a reference to it:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// we first import the module</span></span><br><span class="line"><span class="keyword">import</span> showcase <span class="keyword">from</span> <span class="string">'./showcase'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    <span class="comment">// then we reference it</span></span><br><span class="line">    showcase</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// if we want some HMR magic for it, we handle</span></span><br><span class="line"><span class="comment">// the hot update like below. Notice we guard this</span></span><br><span class="line"><span class="comment">// code with "process.env.DEV" -- so this doesn't</span></span><br><span class="line"><span class="comment">// get into our production build (and it shouldn't).</span></span><br><span class="line"><span class="keyword">if</span> (process.env.DEV &amp;&amp; <span class="built_in">module</span>.hot) &#123;</span><br><span class="line">  <span class="built_in">module</span>.hot.accept([<span class="string">'./showcase'</span>], () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> newShowcase = <span class="built_in">require</span>(<span class="string">'./showcase'</span>).default</span><br><span class="line">    store.hotUpdate(&#123; <span class="attr">modules</span>: &#123; <span class="attr">showcase</span>: newShowcase &#125; &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>
<p>Now we can use this Vuex Module in our Vue files. Here is a quick example. Assume we configured <code>drawerState</code> in the state and added <code>updateDrawerState</code> mutation.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/store/showcase/mutations.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> updateDrawerState = <span class="function">(<span class="params">state, opened</span>) =&gt;</span> &#123;</span><br><span class="line">  state.drawerState = opened</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/store/showcase/state.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  drawerState: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In a Vue file:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"drawerState"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  computed: &#123;</span></span><br><span class="line"><span class="undefined">    drawerState: &#123;</span></span><br><span class="line"><span class="undefined">      get () &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.showcase.drawerState</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      set (val) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$store.commit(<span class="string">'showcase/updateDrawerState'</span>, val)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Store-Code-Splitting"><a href="#Store-Code-Splitting" class="headerlink" title="Store Code Splitting"></a>Store Code Splitting</h2><p>You can take advantage of the <a href="/guide/app-prefetch-feature.html#Store-Code-Splitting">PreFetch Feature</a> to code split code for modules.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mobile App Build Commands]]></title>
      <url>https://quasar-framework.org/guide/cordova-build-commands.html</url>
      <content type="html"><![CDATA[<p><a href="/guide/quasar-cli.html">Quasar CLI</a> makes it incredibly simple to develop or build the final distributables from your source code.</p>
<p>Before we dive in, make sure you got the Cordova CLI installed.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn global add cordova</span><br><span class="line"><span class="comment"># or:</span></span><br><span class="line">$ npm install -g cordova</span><br></pre></td></tr></table></figure></p>
<h2 id="Developing"><a href="#Developing" class="headerlink" title="Developing"></a>Developing</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar dev -m cordova -T [ios|android]</span><br><span class="line"></span><br><span class="line"><span class="comment"># ..or the longer form:</span></span><br><span class="line">$ quasar dev --mode cordova -T [ios|android]</span><br><span class="line"></span><br><span class="line"><span class="comment"># with a specific Quasar theme, for iOS platform:</span></span><br><span class="line">$ quasar dev -m cordova -T ios -t ios</span><br><span class="line"></span><br><span class="line"><span class="comment"># with a specific Quasar theme, for Android platform:</span></span><br><span class="line">$ quasar dev -m cordova -T android -t mat</span><br><span class="line"></span><br><span class="line"><span class="comment"># using a specific emulator (--emulator, -e)</span></span><br><span class="line">$ quasar dev -m cordova -T ios -e iPhone-7</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>IMPORTANT</strong><br>You can develop with any Quasar theme, regardless of the platform you are building on (Android, IOS, …).</p>
</blockquote>
<p>In order for you to be able to develop on a device emulator or directly on a phone (with Hot Module Reload included), Quasar CLI follows these steps:</p>
<ol>
<li>Detects your machine’s external IP address. If there are multiple such IPs detected, then it asks you to choose one. If you’ll be using a mobile phone to develop then choose the IP address of your machine that’s pingable from the phone/tablet.</li>
<li>It starts up a development server on your machine.</li>
<li>It temporarily changes the <code>&lt;content/&gt;</code> tag in <code>/src-cordova/config.xml</code> to point to the IP previously detected. This allows the app to connect to the development server.</li>
<li>It defers to Cordova CLI to build a native app with the temporarily changed config.xml.</li>
<li>Cordova CLI checks if a mobile phone / tablet is connected to your development machine. If it is, it installs the development app on it. If none is found, then it boots up an emulator and runs the development app.</li>
<li>Finally, it reverts the temporary changes made to <code>/src-cordova/config.xml</code>.</li>
</ol>
<blockquote>
<p><strong>IMPORTANT</strong><br>If developing on a mobile phone/tablet, it is very important that the external IP address of your build machine is accessible from the phone/tablet, otherwise you’ll get a development app with white screen only. Also check your machine’s firewall to allow connections to the development chosen port.</p>
</blockquote>
<h2 id="Building-for-Production"><a href="#Building-for-Production" class="headerlink" title="Building for Production"></a>Building for Production</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar build -m cordova -T [ios|android]</span><br><span class="line"></span><br><span class="line"><span class="comment"># ..or the longer form:</span></span><br><span class="line">$ quasar build --mode cordova -T [ios|android]</span><br><span class="line"></span><br><span class="line"><span class="comment"># with a specific Quasar theme, for iOS platform:</span></span><br><span class="line">$ quasar build -m cordova -T ios -t ios</span><br><span class="line"></span><br><span class="line"><span class="comment"># with a specific Quasar theme, for Android platform:</span></span><br><span class="line">$ quasar build -m cordova -T android -t mat</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>IMPORTANT</strong><br>You can build with any Quasar theme, regardless of the platform you are targeting (Android, IOS, …).</p>
</blockquote>
<p>These commands parse and build your <code>/src</code> folder then overwrite <code>/src-cordova/www</code> then defer to Cordova CLI to trigger the actual native app creation.</p>
<p>You may ask yourself. So where’s the .apk or .app? Watch the terminal console to see where it puts it.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Configuring Cordova]]></title>
      <url>https://quasar-framework.org/guide/cordova-configuring-cordova.html</url>
      <content type="html"><![CDATA[<p>We’ll be using Quasar CLI (and Cordova CLI) to develop and build a Mobile App. The difference between building a SPA, PWA, Electron App or a Mobile App is simply determined by the “mode” parameter in “quasar dev” and “quasar build” commands.</p>
<p>There are two configuration files of great importance to your mobile apps. We’ll go over each one.</p>
<h2 id="Config-xml"><a href="#Config-xml" class="headerlink" title="Config.xml"></a>Config.xml</h2><p>The most important config file for your mobile app is <code>/src-cordova/config.xml</code>. Like mentioned above, <code>/src-cordova</code> is a Cordova project folder, so please refer to <a href="https://cordova.apache.org/docs/en/latest/" target="_blank" rel="noopener">Cordova documentation</a> in order to understand what each file from there does. But for now, have a few moments to read about <a href="https://cordova.apache.org/docs/en/latest/config_ref/" target="_blank" rel="noopener">config.xml</a>.</p>
<p>Some properties from this file will get overwritten as we’ll see in next section.</p>
<h2 id="Quasar-conf-js"><a href="#Quasar-conf-js" class="headerlink" title="Quasar.conf.js"></a>Quasar.conf.js</h2><p>Quasar CLI helps you in setting some properties of the mobile Apps automatically (from config.xml): the Cordova “id”, app version, description and android-versionCode. This is for convenience so you’ll be able to have a single point where, for example, you change the version of your app, not multiple files that you need to simultaneously touch which is error prone.</p>
<p>For determining the values for each of the properties mentioned above, Quasar CLI:</p>
<ol>
<li>Look in <code>/quasar.conf.js</code> for a “cordova” Object. Does it have “id”, “version”, “description” and/or “androidVersionCode”? If yes, it will use them.</li>
<li>If not, then it looks into your <code>/package.json</code> for “cordovaId”, “version” and “description” fields.</li>
</ol>
<p>Other options you can configure:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Quasar v0.17+ only</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  framework: &#123;</span><br><span class="line">    config: &#123;</span><br><span class="line">      cordova: &#123;</span><br><span class="line">        iosStatusBarPadding: <span class="literal">true</span>/<span class="literal">false</span>, <span class="comment">// add the dynamic top padding on iOS mobile devices</span></span><br><span class="line">        backButtonExit: <span class="literal">true</span>/<span class="literal">false</span> <span class="comment">// Quasar handles app exit on mobile phone back button</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[What is Cordova]]></title>
      <url>https://quasar-framework.org/guide/cordova-introduction.html</url>
      <content type="html"><![CDATA[<p>Apache Cordova is a mobile application development framework originally created by Nitobi. Adobe Systems purchased Nitobi in 2011, rebranded it as PhoneGap, and later released an open source version of the software called Apache Cordova.</p>
<p><a href="https://cordova.apache.org/" target="_blank" rel="noopener">Apache Cordova</a> enables software programmers to build applications for mobile devices using CSS3, HTML5, and JavaScript instead of relying on platform-specific APIs like those in Android, iOS, or Windows Phone. It enables wrapping up of CSS, HTML, and JavaScript code depending upon the platform of the device. It extends the features of HTML and JavaScript to work with the device. The resulting applications are hybrid, meaning that they are neither truly native mobile application (because all layout rendering is done via Web views instead of the platform’s native UI framework) nor purely Web-based (because they are not just Web apps, but are packaged as apps for distribution and have access to native device APIs).</p>
<p>You can hook into the native device APIs by using <a href="/guide/cordova-plugins.html">Cordova Plugins</a>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Cordova Plugins]]></title>
      <url>https://quasar-framework.org/guide/cordova-plugins.html</url>
      <content type="html"><![CDATA[<p>You can hook into the native device APIs by using <a href="https://cordova.apache.org/docs/en/latest/#plugin-apis" target="_blank" rel="noopener">Cordova Plugins</a>.</p>
<h2 id="Cordova-Plugins"><a href="#Cordova-Plugins" class="headerlink" title="Cordova Plugins"></a>Cordova Plugins</h2><p>A few examples of such plugins:</p>
<ul>
<li>Battery Status</li>
<li>Camera</li>
<li>Contacts</li>
<li>Device</li>
<li>Device Motion</li>
<li>Geolocation</li>
<li>Media</li>
<li>Media Capture</li>
<li>Network Information</li>
<li>Splashscreen</li>
<li>Vibration</li>
<li>Statusbar</li>
</ul>
<h2 id="Deviceready-Event"><a href="#Deviceready-Event" class="headerlink" title="Deviceready Event"></a>Deviceready Event</h2><p>You’ll notice that some Cordova plugins are usable only after the <code>deviceready</code> event has been triggered. We don’t need to worry about it too much. Quasar listens to this event and takes care of our root Vue component to be mounted <strong>after</strong> this event has been triggered. But if you need some plugin’s own variable and that is initialized after <code>deviceready</code> you can follow the example of using the plugin device below</p>
<h3 id="Caveat"><a href="#Caveat" class="headerlink" title="Caveat"></a>Caveat</h3><p>Let’s take a vue file for example:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  ... we are sure 'deviceready' has been triggered here ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// outside of the default export,</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// we need to listen to the event for ourselves:</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.addEventListener(<span class="string">'deviceready'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// it's only now that we are sure</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// the event has triggered</span></span></span><br><span class="line"><span class="javascript">&#125;, <span class="literal">false</span>)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// we are sure 'deviceready' has been triggered here</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>The reason is simple. Quasar listens for the event then mounts the root Vue component. But before this, the Vue files are imported into the <code>/src/router/routes.js</code> file, so the code outside of the default export gets executed.</p>
<h2 id="Using-a-Cordova-Plugin"><a href="#Using-a-Cordova-Plugin" class="headerlink" title="Using a Cordova Plugin"></a>Using a Cordova Plugin</h2><p>Let’s learn by taking some examples, assuming you’ve added Cordova mode to your Quasar project and installed a platform (android, ios, …) already.</p>
<h3 id="Example-Battery-Status"><a href="#Example-Battery-Status" class="headerlink" title="Example: Battery Status"></a>Example: Battery Status</h3><p>First step is to read the documentation of the Cordova plugin that we want to use. We look at <a href="https://cordova.apache.org/docs/en/latest/#plugin-apis" target="_blank" rel="noopener">Cordova Plugins list</a> and click on <a href="https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-battery-status/index.html" target="_blank" rel="noopener">Battery Status doc page</a>.</p>
<p>We see instructions on how to install this plugin. It’s always a Cordova command. <strong>So we “cd” into <code>/src-cordova</code></strong> (which is a Cordova generated folder) <strong>and issue the install command form there</strong>:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># from /src-cordova:</span></span><br><span class="line">$ cordova plugin add cordova-plugin-battery-status</span><br></pre></td></tr></table></figure></p>
<p>Now let’s put this plugin to some good use. In one of your Quasar project’s pages/layouts/components Vue file, we write:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// some Vue file</span><br><span class="line">// remember this is simply an example;</span><br><span class="line">// only look at how we use the API described in the plugin's page;</span><br><span class="line">// the rest of things here are of no importance</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    Battery status is: <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; batteryStatus &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      batteryStatus: <span class="string">'determining...'</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    updateBatteryStatus (status) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.batteryStatus = <span class="string">`Level: <span class="subst">$&#123;status.level&#125;</span>, plugged: <span class="subst">$&#123;status.isPlugged&#125;</span>`</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  created () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// we register the event like on plugin's doc page</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">'batterystatus'</span>, <span class="keyword">this</span>.updateBatteryStatus, <span class="literal">false</span>)</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  beforeDestroy () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// we do some cleanup;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// we need to remove the event listener</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.removeEventListener(<span class="string">'batterystatus'</span>, <span class="keyword">this</span>.updateBatteryStatus, <span class="literal">false</span>)</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Example-Camera"><a href="#Example-Camera" class="headerlink" title="Example: Camera"></a>Example: Camera</h3><p>First step is to read the documentation of the Cordova plugin that we want to use. We look at <a href="https://cordova.apache.org/docs/en/latest/#plugin-apis" target="_blank" rel="noopener">Cordova Plugins list</a> and click on <a href="https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-camera/index.html" target="_blank" rel="noopener">Camera doc page</a>.</p>
<p>There’s a mention of the <code>deviceready</code> event. But we already know how to handle it from the previous sections.</p>
<p>We read the instructions on how to install this plugin. It’s always a Cordova command. <strong>So we “cd” into <code>/src-cordova</code></strong> (which is a Cordova generated folder) <strong>and issue the install command form there</strong>:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># from /src-cordova:</span></span><br><span class="line">$ cordova plugin add cordova-plugin-camera</span><br></pre></td></tr></table></figure></p>
<p>Now let’s put this plugin to some good use. In one of your Quasar project’s pages/layouts/components Vue file, we write:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// some Vue file</span><br><span class="line">// remember this is simply an example;</span><br><span class="line">// only look at how we use the API described in the plugin's page;</span><br><span class="line">// the rest of things here are of no importance</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">label</span>=<span class="string">"Get Picture"</span> @<span class="attr">click</span>=<span class="string">"captureImage"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imageSrc"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      imageSrc: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    captureImage () &#123;</span></span><br><span class="line"><span class="undefined">      navigator.camera.getPicture(</span></span><br><span class="line"><span class="javascript">        data =&gt; &#123; <span class="comment">// on success</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.imageSrc = <span class="string">`data:image/jpeg;base64,<span class="subst">$&#123;data&#125;</span>`</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        () =&gt; &#123; <span class="comment">// on fail</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$q.notify(<span class="string">'Could not access device camera.'</span>)</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// camera options</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      )</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Example-Device"><a href="#Example-Device" class="headerlink" title="Example: Device"></a>Example: Device</h3><p>First step is to read the documentation of the Cordova plugin that we want to use. Look at the <a href="https://cordova.apache.org/docs/en/latest/#plugin-apis" target="_blank" rel="noopener">Cordova Plugins list</a> and click on <a href="https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-device/index.html" target="_blank" rel="noopener">Device doc page</a>.</p>
<p>This plugin initializes a global variable called <code>device</code> which describes the device’s hardware and software. So it can be accessed with <code>window.device</code>.</p>
<p>Read the instructions on how to install this plugin on its cordova doc page. It’s always a Cordova command. <strong>So we “cd” into <code>/src-cordova</code></strong> (which is a Cordova generated folder) and <strong>issue the install command from there</strong>:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># from /src-cordova:</span></span><br><span class="line">$ cordova plugin add cordova-plugin-device</span><br></pre></td></tr></table></figure></p>
<p>Now let’s put this plugin to some good use. If you need the information of your device when starting the application, you will have to capture the created event. In one of your Quasar project’s pages/layouts/components Vue file, we write:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// some Vue file</span><br><span class="line">// remember this is simply an example;</span><br><span class="line">// only look at how we use the API described in the plugin's page;</span><br><span class="line">// the rest of things here are of no importance</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-page</span> <span class="attr">class</span>=<span class="string">"flex flex-center"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>IMEI &#123;&#123;IMEI&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-page</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      IMEI: <span class="built_in">window</span>.device === <span class="keyword">void</span> <span class="number">0</span></span></span><br><span class="line"><span class="javascript">        ? <span class="string">'Run this on a mobile/tablet device'</span></span></span><br><span class="line"><span class="javascript">        : <span class="built_in">window</span>.device</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mobile App Preparation]]></title>
      <url>https://quasar-framework.org/guide/cordova-preparation.html</url>
      <content type="html"><![CDATA[<p>Before we dive in to the actual development, we need to do some preparation work. Here we will go over Android as the target platform.</p>
<h2 id="1-Installation"><a href="#1-Installation" class="headerlink" title="1. Installation"></a>1. Installation</h2><p>First step is to make sure you got the Cordova CLI installed and the necessary SDKs.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn global add cordova</span><br><span class="line"><span class="comment"># or:</span></span><br><span class="line">$ npm install -g cordova</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>After this step you will need to install the Android platform SDK on your machine. You can <a href="https://developer.android.com/studio/index.html" target="_blank" rel="noopener">download the Android Studio here</a> and follow these <a href="https://developer.android.com/studio/install.html" target="_blank" rel="noopener">installation steps</a> afterwards.</p>
</li>
<li><p>Add Android installation to your path</p>
</li>
</ul>
<p><em>Unix</em><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> ANDROID_HOME=<span class="string">"<span class="variable">$HOME</span>/Android/Sdk"</span></span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/tools; PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/platform-tools</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>Please note that sometimes the <code>/Android/Sdk</code> folder is added inside <code>/Library/</code> inside your user folder. Check your user folder and if the <code>/Android/</code> folder is only inside <code>/Library/</code> do: <code>export ANDROID_HOME=&quot;$HOME/Library/Android/Sdk&quot;</code> instead.</p>
</blockquote>
<p><em>Windows</em><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setx ANDROID_HOME &quot;%USERPROFILE%\AppData\Local\Android\Sdk&quot;</span><br><span class="line">setx path &quot;%path%;%ANDROID_HOME%\tools;%ANDROID_HOME%\platform-tools&quot;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>Start Android studio by changing into the folder you installed it in and run <code>./studio.sh</code>. Next step is to install the individual SDKs:</p>
<p>Open the “Configure” menu at the bottom of the window:</p>
<p><img src="/images/Android-Studio-SDK-Menu.png" alt="SDK manager" title="SDK manager"></p>
<p>Select the desired SDKs. As per August 2018 Cordova supports 5.0 and up and click on “Apply” to install the SDKs.</p>
<p><img src="/images/Android-Studio-SDK-selection.png" alt="SDK selection" title="SDK selection"></p>
</li>
</ul>
<h2 id="2-Add-Cordova-Quasar-Mode"><a href="#2-Add-Cordova-Quasar-Mode" class="headerlink" title="2. Add Cordova Quasar Mode"></a>2. Add Cordova Quasar Mode</h2><p>In order to develop/build a Mobile app, we need to add the Cordova mode to our Quasar project. What this does is that it uses Cordova CLI to generate a Cordova project in <code>/src-cordova</code> folder. <code>/src-cordova/www</code> folder will be overwritten each time you build.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar mode -a cordova</span><br></pre></td></tr></table></figure></p>
<h2 id="3-Add-Platform"><a href="#3-Add-Platform" class="headerlink" title="3. Add Platform"></a>3. Add Platform</h2><p>To switch to the cordova project, type:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd src-cordova</span><br></pre></td></tr></table></figure></p>
<p>To add a target platform, type:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cordova platform add [android|ios]</span><br></pre></td></tr></table></figure></p>
<p>To verify that everything is in order, type:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cordova requirements</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>On some newer Debian-based operating systems you might face a very persistent problem when running <code>cordova requirements</code>. Please see the <a href="/guide/cordova-troubleshooting-and-tips.html#Android-SDK-not-found-after-installation-of-the-SDK">“Android SDK not found” after installation</a> section for assistance.</p>
</blockquote>
<h2 id="4-Start-Developing"><a href="#4-Start-Developing" class="headerlink" title="4. Start Developing"></a>4. Start Developing</h2><p>If you want to jump right in and start developing, you can skip step #2 and #3 commands and issue:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar dev -m cordova -T [android|ios]</span><br></pre></td></tr></table></figure></p>
<p>This will add Cordova mode and project automatically, if it is missing.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Managing Google Analytics]]></title>
      <url>https://quasar-framework.org/guide/cordova-managing-google-analytics.html</url>
      <content type="html"><![CDATA[<p>Getting to know your users and measuring user behavior is an important step in App Development. Unfortunately, it takes a bit of non-standard work to get Google Analytics to work after wrapping your mobile app with Cordova. Setting up Google Analytics in a pure web application is quite easy, but Cordova somehow prevents pageviews and events from being sent to Google Analytics.</p>
<p>Follow this guide to implement Google Analytics into your Cordova powered Quasar App.</p>
<p>You may also want to read these great tutorials:</p>
<ul>
<li><a href="https://jannerantala.com/tutorials/quasar-framework-google-tag-manager-and-analytics-setup-for-an-spa-website/" target="_blank" rel="noopener">Google Tag Manager and Analytics Setup for an SPA Website</a></li>
<li><a href="https://jannerantala.com/tutorials/quasar-framework-google-analytics-setup-for-cordova-app/" target="_blank" rel="noopener">Google Analytics Setup for a Cordova App</a></li>
</ul>
<blockquote>
<p><strong>IMPORTANT</strong><br>You’ll need to include a <code>&lt;script&gt;</code> tag provided by Google in <code>/src/index.template.html</code>, which will make your App depend on an Internet connection!</p>
</blockquote>
<h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><ul>
<li>Make sure all your routes have a name and path parameter specified. Otherwise, they cannot be posted to the <code>ga.logPage</code> function. Please refer to <a href="/guide/app-routing.html">Routing</a> for more info on routing.</li>
<li>Have Basic knowledge of Google Analytics</li>
</ul>
<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><p>Before we can start implementing Google Analytics into your application, you’ll need an account for <a href="https://analytics.google.com" target="_blank" rel="noopener">Google Analytics</a> and <a href="https://tagmanager.google.com/" target="_blank" rel="noopener">Google Tagmanager</a>. So let’s do that first. When you have these accounts, it’s time to configure Tag manager. Follow the steps in this <a href="http://www.multiminds.eu/2016/12/06/google-analytics-tag-manager-ionic-cordova/" target="_blank" rel="noopener">Multiminds article</a> to do so.</p>
<h2 id="Implementing-this-into-application"><a href="#Implementing-this-into-application" class="headerlink" title="Implementing this into application"></a>Implementing this into application</h2><blockquote>
<p>For this guide, we’ll assume you have a fixed sessionId that you send to Google Analytics. Google Analytics uses a sessionId to distinguish different users from each other. If you want to create an anonymous sessionId, see <a href="https://developers.google.com/analytics/devguides/collection/analyticsjs/cookies-user-id" target="_blank" rel="noopener">Analytics Documentation on user id</a>.</p>
</blockquote>
<p>Place the Tag Manager snippet into head of your <code>index.html</code> file (if you’ve followed the <a href="http://www.multiminds.eu/2016/12/06/google-analytics-tag-manager-ionic-cordova/" target="_blank" rel="noopener">Multiminds article</a>, you already have this.) Create a new file in your codebase called <code>analytics.js</code> with the following contents:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  logEvent(category, action, label, sessionId = <span class="literal">null</span>) &#123;</span><br><span class="line">    dataLayer.push(&#123;</span><br><span class="line">      <span class="string">'appEventCategory'</span>: category,</span><br><span class="line">      <span class="string">'appEventAction'</span>: action,</span><br><span class="line">      <span class="string">'appEventLabel'</span>: label,</span><br><span class="line">      <span class="string">'sessionId'</span>: sessionId</span><br><span class="line">    &#125;)</span><br><span class="line">    dataLayer.push(&#123; <span class="string">'event'</span>: <span class="string">'appEvent'</span> &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  logPage(path, name, sessionId = <span class="literal">null</span>) &#123;</span><br><span class="line">    dataLayer.push(&#123;</span><br><span class="line">      <span class="string">'screenPath'</span>: path,</span><br><span class="line">      <span class="string">'screenName'</span>: name,</span><br><span class="line">      <span class="string">'sessionId'</span>: sessionId</span><br><span class="line">    &#125;)</span><br><span class="line">    dataLayer.push(&#123; <span class="string">'event'</span>: <span class="string">'appScreenView'</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>To make sure all the pages in your application are automatically posted to Google Analytics, we create an app plugin:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar new plugin google-analytics</span><br></pre></td></tr></table></figure></p>
<p>Then we edit the newly created file: <code>/src/plugins/google-analytics</code>:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import ga from &apos;analytics.js&apos;</span><br><span class="line"></span><br><span class="line">export default (&#123; router &#125;) =&gt; &#123;</span><br><span class="line">  router.afterEach((to, from) =&gt; &#123;</span><br><span class="line">    ga.logPage(to.path, to.name, sessionId)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Finally we register the app plugin in <code>/quasar.conf.js</code>. We can do so only for Cordova wrapped apps if we want:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  ctx.mode.cordova ? &apos;google-analytics&apos; : &apos;&apos;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>More information about events can be found in the <a href="https://developers.google.com/analytics/devguides/collection/analyticsjs/events" target="_blank" rel="noopener">Analytics documentation on events</a>.</p>
</blockquote>
<p>You’ll see the events and pageviews coming in when you run your app. It usually takes around 5 to 10 seconds for a pageview to be registered in the realtime view.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Cordova Troubleshooting and Tips]]></title>
      <url>https://quasar-framework.org/guide/cordova-troubleshooting-and-tips.html</url>
      <content type="html"><![CDATA[<h2 id="Browser-Simulator"><a href="#Browser-Simulator" class="headerlink" title="Browser Simulator"></a>Browser Simulator</h2><p>Use Google Chrome’s emulator from Developer Tools. It’s a fantastic tool. You can select which device to emulate, but keep in mind that it’s an <em>emulator</em> and not the real deal.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br>Also, if you change from desktop to mobile emulator or backwards, hit the refresh button as Quasar Platform detection is not dynamic (nor it should be).</p>
</blockquote>
<p><img src="/images/browser-simulator.png" alt="Google Chrome emulator" title="Google Chrome emulator"></p>
<h2 id="Android-Tips"><a href="#Android-Tips" class="headerlink" title="Android Tips"></a>Android Tips</h2><h3 id="Remote-Debugging"><a href="#Remote-Debugging" class="headerlink" title="Remote Debugging"></a>Remote Debugging</h3><p>If you are debugging Android Apps, you can use Google Chrome <a href="https://developers.google.com/web/tools/chrome-devtools/debug/remote-debugging/remote-debugging?hl=en" target="_blank" rel="noopener">Remote Debugging</a> through a USB cable attached to your Android phone/tablet. It can be used for emulator too.</p>
<p>This way you have Chrome Dev Tools directly for your App running on the emulator/phone/table. Inspect elements, check console output, and so on and so forth.</p>
<p><img src="/images/remote-debug.png" alt="Android Remote Debugging" title="Android Remote Debugging"><br><img src="/images/remote-debug-2.png" alt="Android Remote Debugging" title="Android Remote Debugging"></p>
<h3 id="Android-SDK-not-found-after-installation-of-the-SDK"><a href="#Android-SDK-not-found-after-installation-of-the-SDK" class="headerlink" title="Android SDK not found after installation of the SDK"></a>Android SDK not found after installation of the SDK</h3><p>Some newer Debian-based OS (e.g. ubuntu, elementary OS) might leave you with a <code>Android SDK not found.</code> after you installed and (correctly) configured the environment. The output might look similar to this:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cordova requirements</span><br><span class="line"></span><br><span class="line">Requirements check results <span class="keyword">for</span> android:</span><br><span class="line">Java JDK: installed 1.8.0</span><br><span class="line">Android SDK: installed <span class="literal">true</span></span><br><span class="line">Android target: not installed</span><br><span class="line">Android SDK not found. Make sure that it is installed. If it is not at the default location, <span class="built_in">set</span> the ANDROID_HOME environment variable.</span><br><span class="line">Gradle: not installed</span><br><span class="line">Could not find gradle wrapper within Android SDK. Might need to update your Android SDK.</span><br><span class="line">Looked here: /home/your_user/Android/Sdk/tools/templates/gradle/wrapper</span><br><span class="line">Error: Some of requirements check failed</span><br></pre></td></tr></table></figure>
<p>This could have two different reasons: Usually the paths aren’t configured correctly. The first step is to verify if your paths are set correctly. This can be done by running the following commands:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$ANDROID_HOME</span></span><br></pre></td></tr></table></figure>
<p>The expected output should be a path similar to this <code>$HOME/Android/Sdk</code>. After this run:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls -la <span class="variable">$ANDROID_HOME</span></span><br></pre></td></tr></table></figure>
<p>To ensure the folder contains the SDK. The expected output should contain folders like ‘tools’, ‘sources’, ‘platform-tools’, etc.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<p>The output should contain each one entry for the Android SDK ‘tools’-folder and ‘platform-tools’-tools. This could look like this:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/home/your_user/bin:/home/your_user/.<span class="built_in">local</span>/bin:/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/<span class="built_in">local</span>/games:/home/your_user/Android/Sdk/tools:/home/your_user/Android/Sdk/platform-tools</span><br></pre></td></tr></table></figure>
<blockquote>
<p>If you ensured your paths are set correctly and still get the error on <code>cordova requirements</code> you can try the following fix: <a href="https://github.com/meteor/meteor/issues/8464#issuecomment-288112504" target="_blank" rel="noopener">Replacing the Android Studio ‘tools’ folder manually</a></p>
</blockquote>
<h3 id="Setting-Up-Device-on-Linux"><a href="#Setting-Up-Device-on-Linux" class="headerlink" title="Setting Up Device on Linux"></a>Setting Up Device on Linux</h3><p>You may bump into <code>?????? no permissions</code> problem when trying to run your App directly on an Android phone/tablet.</p>
<p>Here’s how you fix this:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create the .rules file and insert the content</span></span><br><span class="line"><span class="comment"># from below this example</span></span><br><span class="line">sudo vim /etc/udev/rules.d/51-android.rules</span><br><span class="line">sudo chmod 644   /etc/udev/rules.d/51-android.rules</span><br><span class="line">sudo chown root. /etc/udev/rules.d/51-android.rules</span><br><span class="line">sudo service udev restart</span><br><span class="line">sudo killall adb</span><br></pre></td></tr></table></figure>
<p>The content for <code>51-android.rules</code>:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0bb4&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0e79&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0502&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0b05&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;413c&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0489&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;091e&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;18d1&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0bb4&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;12d1&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;24e3&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;2116&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0482&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;17ef&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;1004&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;22b8&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0409&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;2080&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0955&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;2257&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;10a9&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;1d4d&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0471&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;04da&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;05c6&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;1f53&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;04e8&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;04dd&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0fce&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0930&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;19d2&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;1bbb&quot;, MODE=&quot;0666&quot;</span><br></pre></td></tr></table></figure></p>
<p>Now running <code>adb devices</code> should discover your device.</p>
<h2 id="iOS-Tips"><a href="#iOS-Tips" class="headerlink" title="iOS Tips"></a>iOS Tips</h2><h3 id="Remote-Debugging-1"><a href="#Remote-Debugging-1" class="headerlink" title="Remote Debugging"></a>Remote Debugging</h3><p>If you are debugging iOS Apps, you can use the Safari developer tools to remotely debug through a USB cable attached to your iOS phone/tablet. It can be used for emulator too.</p>
<p>This way you have Safari developer tools directly for your App running on the emulator/phone/table. Inspect elements, check console output, and so on and so forth.</p>
<p>First enable the “developer” menu option in the Settings of Safari. Then if you navigate to the “developer” menu option you will see your emulator or connected device listed near the top. From here you can open the developer tools.</p>
<h3 id="Status-bar-and-notch-safe-areas"><a href="#Status-bar-and-notch-safe-areas" class="headerlink" title="Status bar and notch safe-areas"></a>Status bar and notch safe-areas</h3><p>Since mobile phones have a status bar and/or notches, your app’s styling might need some tweaking when building on Cordova. In order to prevent parts of your app from going behind the status bar, there is a global CSS variable that can be used for creating a “safe-area”. This variable can then be applied in your app’s top and bottom padding or margin.</p>
<p>Quasar has <a href="https://github.com/quasarframework/quasar/search?q=safe-area-inset-top&amp;unscoped_q=safe-area-inset-top" target="_blank" rel="noopener">support for these CSS safe-areas</a> by default in Layout Header/Footer and Notify. However it’s important to always check your Cordova build on several models to see if all cases of your app are dealing with the safe areas correctly.</p>
<p>In cases you need to manually tweak your CSS you can do so with:<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for your app's header</span></span><br><span class="line"><span class="attribute">padding-top</span> constant(safe-area-inset-top) // for iOS <span class="number">11.0</span></span><br><span class="line"><span class="attribute">padding-top</span> env(safe-area-inset-top) // for iOS <span class="number">11.2</span> +</span><br><span class="line"><span class="comment">// for your app's footer</span></span><br><span class="line"><span class="attribute">padding-bottom</span> constant(safe-area-inset-bottom)</span><br><span class="line"><span class="attribute">padding-bottom</span> env(safe-area-inset-bottom)</span><br></pre></td></tr></table></figure></p>
<p>Of course you can also use the above example with <code>margin</code> instead of <code>padding</code> depending on your app.</p>
<p>In order to make sure these are only added when opened on mobile via the Cordova build, you can check for the CSS class <code>.cordova</code> which is automatically added to the body by Quasar. Eg.</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span><span class="selector-class">.cordova</span> .my-selector</span><br><span class="line">  <span class="attribute">padding-top</span> constant(safe-area-inset-top)</span><br><span class="line">  <span class="attribute">padding-top</span> env(safe-area-inset-top)</span><br></pre></td></tr></table></figure>
<h3 id="Disabling-iOS-rubber-band-effect"><a href="#Disabling-iOS-rubber-band-effect" class="headerlink" title="Disabling iOS rubber band effect"></a>Disabling iOS rubber band effect</h3><p>When building an iOS app with Cordova and you want to disable the rubber band effect (<a href="https://www.youtube.com/watch?v=UjuNGpU29Mk)" target="_blank" rel="noopener">https://www.youtube.com/watch?v=UjuNGpU29Mk)</a>, add this to your <code>/src-cordova/config.xml</code>:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">preference</span> <span class="attr">name</span> = <span class="string">"DisallowOverscroll"</span> <span class="attr">value</span> = <span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Configuring Electron]]></title>
      <url>https://quasar-framework.org/guide/electron-configuring-electron.html</url>
      <content type="html"><![CDATA[<p>We’ll be using Quasar CLI to develop and build an Electron App. The difference between building a SPA, PWA, Mobile App or an Electron App is simply determined by the “mode” parameter in “quasar dev” and “quasar build” commands.</p>
<p>But first, let’s learn how we can configure the Electron build.</p>
<h2 id="Quasar-conf-js"><a href="#Quasar-conf-js" class="headerlink" title="Quasar.conf.js"></a>Quasar.conf.js</h2><p>You may notice that <code>/quasar.conf.js</code> contains a property called <code>electron</code>.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">electron: &#123;</span><br><span class="line">  <span class="comment">// optional; webpack config Object for</span></span><br><span class="line">  <span class="comment">// the Main Process ONLY (/src-electron/main-process/)</span></span><br><span class="line">  extendWebpack (cfg) &#123;</span><br><span class="line">    <span class="comment">// directly change props of cfg;</span></span><br><span class="line">    <span class="comment">// no need to return anything</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// optional; EQUIVALENT to extendWebpack() but uses webpack-chain;</span></span><br><span class="line">  <span class="comment">// for the Main Process ONLY (/src-electron/main-process/)</span></span><br><span class="line">  chainWebpack (chain) &#123;</span><br><span class="line">    <span class="comment">// chain is an webpack-chain instance</span></span><br><span class="line">    <span class="comment">// of the Webpack configuration</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  bundler: <span class="string">'packager'</span>, <span class="comment">// or 'builder'</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// electron-packager options</span></span><br><span class="line">  packager: &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// electron-builder options</span></span><br><span class="line">  builder: &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>The “packager” prop refers to <a href="https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#options" target="_blank" rel="noopener">electron-packager options</a>. The <code>dir</code> and <code>out</code> properties are overwritten by Quasar CLI to ensure the best results.</p>
<p>The “builder” prop refers to <a href="https://www.electron.build/configuration/configuration" target="_blank" rel="noopener">electron-builder options</a>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Electron Build Commands]]></title>
      <url>https://quasar-framework.org/guide/electron-build-commands.html</url>
      <content type="html"><![CDATA[<p><a href="/guide/quasar-cli.html">Quasar CLI</a> makes it incredibly simple to develop or build the final distributables from your source code.</p>
<h2 id="Developing"><a href="#Developing" class="headerlink" title="Developing"></a>Developing</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar dev -m electron</span><br><span class="line"></span><br><span class="line"><span class="comment"># ..or the longer form:</span></span><br><span class="line">$ quasar dev --mode electron</span><br><span class="line"></span><br><span class="line"><span class="comment"># with a specific Quasar theme, for iOS platform:</span></span><br><span class="line">$ quasar dev -m electron -t ios</span><br><span class="line"></span><br><span class="line"><span class="comment"># with a specific Quasar theme, for Android platform:</span></span><br><span class="line">$ quasar dev -m electron -t mat</span><br></pre></td></tr></table></figure>
<p>It opens up an Electron window with dev-tools included. You have HMR for the renderer process and changes to main process are also picked up (but the latter restarts the Electron window on each change).</p>
<p>Check how you can tweak Webpack config Object for the Main Process on <a href="/guide/electron-configuring-electron.html">Configuring Electron</a> page.</p>
<h2 id="Building-for-Production"><a href="#Building-for-Production" class="headerlink" title="Building for Production"></a>Building for Production</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar build -m electron</span><br><span class="line"></span><br><span class="line"><span class="comment"># ..or the longer form:</span></span><br><span class="line">$ quasar build --mode electron</span><br><span class="line"></span><br><span class="line"><span class="comment"># with a specific Quasar theme, for iOS platform:</span></span><br><span class="line">$ quasar build -m electron -t ios</span><br><span class="line"></span><br><span class="line"><span class="comment"># with a specific Quasar theme, for Android platform:</span></span><br><span class="line">$ quasar build -m electron -t mat</span><br></pre></td></tr></table></figure>
<p>It builds your app for production and then uses electron-packager to pack it into an executable. Check how to configure this on <a href="/guide/electron-configuring-electron.html">Configuring Electron</a> page.</p>
<h3 id="A-note-for-non-Windows-users"><a href="#A-note-for-non-Windows-users" class="headerlink" title="A note for non-Windows users"></a>A note for non-Windows users</h3><p>If you want to build for Windows with a custom icon using a non-Windows platform, you must have <a href="https://www.winehq.org/" target="_blank" rel="noopener">wine</a> installed. <a href="https://github.com/electron-userland/electron-packager#building-windows-apps-from-non-windows-platforms" target="_blank" rel="noopener">More Info</a>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Publishing to Store]]></title>
      <url>https://quasar-framework.org/guide/cordova-publishing-to-store.html</url>
      <content type="html"><![CDATA[<p>So, you’ve finished working on your Mobile App. Now it’s time to deploy it. Let’s learn how.</p>
<h2 id="Android-Publishing"><a href="#Android-Publishing" class="headerlink" title="Android Publishing"></a>Android Publishing</h2><p>To generate a release build for Android, we can use the following Quasar CLI command:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar build -m cordova -T android</span><br><span class="line"></span><br><span class="line"><span class="comment"># optionally picking a Quasar theme too</span></span><br><span class="line">$ quasar build -m cordova -T android -t mat</span><br></pre></td></tr></table></figure></p>
<p>This will generate a release build based on the settings in your <code>/src-cordova/config.xml</code>.</p>
<p>Next, we can find our unsigned APK file in <code>/src-cordova/platforms/android/build/outputs/apk</code>. Filename usually ends with “-release-unsigned.apk”. Now, we need to sign the unsigned APK and run an alignment utility on it to optimize it and prepare it for the app store. If you already have a signing key, skip these steps and use that one instead.</p>
<p>Let’s generate our private key using the keytool command that comes with the JDK. If this tool isn’t found, refer to the installation guide:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ keytool -genkey -v -keystore my-release-key.keystore -<span class="built_in">alias</span> alias_name -keyalg RSA -keysize 2048 -validity 20000</span><br></pre></td></tr></table></figure>
<p>You’ll first be prompted to create a password for the keystore. Then, answer the rest of the nice tools’s questions and when it’s all done, you should have a file called my-release-key.keystore created in the current directory.</p>
<blockquote>
<p><strong>Note</strong><br>Make sure to save this file somewhere safe, if you lose it you won’t be able to submit updates to your app!</p>
</blockquote>
<p>To sign the unsigned APK, run the jarsigner tool which is also included in the JDK:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore &lt;path-to-unsigned-apk-file&gt; alias_name</span><br></pre></td></tr></table></figure>
<p>This signs the apk in place. Finally, we need to run the zip align tool to optimize the APK. The zipalign tool can be found in <code>/path/to/Android/sdk/build-tools/VERSION/zipalign</code>. For example, on OS X with Android Studio installed, zipalign is in <code>~/Library/Android/sdk/build-tools/VERSION/zipalign</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ zipalign -v 4 &lt;path-to-same-apk-file&gt; HelloWorld.apk</span><br></pre></td></tr></table></figure>
<p>Now we have our final release binary called HelloWorld.apk and we can release this on the Google Play Store for all the world to enjoy!</p>
<p>(There are a few other ways to sign APKs. Refer to the official Android App Signing documentation for more information.)</p>
<h3 id="Google-Play-Store"><a href="#Google-Play-Store" class="headerlink" title="Google Play Store"></a>Google Play Store</h3><p>Now that we have our release APK ready for the Google Play Store, we can create a Play Store listing and upload our APK.</p>
<p>To start, you’ll need to visit the <a href="https://play.google.com/apps/publish" target="_blank" rel="noopener">Google Play Store Developer Console</a> and create a new developer account. Unfortunately, this is not free. However, the cost is only $25 compared to Apple’s $99.</p>
<p>Once you have a developer account, you can go ahead and click “Publish an Android App on Google Play”.</p>
<p>Then, you can go ahead and click the button to edit the store listing (We will upload an APK later). You’ll want to fill out the description for the app.</p>
<p>When you are ready, upload the APK for the release build and publish the listing. Be patient and your hard work should be live in the wild!</p>
<h3 id="Updating-your-App"><a href="#Updating-your-App" class="headerlink" title="Updating your App"></a>Updating your App</h3><p>As you develop your app, you’ll want to update it periodically.</p>
<p>In order for the Google Play Store to accept updated APKs, you’ll need to bump the app version (from <code>/package.json</code> or from <code>/quasar.conf.js &gt; cordova &gt; version</code>, then rebuild the app for release.</p>
<h2 id="iOS-Publishing"><a href="#iOS-Publishing" class="headerlink" title="iOS Publishing"></a>iOS Publishing</h2><p>First, you need to enroll in <a href="https://developer.apple.com/programs/" target="_blank" rel="noopener">Apple Developer Program</a>. As with Google, if you have a personal account with Apple, you can create an additional one for your applications.</p>
<h3 id="Connecting-Xcode-with-your-developer-account"><a href="#Connecting-Xcode-with-your-developer-account" class="headerlink" title="Connecting Xcode with your developer account"></a>Connecting Xcode with your developer account</h3><p>After you receive your developer status, open Xcode on your Mac and go to Preferences &gt; Accounts. Add your account to Xcode by clicking the <code>+</code> button on the lower left-hand side and follow the instructions.</p>
<h3 id="Signing"><a href="#Signing" class="headerlink" title="Signing"></a>Signing</h3><p>Now that you linked Xcode with your developer account, go to Preferences &gt; Accounts, select your Apple Id on the left-hand side and then click the View Details button shown on the previous image.</p>
<p>Click the Create button next to the iOS Distribution option.</p>
<p>You can learn more about maintaining your signing identities and certificates from the official documentation.</p>
<h3 id="Setting-up-the-app-identifier"><a href="#Setting-up-the-app-identifier" class="headerlink" title="Setting up the app identifier"></a>Setting up the app identifier</h3><p>Next, through the Apple Developer Member Center we’ll set up the app ID identifier details. Identifiers are used to allow an app to have access to certain app services like for example Apple Pay. You can login to Apple Developer Member Center with your Apple ID and password.</p>
<p>Once you’re logged in you should choose Certificates, Identifiers, and Profiles option. Also select the Identifiers option under the iOS Apps. Then select the <code>+</code> button in order to add a new iOS App ID.</p>
<p>Then you’ll have to set the name of your app, use the Explicit App ID option and set the Bundle ID to the value of the id in your Cordova config.xml tag.</p>
<p>Additionally, you’ll have to choose any of the services that need to be enabled. For example, if you use Apple Pay or Wallet in your app, you need to choose those option.</p>
<p>You can learn more about registering app identifiers from the <a href="https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/MaintainingProfiles/MaintainingProfiles.html" target="_blank" rel="noopener">official documentation</a>.</p>
<h3 id="Creating-the-app-listing"><a href="#Creating-the-app-listing" class="headerlink" title="Creating the app listing"></a>Creating the app listing</h3><p>Apple uses iTunes Connect to manage app submissions. After your login, you should select the My Apps button, and on the next screen select the <code>+</code> button, just below the iTunes Connect My Apps header.</p>
<p>This will show three options in a dropdown, and you should select the New App. After this the popup appears where you have to choose the name of the application, platform, primary language, bundle ID and SKU.</p>
<p>Once you’re done, click on the Create button and you’ll be presented with a screen where you’ll have to set some basic options like Privacy Policy URL, category and sub category.</p>
<p>Now, before we fill out everything in the listing, we’ll build our app and get it uploaded with Xcode. Then you’ll come back to finish the listing.</p>
<p>You can learn more about managing your app in iTunes Connect from the <a href="https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/UsingiTunesConnect/UsingiTunesConnect.html" target="_blank" rel="noopener">official documentation</a>.</p>
<h3 id="Building-the-app-for-production"><a href="#Building-the-app-for-production" class="headerlink" title="Building the app for production"></a>Building the app for production</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar build -m cordova -T [android|ios] -t [mat|ios]</span><br></pre></td></tr></table></figure>
<p>If everything went well you’ll see the <code>BUILD SUCCEEDED</code> output in the console.</p>
<h3 id="Opening-the-project-in-Xcode"><a href="#Opening-the-project-in-Xcode" class="headerlink" title="Opening the project in Xcode"></a>Opening the project in Xcode</h3><p>Now, open the <code>/src-cordova/platforms/ios/&lt;name&gt;.xcodeproj</code> file in Xcode.</p>
<p>Once the Xcode opens up the project, you should see the details about your app in the general view.</p>
<p>You should just check that the bundle identifier is set up correctly, so that it’s the same as the value you specified earlier in the app ID. Also, make sure that the version and build numbers are correct. Team option should be set to your Apple developer account. Under the deployment target you can choose which devices your application will support.</p>
<h3 id="Creating-an-archive-of-the-application"><a href="#Creating-an-archive-of-the-application" class="headerlink" title="Creating an archive of the application"></a>Creating an archive of the application</h3><p>In Xcode, select Product &gt; Scheme &gt; Edit Scheme to open the scheme editor. Next, select the Archive from the list on the left-hand side. Make sure that the Build configuration is set to Release.</p>
<p>To create an archive, choose a Generic iOS Device, or your device if it’s connected to your Mac (you can’t create an archive if simulator is selected), from the Scheme toolbar menu in the project editor.</p>
<p>Next, select Product &gt; Archive, and the Archive organizer appears and displays the new archive.</p>
<p>At this point you can click the <code>Upload to App Store...</code> button, and if everything goes fine you’ll have an uploaded app, and the only thing that’s left to do is to complete the iTunes Connect listing and submit it for review!</p>
<p>At this point you should get an email from iTunes Connect shortly after you uploaded the archive with the content.</p>
<h3 id="Finishing-the-app-list-process"><a href="#Finishing-the-app-list-process" class="headerlink" title="Finishing the app list process"></a>Finishing the app list process</h3><p>Now you should head back to the iTunes Connect portal and login. Next, click on the Pricing and Availability on the left-hand side under APP STORE INFORMATION.</p>
<p>You don’t have to worry about forgetting to insert any crucial and required information about your application, since you’ll be notified about what’s missing and what needs to be added/changed if you try to submit the app for review before all details are filled in.</p>
<p>Next, click on the 1.0 Prepare for Submission button on the left-hand side, as shown on the image below. When we uploaded our archive, iTunes Connect automatically determined which device sizes are supported. You’ll need to upload at least one screenshot image for each of the various app sizes that were detected by iTunes Connect.</p>
<p>Next, you’ll have to insert Description, Keywords, Support URL and Marketing URL (optionally).</p>
<p>In the Build section you have to click on the <code>+</code> button and select the build that was uploaded through Xcode in the previous steps.</p>
<p>Next, you’ll have to upload the icon, edit the rating, and set some additional info like copyright and your information. Note that the size of the icon that you’ll have to upload here will have to be 1024 by 1024 pixels. Thankfully, you can use the splash.png from the second tutorial. If you’re the sole developer then the data in the App Review Information should be your own. Finally, as the last option, you can leave the default checked option that once your app is approved that it is automatically released to the App Store.</p>
<p>Now that we’re finished with adding all of the details to the app listing, we can press Save and then Submit for Review. Finally, you’ll be presented with the last form that you’ll have to fill out.</p>
<p>After you submit your app for review you’ll see the status of it in the My Apps as Waiting for review, as shown on the image below. Also, shortly after you submit your app for review you’ll get a confirmation email from iTunes Connect that your app is in review.</p>
<p>Apple prides itself with a manual review process, which basically means it can take several days for your app to be reviewed. You’ll be notified of any issues or updates to your app status.</p>
<h3 id="Updating-the-app"><a href="#Updating-the-app" class="headerlink" title="Updating the app"></a>Updating the app</h3><p>Since you’ll probably want to update your app at some point you’ll first need to bump the app version (from <code>/package.json</code> or from <code>/quasar.conf.js &gt; cordova &gt; version</code>, then rebuild the app for release. Finally, you’ll have to open it up from the Xcode and follow the same steps all over again.</p>
<p>Once you submit for the review, you’ll have to wait for the review process again.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[What is Electron]]></title>
      <url>https://quasar-framework.org/guide/electron-introduction.html</url>
      <content type="html"><![CDATA[<p><a href="https://electronjs.org/" target="_blank" rel="noopener">Electron</a> (formerly known as Atom Shell) is an open-source framework created by Cheng Zhao, and now developed by GitHub. <strong>It allows for the development of desktop GUI applications</strong> using front and back end components originally developed for web applications: Node.js runtime for the backend and Chromium for the frontend. Electron is the main GUI framework behind several notable open-source projects including GitHub’s Atom and Microsoft’s Visual Studio Code source code editors, the Tidal music streaming service desktop application and the Light Table IDE, in addition to the freeware desktop client for the Discord chat service.</p>
<p>Each Electron app has two threads: one is the main thread (dealing with the App window and bootup), and one is the renderer thread (which is basically your web code UI).</p>
<h2 id="Renderer-Thread"><a href="#Renderer-Thread" class="headerlink" title="Renderer Thread"></a>Renderer Thread</h2><p>Electron uses Chromium for displaying web pages in a separate process called the render process. This thread deals with your UI code in <code>/src</code> folder.</p>
<p>In normal browsers, web pages usually run in a sand-boxed environment and are not allowed access to native resources. For Electron users, however, you got the power to use Node.js APIs in web pages allowing lower level operating system interactions.</p>
<h2 id="Main-Thread"><a href="#Main-Thread" class="headerlink" title="Main Thread"></a>Main Thread</h2><p>In Electron, the process that runs package.json’s main script is called the main process. The script that runs in the main process and can display a GUI by initializing the renderer thread.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Electron Packages]]></title>
      <url>https://quasar-framework.org/guide/electron-packages.html</url>
      <content type="html"><![CDATA[<p>You can npm/yarn install and use <a href="https://electronjs.org/userland/most_downloaded_packages" target="_blank" rel="noopener">Electron specific packages</a> in your app. Take a look at the link and choose wisely if you need to.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Electron Preparation]]></title>
      <url>https://quasar-framework.org/guide/electron-preparation.html</url>
      <content type="html"><![CDATA[<p>Before we dive in to the actual development, we need to do some preparation work.</p>
<h2 id="1-Add-Quasar-Electron-Mode"><a href="#1-Add-Quasar-Electron-Mode" class="headerlink" title="1. Add Quasar Electron Mode"></a>1. Add Quasar Electron Mode</h2><p>In order to develop/build a Quasar Electron app, we need to add the Electron mode to our Quasar project. What this does is that it npm installs some Electron packages and creates <code>/src-electron</code> folder.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar mode -a electron</span><br></pre></td></tr></table></figure></p>
<p>Every Electron app has two threads: the main thread (deals with the window and initialization code – from the newly created folder <code>/src-electron</code>) and the renderer thread (which deals with the actual content of your app from <code>/src</code>).</p>
<p>The new folder has the following structure:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">└── src-electron/</span><br><span class="line">    ├── icons/                 <span class="comment"># Icons of your app for all platforms</span></span><br><span class="line">    |   ├── icon.icns             <span class="comment"># Icon file for Darwin (MacOS) platform</span></span><br><span class="line">    |   ├── icon.ico              <span class="comment"># Icon file for win32 (Windows) platform</span></span><br><span class="line">    |   └── linux-256x256.png     <span class="comment"># Icon file for Linux platform</span></span><br><span class="line">    └── main-process/          <span class="comment"># Main thread source code</span></span><br><span class="line">        ├── electron-main.dev.js  <span class="comment"># Main thread code while developing; read below</span></span><br><span class="line">        └── electron-main.js      <span class="comment"># Main thread code for production</span></span><br></pre></td></tr></table></figure></p>
<p>When you add the Quasar Electron mode, you’ll notice that a few npm packages are installed. These are Electron specific and since Electron doesn’t follow the semver notation, it’s best that you lock the installed versions. Otherwise, other developers working on the same project may end up using on different Electron version – room for trouble. Electron makes releases quite often so features are always <a href="http://electron.atom.io/docs/tutorial/electron-versioning/" target="_blank" rel="noopener">subject to change</a>.</p>
<h3 id="Electron-main-dev-js"><a href="#Electron-main-dev-js" class="headerlink" title="Electron-main.dev.js"></a>Electron-main.dev.js</h3><p>This file (<code>/src-electron/main-process/electron-main.dev.js</code>) is used specifically for development and is used to install dev-tools. Usually it should not have to be modified, but can be used to extend your development needs. After it sets up dev-tools it imports the <code>electron-main.js</code> which is the place you’ll make most (if not all) of your changes.</p>
<h3 id="A-note-for-Windows-Users"><a href="#A-note-for-Windows-Users" class="headerlink" title="A note for Windows Users"></a>A note for Windows Users</h3><p>If you run into errors during npm install about node-gyp, then you most likely do not have the proper build tools installed on your system. Build tools include items like Python and Visual Studio. Fortunately, there are a few packages to help simplify this process.</p>
<p>The first item we need to check is our npm version and ensure that it is not outdated. This is accomplished using <a href="https://github.com/felixrieseberg/npm-windows-upgrade" target="_blank" rel="noopener">npm-windows-upgrade</a>. If you are using yarn, then you can skip this check.</p>
<p>Once that is complete, we can then continue to setup the needed build tools. Using <a href="https://github.com/felixrieseberg/windows-build-tools" target="_blank" rel="noopener">windows-build-tools</a>, most of the dirty work is done for us. Installing this globally will in turn setup Visual C++ packages, Python, and more.</p>
<p>At this point things should successfully install, but if not then you will need a clean installation of Visual Studio. Please note that these are not problems with Quasar, but they are related to NPM and Windows.</p>
<h2 id="2-Start-Developing"><a href="#2-Start-Developing" class="headerlink" title="2. Start Developing"></a>2. Start Developing</h2><p>If you want to jump right in and start developing, you can skip the previous step with “quasar mode” command and issue:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar dev -m electron -t [mat|ios]</span><br></pre></td></tr></table></figure></p>
<p>This will add Electron mode automatically, if it is missing.<br>It will open up an Electron window which will render your app along with Developer Tools opened side by side.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Electron Static Assets]]></title>
      <url>https://quasar-framework.org/guide/electron-static-assets.html</url>
      <content type="html"><![CDATA[<p>Please read about <a href="/guide/app-handling-assets.html">Handling Assets</a> first, which applies to the renderer process. However, when we deal with Electron then Quasar CLI offers a handy <code>__static</code> variable in addition. Statics can be consumed by both the main process and renderer process, but since the paths change when building for production (due to packaging), then usage with <code>fs</code> and other modules that need a full path can be a little tricky. So <code>__statics</code> can come into play.</p>
<h2 id="On-the-subject-of-using-dirname-amp-filename"><a href="#On-the-subject-of-using-dirname-amp-filename" class="headerlink" title="On the subject of using dirname &amp; filename"></a>On the subject of using <strong>dirname &amp; </strong>filename</h2><p>Since the main process is bundled using webpack, the use of <code>__dirname</code> and <code>__filename</code> will not provide an expected value in production. Referring to the File Tree, you’ll notice that in production the electron-main.js is placed inside the <code>dist/electron-*</code> folder. Based on this knowledge, use <code>__dirname</code> &amp; <code>__filename</code> accordingly.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">app.asar</span><br><span class="line">└─ dist</span><br><span class="line">   └─ electron-*</span><br><span class="line">      ├─ statics/</span><br><span class="line">      ├─ js/...</span><br><span class="line">      ├─ node_modules/</span><br><span class="line">      ├─ index.html</span><br><span class="line">      ├─ package.json</span><br><span class="line">      └─ electron-main.js</span><br></pre></td></tr></table></figure>
<h2 id="Static-assets-with-fs-path-and-statics"><a href="#Static-assets-with-fs-path-and-statics" class="headerlink" title="Static assets with fs, path and __statics"></a>Static assets with fs, path and __statics</h2><p>Let’s say we have a static asset that we need to read into our application using <code>fs</code>, but how do we get a reliable path, in both development and production, to the statics/ folder? Quasar provides a global variable named <code>__statics</code> that will yield a proper path to it. Here’s how we can use it to read a simple text file in both development and production.</p>
<p>Let’s assume we have a file called <code>someFile.txt</code> in <code>/src/statics</code>. Now, in main or renderer process, we can access it like this:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// main or renderer process</span><br><span class="line"></span><br><span class="line">import fs from <span class="string">'fs'</span></span><br><span class="line">import path from <span class="string">'path'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> fileContents = fs.readFileSync(path.join(__statics, <span class="string">'/someFile.txt'</span>), <span class="string">'utf8'</span>)</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Introduction to the Quasar Framework]]></title>
      <url>https://quasar-framework.org/guide/introduction-to-quasar.html</url>
      <content type="html"><![CDATA[<p><img src="/images/responsive-logo.png" alt="Quasar - Empowering your websites and apps"></p>
<h2 id="What-is-Quasar"><a href="#What-is-Quasar" class="headerlink" title="What is Quasar?"></a>What is Quasar?</h2><p>Quasar (pronounced /ˈkweɪ.zɑɹ/) is an MIT licensed open-source framework (powered with <a href="https://vuejs.org/" target="_blank" rel="noopener">Vue</a>) that helps web developers create responsive++ websites/apps in many flavours:</p>
<ul>
<li>SPAs (Single Page App)</li>
<li>SSR (Server-side Rendered App) (+ optional PWA client takeover)</li>
<li>PWAs (Progressive Web App)</li>
<li>Mobile Apps (Android, iOS, …) through Apache Cordova</li>
<li>Multi-platform Desktop Apps (using Electron)</li>
</ul>
<p><strong>Quasar allows developers to write code once and simultaneously deploy</strong> as website (SPA, PWA, SSR + SPA client takeover, SSR + PWA client takeover), Mobile App and/or Electron App <strong>using the same codebase</strong>. Design an app in record time, using a state of the art CLI and backed by well-written, very fast Quasar web components.</p>
<p>When using Quasar, you won’t need additional heavy libraries like Hammerjs, Momentjs or Bootstrap. It’s got that covered too, and with a small footprint!</p>
<h2 id="Why-Quasar"><a href="#Why-Quasar" class="headerlink" title="Why Quasar?"></a>Why Quasar?</h2><p>Because of what is offered out of the box. Follow our <a href="https://twitter.com/quasarframework" target="_blank" rel="noopener">Twitter</a> account for testimonials.</p>
<h3 id="All-Platforms-in-One-Go"><a href="#All-Platforms-in-One-Go" class="headerlink" title="All Platforms in One Go"></a>All Platforms in One Go</h3><p>One authoritative source of code for all platforms, simultaneously: responsive desktop/mobile websites (SPA, SSR + SPA client takeover, SSR + PWA client takeover), PWAs (Progressive Web Apps), mobile apps (that look native) and multi-platform desktop apps (through Electron).</p>
<h3 id="Top-class-fast-web-responsive-components"><a href="#Top-class-fast-web-responsive-components" class="headerlink" title="Top class, fast web responsive components"></a>Top class, fast web responsive components</h3><p>There’s a component for almost every web development need out there. Each of these components is carefully crafted to offer the best possible experience to users. Quasar is <strong>designed with performance &amp; responsiveness in mind</strong> – so the overhead of using Quasar is barely noticeable. This is an area we take special pride in.</p>
<h3 id="Best-practices-integrated-by-default"><a href="#Best-practices-integrated-by-default" class="headerlink" title="Best practices integrated by default"></a>Best practices integrated by default</h3><p>Developers using Quasar are encouraged to follow web development best practices, and it comes embedded with many such features out of the box. HTML/CSS/JS minification, cache busting, tree shaking, sourcemapping, code-splitting &amp; lazy loading, ES6 transpiling, linting code, accessibility features. Quasar takes care of all these and more - no configuration needed.</p>
<h3 id="Full-RTL-Support"><a href="#Full-RTL-Support" class="headerlink" title="Full RTL Support"></a>Full RTL Support</h3><p>RTL (right to left) support for both Quasar components &amp; the developer’s own code. Developer-written website/app CSS code gets automatically converted to RTL if an RTL language pack is used.</p>
<h3 id="Two-Themes-more-to-come"><a href="#Two-Themes-more-to-come" class="headerlink" title="Two Themes (more to come)"></a>Two Themes (more to come)</h3><p>The framework supports two of the most commonly used themes out of the box – Material theme and iOS theme.</p>
<h3 id="Progressively-migrate-your-existing-project"><a href="#Progressively-migrate-your-existing-project" class="headerlink" title="Progressively migrate your existing project"></a>Progressively migrate your existing project</h3><p>Quasar offers a UMD (Unified Module Definition) version, which means developers can add a CSS and JS HTML tag into their existing project and they’re ready to use it. No build step is required.</p>
<h3 id="Unparalleled-developer-experience-through-Quasar-CLI"><a href="#Unparalleled-developer-experience-through-Quasar-CLI" class="headerlink" title="Unparalleled developer experience through Quasar CLI"></a>Unparalleled developer experience through Quasar CLI</h3><p>When using Quasar’s CLI, developers benefit from:</p>
<ul>
<li>State preserving hot-reload when making changes to app source code, no matter if it’s a website, PWA, a Mobile App (directly on a phone or on an emulator) or an Electron app. Developers simply change their code and they can watch it get updated on the fly, without the need of any page refresh.</li>
<li>State preserving compilation error overlay.</li>
<li>Lint-on-save with ESLint – if developers like linting their code only</li>
<li>ES6 code transpiling</li>
<li>Sourcemaps</li>
<li>Changing build options doesn’t require a manual reload of the dev server</li>
<li>Many more leading-edge developer tools and techniques</li>
</ul>
<h3 id="Get-up-to-speed-fast"><a href="#Get-up-to-speed-fast" class="headerlink" title="Get up to speed fast"></a>Get up to speed fast</h3><p>The top-class project intitialization feature of the CLI makes getting started very easy for you, as a developer. You can get your idea to reality in record time. In other words, Quasar does the heavy lifting for you, so you are free to focus on your features and not on boilerplate.</p>
<h3 id="Awesome-ever-growing-community"><a href="#Awesome-ever-growing-community" class="headerlink" title="Awesome ever-growing community"></a>Awesome ever-growing community</h3><p>When developers encounter a problem they can’t solve, they can visit the Quasar forum or <a href="https://discord.gg/5TDhbDg" target="_blank" rel="noopener">Discord chat server</a>. The community is there to help you.</p>
<h3 id="Wide-platform-support"><a href="#Wide-platform-support" class="headerlink" title="Wide platform support"></a>Wide platform support</h3><p>Google Chrome, Firefox, IE11/Edge, Safari, Opera, iOS, Android, Windows Phone, Blackberry.</p>
<h3 id="Quasar-components-Internationalization-I18n"><a href="#Quasar-components-Internationalization-I18n" class="headerlink" title="Quasar components Internationalization (I18n)"></a>Quasar components Internationalization (I18n)</h3><p>I18n is provided by default for Quasar components. If your language pack is missing it takes just 5 minutes to add it.</p>
<h3 id="Great-documentation"><a href="#Great-documentation" class="headerlink" title="Great documentation"></a>Great documentation</h3><p>Finally, it’s worth mentioning the significant amount of time that is spent on writing great, bloat-free, focused, complete documentation pages so that developers can quickly pick up Quasar. There will be no room for confusion.</p>
<h2 id="Underlying-technologies"><a href="#Underlying-technologies" class="headerlink" title="Underlying technologies"></a>Underlying technologies</h2><p><a href="https://vuejs.org/" target="_blank" rel="noopener">Vue</a>, <a href="https://babeljs.io/" target="_blank" rel="noopener">Babel</a>, <a href="https://webpack.js.org/" target="_blank" rel="noopener">Webpack</a>, <a href="https://cordova.apache.org/" target="_blank" rel="noopener">Cordova</a>, <a href="https://electronjs.org/" target="_blank" rel="noopener">Electron</a>.</p>
<p>Except for Vue, which takes half a day to pick up and will change you forever, you are not really required to know the other technologies. Most of them are integrated and already configured for you.</p>
<h2 id="Get-started-in-under-a-minute"><a href="#Get-started-in-under-a-minute" class="headerlink" title="Get started in under a minute"></a>Get started in under a minute</h2><p>Having said this, let’s <a href="/guide/index.html">get started</a>! You’ll be running a website or app in under a minute.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Getting Started - Installation]]></title>
      <url>https://quasar-framework.org/guide/index.html</url>
      <content type="html"><![CDATA[<p><strong>If you would like to learn what Quasar is all about and what it can do for you</strong>, read the <a href="/guide/introduction-to-quasar.html">Introduction to Quasar</a>. Otherwise, let’s get started by choosing how you’d like to use Quasar. There are three methods for using Quasar:</p>
<ul>
<li>UMD/Standalone (embed into an existing project through CDN, progressive integration)</li>
<li>Development with Quasar CLI (<strong>the premium developer experience, recommended</strong>)</li>
<li>Vue CLI 3 plugin</li>
</ul>
<p>Here’s a comparison:</p>
<table>
<thead>
<tr>
<th>Feature</th>
<th>UMD</th>
<th>Quasar CLI</th>
<th>Vue CLI 3 Plugin</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ability to embed into an existing project</td>
<td><strong>Yes</strong></td>
<td>-</td>
<td><strong>Yes, if it is Vue CLI app</strong></td>
</tr>
<tr>
<td>Progressive integration of Quasar</td>
<td><strong>Yes</strong></td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Ability to serve Quasar from CDN</td>
<td><strong>Yes</strong></td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Build SPA, PWA</td>
<td><strong>Yes</strong></td>
<td><strong>Yes</strong></td>
<td><strong>Yes</strong></td>
</tr>
<tr>
<td>Build SSR (+ optional PWA client takeover)</td>
<td>-</td>
<td><strong>Yes</strong></td>
<td>??</td>
</tr>
<tr>
<td>Build Mobile Apps, Electron Apps</td>
<td><strong>Yes</strong></td>
<td><strong>Yes</strong></td>
<td>-</td>
</tr>
<tr>
<td>Dynamic RTL support for Quasar components</td>
<td><strong>Yes</strong></td>
<td><strong>Yes</strong></td>
<td><strong>Yes</strong></td>
</tr>
<tr>
<td>Generating your own website/app RTL equivalent CSS rules automatically by Quasar</td>
<td>-</td>
<td><strong>Yes</strong></td>
<td><strong>Yes</strong></td>
</tr>
<tr>
<td>Take advantage of Quasar CLI for a stellar developer experience</td>
<td>-</td>
<td><strong>Yes</strong></td>
<td>-</td>
</tr>
<tr>
<td>Tree Shaking</td>
<td>-</td>
<td><strong>Yes</strong></td>
<td><strong>Yes</strong></td>
</tr>
<tr>
<td>SFC (Single File Component - for Vue)</td>
<td>-</td>
<td><strong>Yes</strong></td>
<td><strong>Yes</strong></td>
</tr>
<tr>
<td>Advanced configuration through dynamic quasar.conf.js</td>
<td>-</td>
<td><strong>Yes</strong></td>
<td>-</td>
</tr>
<tr>
<td>Unit &amp; end to end testing</td>
<td>-</td>
<td><strong>Not yet</strong></td>
<td><strong>Yes</strong></td>
</tr>
</tbody>
</table>
<blockquote>
<p>If you are upgrading from previous Quasar versions, check the <a href="/guide/quasar-upgrade-guide.html">Upgrade Guide</a>.</p>
</blockquote>
<h2 id="UMD-Standalone-uses-CDN"><a href="#UMD-Standalone-uses-CDN" class="headerlink" title="UMD / Standalone (uses CDN)"></a>UMD / Standalone (uses CDN)</h2><p>If you’d like to embed Quasar into your existing website project, integrating it in a progressive manner, then go for the UMD/Standalone (Unified Module Definition) version. There is a helper UMD starter kit, which will show you how to get started and what CSS and JS tags to include into your project. While installing the UMD kit, the CLI will ask you some questions (what Quasar theme will you be using, what Quasar I18n to include, …) and it will generate a simple HTML file that will demo how to use CDN to add Quasar:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># make sure you have @vue-cli (Vue CLI 3.0) globally installed</span></span><br><span class="line"><span class="comment"># Node.js &gt;= 8.9.0 is required.</span></span><br><span class="line"></span><br><span class="line">$ npm install -g vue-cli <span class="comment"># or @vue/cli @vue/cli-init // recommended</span></span><br><span class="line"><span class="comment"># or:</span></span><br><span class="line">$ yarn global add vue-cli <span class="comment"># or @vue/cli @vue/cli-init</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># then...</span></span><br><span class="line">$ vue init quasarframework/quasar-starter-kit-umd &lt;folder_name&gt;</span><br></pre></td></tr></table></figure>
<p>And you’re done. Inspect the <code>index.html</code> file that was created in the new folder and learn how you can embed Quasar. You may want to repeat the step above to experiment with different setups based on the answers you give.</p>
<p>Now head on to read about <a href="/guide/embedding-quasar.html">UMD/Standalone</a>.</p>
<h2 id="Development-with-Quasar-CLI-The-best-developer-experience"><a href="#Development-with-Quasar-CLI-The-best-developer-experience" class="headerlink" title="Development with Quasar CLI (The best developer experience)"></a>Development with Quasar CLI (The best developer experience)</h2><p>If you want to be able to build:</p>
<ul>
<li>a SPA (Single Page Application/Website),</li>
<li>a SSR (Server-side Rendered App/Website),</li>
<li>a PWA (Progressive Web App),</li>
<li>a Mobile App (through Cordova),</li>
<li>an Electron App,<br>…and</li>
<li>benefit from from a faster developement workflow provided by the Quasar CLI, with HMR (Hot Module Reload)</li>
<li><strong>share the same base-code for all those modes</strong></li>
<li>benefit from the latest web recommended practices out of the box</li>
<li>ability to write ES6 code</li>
<li>benefit from Tree Shaking</li>
<li>get your code optimized, minified, bundled in the best possible way</li>
<li>ability to write SFC (Single File Component - for Vue)</li>
</ul>
<p>…then go for the best developer experience:</p>
<p>First, we will need to install Quasar CLI. Make sure you have Node &gt;=8 and NPM &gt;=5 or Yarn installed on your machine. We’ll also be installing Vue CLI, which is only used internally by Quasar for creating an initial Quasar application project. Both version 2 and 3 of Vue CLI will work for this.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install vue-cli globally</span></span><br><span class="line">$ npm install -g vue-cli <span class="comment"># or @vue/cli @vue/cli-init // recommended</span></span><br><span class="line"><span class="comment"># or:</span></span><br><span class="line">$ yarn global add vue-cli <span class="comment"># or @vue/cli @vue/cli-init</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Node.js &gt;= 8.9.0 is required.</span></span><br><span class="line">$ npm install -g quasar-cli // recommended</span><br><span class="line"><span class="comment"># or:</span></span><br><span class="line">$ yarn global add quasar-cli</span><br></pre></td></tr></table></figure>
<p>With Quasar CLI globally installed, we can now create a new project:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar init &lt;folder_name&gt;</span><br></pre></td></tr></table></figure></p>
<p>Note that you don’t need different projects, in order to build any one of the application options described above. This one project folder can seamlessly handle all of them.</p>
<p>To understand more about Quasar CLI, be sure to familiarize yourself <a href="/guide/quasar-cli.html">with the guide</a>. With this knowledge under your belt, you’ll be able to take full advantage of all of Quasar CLI’s many great features.</p>
<h2 id="Vue-CLI-3-plugin"><a href="#Vue-CLI-3-plugin" class="headerlink" title="Vue CLI 3 plugin"></a>Vue CLI 3 plugin</h2><p>To work with Quasar via a Vue CLI plugin, you will need to make sure you have vue-cli 3.x.x installed globally. To make sure you have Vue CLI 3.0, use this command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vue --version</span><br></pre></td></tr></table></figure>
<p>You should see something like: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vue --version</span><br><span class="line">3.2.3</span><br></pre></td></tr></table></figure>
<p>Should you have Vue CLI 2.x.x. installed, you’ll need to uninstall it with:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm uninstall -g vue-cli</span><br><span class="line"><span class="comment"># or: </span></span><br><span class="line">$ yarn global remove vue-cli</span><br></pre></td></tr></table></figure>
<p>and then install Vue CLI 3.0 as follows: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn global add @vue/cli</span><br><span class="line"><span class="comment"># or:</span></span><br><span class="line">$ npm install -g @vue/cli // recommended</span><br></pre></td></tr></table></figure>
<p>If you don’t yet have a project created with vue-cli 3.x, then do so with:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vue create my-app</span><br></pre></td></tr></table></figure>
<p>Navigate to the newly created project folder and add the cli plugin. Before installing it, make sure to commit your current changes should you wish to revert them later.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> my-app</span><br><span class="line">$ vue add quasar</span><br></pre></td></tr></table></figure>
<p>The CLI will ask you if you want the plugin to replace some existing files. It is recommended that you do this, if you wish to have an example, so you can quickly develop your app.</p>
<p>Your Vue config (in package.json or vue.config.js file, depending on what you chose when you created your vue app) will also contain a <code>quasar</code> object. The most important property is <code>theme</code> (with possible values “mat” or “ios”), which you can later change, if you’d like.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UMD Starter Kit - CDN install]]></title>
      <url>https://quasar-framework.org/guide/embedding-quasar.html</url>
      <content type="html"><![CDATA[<p>If you want to embed Quasar into your existing website project, integrating it in a progressive manner, then go for the UMD/Standalone (Unified Module Definition) version.</p>
<h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>UMD is all about adding Quasar style and javascript tags. This is a full list. Choose only what you use.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Do you need Material Icons? --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900|Material+Icons"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Do you need Fontawesome? --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://use.fontawesome.com/releases/v5.0.13/css/all.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Do you need Ionicons? --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/ionicons@^4.0.0/dist/css/ionicons.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Do you need MDI? --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/@mdi/font@^2.0.0/css/materialdesignicons.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Do you need all animations? --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/animate.css@^3.5.2/animate.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    Finally, add Quasar's CSS:</span></span><br><span class="line"><span class="comment">    Replace version below (0.17.8) with your desired version of Quasar.</span></span><br><span class="line"><span class="comment">    Replace ".mat" with ".ios" for the iOS theme.</span></span><br><span class="line"><span class="comment">    Add ".rtl" for the RTL support (example: quasar.mat.rtl.min.css).</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/quasar-framework@0.17.8/dist/umd/quasar.mat.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Do you want IE support? Replace "0.17.8" with your desired Quasar version --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/quasar-framework@0.17.8/dist/umd/quasar.ie.polyfills.umd.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- You need Vue too --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@latest/dist/vue.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    Add Quasar's JS:</span></span><br><span class="line"><span class="comment">    Replace version below (0.17.8) with your desired version of Quasar.</span></span><br><span class="line"><span class="comment">    Replace ".mat" with ".ios" for the iOS theme.</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/quasar-framework@0.17.8/dist/umd/quasar.mat.umd.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    If you want to add a Quasar I18n language pack (other than "en-us").</span></span><br><span class="line"><span class="comment">    Notice "pt-br" in "i18n.pt-br.umd.min.js" for Brazilian Portuguese language pack.</span></span><br><span class="line"><span class="comment">    Replace version below (0.17.8) with your desired version of Quasar.</span></span><br><span class="line"><span class="comment">    Also check final &lt;script&gt; tag below to enable the language</span></span><br><span class="line"><span class="comment">    Language pack list: https://github.com/quasarframework/quasar/tree/dev/i18n</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/quasar-framework@0.17.8/dist/umd/i18n.pt-br.umd.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    If you want to make Quasar use a specific set of icons (unless you're using Material Icons already).</span></span><br><span class="line"><span class="comment">    Replace version below (0.17.8) with your desired version of Quasar.</span></span><br><span class="line"><span class="comment">    Icon sets list: https://github.com/quasarframework/quasar/tree/dev/icons</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/quasar-framework@0.17.8/dist/umd/icons.fontawesome.umd.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// if using a Quasar language pack other than the default "en-us";</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// requires the language pack style tag from above</span></span></span><br><span class="line"><span class="javascript">    Quasar.i18n.set(Quasar.i18n.ptBr) <span class="comment">// notice camel-case "ptBr"</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// if you want Quasar components to use a specific icon library</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// other than the default Material Icons;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// requires the icon set style tag from above</span></span></span><br><span class="line"><span class="javascript">    Quasar.icons.set(Quasar.icons.fontawesome) <span class="comment">// fontawesome is just an example</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    /*</span></span><br><span class="line"><span class="undefined">      Example kicking off the UI.</span></span><br><span class="line"><span class="javascript">      Obviously, adapt <span class="keyword">this</span> your specific needs.</span></span><br><span class="line"><span class="undefined">     */</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// custom component example, assumes you have a &lt;div id="my-page"&gt;&lt;/div&gt; in your &lt;body&gt;</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'my-page'</span>, &#123;</span></span><br><span class="line"><span class="javascript">      template: <span class="string">'#my-page'</span></span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// start the UI; assumes you have a &lt;div id="q-app"&gt;&lt;/div&gt; in your &lt;body&gt;</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#q-app'</span>,</span></span><br><span class="line"><span class="javascript">      data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      methods: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// ...etc</span></span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h4><p>One other quick way to get necessary tags based on your requirements is to use the UMD starter kit. It will ask you some questions and will generate a simple HTML file that will show you how to use CDN to add Quasar:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vue init quasarframework/quasar-starter-kit-umd &lt;folder_name&gt;</span><br></pre></td></tr></table></figure>
<p>And you’re done. Inspect <code>index.html</code> file that was created in the new folder and learn how you can embed Quasar. Notice the <code>&lt;style&gt;</code> and <code>&lt;script&gt;</code> tags and their order.</p>
<p>Notice that as opposed to the Main Starter Kit, you don’t need to import anything. All components, directives and Quasar plugins are ready to be used out of the box.</p>
<p>However, the disadvantage is that you won’t benefit from the top notch development experience provided by Quasar CLI – which allows you to simultaneously develop and build SPA, PWA, Mobile and Electron Apps.</p>
<h3 id="JsFiddle-Codepen"><a href="#JsFiddle-Codepen" class="headerlink" title="JsFiddle / Codepen"></a>JsFiddle / Codepen</h3><p>You can fork and use these links for reporting issues on Github too:</p>
<table>
<thead>
<tr>
<th></th>
<th>Material Theme</th>
<th>iOS Theme</th>
</tr>
</thead>
<tbody>
<tr>
<td>jsFiddle</td>
<td><a href="https://jsfiddle.net/rstoenescu/waugrryy/" target="_blank" rel="noopener">https://jsfiddle.net/rstoenescu/waugrryy/</a></td>
<td><a href="https://jsfiddle.net/rstoenescu/7gu065yg/" target="_blank" rel="noopener">https://jsfiddle.net/rstoenescu/7gu065yg/</a></td>
</tr>
<tr>
<td>Codepen</td>
<td><a href="https://codepen.io/rstoenescu/pen/KQRZJg" target="_blank" rel="noopener">https://codepen.io/rstoenescu/pen/KQRZJg</a></td>
<td><a href="https://codepen.io/rstoenescu/pen/paVpBN" target="_blank" rel="noopener">https://codepen.io/rstoenescu/pen/paVpBN</a></td>
</tr>
</tbody>
</table>
<p>These links (obviously) use the Quasar UMD version.</p>
<h2 id="Quasar-Global-Object"><a href="#Quasar-Global-Object" class="headerlink" title="Quasar Global Object"></a>Quasar Global Object</h2><p>When you embed Quasar UMD into a webpage you’ll get a <code>Quasar</code> global Object injected:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Quasar = &#123;</span><br><span class="line">  version,</span><br><span class="line">  theme: <span class="string">'mat'</span>, <span class="comment">// or 'ios', based on the theme you are using from CDN</span></span><br><span class="line">                <span class="comment">// -- must match both .js and .css CDN links to point to same theme</span></span><br><span class="line">  plugins,</span><br><span class="line">  utils,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if you want to extend Quasar's components or directives</span></span><br><span class="line">  components,</span><br><span class="line">  directives,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if you want to change current icon set or Quasar I18n language</span></span><br><span class="line">  <span class="comment">// (must include CDN links so they are available first!)</span></span><br><span class="line">  i18n,</span><br><span class="line">  icons</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Init-Configuration"><a href="#Init-Configuration" class="headerlink" title="Init Configuration"></a>Init Configuration</h2><p><em>Requires Quasar v0.17+</em><br>There are some configuration options for Quasar &amp; Quasar plugins. For the Quasar UMD version you can define the following before including the Quasar script tag:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// optional</span></span><br><span class="line">  <span class="built_in">window</span>.quasarConfig = &#123;</span><br><span class="line">    brand: &#123; <span class="comment">// this will NOT work on IE 11</span></span><br><span class="line">      primary: <span class="string">'#e46262'</span>,</span><br><span class="line">      <span class="comment">// ... or all other brand colors</span></span><br><span class="line">    &#125;,</span><br><span class="line">    notify: &#123;...&#125;, <span class="comment">// default set of options for Notify Quasar plugin</span></span><br><span class="line">    loading: &#123;...&#125;, <span class="comment">// default set of options for Loading Quasar plugin</span></span><br><span class="line">    loadingBar: &#123; ... &#125; <span class="comment">// settings for LoadingBar Quasar plugin</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>So, after you figured out the CDN links that you need to embed into your webpages (hopefully you’ve inspected the project folder created by UMD Starter Kit), now it’s time to use Quasar.</p>
<blockquote>
<p>You’ll notice that all the Quasar Components, Quasar Directives and Quasar Plugins have an installation section at the top of their pages. When using UMD, you can skip this section, as it is intended only for when your project is generated from the <a href="/app-installation.html">Main Starter Kit</a>.</p>
</blockquote>
<p>By using the UMD version, you’ll have all of the components, directives and Quasar plugins already installed for you. You just need to start using them.</p>
<p><strong>Do not use self-closing tags with the UMD version:</strong><br>You will notice that you won’t be able to use the self-closing tag form of any of the components. You must close all components tags.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- In docs, but for Main Starter Kit usage --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">label</span>=<span class="string">"My Button"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ^^^ can't use it like this on UMD --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Instead, include a self-closing tag too: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">label</span>=<span class="string">"My Button"</span>&gt;</span><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Quasar-Components"><a href="#Quasar-Components" class="headerlink" title="Quasar Components"></a>Quasar Components</h3><p>An example. No need to install any component in UMD version.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">label</span>=<span class="string">"My Button"</span>&gt;</span><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Quasar-Directives"><a href="#Quasar-Directives" class="headerlink" title="Quasar Directives"></a>Quasar Directives</h3><p>An example. No need to install any directives in UMD version.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-ripple</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Quasar-Plugins"><a href="#Quasar-Plugins" class="headerlink" title="Quasar Plugins"></a>Quasar Plugins</h3><p>An example. No need to install any plugins in UMD version.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Quasar.plugins.actionSheet.create(&#123;...&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="Quasar-Utils"><a href="#Quasar-Utils" class="headerlink" title="Quasar Utils"></a>Quasar Utils</h3><p>An example.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Quasar.utils.event.getEventKey(evt)</span><br></pre></td></tr></table></figure>
<h3 id="Changing-Quasar-Icon-Set"><a href="#Changing-Quasar-Icon-Set" class="headerlink" title="Changing Quasar Icon Set"></a>Changing Quasar Icon Set</h3><p>Assuming you have already included the CDN link to your favorite Quasar Icon Set (unless you’re using Material Icons which is used by default), you can then tell Quasar to use it:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Quasar.icons.set(Quasar.icons.fontawesome)</span><br></pre></td></tr></table></figure>
<h3 id="Changing-Quasar-I18n-Language"><a href="#Changing-Quasar-I18n-Language" class="headerlink" title="Changing Quasar I18n Language"></a>Changing Quasar I18n Language</h3><p>Assuming you have already included the CDN link to your desired Quasar I18n Language (unless you want “en-us” language pack which is used by default), you can then tell Quasar to use it:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example setting German language,</span></span><br><span class="line"><span class="comment">// using ISO 2 letter code:</span></span><br><span class="line">Quasar.i18n.set(Quasar.i18n.de)</span><br><span class="line"></span><br><span class="line"><span class="comment">// example setting Portuguese (Brazil) language:</span></span><br><span class="line">Quasar.i18n.set(Quasar.i18n.ptBr)</span><br></pre></td></tr></table></figure>
<p>The list of available languages can be found on <a href="https://github.com/quasarframework/quasar/tree/dev/i18n" target="_blank" rel="noopener">Github</a>. <strong>If your desired language pack is not available yet, you can help by providing a PR. We welcome any languages!</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Opening Your Dev Server to the Public]]></title>
      <url>https://quasar-framework.org/guide/opening-dev-server-to-public.html</url>
      <content type="html"><![CDATA[<p>At some point you may want to show someone else the project you’ve been working on. Fortunately, there is a simple CLI tool to accomplish this. <a href="https://ngrok.com/" target="_blank" rel="noopener">Ngrok</a> creates a tunnel to your dev server and (by default) generates a hexadecimal internet address on the ngrok server to offer to your clients or anyone special you’d like to show your work to.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br>Opening a dev server to the public constitutes security risks. Be absolutely cautious when using tools like this. This tip <strong>is not</strong> intended for the general public.</p>
<p>When you’ve finished with your demonstration or testing, make sure to stop ngrok. This will prevent any unwanted access of your computer through ngrok.</p>
</blockquote>
<h3 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h3><ol>
<li><p>Download and install ngrok <a href="https://ngrok.com/download" target="_blank" rel="noopener">here</a>.<br>(Please note that the ngrok executable file does not need to be placed in or run from inside your cordova folder. When on a mac it’s best to place the ngrok executable file inside <code>/usr/local/bin</code> to be able to run it globally.)</p>
</li>
<li><p>Start your Dev server</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar dev</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create your ngrok connection</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ngrok http 8080</span><br><span class="line"><span class="comment"># In case your development server doesn't run on port 8080 you need to change the number to the correct port</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>ngrok shows the url in the command line when it started.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Tunnel Status                 online</span><br><span class="line">Version                       2.0/2.0</span><br><span class="line">Web Interface                 http://127.0.0.1:4040</span><br><span class="line">Forwarding                    http://92832de0.ngrok.io -&gt; localhost:8080</span><br><span class="line">Forwarding                    https://92832de0.ngrok.io -&gt; localhost:8080</span><br><span class="line"></span><br><span class="line">Connnections                  ttl     opn     rt1     rt5     p50     p90</span><br><span class="line">                              0       0       0.00    0.00    0.00    0.00</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>Please be careful as the ‘Forwarding’ URL will be accessible to anyone until this connection is closed again.</p>
<h3 id="Inspecting-traffic"><a href="#Inspecting-traffic" class="headerlink" title="Inspecting traffic"></a>Inspecting traffic</h3><p>When running ngrok, visit <code>http://localhost:4040</code> to inspect the traffic.</p>
<p>This tool allows for custom domains, password protection and a lot more. If you require further assistance, please refer to the <a href="https://ngrok.com/docs" target="_blank" rel="noopener">ngrok docs</a> for more information.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Configuring PWA]]></title>
      <url>https://quasar-framework.org/guide/pwa-configuring-pwa.html</url>
      <content type="html"><![CDATA[<p>We’ll be using Quasar CLI to develop and build a PWA. The difference between building a SPA, Mobile App, Electron App, PWA or SSR is simply determined by the “mode” parameter in “quasar dev” and “quasar build” commands.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>In order to build a PWA, we first need to add the PWA mode to our Quasar project:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar mode -a pwa</span><br></pre></td></tr></table></figure></p>
<p>If you want to jump right in and start developing, you can skip the “quasar mode” command and issue:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar dev -m pwa</span><br></pre></td></tr></table></figure></p>
<p>This will add PWA mode automatically, if it is missing.</p>
<h2 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h2><p>Adding PWA mode to a Quasar project means a new folder will be created: <code>/src-pwa</code>, which contains PWA specific files:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">└── src-pwa/</span><br><span class="line">    ├── register-service-worker.js  <span class="comment"># App-code *managing* service worker</span></span><br><span class="line">    └── custom-service-worker.js    <span class="comment"># Optional custom service worker file</span></span><br></pre></td></tr></table></figure></p>
<p>You can freely edit these files. Notice a few things:</p>
<ol>
<li>“register-service-worker.js” is automatically imported into your app (like any other /src file). It registers the service worker (created by Workbox or your custom one, depending on workbox plugin mode – quasar.conf.js &gt; pwa &gt; workboxPluginMode) and you can listen for Service Worker’s events. You can use ES6 code.</li>
<li>“custom-service-worker.js” will be your service worker file ONLY if workbox plugin mode is set to “InjectManifest” (quasar.conf.js &gt; pwa &gt; workboxPluginMode: ‘InjectManifest’). Otherwise, Workbox will create a service-worker file for you.</li>
<li>It makes sense to run Lighthouse tests on production builds only.</li>
</ol>
<h2 id="Quasar-conf-js"><a href="#Quasar-conf-js" class="headerlink" title="Quasar.conf.js"></a>Quasar.conf.js</h2><p>This is the place where you can configure Workbox’s behavior and also tweak your manifest.json.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwa: &#123;</span><br><span class="line">  // workboxPluginMode: &apos;InjectManifest&apos;,</span><br><span class="line">  // workboxOptions: &#123;&#125;,</span><br><span class="line">  manifest: &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>More information: <a href="https://developers.google.com/web/tools/workbox/modules/workbox-webpack-plugin" target="_blank" rel="noopener">Workbox Webpack Plugin</a>, <a href="https://developers.google.com/web/tools/workbox/" target="_blank" rel="noopener">Workbox</a>.</p>
<h2 id="Configuring-Manifest-File"><a href="#Configuring-Manifest-File" class="headerlink" title="Configuring Manifest File"></a>Configuring Manifest File</h2><p>The Manifest file is generated by Quasar CLI with a default configuration for it. You can however tweak this configuration from <code>/quasar.conf.js</code>.</p>
<p>Example taken from Quasar Play’s quasar.conf.js:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pwa: &#123;</span><br><span class="line">  <span class="comment">// workboxPluginMode: 'InjectManifest',</span></span><br><span class="line">  <span class="comment">// workboxOptions: &#123;&#125;,</span></span><br><span class="line">  manifest: &#123;</span><br><span class="line">    name: <span class="string">'Quasar Play'</span>,</span><br><span class="line">    short_name: <span class="string">'Quasar-Play'</span>,</span><br><span class="line">    description: <span class="string">'Quasar Framework Showcase'</span>,</span><br><span class="line">    icons: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">'src'</span>: <span class="string">'statics/icons/icon-128x128.png'</span>,</span><br><span class="line">        <span class="string">'sizes'</span>: <span class="string">'128x128'</span>,</span><br><span class="line">        <span class="string">'type'</span>: <span class="string">'image/png'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">'src'</span>: <span class="string">'statics/icons/icon-192x192.png'</span>,</span><br><span class="line">        <span class="string">'sizes'</span>: <span class="string">'192x192'</span>,</span><br><span class="line">        <span class="string">'type'</span>: <span class="string">'image/png'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">'src'</span>: <span class="string">'statics/icons/icon-256x256.png'</span>,</span><br><span class="line">        <span class="string">'sizes'</span>: <span class="string">'256x256'</span>,</span><br><span class="line">        <span class="string">'type'</span>: <span class="string">'image/png'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">'src'</span>: <span class="string">'statics/icons/icon-384x384.png'</span>,</span><br><span class="line">        <span class="string">'sizes'</span>: <span class="string">'384x384'</span>,</span><br><span class="line">        <span class="string">'type'</span>: <span class="string">'image/png'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">'src'</span>: <span class="string">'statics/icons/icon-512x512.png'</span>,</span><br><span class="line">        <span class="string">'sizes'</span>: <span class="string">'512x512'</span>,</span><br><span class="line">        <span class="string">'type'</span>: <span class="string">'image/png'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    display: <span class="string">'standalone'</span>,</span><br><span class="line">    orientation: <span class="string">'portrait'</span>,</span><br><span class="line">    background_color: <span class="string">'#ffffff'</span>,</span><br><span class="line">    theme_color: <span class="string">'#027be3'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Please read about the <a href="https://developer.mozilla.org/en-US/docs/Web/Manifest" target="_blank" rel="noopener">manifest config</a> before diving in.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br>Note that you don’t need to edit your index.html file (generated from <code>/src/index.template.html</code>) to link to the manifest file. Quasar CLI takes care of embedding the right things for you.</p>
</blockquote>
<h2 id="PWA-Checklist"><a href="#PWA-Checklist" class="headerlink" title="PWA Checklist"></a>PWA Checklist</h2><p><a href="https://developers.google.com/web/progressive-web-apps/checklist" target="_blank" rel="noopener">https://developers.google.com/web/progressive-web-apps/checklist</a></p>
<blockquote>
<p><strong>IMPORTANT</strong><br>Do not run <a href="https://developers.google.com/web/tools/lighthouse/" target="_blank" rel="noopener">Lighthouse</a> on your development build. It is not optimized and does not contain a true Service Worker.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[What is a PWA]]></title>
      <url>https://quasar-framework.org/guide/pwa-introduction.html</url>
      <content type="html"><![CDATA[<p>A Progressive Web App (PWA) is a web app that uses modern web capabilities to deliver an app-like experience to users. These apps meet certain requirements (see below), are deployed to web servers and accessible through URLs (on HTTPS protocol).</p>
<p>This can work in conjunction with Cordova to provide a multiple deploy targets for all your users. Quasar CLI allows you to deploy your app as a PWA as well as a Mobile app and take advantage of both channels.</p>
<h2 id="What-is-Required"><a href="#What-is-Required" class="headerlink" title="What is Required"></a>What is Required</h2><p>To be considered a Progressive Web App, your app must be:</p>
<ul>
<li>Progressive - Work for every user, regardless of browser choice, because they are built with progressive enhancement as a core tenet.</li>
<li>Responsive - Fit any form factor, desktop, mobile, tablet, or whatever is next.</li>
<li>Connectivity independent - Enhanced with service workers to work offline or on low quality networks.</li>
<li>App-like - Use the app-shell model to provide app-style navigation and interactions.</li>
<li>Fresh - Always up-to-date thanks to the service worker update process.</li>
<li>Safe - Served via HTTPS to prevent snooping and ensure content has not been tampered with.</li>
<li>Discoverable - Are identifiable as “applications” thanks to W3C manifests and service worker registration scope allowing search engines to find them.</li>
<li>Re-engageable - Make re-engagement easy through features like push notifications.</li>
<li>Installable - Allow users to “keep” apps they find most useful on their home screen without the hassle of an app store.</li>
<li>Linkable - Easily share via URL and not require complex installation.</li>
</ul>
<p>More information available on Addy Osmani’s <a href="https://addyosmani.com/blog/getting-started-with-progressive-web-apps/" target="_blank" rel="noopener">article about PWA</a>.</p>
<h2 id="Manifest-File"><a href="#Manifest-File" class="headerlink" title="Manifest File"></a>Manifest File</h2><p>An app manifest file describes the resources your app will need. This includes your app’s displayed name, icons, as well as splash screen. Quasar CLI configures this for you, but you can override any property from within <code>/quasar.conf.js</code>. Learn how by visiting the <a href="/guide/pwa-configuring-pwa.html">Configure PWA</a> documentation page.</p>
<p>More information on the Manifest file can be read by accessing:<br><a href="https://developer.mozilla.org/en-US/docs/Web/Manifest" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/Manifest</a></p>
<h2 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h2><p>The Service worker provides a programmatic way to cache app resources (files). The programmatic API allows developers to decide how to handle caching and provides a much more flexible experience than other options.</p>
<p>More information on the Service Worker API can be read by accessing:<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PWA Build Commands]]></title>
      <url>https://quasar-framework.org/guide/pwa-build-commands.html</url>
      <content type="html"><![CDATA[<p><a href="/guide/quasar-cli.html">Quasar CLI</a> makes it incredibly simple to develop or build the final distributables from your source code.</p>
<h2 id="Developing"><a href="#Developing" class="headerlink" title="Developing"></a>Developing</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar dev -m pwa</span><br><span class="line"></span><br><span class="line"><span class="comment"># ..or the longer form:</span></span><br><span class="line">$ quasar dev --mode pwa</span><br><span class="line"></span><br><span class="line"><span class="comment"># with a specific Quasar theme:</span></span><br><span class="line">$ quasar dev -m pwa -t ios</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>IMPORTANT</strong><br>Do not run <a href="https://developers.google.com/web/tools/lighthouse/" target="_blank" rel="noopener">Lighthouse</a> on your development build. It is not optimized and does not contain a true Service Worker.</p>
</blockquote>
<h2 id="Building-for-Production"><a href="#Building-for-Production" class="headerlink" title="Building for Production"></a>Building for Production</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar build -m pwa</span><br><span class="line"></span><br><span class="line"><span class="comment"># ..or the longer form:</span></span><br><span class="line">$ quasar build --mode pwa</span><br><span class="line"></span><br><span class="line"><span class="comment"># with a specific Quasar theme:</span></span><br><span class="line">$ quasar build -m pwa -t ios</span><br></pre></td></tr></table></figure>
<h2 id="PWA-Checklist"><a href="#PWA-Checklist" class="headerlink" title="PWA Checklist"></a>PWA Checklist</h2><p><a href="https://developers.google.com/web/progressive-web-apps/checklist" target="_blank" rel="noopener">https://developers.google.com/web/progressive-web-apps/checklist</a></p>
<blockquote>
<p><strong>IMPORTANT</strong><br>Do not run <a href="https://developers.google.com/web/tools/lighthouse/" target="_blank" rel="noopener">Lighthouse</a> on your development build. It is not optimized and does not contain a true Service Worker.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar CLI]]></title>
      <url>https://quasar-framework.org/guide/quasar-cli.html</url>
      <content type="html"><![CDATA[<p>The Quasar CLI allows you to create new projects in no time, by generating a base application, filled with everything you need to begin working on your application. It does most of the heavy-lifting, so you need not concern yourself with the redundant tasks of building the application.</p>
<p><strong>You only need Quasar CLI if you are using the project initialization feature</strong>. If you want the UMD version, you won’t be needing it.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Node.js &gt;= 8.9.0 is required.</span></span><br><span class="line">$ yarn global add quasar-cli</span><br><span class="line"><span class="comment"># or:</span></span><br><span class="line">$ npm install -g quasar-cli</span><br></pre></td></tr></table></figure>
<p>Familiarize yourself with the list of commands:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  Commands</span><br><span class="line">    init          Create a project folder</span><br><span class="line">    dev           Start a dev server <span class="keyword">for</span> your App</span><br><span class="line">    build         Build your app <span class="keyword">for</span> production</span><br><span class="line">    clean         Clean all build artifacts</span><br><span class="line">    new           Quickly scaffold page/layout/component/... vue file</span><br><span class="line">    mode          Add/remove Quasar Modes <span class="keyword">for</span> your App</span><br><span class="line">    info          Display info about your machine and your App</span><br><span class="line">    serve         Create an ad-hoc (production-ready) server on App distributables</span><br><span class="line">    <span class="built_in">help</span>          Displays this message</span><br></pre></td></tr></table></figure></p>
<p>See help for any command:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar [<span class="built_in">command</span> name] --<span class="built_in">help</span></span><br></pre></td></tr></table></figure></p>
<h2 id="init-Create-Project-Folder"><a href="#init-Create-Project-Folder" class="headerlink" title="init (Create Project Folder)"></a>init (Create Project Folder)</h2><p>Creates an App folder with initial project boilerplate.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar init &lt;folder-name&gt;</span><br></pre></td></tr></table></figure></p>
<p>You’ll need <code>@vue/cli</code> and <code>@vue/cli-init</code> globally installed, or just <code>vue-cli</code>.</p>
<h2 id="info-Package-Versions"><a href="#info-Package-Versions" class="headerlink" title="info (Package Versions)"></a>info (Package Versions)</h2><p>The Quasar CLI is equipped with a stable combination of multiple NPM build packages (Webpack, Vue, etc) which gets updated frequently after heavy testing.</p>
<p>In order for you to see what versions of Node, NPM, Quasar CLI, Quasar, Vue, Webpack, Cordova, Babel and many more, issue this command in a Quasar project folder:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar info</span><br></pre></td></tr></table></figure></p>
<h2 id="dev-Development-Server"><a href="#dev-Development-Server" class="headerlink" title="dev (Development Server)"></a>dev (Development Server)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar dev -h</span><br><span class="line"></span><br><span class="line">  Description</span><br><span class="line">    Starts the app <span class="keyword">in</span> development mode (hot-code reloading, error</span><br><span class="line">    reporting, etc)</span><br><span class="line">  Usage</span><br><span class="line">    $ quasar dev -p &lt;port number&gt;</span><br><span class="line">  Options</span><br><span class="line">    --theme, -t      App theme (default: mat)</span><br><span class="line">    --mode, -m       App mode [spa|ssr|pwa|cordova|electron] (default: spa)</span><br><span class="line">    --port, -p       A port number on <span class="built_in">which</span> to start the application</span><br><span class="line">    --hostname, -H   A hostname to use <span class="keyword">for</span> serving the application</span><br><span class="line">    --<span class="built_in">help</span>, -h       Displays this message</span><br><span class="line"></span><br><span class="line">    Only <span class="keyword">for</span> Cordova mode:</span><br><span class="line">    --target, -T     (required) App target</span><br><span class="line">                        [android|ios|blackberry10|browser|osx|ubuntu|webos|windows]</span><br><span class="line">    --emulator, -e   (optional) Emulator name</span><br><span class="line">                        Example: iPhone-7, iPhone-X</span><br></pre></td></tr></table></figure>
<p>The Quasar development server allows you to develop your App by compiling and maintaining code in-memory. A web server will serve your App while offering hot-reload out of the box. Running in-memory offers faster rebuilds when you change your code.</p>
<blockquote>
<p>Hot Reload is much more than just refreshing your browser when code changes. It skips the refresh and updates your code on the fly, while maintaining your App’s state (like your Vue’s model data). Please note that there are cases when this is impossible, so the dev webserver will simply refresh your browser. (Always ensure you are running only one instance of Quasar CLI at a time, otherwise Hot-Reload and other stuff will break!)</p>
</blockquote>
<p>Based on what you want to develop, you can start the development server by using “quasar dev” command as follows:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Developing a SPA</span></span><br><span class="line">$ quasar dev</span><br><span class="line"><span class="comment"># ...or</span></span><br><span class="line">$ quasar dev -m spa</span><br><span class="line"></span><br><span class="line"><span class="comment"># Developing for SSR</span></span><br><span class="line">$ quasar dev -m ssr</span><br><span class="line"></span><br><span class="line"><span class="comment"># Developing a PWA</span></span><br><span class="line">$ quasar dev -m pwa</span><br><span class="line"></span><br><span class="line"><span class="comment"># Developing a Mobile App (through Cordova)</span></span><br><span class="line">$ quasar dev -m cordova -T [android|ios]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Developing an Electron App</span></span><br><span class="line">$ quasar dev -m electron</span><br></pre></td></tr></table></figure>
<p>However, there are two themes available: Material Design (‘mat’) and iOS (‘ios’). In order for specifying a specific theme, add the ‘-t’ parameter to the above commands:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Material Design</span></span><br><span class="line">$ quasar dev -t mat</span><br><span class="line"></span><br><span class="line"><span class="comment"># iOS theme</span></span><br><span class="line">$ quasar dev -t ios</span><br></pre></td></tr></table></figure>
<p>If you wish to change the hostname or port serving your App you have 3 options:</p>
<ul>
<li><p>Edit ‘/quasar.conf.js’:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  host: <span class="string">'...'</span>,</span><br><span class="line">  port: ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Through ‘-H’ (hostname) and ‘-p’ (port) command options.</p>
</li>
<li>If this is a one time thing, specify the hostname and/or port as an environment variable:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ PORT=3000 quasar dev</span><br><span class="line">$ HOSTNAME=1.1.1.14 quasar dev</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>If there appears to be an issue with hot reload, you can try two fixes:</p>
<ul>
<li><p>Change the permissions for the project folder with</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chown -R username: .</span><br></pre></td></tr></table></figure>
</li>
<li><p>or run the dev server with root privileges</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo quasar dev</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="build-clean-Build-App-for-Production"><a href="#build-clean-Build-App-for-Production" class="headerlink" title="build / clean (Build App for Production)"></a>build / clean (Build App for Production)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar build -h</span><br><span class="line"></span><br><span class="line">  Description</span><br><span class="line">    Builds distributables of your app.</span><br><span class="line">  Usage</span><br><span class="line">    $ quasar build -p &lt;port number&gt;</span><br><span class="line">  Options</span><br><span class="line">    --theme, -t    App theme (default: mat)</span><br><span class="line">    --mode, -m     App mode [spa|ssr|pwa|cordova|electron] (default: spa)</span><br><span class="line">    --target, -T   App target</span><br><span class="line">                      - Cordova (default: all installed)</span><br><span class="line">                        [android|ios|blackberry10|browser|osx|ubuntu|webos|windows]</span><br><span class="line">                      - Electron with default <span class="string">"electron-packager"</span> bundler (default: yours)</span><br><span class="line">                        [darwin|win32|linux|mas|all]</span><br><span class="line">                      - Electron with <span class="string">"electron-builder"</span> bundler (default: yours)</span><br><span class="line">                        [darwin|mac|win32|win|linux|all]</span><br><span class="line">    --debug, -d    Build <span class="keyword">for</span> debugging purposes</span><br><span class="line">    --<span class="built_in">help</span>, -h     Displays this message</span><br><span class="line"></span><br><span class="line">    ONLY <span class="keyword">for</span> Electron mode:</span><br><span class="line">    --bundler, -b  Bundler (electron-packager or electron-builder)</span><br><span class="line">                      [packager|builder]</span><br><span class="line">    --arch, -A     App architecture (default: yours)</span><br><span class="line">                      - with default <span class="string">"electron-packager"</span> bundler:</span><br><span class="line">                          [ia32|x64|armv7l|arm64|mips64el|all]</span><br><span class="line">                      - with <span class="string">"electron-builder"</span> bundler:</span><br><span class="line">                          [ia32|x64|armv7l|arm64|all]</span><br></pre></td></tr></table></figure>
<p>The Quasar CLI can pack everything together and optimize your App for production. It minifies source code, extracts vendor components, leverages browser cache and much more.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># build for production</span></span><br><span class="line">$ quasar build</span><br><span class="line"></span><br><span class="line"><span class="comment"># build for production with specific theme</span></span><br><span class="line">$ quasar build -t mat</span><br><span class="line">$ quasar build -t ios</span><br><span class="line">$ quasar build -m pwa -t mat</span><br></pre></td></tr></table></figure>
<p>You can also clean up all the build assets:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar clean</span><br></pre></td></tr></table></figure></p>
<h2 id="new-Generating-Components-Pages-Layouts-Vuex-Store"><a href="#new-Generating-Components-Pages-Layouts-Vuex-Store" class="headerlink" title="new (Generating Components, Pages, Layouts, Vuex Store)"></a>new (Generating Components, Pages, Layouts, Vuex Store)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar new -h</span><br><span class="line"></span><br><span class="line">  Description</span><br><span class="line">    Quickly scaffold a page/layout/component/store module.</span><br><span class="line"></span><br><span class="line">  Usage</span><br><span class="line">    $ quasar new [p|page] &lt;page_file_name&gt;</span><br><span class="line">    $ quasar new [l|layout] &lt;layout_file_name&gt;</span><br><span class="line">    $ quasar new [c|component] &lt;component_file_name&gt;</span><br><span class="line">    $ quasar new plugin &lt;plugin_name&gt;</span><br><span class="line">    $ quasar new [s|store] &lt;store_module_name&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Examples:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create src/pages/MyNewPage.vue:</span></span><br><span class="line">    $ quasar new p MyNewPage</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create src/pages/MyNewPage.vue and src/pages/OtherPage.vue:</span></span><br><span class="line">    $ quasar new p MyNewPage OtherPage</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create src/layouts/shop/Checkout.vue</span></span><br><span class="line">    $ quasar new layout shop/Checkout.vue</span><br><span class="line"></span><br><span class="line">  Options</span><br><span class="line">    --<span class="built_in">help</span>, -h     Displays this message</span><br></pre></td></tr></table></figure>
<p>This command is simply a helper in order to quickly scaffold a page/layout/component/vuex store module. You are not required to use it, but can help you when you don’t know how to start.</p>
<h2 id="mode-PWA-Cordova-Electron"><a href="#mode-PWA-Cordova-Electron" class="headerlink" title="mode (PWA, Cordova, Electron)"></a>mode (PWA, Cordova, Electron)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar mode -h</span><br><span class="line"></span><br><span class="line">  Description</span><br><span class="line">    Add/Remove support <span class="keyword">for</span> SSR / PWA / Cordova / Electron modes.</span><br><span class="line">  Usage</span><br><span class="line">    $ quasar mode -r|-a pwa|ssr|cordova|electron</span><br><span class="line">  Options</span><br><span class="line">    --add, -a     Add support <span class="keyword">for</span> mode [pwa|ssr|cordova|electron]</span><br><span class="line">    --remove, -r  Remove support <span class="keyword">for</span> mode [pwa|ssr|cordova|electron]</span><br><span class="line">    --<span class="built_in">help</span>, -h     Displays this message</span><br></pre></td></tr></table></figure>
<p>When you initialize a project with the CLI, you can build SPA (Single Page Website/Application), SSR (Server-side Render Website/Application with optional PWA client takeover), PWA (Progressive Web App), Mobile App (through Cordova), and/or Electron Apps. When you develop for SSR, PWA, Cordova or Electron, you need these modes installed. If you issue “quasar dev” or “quasar build” they will automatically be installed.</p>
<p>These modes will add a “src-*” folder into your project with very specific code for it:</p>
<table>
<thead>
<tr>
<th>Folder</th>
<th>Mode</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>src-ssr</td>
<td>ssr</td>
<td>Contains the production Node server files.</td>
</tr>
<tr>
<td>src-pwa</td>
<td>pwa</td>
<td>Contains the Service Worker file that you can tweak.</td>
</tr>
<tr>
<td>src-cordova</td>
<td>cordova</td>
<td>Is a Cordova project folder that will be using your ‘src’ as content. Tweak Cordova config, add/remove platforms, splash screens, Cordova plugins and so on from this folder. Do NOT touch “src-cordova/www” folder though as it will get overwritten at every build.</td>
</tr>
<tr>
<td>src-electron</td>
<td>electron</td>
<td>Has code for the main Electron thread. The renderer thread will be your app in ‘src’.</td>
</tr>
</tbody>
</table>
<p>If for some reason you decide you don’t need a mode, you can remove it. <strong>This will permanently delete</strong> the respective “src-*” folder.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar mode --remove pwa</span><br></pre></td></tr></table></figure></p>
<h2 id="serve-Serve-Static-Content-Folder"><a href="#serve-Serve-Static-Content-Folder" class="headerlink" title="serve (Serve Static-Content Folder)"></a>serve (Serve Static-Content Folder)</h2><p>This command can be used in production too.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar serve -h</span><br><span class="line"></span><br><span class="line">  Description</span><br><span class="line">    Start a HTTP(S) server on a folder.</span><br><span class="line"></span><br><span class="line">  Usage</span><br><span class="line">    $ quasar serve [path]</span><br><span class="line">    $ quasar serve . <span class="comment"># serve current folder</span></span><br><span class="line"></span><br><span class="line">    If you serve a SSR folder built with the CLI <span class="keyword">then</span></span><br><span class="line">    control is yielded to /index.js and params have no effect.</span><br><span class="line"></span><br><span class="line">  Options</span><br><span class="line">    --port, -p             Port to use (default: 8080)</span><br><span class="line">    --hostname, -H         Address to use (default: 0.0.0.0)</span><br><span class="line">    --gzip, -g             Compress content (default: <span class="literal">true</span>)</span><br><span class="line">    --silent, -s           Supress <span class="built_in">log</span> message</span><br><span class="line">    --colors               Log messages with colors (default: <span class="literal">true</span>)</span><br><span class="line">    --open, -o             Open browser window after starting</span><br><span class="line">    --cache, -c &lt;number&gt;   Cache time (max-age) <span class="keyword">in</span> seconds;</span><br><span class="line">                           Does not apply to /service-worker.js</span><br><span class="line">                           (default: 86400 - 24 hours)</span><br><span class="line">    --micro, -m &lt;seconds&gt;  Use micro-cache (default: 1 second)</span><br><span class="line">    --<span class="built_in">history</span>              Use <span class="built_in">history</span> api fallback;</span><br><span class="line">                           All requests fallback to index.html</span><br><span class="line">    --https                Enable HTTPS</span><br><span class="line">    --cert, -C [path]      Path to SSL cert file (Optional)</span><br><span class="line">    --key, -K [path]       Path to SSL key file (Optional)</span><br><span class="line">    --proxy &lt;file.js&gt;      Proxy specific requests defined <span class="keyword">in</span> file;</span><br><span class="line">                           File must <span class="built_in">export</span> Array (&#123; path, rule &#125;)</span><br><span class="line">                           See example below. <span class="string">"rule"</span> is defined at:</span><br><span class="line">                           https://github.com/chimurai/http-proxy-middleware</span><br><span class="line">    --<span class="built_in">help</span>, -h             Displays this message</span><br><span class="line"></span><br><span class="line">  Proxy file example</span><br><span class="line">    module.exports = [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'/api'</span>,</span><br><span class="line">        rule: &#123; target: <span class="string">'http://www.example.org'</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">    --&gt; will be transformed into app.use(path, httpProxyMiddleware(rule))</span><br></pre></td></tr></table></figure>
<h3 id="Custom-Node-server"><a href="#Custom-Node-server" class="headerlink" title="Custom Node server"></a>Custom Node server</h3><p>When building a SPA or PWA, the distributable folder can be served by any static webserver. To test it out (assuming you don’t have a specific publicPath or not using Vue Router “history” mode), you can use the “http-server” npm package.</p>
<p>Or you can build your own server. Here are some examples:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// when using default Vue Router "hash" mode</span></span><br><span class="line"><span class="keyword">const</span></span><br><span class="line">  express = <span class="built_in">require</span>(<span class="string">'express'</span>),</span><br><span class="line">  serveStatic = <span class="built_in">require</span>(<span class="string">'serve-static'</span>),</span><br><span class="line">  port = process.env.PORT || <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(serveStatic(...path-to-dist...))</span><br><span class="line">app.listen(port)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// when using Vue Router "history" mode</span></span><br><span class="line"><span class="keyword">const</span></span><br><span class="line">  express = <span class="built_in">require</span>(<span class="string">'express'</span>),</span><br><span class="line">  serveStatic = <span class="built_in">require</span>(<span class="string">'serve-static'</span>),</span><br><span class="line">  history = <span class="built_in">require</span>(<span class="string">'connect-history-api-fallback'</span>),</span><br><span class="line">  port = process.env.PORT || <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(history())</span><br><span class="line">app.use(serveStatic(...path-to-dist...))</span><br><span class="line">app.listen(port)</span><br></pre></td></tr></table></figure>
<p>If you need URL rewrites of API, or simply put you want to proxy your API requests, then you can use “http-proxy-middleware” package:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// add this to one of the two previous examples:</span></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">app.use(<span class="string">'/api'</span>, proxy(&#123;</span><br><span class="line">  <span class="string">'/api'</span>: &#123;</span><br><span class="line">    target: <span class="string">`http://my-api.com:5050`</span>,</span><br><span class="line">    pathRewrite: &#123;<span class="string">"^/api"</span> : <span class="string">""</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// then app.listen(...)</span></span><br></pre></td></tr></table></figure></p>
<p>Finally, run one of these files:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node my-server.js</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Framework Contributing Guide]]></title>
      <url>https://quasar-framework.org/guide/quasar-contribution-guide.html</url>
      <content type="html"><![CDATA[<p>The Quasar team is really excited when people help by contributing to Quasar Framework. It’s what the FLOSS community is all about!</p>
<p>There are lots of features waiting for someone to write them and make the Quasar experience even better. Check <a href="https://github.com/quasarframework/quasar" target="_blank" rel="noopener">Github</a> or contact <a href="https://github.com/rstoenescu" target="_blank" rel="noopener">Razvan Stoenescu</a> through <a href="https://discord.gg/5TDhbDg" target="_blank" rel="noopener">Discord chat</a>/email.</p>
<blockquote>
<p>Before submitting your contribution though, please make sure to take a moment and read through <a href="https://github.com/quasarframework/quasar/blob/dev/.github/CONTRIBUTING.md" target="_blank" rel="noopener">the contributing guidelines</a> and also <a href="https://github.com/quasarframework/quasar/blob/dev/.github/CODE_OF_CONDUCT.md" target="_blank" rel="noopener">the code of conduct</a>.</p>
</blockquote>
<p>You can also help with the documentation. If you catch a mistake or want to add a few lines to a page or write new pages, use the link at the end of each page of this website (specifically the <em>Suggest an edit on Github</em> link).</p>
<blockquote>
<p><i class="fa fa-usd" style="font-size: 2rem; float: left; margin-right: 10px;"></i> Finally, if you want, you can leave a buck for coffee from time to time. Quasar needs some financial backing to evolve. <a href="/support-quasar-framework.html">Read more here</a>.</p>
</blockquote>
<h2 id="Github-Repositories"><a href="#Github-Repositories" class="headerlink" title="Github Repositories"></a>Github Repositories</h2><ul>
<li><a href="https://github.com/quasarframework/quasar" target="_blank" rel="noopener">Quasar Framework</a></li>
<li><a href="https://github.com/quasarframework/quasar-cli" target="_blank" rel="noopener">Quasar CLI</a></li>
<li><a href="https://github.com/quasarframework/quasar-starter-kit" target="_blank" rel="noopener">Quasar Starter Kit</a></li>
<li><a href="https://github.com/quasarframework/quasar-play" target="_blank" rel="noopener">Quasar Play</a></li>
<li><a href="https://github.com/quasarframework/quasar-framework.org" target="_blank" rel="noopener">Documentation Website</a></li>
</ul>
<p><strong>Please use the appropriate Github repo to report issues. See “Github Repositories” above.</strong> For example, a bug related to CLI should be reported to the CLI repo, one related to build issues to Quasar Starter Kit repo and so on.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Release Notes]]></title>
      <url>https://quasar-framework.org/guide/quasar-release-notes.html</url>
      <content type="html"><![CDATA[<p>Release Notes are available on <a href="https://github.com/quasarframework/quasar/releases" target="_blank" rel="noopener">Github</a>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Playground]]></title>
      <url>https://quasar-framework.org/guide/quasar-playground.html</url>
      <content type="html"><![CDATA[<h3 id="jsFiddle-Codepen"><a href="#jsFiddle-Codepen" class="headerlink" title="jsFiddle / Codepen"></a>jsFiddle / Codepen</h3><table>
<thead>
<tr>
<th></th>
<th>Material Theme</th>
<th>iOS Theme</th>
</tr>
</thead>
<tbody>
<tr>
<td>jsFiddle</td>
<td><a href="https://jsfiddle.net/rstoenescu/waugrryy/" target="_blank" rel="noopener">https://jsfiddle.net/rstoenescu/waugrryy/</a></td>
<td><a href="https://jsfiddle.net/rstoenescu/7gu065yg/" target="_blank" rel="noopener">https://jsfiddle.net/rstoenescu/7gu065yg/</a></td>
</tr>
<tr>
<td>Codepen</td>
<td><a href="https://codepen.io/rstoenescu/pen/KQRZJg" target="_blank" rel="noopener">https://codepen.io/rstoenescu/pen/KQRZJg</a></td>
<td><a href="https://codepen.io/rstoenescu/pen/paVpBN" target="_blank" rel="noopener">https://codepen.io/rstoenescu/pen/paVpBN</a></td>
</tr>
</tbody>
</table>
<p>You can fork and use these links for reporting issues on Github too. These links (obviously) use the Quasar UMD version.</p>
<p>Make sure to read <a href="/guide/embedding-quasar.html">about it</a> before diving in. When you use jsFiddle/Codepen you can skip the Installation section.</p>
<h3 id="Quasar-Play"><a href="#Quasar-Play" class="headerlink" title="Quasar Play"></a>Quasar Play</h3><p>Live Demo:</p>
<ul>
<li><a href="http://quasar-framework.org/quasar-play/android/index.html#/showcase">Material Theme</a></li>
<li><a href="http://quasar-framework.org/quasar-play/apple/index.html#/showcase">iOS Theme</a></li>
<li><a href="https://play.google.com/store/apps/details?id=com.quasarframework.quasarplay" target="_blank" rel="noopener">Google Play Store</a> (currently it’s outdated, using a very old Quasar version)</li>
</ul>
<p>Quasar Play is used for these documentation pages too, on the right side, on the mobile frame.<br>You can clone it and play with it by visiting its <a href="https://github.com/quasarframework/quasar-play" target="_blank" rel="noopener">Github page</a>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Roadmap]]></title>
      <url>https://quasar-framework.org/guide/quasar-roadmap.html</url>
      <content type="html"><![CDATA[<p>Next Quasar version is v1.0. Quasar’s main focus points at the moment are:</p>
<ul>
<li>Notable improvements to the form components</li>
<li>Total documentation website revamp, using Quasar SSR. Better “view source” functionality, with ability to fork and play each example on JsFiddle.</li>
<li>Quasar Icon Factory - automatically generate necessary icons for all platforms (favicons, mobile icons, electron icons, …) from one image file used as source</li>
<li>Quasar CLI testing module (with your favorite assertion library and favorite test runner)</li>
<li>Alternative to Quasar SSR: Nuxt module (for ability to use Quasar + Nuxt)</li>
<li>Out of the box Typescript support (can be added now too)</li>
</ul>
<p>Notable features on the roadmap for longer term (some might end up in v1.0):</p>
<ul>
<li>Chrome (+ Firefox) extension Quasar CLI mode</li>
<li>Tipster component</li>
<li>List Item Sliding with Actions component</li>
<li>Virtual Lists component</li>
</ul>
<blockquote>
<p>Quasar needs your backing in order to speed up development and offer even better support. Please take a look on the <a href="https://www.patreon.com/quasarframework" target="_blank" rel="noopener">Patreon Campaign</a>. If invoices are needed for bigger amounts, please contact us by email (<a href="mailto:razvan.stoenescu@gmail.com" target="_blank" rel="noopener">razvan.stoenescu@gmail.com</a>). Every cent really counts and helps us spend more time on Quasar.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Troubleshooting and Tips]]></title>
      <url>https://quasar-framework.org/guide/electron-troubleshooting-and-tips.html</url>
      <content type="html"><![CDATA[<h2 id="Read-amp-Write-Local-Files"><a href="#Read-amp-Write-Local-Files" class="headerlink" title="Read &amp; Write Local Files"></a>Read &amp; Write Local Files</h2><p>One great benefit of using Electron is the ability to access the user’s file system. This enables you to read and write files on the local system. To help avoid Chromium restrictions and writing to your application’s internal files, make sure to take use of electron’s APIs, specifically the app.getPath(name) function. This helper method can get you file paths to system directories such as the user’s desktop, system temporary files, etc.</p>
<p>We can use the userData directory, which is reserved specifically for our application, so we can have confidence other programs or other user interactions should not tamper with this file space.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import path from &apos;path&apos;</span><br><span class="line">import &#123; remote &#125; from &apos;electron&apos;</span><br><span class="line"></span><br><span class="line">const filePath = path.join(remote.app.getPath(&apos;userData&apos;), &apos;/some.file&apos;)</span><br></pre></td></tr></table></figure>
<h2 id="Debugging-Main-Process"><a href="#Debugging-Main-Process" class="headerlink" title="Debugging Main Process"></a>Debugging Main Process</h2><p>When running your application in development you may have noticed a message from the main process mentioning a remote debugger. Ever since the release of electron@^1.7.2, remote debugging over the Inspect API was introduced and can be easily accessed by opening the provided link with Google Chrome or through another debugger that can remotely attach to the process using the default port of 5858, such as Visual Studio Code.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┏ Electron -------------------</span><br><span class="line"></span><br><span class="line">  Debugger listening on port 5858.</span><br><span class="line">  Warning: This is an experimental feature and could change at any time.</span><br><span class="line">  To start debugging, open the following URL <span class="keyword">in</span> Chrome:</span><br><span class="line">      chrome-devtools://devtools/bundled/inspector.html?experiments=<span class="literal">true</span>&amp;v8only=<span class="literal">true</span>&amp;ws=127.0.0.1:5858/22271e96-df65-4bab-9207-da8c71117641</span><br><span class="line"></span><br><span class="line">┗ ----------------------------</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Theming]]></title>
      <url>https://quasar-framework.org/guide/quasar-theming.html</url>
      <content type="html"><![CDATA[<p>Every website/app needs a specific design to differentiate from the competition. This is where Quasar Framework excels, because:</p>
<ol>
<li>It offers two themes out of the box: Material and iOS</li>
<li>The two themes can be customized/extended easily from the App code. You can change the primary color, the secondary color, and most of the CSS. Customizing does not mean having multiple CSS files, one overriding properties from the other. No. You’ll have one stylesheet with each CSS property declared only once.</li>
<li><strong>All themes include a CSS reset (following latest standards) to eliminate quirks between platforms</strong>.</li>
</ol>
<p>Quasar CSS is a blank slate that you can easily customize and modify to fit your brand, while still following the standards of each platform. The best apps in the app stores are fully customized and Quasar makes it easy to do the same with your App.</p>
<p>Quasar is built on top of Stylus, which allows it to set some default styles for your App but makes it extremely easy for you to change the defaults in your App code.</p>
<p>Customizing a theme means overriding Stylus variables which can hold colors, sizes, border types and so on. After reading this intro you can go to <a href="/components/stylus-variables.html">Components &gt; Stylus Variables</a> for a list of all Stylus variables that you can override so you can theme your App.</p>
<p>Please note the following:</p>
<ol>
<li>When building your App or starting the dev server you can only use one theme at a time.</li>
<li>Quasar themes can be configured in <code>/src/css/themes</code> folder, which contains three files, as you’ll see in the next section.</li>
</ol>
<h2 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h2><p><code>src/css/themes</code> folder from a Quasar App will contain the following files:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line">└── css</span><br><span class="line">    └── themes</span><br><span class="line">        ├── common.variables.styl <span class="comment"># Theme Shared Quasar Variables</span></span><br><span class="line">        ├── variables.mat.styl    <span class="comment"># Quasar Variables that apply to Material only</span></span><br><span class="line">        └── variables.ios.styl    <span class="comment"># Quasar Variables that apply to iOS only</span></span><br></pre></td></tr></table></figure>
<p>You will find more documentation and steps in these files.</p>
<h2 id="Using-Stylus-variables-in-Vue-files"><a href="#Using-Stylus-variables-in-Vue-files" class="headerlink" title="Using Stylus variables in Vue files"></a>Using Stylus variables in Vue files</h2><p>In your app’s <code>*.vue</code> files you can use the core Quasar Stylus variables (examples - colors: <code>$primary</code>, <code>$red-1</code>, media breakpoints: <code>$breakpoint-md</code>, <code>$breakpoint-md-min</code> and so on).</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Notice lang="stylus" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"stylus"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">// "variables" is a Webpack alias (provided out of the box by Quasar CLI)</span></span><br><span class="line"><span class="undefined">@import '~variables'</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">div</span></span><br><span class="line"><span class="undefined">  color $red-1</span></span><br><span class="line"><span class="undefined">  background-color $grey-5</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>NOTE:</strong> You must add <code>@import &#39;~variables&#39;</code> within your <code>&lt;style&gt;</code> tags, in order for Quasar to parse any Stylus variables you may add. If you don’t, Quasar will literally pass the variables as text and any theming changes using Stylus variables won’t work.</p>
<p><strong>NOTE:</strong> The <code>&lt;style&gt;</code> tag uses Stylus code. You can’t use any other CSS pre-processor.</p>
<h2 id="Theming-Your-App"><a href="#Theming-Your-App" class="headerlink" title="Theming Your App"></a>Theming Your App</h2><p>You can easily theme your App by adding Stylus variable declarations in <code>src/css/themes/common.variables.styl</code> or the other two files (in the latter case if you want different looks for each Quasar theme).</p>
<p>To customize the look and feel of this app, you can override the Stylus variables found in Quasar’s source Stylus files. Setting variables before Quasar’s Stylus will use these variables rather than Quasar’s default Stylus variable values. Stylus variables specific to the themes belong in either the <code>variables.ios.styl</code> or <code>variables.mat.styl</code> files.</p>
<p>For example, change the primary color of your App:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="variable">$primary</span> = <span class="number">#00ffff</span></span><br></pre></td></tr></table></figure>
<h3 id="Platform-Specific-Styles"><a href="#Platform-Specific-Styles" class="headerlink" title="Platform Specific Styles"></a>Platform Specific Styles</h3><p>The platform in which your App runs is automatically detected and the <code>&lt;body&gt;</code> tag gets following classes:</p>
<table>
<thead>
<tr>
<th>Body Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>mat</code></td>
<td>Default style; <strong>Material Design theme</strong>; Android platform</td>
</tr>
<tr>
<td><code>ios</code></td>
<td>Apple platform; <strong>iOS theme</strong></td>
</tr>
<tr>
<td><code>desktop</code></td>
<td>App runs on a desktop browser</td>
</tr>
<tr>
<td><code>mobile</code></td>
<td>App runs on a mobile browser</td>
</tr>
<tr>
<td><code>cordova</code></td>
<td>Standalone Mobile App wrapped with Apache Cordova</td>
</tr>
<tr>
<td><code>electron</code></td>
<td>App runs under Electron</td>
</tr>
<tr>
<td><code>touch</code></td>
<td>Touch capable platform</td>
</tr>
<tr>
<td><code>no-touch</code></td>
<td>Touch capability not present</td>
</tr>
<tr>
<td><code>within-iframe</code></td>
<td>For when entire website is under an IFRAME tag</td>
</tr>
</tbody>
</table>
<p>So you can write specific Stylus code for your App like this:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">body</span><br><span class="line">  &amp;<span class="selector-class">.cordova</span> .tag</span><br><span class="line">    <span class="attribute">color</span> <span class="variable">$primary</span></span><br><span class="line">  &amp;<span class="selector-class">.desktop</span> .tag</span><br><span class="line">    <span class="attribute">color</span> <span class="variable">$secondary</span></span><br><span class="line">  &amp;<span class="selector-class">.mobile</span> .tag</span><br><span class="line">    <span class="attribute">color</span> <span class="variable">$tertiary</span></span><br></pre></td></tr></table></figure>
<h2 id="Stylus-Variables"><a href="#Stylus-Variables" class="headerlink" title="Stylus Variables"></a>Stylus Variables</h2><p>Read a complete list of all <a href="/components/stylus-variables.html">Stylus variables</a> that you can override.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SSR Build Commands]]></title>
      <url>https://quasar-framework.org/guide/ssr-build-commands.html</url>
      <content type="html"><![CDATA[<p><a href="/guide/quasar-cli.html">Quasar CLI</a> makes it incredibly simple to develop or build the final distributables from your source code.</p>
<h2 id="Developing"><a href="#Developing" class="headerlink" title="Developing"></a>Developing</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar dev -m ssr</span><br><span class="line"></span><br><span class="line"><span class="comment"># ..or the longer form:</span></span><br><span class="line">$ quasar dev --mode ssr</span><br><span class="line"></span><br><span class="line"><span class="comment"># with a specific Quasar theme:</span></span><br><span class="line">$ quasar dev -m ssr -t ios</span><br></pre></td></tr></table></figure>
<h2 id="Building-for-Production"><a href="#Building-for-Production" class="headerlink" title="Building for Production"></a>Building for Production</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar build -m ssr</span><br><span class="line"></span><br><span class="line"><span class="comment"># ..or the longer form:</span></span><br><span class="line">$ quasar build --mode ssr</span><br><span class="line"></span><br><span class="line"><span class="comment"># with a specific Quasar theme:</span></span><br><span class="line">$ quasar build -m ssr -t ios</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SSR FAQ]]></title>
      <url>https://quasar-framework.org/guide/ssr-frequently-asked-questions.html</url>
      <content type="html"><![CDATA[<h2 id="Why-am-I-getting-hydration-errors"><a href="#Why-am-I-getting-hydration-errors" class="headerlink" title="Why am I getting hydration errors?"></a>Why am I getting hydration errors?</h2><p>Take a look at our <a href="/guide/ssr-client-side-hydration.html">Client Side Hydration</a> page. When you get hydration errors, it means the HTML rendered on the server does not match the equivalent HTML rendered on client-side. This error will appear only when developing (and NOT on production) and it definitely needs to be addressed, before you release your app. Is there some content that you can only generate on client-side? Then use <a href="/components/no-ssr.html">QNoSSR</a>.</p>
<h2 id="Why-doesn’t-importing-Platform-and-Cookies-work"><a href="#Why-doesn’t-importing-Platform-and-Cookies-work" class="headerlink" title="Why doesn’t importing Platform and Cookies work?"></a>Why doesn’t importing Platform and Cookies work?</h2><p>When building for SSR, use only the <code>$q.platform</code>/<code>$q.cookies</code> form. If you need to use the <code>import { Platform, Cookies } from &#39;quasar&#39;</code> (when on server-side), then you’ll need to do it like this:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example with Platform; same thing for Cookies</span></span><br><span class="line"><span class="keyword">import</span> &#123; Platform &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you need access to `ssrContext`</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">ssrContext</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> platform = process.env.SERVER</span><br><span class="line">    ? Platform.parseSSR(ssrContext)</span><br><span class="line">    : Platform <span class="comment">// otherwise we're on client</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// platform is equivalent to the global import as in non-SSR builds</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The <code>ssrContext</code> is available in the App Plugins or the preFetch feature, where it is supplied as a parameter.</p>
<p>There is a good reason for this. In a client-only app, every user will be using a fresh instance of the app in their browser. For server-side rendering we want the same thing. Each request should have a fresh, isolated app instance so that there is no cross-request state pollution. So Platform and Cookies need to be bound to each request separately.</p>
<p>Also a good idea is to read the <a href="/guide/ssr-writing-universal-code.html">Writing Universal Code</a> documentation page.</p>
<h2 id="Why-isn’t-LocalStorage-and-SessionStorage-working"><a href="#Why-isn’t-LocalStorage-and-SessionStorage-working" class="headerlink" title="Why isn’t LocalStorage and SessionStorage working?"></a>Why isn’t LocalStorage and SessionStorage working?</h2><p>When running the code on server-side, the storage facilities can’t work. Web Storage is a browser only API.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Configuring SSR]]></title>
      <url>https://quasar-framework.org/guide/ssr-configuring-ssr.html</url>
      <content type="html"><![CDATA[<p>We’ll be using Quasar CLI to develop and build a SSR website. The difference between building a SPA, Mobile App, Electron App, PWA or SSR is simply determined by the “mode” parameter in “quasar dev” and “quasar build” commands.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>In order to build a SSR website, we first need to add the SSR mode to our Quasar project:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar mode -a ssr</span><br></pre></td></tr></table></figure></p>
<p>If you want to jump right in and start developing, you can skip the “quasar mode” command and issue:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar dev -m ssr</span><br></pre></td></tr></table></figure></p>
<p>This will add SSR mode automatically, if it is missing.</p>
<h2 id="Quasar-conf-js"><a href="#Quasar-conf-js" class="headerlink" title="Quasar.conf.js"></a>Quasar.conf.js</h2><p>This is the place where you can configure some SSR options. Like if you want the client side to takeover as a SPA (Single Page Application – the default behaviour), or as a PWA (Progressive Web App).</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">return &#123;</span><br><span class="line">  // ...</span><br><span class="line">  ssr: &#123;</span><br><span class="line">    pwa: true/false, // should a PWA take over (default: false), or just a SPA?</span><br><span class="line">    componentCache: &#123;...&#125; // lru-cache package options</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>If you decide to go with a PWA client takeover (<strong>which is a killer combo</strong>), the Quasar CLI PWA mode will be installed too. You may want to check out the <a href="/guide/pwa-introduction.html">Quasar PWA</a> guide too. But most importantly, make sure you read <a href="/guide/ssr-with-pwa.html">SSR with PWA</a> page.</p>
</blockquote>
<p>When building, <code>extendWebpack()</code> and <code>chainWebpack()</code> will receive one more parameter (Object), currently containing <code>isServer</code> or <code>isClient</code> boolean props, because there will be two Webpack builds (one for the server-side and one for the client-side).</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// quasar.conf.js</span></span><br><span class="line">build: &#123;</span><br><span class="line">  extendWebpack(cfg, &#123; isServer, isClient &#125;) &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If you want more information, please see this page that goes into more detail about <a href="/app-quasar.conf.js.html#Extending-Webpack-Config-Object">extending webpack</a> in the <code>quasar.conf.js</code> file.</p>
<h2 id="Nodejs-Server"><a href="#Nodejs-Server" class="headerlink" title="Nodejs Server"></a>Nodejs Server</h2><p>Adding SSR mode to a Quasar project means a new folder will be created: <code>/src-ssr</code>, which contains SSR specific files which define your production Node webserver:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">└── src-ssr/</span><br><span class="line">    ├── index.js      <span class="comment"># Production Node webserver serving the app</span></span><br><span class="line">    └── extension.js  <span class="comment"># Common code for production &amp; development server</span></span><br></pre></td></tr></table></figure></p>
<p>You can freely edit these files. You’re not required to use an Express server. Simply choose whatever fits you best and tweak however you want.</p>
<p>Notice a few things:</p>
<ol>
<li><p>These files run in a Node context (they are NOT transpiled by Babel), so use only the ES6 features that are supported by your Node version. (<a href="https://node.green/" target="_blank" rel="noopener">https://node.green/</a>)</p>
</li>
<li><p>All content of this folder will be copied as is to the output folder. So only import:</p>
<ul>
<li>node_modules (and yarn/npm install your dependencies – NOT as devDependecies though)</li>
<li>create files in this folder and import only those with the relative path</li>
</ul>
</li>
<li><p>Do not change the names of these two files. You can however add any additional files that you may need. Just take into consideration that if you want common configuration of the Node webserver for both production &amp; development, you need to add that to <code>/src-ssr/extension.js</code> file.</p>
</li>
<li><p>When <code>/src-ssr/extension.js</code> is used by the development server, it assumes the configuration is ready to be used by an Express server. So plan accordingly. If you switch to another server, you may want to decouple extension.js from the production server (index.js).</p>
</li>
</ol>
<h2 id="Helping-SEO"><a href="#Helping-SEO" class="headerlink" title="Helping SEO"></a>Helping SEO</h2><p>One of the main reasons when you develop a SSR instead of a SPA is for taking care of the SEO. And SEO can be greatly improved by using the <a href="/components/meta-plugin.html">Quasar Meta Plugin</a> to manage dynamic html markup required by the search engines.</p>
<h2 id="App-Plugins"><a href="#App-Plugins" class="headerlink" title="App Plugins"></a>App Plugins</h2><p>When running on SSR mode, your application code needs to be isomorphic or “universal”, which means that it must run both on a Node context and in the browser. This applies to your App plugins too.</p>
<p>However, there are cases where you only want some app plugins to run only on the server or only on the client-side. You can achieve that by specifying:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// quasar.conf.js</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="string">'some-plugin'</span>, <span class="comment">// runs on both server and client</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'some-other'</span>, <span class="attr">server</span>: <span class="literal">false</span> &#125; <span class="comment">// this plugin gets embedded only on client-side</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'third'</span>, <span class="attr">client</span>: <span class="literal">false</span> &#125; <span class="comment">// this plugin gets embedded only on server-side</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Just make sure that your app is consistent, though.</p>
<p>When an app plugin runs on the server, you will have access to one more parameter (called <code>ssrContext</code>) on the default exported function:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// some app plugin</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; app, ..., ssrContext &#125;) =&gt; &#123;</span><br><span class="line">  <span class="comment">// ssrContext has: &#123; url, req, res &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// You can add props to the ssrContext then use them in the src/index.template.html.</span></span><br><span class="line">  <span class="comment">// Example - let's say we ssrContext.someProp = 'some value', then in index template we can reference it:</span></span><br><span class="line">  <span class="comment">// &#123;&#123; someProp &#125;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>When you add such references (<code>someProp</code> surrounded by brackets in the example above) into your <code>src/index.template.html</code>, make sure you tell Quasar it’s only valid for SSR builds:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.template.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">htmlWebpackPlugin.options.ctx.mode.ssr</span>) &#123; %&gt;</span>&#123;&#123; someProp &#125;&#125; <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Client Side Hydration]]></title>
      <url>https://quasar-framework.org/guide/ssr-client-side-hydration.html</url>
      <content type="html"><![CDATA[<p>Hydration refers to the client-side process during which Vue takes over the static HTML sent by the server and turns it into dynamic DOM that can react to client-side data changes.</p>
<p>Since the server has already rendered the markup, we obviously do not want to throw that away and re-create all the DOM elements. Instead, we want to “hydrate” the static markup and make it interactive.</p>
<blockquote>
<p>In development mode, Vue will assert the client-side generated virtual DOM tree matches the DOM structure rendered from the server. If there is a mismatch, it will bail hydration, discard existing DOM and render from scratch. <strong>In production mode, this assertion is disabled for maximum performance.</strong></p>
</blockquote>
<h2 id="Hydration-Caveats"><a href="#Hydration-Caveats" class="headerlink" title="Hydration Caveats"></a>Hydration Caveats</h2><p>One thing to be aware of when using SSR + client hydration is some special HTML structures that may be altered by the browser. For example, when you write this in a Vue template:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>hi<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The browser will automatically inject <code>&lt;tbody&gt;</code> inside <code>&lt;table&gt;</code>, however, the virtual DOM generated by Vue does not contain <code>&lt;tbody&gt;</code>, so it will cause a mismatch. To ensure correct matching, make sure to write valid HTML in your templates.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Deploying SSR]]></title>
      <url>https://quasar-framework.org/guide/ssr-deploying.html</url>
      <content type="html"><![CDATA[<p>When deploying as a SPA or PWA, the distributables folder that gets generated by Quasar CLI can be served by a static webserver. However, this not the case with a SSR (Server-side Render) build. Your distributables, in this case, contain your production webserver too – which can be tweaked from <code>/src-ssr</code>.</p>
<p>By default, the SSR distributables use <a href="https://expressjs.com/" target="_blank" rel="noopener">Express</a>, but you can replace it with your webserver of choice.</p>
<h2 id="The-Distributables-Folder"><a href="#The-Distributables-Folder" class="headerlink" title="The Distributables Folder"></a>The Distributables Folder</h2><p>After building your app on SSR mode (<code>$ quasar build -m ssr</code>) the folder that gets generated contains a standalone webserver tweaked for serving with SSR.</p>
<p>You’ll notice that it contains a <code>package.json</code> file of its own. It has an npm script defined, called “start”:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"node index.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>So what you need to do when deploying is to copy this distributables folder on your server, yarn/npm install the dependencies inside it, then run <code>$ yarn start</code> or <code>$ npm run start</code>. This boots up the webserver and starts listening for connections.</p>
<h2 id="Enhancing-Performance"><a href="#Enhancing-Performance" class="headerlink" title="Enhancing Performance"></a>Enhancing Performance</h2><p>By default, the webserver runs on only one of the available server’s cores. What you could do is make it use all cores. There is a solution for this: <a href="http://pm2.keymetrics.io/" target="_blank" rel="noopener">PM2</a>.</p>
<p>After installing PM2 on your server, your npm start script can look like this instead:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"pm2 start index.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Deploying-with-Now-sh"><a href="#Deploying-with-Now-sh" class="headerlink" title="Deploying with Now.sh"></a>Deploying with Now.sh</h2><p>Deploying with <a href="https://zeit.co/now" target="_blank" rel="noopener">Now</a> is a breeze. All you need to do is to follow their <a href="https://zeit.co/now#get-started" target="_blank" rel="noopener">installation instructions</a>. They recommend downloading “Now Desktop” but you can skip that and directly install the Now CLI:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g now</span><br><span class="line">$ now login</span><br></pre></td></tr></table></figure>
<p>Then, you cd into the distributables folder and run <code>$ now</code>. You might want to use a “now alias” or connect your domain to Now. And you’re done!</p>
<p><code>Now.sh</code> will npm install the dependencies automatically then run <code>$ npm run start</code>. Your website will be up and running on an HTTPS connection in a matter of seconds!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SSR Handling of 404 and 500 Errors]]></title>
      <url>https://quasar-framework.org/guide/ssr-handling-404-and-500-errors.html</url>
      <content type="html"><![CDATA[<p>The handling of the 404 &amp; 500 errors on SSR is a bit different than on the other modes (like SPA). If you check out <code>/src-ssr/index.js</code> (which is your production webserver), you will notice the following section:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// this should be last get(), rendering with SSR</span></span><br><span class="line">app.get(<span class="string">'*'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/html'</span>)</span><br><span class="line">  ssr.renderToString(&#123; req, res &#125;, (err, html) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err.url) &#123;</span><br><span class="line">        res.redirect(err.url)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (err.code === <span class="number">404</span>) &#123;</span><br><span class="line">        res.status(<span class="number">404</span>).send(<span class="string">'404 | Page Not Found'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Render Error Page or Redirect</span></span><br><span class="line">        res.status(<span class="number">500</span>).send(<span class="string">'500 | Internal Server Error'</span>)</span><br><span class="line">        <span class="keyword">if</span> (ssr.settings.debug) &#123;</span><br><span class="line">          <span class="built_in">console</span>.error(<span class="string">`500 on <span class="subst">$&#123;req.url&#125;</span>`</span>)</span><br><span class="line">          <span class="built_in">console</span>.error(err)</span><br><span class="line">          <span class="built_in">console</span>.error(err.stack)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      res.send(html)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>The section above is written after catching the other possible requests (like for /statics folder, the manifest.json and service worker, etc). This is where we initialize your app, along with your Router and Vue gets to render the requested page.</p>
<h3 id="Things-to-be-aware-of"><a href="#Things-to-be-aware-of" class="headerlink" title="Things to be aware of"></a>Things to be aware of</h3><p>We’ll discuss some architectural decisions that you need to be aware of. Choose whatever fits your app best.</p>
<h4 id="Error-404"><a href="#Error-404" class="headerlink" title="Error 404"></a>Error 404</h4><p>If you define an equivalent 404 route on your Vue Router <code>/src/router/routes.js</code> file (like below), then <code>if (err.code === 404) {</code> part from the example above will NEVER be <code>true</code> since Vue Router already handled it.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Example of route for catching 404 with Vue Router</span></span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">'*'</span>, <span class="attr">component</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'pages/error404.vue'</span>) &#125;</span><br></pre></td></tr></table></figure>
<p>For best performance and server load, it is recommended to avoid configuring a 404 page with Vue Router and leave the SSR production webserver handle it. In your <code>/src/router/routes.js</code> you could preferentially catch 404 only for non-SSR mode like this:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// assuming you have a "routes" array</span></span><br><span class="line"><span class="keyword">if</span> (process.env.MODE !== <span class="string">'ssr'</span>) &#123;</span><br><span class="line">  routes.push(&#123;</span><br><span class="line">    path: <span class="string">'*'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'pages/error404.vue'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Error-500"><a href="#Error-500" class="headerlink" title="Error 500"></a>Error 500</h4><p>On the <code>/src-ssr/index.js</code> example at the top of the page, notice that if the webserver encounters any rendering error, we send a simple string back to the client (‘500 | Internal Server Error’). If you want to show a nice page instead, you could:</p>
<ol>
<li><p>Add a specific route in <code>/src/router/routes.js</code>, like:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>: <span class="string">'error500'</span>, <span class="attr">component</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'pages/Error500.vue'</span>) &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Write the Vue component to handle this page. In this example, we create <code>/src/pages/Error500.vue</code></p>
</li>
<li>Then in <code>/src-ssr/index.js</code>:<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (err.url) &#123; ... &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (err.code === <span class="number">404</span>) &#123; ... &#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// We got a 500 error here;</span></span><br><span class="line">  <span class="comment">// We redirect to our "error500" route newly defined at step #1.</span></span><br><span class="line">  res.redirect(<span class="string">'/error500'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>The only caveat is that you need to be sure that while rendering ‘/error500’ route you don’t get another 500 error, which would put your app into an infinite loop!</strong></p>
<p>A perfect approach to avoid this would simply be to directly return the HTML (as String) of the error 500 page from <code>/src-ssr/index.js</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.status(<span class="number">500</span>).send(<span class="string">`&lt;html&gt;....&lt;/html&gt;`</span>)</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Upgrade Guide]]></title>
      <url>https://quasar-framework.org/guide/quasar-upgrade-guide.html</url>
      <content type="html"><![CDATA[<p>We’ll cover how to upgrade to a new Quasar version in your project, both for <a href="/guide/embedding-quasar.html">UMD</a> and using the project initialization feature of the <a href="/guide/app-installation.html">CLI</a>. Then we’ll go on to discuss how you can migrate v0.15 to v0.16 and your pre v0.15 project to v0.15+.</p>
<h2 id="Upgrading-to-a-newer-Quasar-version"><a href="#Upgrading-to-a-newer-Quasar-version" class="headerlink" title="Upgrading to a newer Quasar version"></a>Upgrading to a newer Quasar version</h2><p>This applies when upgrading from v0.15+ to a newer Quasar version, including v0.16 and v0.17.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br><strong>Quasar v0.15+ requires Node.js version 8.9.0 or greater</strong></p>
</blockquote>
<h3 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h3><p>Simply replace the version string in all the CSS and JS tags that refer to Quasar to the newer version.</p>
<h3 id="The-CLI"><a href="#The-CLI" class="headerlink" title="The CLI"></a>The CLI</h3><p>As you may have noticed, the only dependency in your project (unless you’ve also installed a linter or your own deps) is <code>quasar-cli</code>. All you need is to update this dependency.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn add --dev quasar-cli@latest</span><br><span class="line"><span class="comment"># or:</span></span><br><span class="line">$ npm install --save-dev quasar-cli@latest</span><br></pre></td></tr></table></figure>
<p>Quasar CLI is installed both globally and locally. When you issue a Quasar command, the global installation defers to the project locally installed Quasar CLI. This allows you to skip writing npm scripts in your package.json (for Quasar commands), and also it allows you to run different Quasar versions in multiple projects.</p>
<p>Watch for Quasar CLI version. It’s not the same thing as Quasar version. Type <code>$ quasar info</code>. All you need to know is that the major and minor part of Quasar CLI version matches Quasar version. So for example installing latest Quasar CLI v0.15.x will ensure you are using latest Quasar v0.15.x. While working on v0.15.x, no breaking changes will occur, so you are safe (&amp; recommended) to upgrade to latest Quasar CLI as it’s released.</p>
<blockquote>
<p><strong>Caveat</strong><br>Sometimes after you npm install a package, or even update current packages, might screw things up. You’ll get errors that some packages are missing and you need to install them. In such cases, delete node_modules and package-lock.json and npm install again.<br>Same goes for Yarn. In case you get errors, delete node_modules and yarn.lock then install again.</p>
</blockquote>
<h2 id="Upgrading-v0-16-to-v0-17"><a href="#Upgrading-v0-16-to-v0-17" class="headerlink" title="Upgrading v0.16 to v0.17"></a>Upgrading v0.16 to v0.17</h2><p>There’s only one breaking change, regarding QLayoutDrawer <code>mini-width</code> prop. It is now a Number (instead of String!) defining width in pixels (default: 60).</p>
<blockquote>
<p>v0.17 introduces the SSR mode for Quasar CLI, and the following changes will be required only if you build for SSR too. Otherwise, you can simply upgrade the <code>quasar-cli</code> dependency and benefit from the latest goodies.</p>
</blockquote>
<p>A minor change that you should be aware of is that we are deprecating the special <code>boot</code> app plugin and it will be removed in the next version in favor of using the <a href="/guide/app-prefetch-feature.html">PreFetch Feature</a> in <code>src/App.vue</code> and calling <code>redirect(false)</code> in case you want to abort the initial app render. For the time being it is still available, but you should migrate as soon as possible.</p>
<h3 id="SSR-mode-ONLY"><a href="#SSR-mode-ONLY" class="headerlink" title="SSR mode (ONLY)"></a>SSR mode (ONLY)</h3><p>Like mentioned above, these changes will be required by the Quasar CLI only when you build with SSR mode. After doing these changes you’ll still be able to build the other modes (SPA/PWA/Cordova/Electron) too.</p>
<h5 id="src-router-index-js"><a href="#src-router-index-js" class="headerlink" title="src/router/index.js"></a>src/router/index.js</h5><p>You need to have a default export set to “function ({ store })” which returns a new instance of Router instead of default exporting the Router instance itself.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// OLD WAY</span></span><br><span class="line">  <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line">  <span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line">  <span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">'./routes'</span></span><br><span class="line">  Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// in the new way, we'll wrap the instantiation into:</span></span><br><span class="line">  <span class="comment">// export default function (&#123; store &#125;) --&gt; store is optional</span></span><br><span class="line">  <span class="keyword">const</span> Router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    scrollBehavior: <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">y</span>: <span class="number">0</span> &#125;),</span><br><span class="line">    routes,</span><br><span class="line">    <span class="comment">// Leave these as they are and change from quasar.conf.js instead!</span></span><br><span class="line">    mode: process.env.VUE_ROUTER_MODE,</span><br><span class="line">    base: process.env.VUE_ROUTER_BASE,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// in the new way, this will be no more</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> Router</span><br><span class="line"></span><br><span class="line"><span class="comment">// NEW WAY</span></span><br><span class="line">  <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line">  <span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line">  <span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">'./routes'</span></span><br><span class="line">  Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// DO NOT import the store here as you will receive it as</span></span><br><span class="line">  <span class="comment">// parameter in the default exported function:</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="regexp">/* &#123; store &#125; */</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// IMPORTANT! Instantiate Router inside this function</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">      scrollBehavior: <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">y</span>: <span class="number">0</span> &#125;),</span><br><span class="line">      routes,</span><br><span class="line">      <span class="comment">// Leave these as they are and change from quasar.conf.js instead!</span></span><br><span class="line">      mode: process.env.VUE_ROUTER_MODE,</span><br><span class="line">      base: process.env.VUE_ROUTER_BASE,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Router</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h5 id="src-store-index-js"><a href="#src-store-index-js" class="headerlink" title="src/store/index.js"></a>src/store/index.js</h5><p>You need to have a default export set to “function ()” which returns a new instance of Vuex Store instead of default exporting the Store instance itself.</p>
<p>Some of you might need the Router instance on the Store. It is accessible through <code>this.$router</code> inside your actions, mutations, etc.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// OLD WAY</span></span><br><span class="line">  <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line">  <span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">  <span class="keyword">import</span> example <span class="keyword">from</span> <span class="string">'./module-example'</span></span><br><span class="line">  Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// in the new way, we'll wrap the instantiation into:</span></span><br><span class="line">  <span class="comment">// export default function ()</span></span><br><span class="line">  <span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    modules: &#123;</span><br><span class="line">      example</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// in the new way, this will be no more</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> store</span><br><span class="line"></span><br><span class="line"><span class="comment">// NEW WAY</span></span><br><span class="line">  <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line">  <span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">  <span class="keyword">import</span> example <span class="keyword">from</span> <span class="string">'./module-example'</span></span><br><span class="line">  Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// IMPORTANT! Instantiate Store inside this function</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">      modules: &#123;</span><br><span class="line">        example</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Store</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>Also, if you want to be able to access the Router instance from vuex actions, mutations, etc, you need to make some simple changes (in all of them):</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// OLD WAY:</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> someAction = <span class="function">(<span class="params">context</span>) =&gt;</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NEW WAY:</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">someAction</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// now we have access to:</span></span><br><span class="line">  <span class="keyword">this</span>.$router</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Upgrading-v0-15-to-v0-16"><a href="#Upgrading-v0-15-to-v0-16" class="headerlink" title="Upgrading v0.15 to v0.16"></a>Upgrading v0.15 to v0.16</h2><p>The difference between Quasar v0.15.x and v0.16 is minimal. No big breaking changes as you can see below. The only reason for bumping Quasar’s version is to maintain consistency (same major + minor version) with Quasar CLI (which got an important update: webpack 4, babel 7, Workbox, electron-builder support, ionicons v4 and many more).</p>
<p>Upgrading from v0.15.x should be seamless if you are using Quasar CLI – which will guide you to do some minor changes to your project folder. Note that Ionicons v4 has breaking changes, so if you are using it in your project, then you need to update each such icon to its new name.</p>
<p>If you face any problems, there is probably something conflicting in your npm modules. It is either babel, webpack or eslint. The console messages will tell you more about what is wrong.</p>
<blockquote>
<p><strong>Remember you’ll be using Webpack 4, so all your webpack plugins must be compatible with it</strong>. For example, you need to upgrade to a newer <code>eslint-loader</code>, <code>babel-eslint</code> etc package if you already have it in your package.json as dev dependency.</p>
</blockquote>
<p>If you’re using ESLint, make sure you have these in your package.json (minimum version required):<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"babel-eslint": "^8.2.1",</span><br><span class="line">"eslint": "^4.18.2",</span><br><span class="line">"eslint-config-standard": "^11.0.0",</span><br><span class="line">"eslint-friendly-formatter": "^4.0.1",</span><br><span class="line">"eslint-loader": "^2.0.0",</span><br><span class="line">"eslint-plugin-import": "^2.9.0",</span><br><span class="line">"eslint-plugin-node": "^6.0.1",</span><br><span class="line">"eslint-plugin-promise": "^3.7.0",</span><br><span class="line">"eslint-plugin-standard": "^3.0.1",</span><br><span class="line">"eslint-plugin-vue": "^4.3.0",</span><br></pre></td></tr></table></figure></p>
<p>If you are seeing babel issues when you run <code>quasar dev</code>, then you have probably installed a package that is using babel-core instead of @babel/core - such as <code>cypress-vue-unit-test</code>. To find out which one it is, run: <code>npm ls babel-core</code> and then remove the offending source.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd into project folder</span></span><br><span class="line">$ rm yarn.lock                       <span class="comment"># or: package-lock.json (if installed through npm)</span></span><br><span class="line">$ rm -rf node_modules/</span><br><span class="line">$ yarn global add quasar-cli@latest  <span class="comment"># or: npm install --global quasar-cli@latest</span></span><br><span class="line">$ yarn add --dev quasar-cli@latest   <span class="comment"># or: npm install --save-dev quasar-cli@latest</span></span><br><span class="line">$ yarn                               <span class="comment"># or: npm install</span></span><br></pre></td></tr></table></figure>
<h5 id="Breaking-Changes"><a href="#Breaking-Changes" class="headerlink" title="Breaking Changes:"></a>Breaking Changes:</h5><ul>
<li>QIcon: removed “mat” &amp; “ios” props for performance reasons (use <code>:name=&quot;$q.theme === &#39;mat&#39; ? val : otherVal&quot;</code> instead)</li>
<li>Removed utils &gt; dom &gt; viewport() method (use window.innerHeight/innerWidth instead)</li>
<li>Updated Quasar ionicons set to Ionicons v4 – compatible with <a href="mailto:quasar-extras@2.0" target="_blank" rel="noopener">quasar-extras@2.0</a></li>
</ul>
<h2 id="Upgrading-pre-v0-15-to-Quasar-v0-15"><a href="#Upgrading-pre-v0-15-to-Quasar-v0-15" class="headerlink" title="Upgrading pre v0.15 to Quasar v0.15+"></a>Upgrading pre v0.15 to Quasar v0.15+</h2><p>There’s been A LOT of work done for v0.15. The Quasar CLI has been rewritten from scratch to allow for a stellar development experience (Mobile App developers and Electron will fall in love with it!). Only one CLI initialized project is required in order to handle websites, PWAs, Mobile Apps and Electron Apps. Building any of those is a matter of just adding a parameter to the dev/build command.</p>
<p><strong>Furthermore, you can now use an UMD/standalone version of Quasar to embed in an existing project. No build step is required.</strong></p>
<p>Take some time to read all “Guide” pages once again. It will help you understand the true power of Quasar v0.15+ and what you can do with it.</p>
<p>So, what is new and what has changed? Everything has been polished. The full list of enhancements and new features is exhausting. We’ll try to cover the major parts only. This is just a guide to get you started so that you know where to look in docs for things that have changed.</p>
<h3 id="First-step-when-using-the-CLI"><a href="#First-step-when-using-the-CLI" class="headerlink" title="First step - when using the CLI"></a>First step - when using the CLI</h3><p>First we make sure we update the globally installed Quasar version (needs to be at least v0.15). Then we create a new project folder:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Node.js &gt;= 8.9.0 is required.</span></span><br><span class="line">$ yarn global add quasar-cli@latest</span><br><span class="line"><span class="comment"># or:</span></span><br><span class="line">$ npm install -g quasar-cli@latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># Then we create a project folder with Quasar CLI:</span></span><br><span class="line">$ quasar init &lt;folder_name&gt;</span><br></pre></td></tr></table></figure></p>
<p>Observe the new <a href="/guide/app-directory-structure.html">project structure</a>. Start to port out files to the new project folder, taking into account the far superior structure. <strong>Using the new project initialization feature will allow you to take advantage of future seamless upgrades!</strong> In any case, do not simply copy your <code>/src</code> folder over to the newly initialized project folder.</p>
<h3 id="Build-configuration-no-longer-required"><a href="#Build-configuration-no-longer-required" class="headerlink" title="Build configuration no longer required"></a>Build configuration no longer required</h3><p>You’ll notice a newly initialized project doesn’t provide a <code>/build</code> or <code>/config</code> folders. They are no longer required. Everything can be easily configured from <code>/quasar.conf.js</code> now. You don’t need to know Webpack. <a href="/guide/app-quasar.conf.js.html">More Info</a>.</p>
<h3 id="No-main-js"><a href="#No-main-js" class="headerlink" title="No main.js?"></a>No main.js?</h3><p>Yes. It’s no longer there because you don’t need it anymore. For initialization code and importing libraries into your website/app, read about <a href="/guide/app-plugins.html">App Plugins</a>.</p>
<h3 id="Importing-Components-Directives-etc"><a href="#Importing-Components-Directives-etc" class="headerlink" title="Importing Components/Directives/etc"></a>Importing Components/Directives/etc</h3><p>You’re no longer required to import Quasar components and directives anywhere in your app. Simply configuring <code>/quasar.conf.js</code> in <code>framework</code> Object will suffice. <a href="/guide/app-quasar.conf.js.html">More Info</a>.</p>
<h3 id="Quasar-Plugins"><a href="#Quasar-Plugins" class="headerlink" title="Quasar Plugins?"></a>Quasar Plugins?</h3><p>Yes, this refers to Action Sheet, Notify (replacement of Toast and Alert), LocalStorage/SessionStorage and so on. They are available globally or under the Vue <code>$q</code> Object injection, and need to be specified in <code>/quasar.conf.js &gt; framework &gt; plugins</code> in order for them to be available.</p>
<h3 id="Revamps"><a href="#Revamps" class="headerlink" title="Revamps"></a>Revamps</h3><ul>
<li>Typography</li>
<li>Flex CSS gutter classes</li>
<li>QLayout &amp; co. You’ll love the new features! Be sure to check this out. Major improvements in syntax and flexibility. Some breaking changes, like slots no longer being used.</li>
<li>QBtn (new features!)</li>
<li>QToolbar (small update regarding buttons)</li>
<li>QBreadcrumbs (powerful component instead of just CSS)</li>
<li>QPagination (major improvements)</li>
<li>QCollapsible (new powerful features!)</li>
<li>QTable (replacing QDataTable – full customization now!)</li>
<li>Lists &amp; List Items – more options, better control, “dark” theme</li>
<li>QTree (the most advanced you’ll ever see and need!)</li>
<li>ActionSheet (now as a Quasar Plugin &amp; QActionSheet component too! – has new features too)</li>
<li>Dialog (now as a Quasar Plugin &amp; QDialog component too for unlimited flexibility! – has new features too)</li>
<li>QModal - Easier to use than ever! Now with full v-model support.</li>
<li>QPopover &amp; QTooltip - new animation, ability to close it without the need of a Vue reference (through <code>v-close-overlay</code> directive), full support for v-model now</li>
<li>Loading (now as a Quasar Plugin)</li>
<li>QCarousel - Easier to use. Fully customizable!</li>
<li>Transitions - No need for QTransition anymore! Minimum overhead, better performance.</li>
<li>QAlert - new features</li>
<li>QChat - new features</li>
<li>TouchSwipe, TouchHold and TouchPan - Much better implementation, more control. Read about these directive’s modifiers.</li>
<li>AppFullscreen &amp; AppVisibility - Now as Quasar Plugins, with reactive state properties that can be used in Vue watchers</li>
<li>QUploader - new features &amp; design</li>
</ul>
<p>Also notice QInlineDatetime has been renamed to QDatetimePicker.</p>
<h3 id="New-Components-or-Features"><a href="#New-Components-or-Features" class="headerlink" title="New Components or Features"></a>New Components or Features</h3><ul>
<li><a href="/components/spacing.html">Spacing</a> CSS classes</li>
<li><a href="/components/datatable.html">QTable</a> - It’s on the Revamps list too, but it sure deserves a place here too. Prepare for next level Data Tables, now fully customizable! Check out the demo too.</li>
<li><a href="/components/editor---wysiwyg.html">QEditor</a> - Quasar’s own WYSIWYG approach! This alone would deserve its own section.</li>
<li><a href="/components/notify.html">Notify</a> - A merge between Toast and Alert, with flexible positioning and awesome animations.</li>
<li><a href="/components/color-input.html">QColor</a> - Color Picker!</li>
<li>New button types: <a href="/components/button-group.html">QBtnGroup</a> and <a href="/components/dropdown-button.html">QBtnDropdown</a></li>
<li><a href="/components/button-toggle.html">QBtnToggle</a> - A radio-like component, but with buttons</li>
</ul>
<h3 id="I18n-for-Quasar-Components"><a href="#I18n-for-Quasar-Components" class="headerlink" title="I18n for Quasar Components"></a>I18n for Quasar Components</h3><p>Be sure to check out the <a href="/components/internationalization.html">Internationalization</a> for Quasar Components.</p>
<h3 id="Icon-Packs"><a href="#Icon-Packs" class="headerlink" title="Icon Packs"></a>Icon Packs</h3><p>You can now tell Quasar to use one of Fontawesome, Ionicons, MDI or Material Icons for its components. You are no longer required to include Material Icons. You can use any of these packs as default.</p>
<p>Also, small change for Fontawesome icons:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pre v0.15 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"fa-paypal fab"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- v0.15+ --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Copy paste fontawesome icon class as it's in fontawesome docs now --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"fab fa-paypal"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Vue-Prototype-Injections"><a href="#Vue-Prototype-Injections" class="headerlink" title="Vue Prototype Injections"></a>Vue Prototype Injections</h3><p>You can use <code>$q</code> injection for convenience, accessing Quasar Theme, Quasar I18n, Quasar Platform, and many more. Quasar Plugins add functionality to it. Read <a href="/components/vue-prototype-injections.html">doc page</a>, especially if you build Cordova or Electron apps.</p>
<h3 id="What-has-been-dropped"><a href="#What-has-been-dropped" class="headerlink" title="What has been dropped?"></a>What has been dropped?</h3><ul>
<li>Global Event Bus (Events) – no longer needed. Use Vue root component events instead. <a href="/components/global-event-bus.html">More Info</a></li>
<li>QFixedPosition – now replaced by a more powerful QPageSticky</li>
<li>QSideLink – no longer required! Simply use a QItem or whatever component you want and bind an <code>@click=&quot;$router.push(...)&quot;</code> to it.</li>
<li>Alert and Toast as methods. They’ve been merged into <a href="/components/notify.html">Notify</a>.</li>
<li>HTML Table. You can however check code from v0.14 and embed it yourself into your app.</li>
<li>Image Gallery - no longer needed. The new QCarousel is so powerful that you’ll immediately see the benefit of switching to it.</li>
<li>QTransition - no longer required. Simply use Vue’s <code>&lt;transition&gt;</code> (or <code>&lt;transition-group&gt;</code>) instead. <a href="/components/transition.html">More Info</a></li>
<li>QDatetimeRange - it’s so easy to simply write two QDatetime side by side that this component is simply not required anymore; this allows you full flexibility too.</li>
</ul>
<h3 id="New-Layout"><a href="#New-Layout" class="headerlink" title="New Layout"></a>New Layout</h3><p>The following upgrade guide for <a href="/components/layout.html">QLayout</a> barely scratches the surface, but it’s a starting point.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- v0.14 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-layout</span> <span class="attr">ref</span>=<span class="string">"layout"</span> <span class="attr">view</span>=<span class="string">"hHr LpR lFf"</span> <span class="attr">:right-breakpoint</span>=<span class="string">"1100"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Header --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> @<span class="attr">click</span>=<span class="string">"$refs.layout.toggleLeft()"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"menu"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line">      Layout Header</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"subtitle"</span>&gt;</span>Optional subtitle<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> @<span class="attr">click</span>=<span class="string">"$refs.layout.toggleRight()"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"menu"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Navigation --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tabs</span> <span class="attr">slot</span>=<span class="string">"navigation"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-route-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">icon</span>=<span class="string">"view_quilt"</span> <span class="attr">to</span>=<span class="string">"/test-layout/about"</span> <span class="attr">replace</span> <span class="attr">hide</span>=<span class="string">"icon"</span> <span class="attr">label</span>=<span class="string">"About"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-route-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">icon</span>=<span class="string">"view_day"</span> <span class="attr">to</span>=<span class="string">"/test-layout/toolbar"</span> <span class="attr">replace</span> <span class="attr">hide</span>=<span class="string">"icon"</span> <span class="attr">label</span>=<span class="string">"Toolbar"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-route-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">icon</span>=<span class="string">"view_day"</span> <span class="attr">to</span>=<span class="string">"/test-layout/tabs"</span> <span class="attr">replace</span> <span class="attr">label</span>=<span class="string">"Tabs"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-route-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">icon</span>=<span class="string">"input"</span> <span class="attr">to</span>=<span class="string">"/test-layout/drawer"</span> <span class="attr">replace</span> <span class="attr">label</span>=<span class="string">"Drawer"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-tabs</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Left Side Panel --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-list</span> <span class="attr">no-border</span> <span class="attr">link</span> <span class="attr">inset-separator</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Essential Links<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-side-link</span> <span class="attr">item</span> <span class="attr">to</span>=<span class="string">"/docs"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"school"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Docs"</span> <span class="attr">sublabel</span>=<span class="string">"quasar-framework.org"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-side-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Right Side Panel --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">    Right Side of Layout</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- sub-routes get injected here: --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Footer --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">slot</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line">      Layout Footer</span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>We upgrade it to v0.15+. Notice that in order for us to place navigation tabs on header (for Material) and on Footer (for iOS), we also write a NavTabs component. Notice no slots, no QSideLink, “flat round dense” buttons, v-model on left/right drawers, QLayout* components:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- layout component --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-layout</span> <span class="attr">ref</span>=<span class="string">"layout"</span> <span class="attr">view</span>=<span class="string">"hHr LpR lFf"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Header --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout-header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">round</span> <span class="attr">dense</span> <span class="attr">icon</span>=<span class="string">"menu"</span> @<span class="attr">click</span>=<span class="string">"leftSide = !leftSide"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line">        Layout Header</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"subtitle"</span>&gt;</span>Optional subtitle<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">round</span> <span class="attr">dense</span> <span class="attr">icon</span>=<span class="string">"menu"</span> @<span class="attr">click</span>=<span class="string">"rightSide = !rightSide"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Navigation for Material theme --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav-tabs</span> <span class="attr">v-if</span>=<span class="string">"$q.theme === 'mat'"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Left Side Panel --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout-drawer</span> <span class="attr">v-model</span>=<span class="string">"leftSide"</span> <span class="attr">side</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-list</span> <span class="attr">no-border</span> <span class="attr">link</span> <span class="attr">inset-separator</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Essential Links<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">to</span>=<span class="string">"/docs"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"school"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Docs"</span> <span class="attr">sublabel</span>=<span class="string">"quasar-framework.org"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout-drawer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Right Side Panel --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout-drawer</span> <span class="attr">v-model</span>=<span class="string">"rightSide"</span> <span class="attr">side</span>=<span class="string">"right"</span> <span class="attr">:breakpoint</span>=<span class="string">"1100"</span>&gt;</span></span><br><span class="line">    Right Side of Layout</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout-drawer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- sub-routes get injected here: --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-page-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-page-container</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Footer --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout-footer</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Navigation for iOS theme --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav-tabs</span> <span class="attr">v-if</span>=<span class="string">"$q.theme === 'ios'"</span> /&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout-footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- nav-tabs component --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-tabs</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-route-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">icon</span>=<span class="string">"view_quilt"</span> <span class="attr">to</span>=<span class="string">"/test-layout/about"</span> <span class="attr">replace</span> <span class="attr">hide</span>=<span class="string">"icon"</span> <span class="attr">label</span>=<span class="string">"About"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-route-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">icon</span>=<span class="string">"view_day"</span> <span class="attr">to</span>=<span class="string">"/test-layout/toolbar"</span> <span class="attr">replace</span> <span class="attr">hide</span>=<span class="string">"icon"</span> <span class="attr">label</span>=<span class="string">"Toolbar"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-route-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">icon</span>=<span class="string">"view_day"</span> <span class="attr">to</span>=<span class="string">"/test-layout/tabs"</span> <span class="attr">replace</span> <span class="attr">label</span>=<span class="string">"Tabs"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-route-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">icon</span>=<span class="string">"input"</span> <span class="attr">to</span>=<span class="string">"/test-layout/drawer"</span> <span class="attr">replace</span> <span class="attr">label</span>=<span class="string">"Drawer"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-tabs</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Form-Components"><a href="#Form-Components" class="headerlink" title="Form Components"></a>Form Components</h3><p>In previous versions you would listen for <code>@change</code> event to detect changes. Now you can listen to <code>@input</code> for immediate changes or <code>@change</code> for <strong>lazy update</strong>. Vue <code>v-model.lazy</code> support is a pending change, so until then you can use the equivalent form (details below).</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- QInput example --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- same as listening for @input --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"myModel"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- listening for lazy update --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">:value</span>=<span class="string">"myModel"</span> @<span class="attr">change</span>=<span class="string">"val =&gt; &#123; myModel = val &#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>You’ll notice all form components have been polished. Also, you’ll be pleasantly surprised by new properties. To name just a few: “hide-underline”, “inverted-light”, “dark” or “warning” (for highlighting a warning state).</p>
<p>Prior to v0.15, form components had a default margin. This was removed to allow easier customization. You can now use the new <a href="/components/spacing.html">Spacing CSS classes</a> to do it.</p>
<p>QCheckbox now supports an indeterminate state as well. You can specify a value for “true”/“false”/“indeterminate” states, so it no longer operates with Booleans (or Arrays) only.</p>
<p>QDatetime now doesn’t require the “Set” button when using Popovers. Clicking on a date will simply select it and close the popover.</p>
<p>QChipsInput (&amp; QChips) have new props that allow for better customization now.</p>
<h3 id="Using-Promises"><a href="#Using-Promises" class="headerlink" title="Using Promises"></a>Using Promises</h3><p>Modals, Popovers, Tooltips, Layout Drawer, Dialog, Notify (just to name a few) now use Promises instead of taking a callback parameter. This allows you to take advantage of async/await and simplifies your code.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  <span class="keyword">async</span> showNotify () &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">this</span>.$q.dialog(<span class="string">'Some dialog...'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Dialog has been closed'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Vue-refs-no-longer-necessary-for-a-lot-of-components"><a href="#Vue-refs-no-longer-necessary-for-a-lot-of-components" class="headerlink" title="Vue refs no longer necessary for a lot of components"></a>Vue refs no longer necessary for a lot of components</h3><p>You were also used to using Vue refs for a few components (Layout left/right drawer, Modals, …). This is no longer necessary. You can use a “v-model” instead to show (open) / hide (close) them. This wasn’t quite possible pre v0.15 because you needed for them to close in order to, as an example, navigate away. Now it’s no longer needed, so a Boolean scoped variable will suffice.</p>
<h3 id="Some-components-need-native-modifier-for-events-now"><a href="#Some-components-need-native-modifier-for-events-now" class="headerlink" title="Some components need .native modifier for events now"></a>Some components need .native modifier for events now</h3><p>Some components, like QItem or QCard &amp; co now need the <code>.native</code> modifier for binding to native DOM events like <code>click</code>. A general rule is: if <code>@click</code> is not mentioned in the component’s docs Vue Events section, then you need to use <a href="https://vuejs.org/v2/guide/components.html#Binding-Native-Events-to-Components" target="_blank" rel="noopener">the native modifier</a>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- prior to v0.15 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-item</span> @<span class="attr">click</span>=<span class="string">"..."</span>&gt;</span>....<span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- v0.15+ way: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-item</span> @<span class="attr">click.native</span>=<span class="string">"..."</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>A few Quasar components were of functional type. These pass native events right through, so there’s no need to add the native modifier. But during a thorough benchmarking session it turned out having these as regular components meant better performance due to a number of reasons. Switching these components from functional to regular adds this small breaking change where you need to use the native modifier.</p>
<h3 id="We-were-using-different-env-for-dev-and-production"><a href="#We-were-using-different-env-for-dev-and-production" class="headerlink" title="We were using different env for dev and production"></a>We were using different env for dev and production</h3><p>You still can! Only now it’s even better, due to <code>/quasar.conf.js</code> features. <a href="/guide/app-quasar.conf.js.html#Example-setting-env-for-dev-build">More Info</a></p>
<h3 id="New-directive-v-close-overlay"><a href="#New-directive-v-close-overlay" class="headerlink" title="New directive: v-close-overlay"></a>New directive: v-close-overlay</h3><p>All components using popups, like Modal, Dialog, Popover, Context Menu, now support a much simplified way of closing them. Instead of using a Vue reference, which is troublesome for some use cases, you can simply add <code>v-close-overlay</code> to the element/component that you wish to close the popup. This directive listens for the <code>@click</code> event, determines the first parent popup component and closes it.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">label</span>=<span class="string">"I got a Popover"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-popover</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">v-close-overlay</span> <span class="attr">name</span>=<span class="string">"close"</span> /&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-popover</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Handling-Back-Button"><a href="#Handling-Back-Button" class="headerlink" title="Handling Back Button"></a>Handling Back Button</h3><p>Unfortunately, the automatic handling of back button was a one of the features that was the hardest to comprehend. It required you to handle Vue references (which beginners on Vue were struggling with) and didn’t fully allow you to connect components like Drawers &amp; Modals to Vuex in an easy way. Now it only works on Mobile Apps (for example Android has a back button that is handled by Quasar). The removal of this feature for websites greatly simplify your code:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-modal</span> <span class="attr">v-model</span>=<span class="string">"modal"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-modal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">label</span>=<span class="string">"Open modal"</span> @<span class="attr">click</span>=<span class="string">"modal = true"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Buttons"><a href="#Buttons" class="headerlink" title="Buttons"></a>Buttons</h3><p>While QBtn still allows you to specify icon and label as children nodes, it is now recommended that you use the “icon” and “label” props instead:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">icon</span>=<span class="string">"map"</span> <span class="attr">label</span>=<span class="string">"See map"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- instead of old: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">class</span>=<span class="string">"on-left"</span> <span class="attr">name</span>=<span class="string">"map"</span> /&gt;</span></span><br><span class="line">  See map</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Be sure to check out the new button types and props too.</p>
<h3 id="Quasar-CLI-and-Pre-0-15-Apps"><a href="#Quasar-CLI-and-Pre-0-15-Apps" class="headerlink" title="Quasar CLI and Pre-0.15 Apps"></a>Quasar CLI and Pre-0.15 Apps</h3><p>The Quasar CLI v0.15+ is not compatible with pre-0.15 apps. You can install the latest CLI globally while still supporting <code>quasar</code> commands in legacy apps by adding <code>quasar-cli</code> as a development dependency. To support 0.14 and earlier you need quasar-cli v0.6.5.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn add --dev quasar-cli@0.6.5</span><br><span class="line"><span class="comment"># or:</span></span><br><span class="line">$ npm install --save-dev quasar-cli@0.6.5</span><br></pre></td></tr></table></figure>
<p>This will add the legacy <code>quasar</code> CLI tool to your projects <code>./node_modules/.bin/</code> directory.</p>
<p>Use the <a href="https://www.npmjs.com/package/npx" target="_blank" rel="noopener">npx</a> tool (automatically installed alongside npm) to run <code>quasar</code> from your local node modules. For example:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npx quasar dev</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SSR with PWA Client Takeover]]></title>
      <url>https://quasar-framework.org/guide/ssr-with-pwa.html</url>
      <content type="html"><![CDATA[<p>With Quasar CLI you can build your app with the killer combo of SSR + PWA. In order to enable PWA for SSR builds, you need to edit your <code>/quasar.conf.js</code> first:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// quasar.conf.js</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  ssr: &#123;</span><br><span class="line">    pwa: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The first request will be served from the webserver. The PWA gets installed then it takes over on client side.</p>
<blockquote>
<p>For more information on PWA, head on to <a href="/guide/pwa-introduction.html">PWA Introduction</a> and read the whole PWA Guide section.</p>
</blockquote>
<h2 id="Caveat"><a href="#Caveat" class="headerlink" title="Caveat"></a>Caveat</h2><p>One caveat to be aware of is that, as opposed to a normal PWA build, you need to also specify the URL routes that you wish to cache. The quasar.conf &gt; ssr &gt; pwa can have the Object form, specifying workbox options that will get applied on top of quasar.conf &gt; pwa &gt; workboxOptions. So we’ll be using this to add our routes to the runtime caching:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// quasar.conf.js</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  ssr: &#123;</span><br><span class="line">    <span class="comment">// we use the Object form of "pwa" now:</span></span><br><span class="line">    pwa: &#123;</span><br><span class="line">      runtimeCaching: [</span><br><span class="line">        &#123;</span><br><span class="line">          urlPattern: <span class="string">'/user'</span>,</span><br><span class="line">          handler: <span class="string">'networkFirst'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// using a regex, especially useful</span></span><br><span class="line">          <span class="comment">// when you have Vue Routes with parameters</span></span><br><span class="line">          urlPattern: <span class="regexp">/\/dashboard\/.*/</span>,</span><br><span class="line">          handler: <span class="string">'networkFirst'</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The index route (<code>/</code>) is added by default, but you can overwrite it if you want. In the example above, we’re caching routes <code>/</code>, <code>/user</code> and <code>/dashboard/**</code>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mobile Addressbar Coloring]]></title>
      <url>https://quasar-framework.org/components/addressbar-color.html</url>
      <content type="html"><![CDATA[<p>Newer mobile browsers have the ability to specify a color for the addressbar, like in the example below.</p>
<blockquote>
<p><strong>Note 1.</strong> There isn’t yet a Web standard for this so it won’t work for all mobile browsers.<br><strong>Note 2.</strong> This applies when building a website only. For coloring top bar on a mobile app (built with Cordova wrapper), please refer to <a href="https://cordova.apache.org/plugins/" target="_blank" rel="noopener">Cordova plugins</a>.</p>
</blockquote>
<p><img src="/images/mobile-address-bar-colors.jpg" alt="Mobile Addressbar Coloring" title="Mobile Addressbar Coloring"></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>First, we need to indicate that we want the AddressbarColor Quasar plugin embedded into our website/app:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file: /quasar.conf.js</span></span><br><span class="line">framework: &#123;</span><br><span class="line">  plugins: [<span class="string">'AddressbarColor'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Then we create an app plugin to initialize its usage: <code>quasar new plugin addressbar-color</code>. A file is created (<code>/src/plugins/addressbar-color.js</code>). We edit it:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; AddressbarColor &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  AddressbarColor.set(<span class="string">'#a2e3fa'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>What this does is that it injects some <code>&lt;meta&gt;</code> tags into your <code>index.html</code> at runtime. This means, as an example, that you can dynamically change this color during runtime multiple times, based on the page the user is on (by calling <code>set</code> method on <code>created()</code> lifecycle hook on the respective pages):</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a .vue file representing a page</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...,</span></span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="keyword">this</span>.$q.addressbarColor.set(<span class="string">'#a2e3fa'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Calling <code>set()</code> with no parameters will use the primary color.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[What is SSR]]></title>
      <url>https://quasar-framework.org/guide/ssr-introduction.html</url>
      <content type="html"><![CDATA[<p>Quasar and Vue.js are frameworks for building client-side applications. By default, Quasar Vue components produce and manipulate DOM in the browser as output. However, it is also possible to render the same components into HTML strings on the server, send them directly to the browser, and finally “hydrate” the static markup into a fully interactive app on the client.</p>
<p>A server-rendered Quasar app can also be considered “isomorphic” or “universal”, in the sense that the majority of your app’s code runs on both the server and the client.</p>
<h2 id="Why-SSR"><a href="#Why-SSR" class="headerlink" title="Why SSR?"></a>Why SSR?</h2><p>Compared to a traditional SPA (Single-Page Application), the advantage of SSR primarily lies in:</p>
<ul>
<li><strong>Better SEO</strong>, as the search engine crawlers will directly see the fully rendered page.</li>
<li><strong>Faster time-to-content</strong>, especially on slow internet or slow devices. Server-rendered markup doesn’t need to wait until all JavaScript has been downloaded and executed to be displayed, so your user will see a fully-rendered page sooner. This generally results in better user experience, and can be critical for applications where time-to-content is directly associated with conversion rate.</li>
</ul>
<p>There are also some trade-offs to consider when using SSR:</p>
<ul>
<li><strong>Development constraints</strong>. Browser-specific code can only be used inside certain lifecycle hooks; some external libraries may need special treatment to be able to run in a server-rendered app.</li>
<li><strong>More server-side load</strong>. Rendering a full app in Node.js is obviously going to be more CPU-intensive than just serving static files, so if you expect high traffic, be prepared for corresponding server load and wisely employ caching strategies.</li>
</ul>
<p>Before using SSR for your app, the first question you should ask is whether you actually need it. It mostly depends on how important time-to-content is for your app. For example, if you are building an internal dashboard where an extra few hundred milliseconds on initial load doesn’t matter that much, SSR would be an overkill. However, in cases where time-to-content is absolutely critical, SSR can help you achieve the best possible initial load performance.</p>
<hr>
<p>Most of the content on this page is taken from the official <a href="https://ssr.vuejs.org/#what-is-server-side-rendering-ssr" target="_blank" rel="noopener">Vue.js SSR guide</a>, which is a recommended read for you before digging into SSR with Quasar.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Action Sheet]]></title>
      <url>https://quasar-framework.org/components/action-sheet.html</url>
      <content type="html"><![CDATA[<p>Action Sheets slide up from the bottom edge of the device screen, and display a set of options with the ability to confirm or cancel an action. Action Sheets can sometimes be used as an alternative to menus, however, they should not be used for navigation.</p>
<p>The Action Sheet always appears above any other components on the page, and must be dismissed in order to interact with the underlying content. When it is triggered, the rest of the page darkens to give more focus to the Action Sheet options.</p>
<input type="hidden" data-fullpage-demo="popups/action-sheet">

<p>Action Sheets can be displayed as a list or as a grid, with icons or with avatars. They can be used either as a component in your Vue file templates, or as a globally available method.</p>
<h2 id="Basic-Usage-as-a-Method"><a href="#Basic-Usage-as-a-Method" class="headerlink" title="Basic Usage as a Method"></a>Basic Usage as a Method</h2><p>First, we install it:</p>
<p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  plugins: [<span class="string">'ActionSheet'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Now let’s see how we can use it:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// outside of a Vue file</span></span><br><span class="line"><span class="keyword">import</span> &#123; ActionSheet &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line">(<span class="built_in">Promise</span>) ActionSheet.create(configObj)</span><br><span class="line"></span><br><span class="line"><span class="comment">// inside of a Vue file</span></span><br><span class="line">(<span class="built_in">Promise</span>) <span class="keyword">this</span>.$q.actionSheet(configObj)</span><br></pre></td></tr></table></figure></p>
<p>Basic syntax for the config object:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$q.actionSheet(&#123;</span><br><span class="line">  title: <span class="string">'Article Actions'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// specify ONLY IF you want grid mode:</span></span><br><span class="line">  grid: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// optional; change dismiss label (only for iOS theme)</span></span><br><span class="line">  dismissLabel: <span class="string">'Quit'</span>,</span><br><span class="line"></span><br><span class="line">  actions: [</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Delete'</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Optional</span></span><br><span class="line">      color: <span class="string">'negative'</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Choose one of the following two:</span></span><br><span class="line">      icon: <span class="string">'delete'</span>, <span class="comment">// specify ONLY IF using icon</span></span><br><span class="line">      avatar: <span class="string">'assets/some-avatar.png'</span>, <span class="comment">// specify ONLY IF using avatar</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// optional; what to do when user chooses this action;</span></span><br><span class="line">      <span class="comment">// Can also be handled later by using the returned Promise</span></span><br><span class="line">      <span class="comment">// and identifying the action from "action" param</span></span><br><span class="line">      handler () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Deleted Article'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#123;&#125;, <span class="comment">// optional separator</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>IMPORTANT</strong><br>When user hits the phone/tablet back button (only for Cordova apps), the Action Sheet will get closed automatically.<br>Also, when on a desktop browser, hitting the &lt;ESCAPE&gt; key also closes the Action Sheet.</p>
</blockquote>
<h3 id="Handling-Outcome"><a href="#Handling-Outcome" class="headerlink" title="Handling Outcome"></a>Handling Outcome</h3><p>The returning object when creating an ActionSheet is a Promise, so you can leverage the Promise API to handle the outcome:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$q.actionSheet(&#123;...&#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// user picked an action</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(action)</span><br><span class="line">    <span class="comment">// &#123; label: 'Joe', ... &#125;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// user dismissed Action Sheet</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// OR with async/await:</span></span><br><span class="line"><span class="keyword">async</span> showActionSheet () &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> action = <span class="keyword">await</span> <span class="keyword">this</span>.$q.actionSheet(&#123;...&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// user picked an action at this point</span></span><br><span class="line">    <span class="built_in">console</span>.log(action)</span><br><span class="line">    <span class="comment">// &#123; label: 'Joe', ... &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> () &#123;</span><br><span class="line">    <span class="comment">// user dismissed Action Sheet</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Basic-Usage-As-a-Component"><a href="#Basic-Usage-As-a-Component" class="headerlink" title="Basic Usage As a Component"></a>Basic Usage As a Component</h2><p>First, we install it:</p>
<p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QActionSheet'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Now let’s see how we can use it:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-action-sheet</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">"actionSheet"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">"Action Sheet"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">ok</span>=<span class="string">"onOk"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">cancel</span>=<span class="string">"onCancel"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">show</span>=<span class="string">"onShow"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">hide</span>=<span class="string">"onHide"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:actions</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        label: 'Delete',</span></span></span><br><span class="line"><span class="tag"><span class="string">        icon: 'delete',</span></span></span><br><span class="line"><span class="tag"><span class="string">        color: 'red',</span></span></span><br><span class="line"><span class="tag"><span class="string">        handler: deleteAction</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        label: 'Share',</span></span></span><br><span class="line"><span class="tag"><span class="string">        icon: 'share',</span></span></span><br><span class="line"><span class="tag"><span class="string">        color: 'primary'</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string"></span></span></span><br><span class="line"><span class="tag"><span class="string">      // optional separator</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123;&#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string"></span></span></span><br><span class="line"><span class="tag"><span class="string">      // continuing with other actions</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        label: 'Play',</span></span></span><br><span class="line"><span class="tag"><span class="string">        icon: 'gamepad'</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        label: 'Favorite',</span></span></span><br><span class="line"><span class="tag"><span class="string">        icon: 'favorite'</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    ]"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    there's an optional "title" slot if you have</span></span><br><span class="line"><span class="comment">    something very specific for the ActionSheet title</span></span><br><span class="line"><span class="comment">    (it replaces "title" prop)</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// model for QActionSheet example</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123; <span class="attr">actionSheet</span>: <span class="literal">false</span> &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// custom handler for one of the actions</span></span></span><br><span class="line"><span class="undefined">    deleteAction () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// @ok event will still be triggered</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$q.notify(<span class="string">'Deleting...'</span>)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// user picked one of the actions</span></span></span><br><span class="line"><span class="undefined">    onOk (item) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (item.handler) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// if we've already triggered a handler</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$q.notify(&#123;</span></span><br><span class="line"><span class="javascript">        color: <span class="string">'secondary'</span>,</span></span><br><span class="line"><span class="javascript">        message: <span class="string">`Clicked on "<span class="subst">$&#123;item.label&#125;</span>"`</span></span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// user dismissed ActionSheet</span></span></span><br><span class="line"><span class="undefined">    onCancel () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$q.notify(&#123;</span></span><br><span class="line"><span class="javascript">        color: <span class="string">'tertiary'</span>,</span></span><br><span class="line"><span class="javascript">        icon: <span class="string">'done'</span>,</span></span><br><span class="line"><span class="javascript">        message: <span class="string">'Action Sheet was dismissed'</span></span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// when we show it to the user</span></span></span><br><span class="line"><span class="undefined">    onShow () &#123; &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// when it gets hidden</span></span></span><br><span class="line"><span class="undefined">    onHide () &#123; &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="QActionSheet-Vue-Properties"><a href="#QActionSheet-Vue-Properties" class="headerlink" title="QActionSheet Vue Properties"></a>QActionSheet Vue Properties</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>actions</code></td>
<td>Array of Objects</td>
<td><em>yes</em></td>
<td>Defining ActionSheet actions</td>
</tr>
<tr>
<td><code>title</code></td>
<td>String</td>
<td></td>
<td>Title of Action Sheet.</td>
</tr>
<tr>
<td><code>grid</code></td>
<td>Boolean</td>
<td></td>
<td>Makes it a “tag” type.</td>
</tr>
<tr>
<td><code>dismiss-label</code></td>
<td>String</td>
<td></td>
<td>Override default i18n “Cancel” label (for iOS theme only)</td>
</tr>
</tbody>
</table>
<h3 id="QActionSheet-Vue-Events"><a href="#QActionSheet-Vue-Events" class="headerlink" title="QActionSheet Vue Events"></a>QActionSheet Vue Events</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@ok(action)</code></td>
<td>User picked an action.</td>
</tr>
<tr>
<td><code>@cancel</code></td>
<td>User dismissed ActionSheet.</td>
</tr>
<tr>
<td><code>@show</code></td>
<td>ActionSheet has just been showed to the user.</td>
</tr>
<tr>
<td><code>@hide</code></td>
<td>ActionSheet has been hidden (regardless of outcome).</td>
</tr>
<tr>
<td><code>@escape-key</code></td>
<td>ActionSheet dismissed with ESCAPE key.</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ajax Bar]]></title>
      <url>https://quasar-framework.org/components/ajax-bar.html</url>
      <content type="html"><![CDATA[<p>Ajax Bar is a component which displays a loading bar (like Youtube) whenever an Ajax call (regardless of Ajax library used) is in progress. It can be manually triggered as well.</p>
<blockquote>
<p><strong>For a more convenient usage</strong>, you may want to check <a href="/components/loading-bar.html">LoadingBar</a> Quasar plugin. This page describes how the QAjaxBar component works should you want to directly use it yourself. Otherwise, if you want Quasar to take care of setting everything up, head to the LoadingBar page.</p>
</blockquote>
<input type="hidden" data-fullpage-demo="progress/ajax-bar">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QAjaxBar'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>As long as this component is rendered by Vue it will capture all Ajax calls.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-ajax-bar</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>The best way to use it is to place it in your App’s root component (<code>App.vue</code> if you are using the default Quasar template):<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"q-app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-ajax-bar</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>IMPORTANT</strong><br>Do not simultaneously use more than one Ajax Bar component in your App.</p>
</blockquote>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Default Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>position</code></td>
<td>String</td>
<td>‘top’</td>
<td>Where to place the loading bar: ‘top’, ‘bottom’, ‘left’ or ‘right’.</td>
</tr>
<tr>
<td><code>size</code></td>
<td>String</td>
<td>‘4px’</td>
<td>Thickness of the loading bar.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>‘red’</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>reverse</code></td>
<td>Boolean</td>
<td><code>false</code></td>
<td>Reverse direction of loading bar.</td>
</tr>
<tr>
<td><code>skip-hijack</code></td>
<td>Boolean</td>
<td><code>false</code></td>
<td>Avoid taking into account Ajax calls.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><p>Use this only if you want to also trigger it manually. Ajax calls trigger these methods automatically.</p>
<table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>start()</code></td>
<td>Trigger loading bar.</td>
</tr>
<tr>
<td><code>stop()</code></td>
<td>Notify when event has finished.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@start</code></td>
<td>Triggered when loading bar has been triggered for being displayed.</td>
</tr>
<tr>
<td><code>@stop</code></td>
<td>Triggered when loading bar has finished its work and becomes hidden.</td>
</tr>
</tbody>
</table>
<blockquote>
<p>If multiple events are captured by Ajax Bar simultaneously, <code>@start</code> and <code>@stop</code> will still be triggered only once: when loading bar starts showing up and when it becomes hidden.</p>
</blockquote>
<h2 id="How-start-stop-works"><a href="#How-start-stop-works" class="headerlink" title="How start/stop works"></a>How start/stop works</h2><p>Each Ajax call makes a <code>start()</code> call when it is triggered. When it ends, it calls <code>stop()</code>. So yes, if you also manually trigger Ajax Bar you must call <code>start()</code> each time a new event is starting and <code>stop()</code> each time an event finished. Ajax Bar knows to handle multiple events simultaneously.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Writing Universal Code]]></title>
      <url>https://quasar-framework.org/guide/ssr-writing-universal-code.html</url>
      <content type="html"><![CDATA[<p>Writing “universal” code means writing code that runs on both the server and the client. Due to use-case and platform API differences, the behavior of our code will not be exactly the same when running in different environments. Here we will go over the key things you need to be aware of.</p>
<p><img src="/images/ssr-build.png" alt="Quasar SSR Build System" title="Quasar SSR Build System"></p>
<h2 id="Data-Reactivity-on-the-Server"><a href="#Data-Reactivity-on-the-Server" class="headerlink" title="Data Reactivity on the Server"></a>Data Reactivity on the Server</h2><p>In a client-only app, every user will be using a fresh instance of the app in their browser. For server-side rendering we want the same: each request should have a fresh, isolated app instance so that there is no cross-request state pollution.</p>
<p>Because the actual rendering process needs to be deterministic, we will also be “pre-fetching” data on the server - this means our application state will be already resolved when we start rendering. This means data reactivity is unnecessary on the server, so it is disabled by default. Disabling data reactivity also avoids the performance cost of converting data into reactive objects.</p>
<h2 id="Component-Lifecycle-Hooks"><a href="#Component-Lifecycle-Hooks" class="headerlink" title="Component Lifecycle Hooks"></a>Component Lifecycle Hooks</h2><p>Since there are no dynamic updates, of all the Vue lifecycle hooks, only <code>beforeCreate</code> and <code>created</code> will be called during SSR. This means any code inside other lifecycle hooks such as <code>beforeMount</code> or <code>mounted</code> will only be executed on the client.</p>
<p>Another thing to note is that you should avoid code that produces global side effects in <code>beforeCreate</code> and <code>created</code>, for example setting up timers with <code>setInterval</code>. In client-side only code we may setup a timer and then tear it down in <code>beforeDestroy</code> or <code>destroyed</code>. However, because the destroy hooks will not be called during SSR, the timers will stay around forever. To avoid this, move your side-effect code into <code>beforeMount</code> or <code>mounted</code> instead.</p>
<h2 id="Avoid-Stateful-Singletons"><a href="#Avoid-Stateful-Singletons" class="headerlink" title="Avoid Stateful Singletons"></a>Avoid Stateful Singletons</h2><p>When writing client-only code, we are used to the fact that our code will be evaluated in a fresh context every time. However, a Node.js server is a long-running process. When our code is required into the process, it will be evaluated once and then it stays in memory. This means if you create a singleton object, it will be shared between every incoming request.</p>
<p>So, Quasar CLI creates a new root Vue instance with a new Router and Vuex Store instances for each request. This is similar to how each user will be using a fresh instance of the app in their own browser. If we would have used a shared instance across multiple requests, it will easily lead to cross-request state pollution.</p>
<p>Instead of directly creating a Router and Vuex Store instances, you’ll be exposing a factory function that can be repeatedly executed to create fresh app instances for each request:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/router/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="regexp">/* &#123; store, ssrContext &#125; */</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Router = <span class="keyword">new</span> VueRouter(&#123;...&#125;)</span><br><span class="line">  <span class="keyword">return</span> Router</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/store/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="regexp">/* &#123; ssrContext &#125; */</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Store = <span class="keyword">new</span> Vuex.Store(&#123;...&#125;)</span><br><span class="line">  <span class="keyword">return</span> Store</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If you’re using <a href="https://vuex.vuejs.org/guide/modules.html" target="_blank" rel="noopener">Vuex modules</a> don’t forget to export the state as a function otherwise a singleton will be created:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/store/myModule/state.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h2 id="Access-to-Platform-Specific-APIs"><a href="#Access-to-Platform-Specific-APIs" class="headerlink" title="Access to Platform-Specific APIs"></a>Access to Platform-Specific APIs</h2><p>Universal code cannot assume access to platform-specific APIs, so if your code directly uses browser-only globals like <code>window</code> or <code>document</code>, they will throw errors when executed in Node.js, and vice-versa.</p>
<p>For tasks shared between server and client but use different platform APIs, it’s recommended to wrap the platform-specific implementations inside a universal API, or use libraries that do this for you. For example, <a href="https://github.com/axios/axios" target="_blank" rel="noopener">Axios</a> is an HTTP client that exposes the same API for both server and client.</p>
<p>For browser-only APIs, the common approach is to lazily access them inside client-only lifecycle hooks.</p>
<h2 id="App-Plugins"><a href="#App-Plugins" class="headerlink" title="App Plugins"></a>App Plugins</h2><p>Note that if a 3rd party library is not written with universal usage in mind, it could be tricky to integrate it into an server-rendered app. You <em>might</em> be able to get it working by mocking some of the globals, but it would be hacky and may interfere with the environment detection code of other libraries.</p>
<p>When you add a 3rd party library to your project (through an <a href="/guide/app-plugins.html">App Plugin</a>), take into consideration whether it can run on server and on client. If it needs to run only on server or only on client, then specify this in quasar.conf.js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// quasar.conf.js</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="string">'some-plugin'</span>, <span class="comment">// runs on both server &amp; client</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'some-other'</span>, <span class="attr">server</span>: <span class="literal">false</span> &#125; <span class="comment">// this plugin gets embedded only on client-side</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'third'</span>, <span class="attr">client</span>: <span class="literal">false</span> &#125; <span class="comment">// this plugin gets embedded only on server-side</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Data-Pre-Fetching-and-State"><a href="#Data-Pre-Fetching-and-State" class="headerlink" title="Data Pre-Fetching and State"></a>Data Pre-Fetching and State</h2><p>During SSR, we are essentially rendering a “snapshot” of our app, so if the app relies on some asynchronous data, this data need to be pre-fetched and resolved before we start the rendering process.</p>
<p>The Quasar CLI <a href="/guide/app-prefetch-feature.html">preFetch</a> feature has been created to solve this problem. Take a few moments to read about it.</p>
<hr>
<p>Parts of this page are taken from the official <a href="https://ssr.vuejs.org/guide/universal.html#data-reactivity-on-the-server" target="_blank" rel="noopener">Vue.js SSR guide</a>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Alert]]></title>
      <url>https://quasar-framework.org/components/alert.html</url>
      <content type="html"><![CDATA[<p>QAlert is a component that allows you to display an informational message to the users, with optional action buttons.</p>
<input type="hidden" data-fullpage-demo="other-components/alert">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QAlert'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-alert</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span></span><br><span class="line">  Some cool message</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-alert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-alert</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">"positive"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">icon</span>=<span class="string">"cloud"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:actions</span>=<span class="string">"[&#123;label: 'Snooze', handler () &#123;&#125;&#125;]"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  Some cool message for your users.</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-alert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>As a tip, you can also add an animation to it. Make sure you <a href="/components/transition.html#Installation">specify the animation</a> in <code>/quasar.conf.js</code>.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">  <span class="attr">enter-active-class</span>=<span class="string">"animated bounceInLeft"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">leave-active-class</span>=<span class="string">"animated bounceOutRight"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">appear</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-alert</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-if</span>=<span class="string">"visible"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">icon</span>=<span class="string">"cloud"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">appear</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:actions</span>=<span class="string">"[&#123; label: 'Dismiss', handler: () =&gt; &#123; visible = false &#125; &#125;]"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"q-mb-sm"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    Lorem ipsum dolor sit amet.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-alert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h3><p>Here are the available properties, when using Alert as a component:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>type</code></td>
<td>String</td>
<td>One of ‘positive’, ‘negative’, ‘warning’, ‘info’. Applies the respective color and icon, so you can skip specifying those props too.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>This can be any color set up under the <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>text-color</code></td>
<td>String</td>
<td>This can be any color (for the text) set up under the <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>message</code></td>
<td>String</td>
<td>Alert’s content message, if you don’t add it as a children of QAlert.</td>
</tr>
<tr>
<td><code>detail</code></td>
<td>String</td>
<td>Alert’s sub-message, as a detail.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon to use. See <a href="/components/icons.html">Icons</a>.</td>
</tr>
<tr>
<td><code>avatar</code></td>
<td>String</td>
<td>Image file (use statics folder for it).</td>
</tr>
<tr>
<td><code>actions</code></td>
<td>Array of Objects</td>
<td>Place one or more buttons within the alert, like “Snooze” or “Abort”. Each Object from Array must have <code>label</code> (String) and <code>handler</code> (Function) props.</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Animation CSS Helper Classes]]></title>
      <url>https://quasar-framework.org/components/animation-css-helper-classes.html</url>
      <content type="html"><![CDATA[<p>Add these CSS classes to the DOM element / component you want the effect on.<br>These are very basic effects so for advanced ones check <a href="/components/transition.html">Transition</a>, <a href="/components/slide-transition.html">Slide Transition</a> or use <a href="/components/js-animations.html">JS Animations</a>.</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>animate-pop</code></td>
<td>Apply a pop-in effect to the DOM element</td>
</tr>
<tr>
<td><code>animate-scale</code></td>
<td>Apply a scale-in effect to the DOM element</td>
</tr>
<tr>
<td><code>animate-fade</code></td>
<td>Apply a fade-in effect to the DOM element</td>
</tr>
<tr>
<td><code>animate-spin</code></td>
<td>Apply a continuous spin/rotation to the DOM element</td>
</tr>
<tr>
<td><code>animate-spin-reverse</code></td>
<td>Apply a continuous spin/rotation (opposite direction to <code>animate-spin</code>) to the DOM element</td>
</tr>
<tr>
<td><code>animate-blink</code></td>
<td>Apply a continuous blinking effect to the DOM element</td>
</tr>
<tr>
<td><code>animate-bounce</code></td>
<td>Apply a continuous bouncing effect to the DOM element</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App Visibility]]></title>
      <url>https://quasar-framework.org/components/app-visibility.html</url>
      <content type="html"><![CDATA[<p>Quasar makes use of the Web <a href="https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API" target="_blank" rel="noopener">Page Visibility API</a> which lets you know when a website/app is visible or in focus.</p>
<input type="hidden" data-fullpage-demo="web-api-wrappers/app-visibility">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  plugins: [<span class="string">'AppVisibility'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// outside of a Vue file</span></span><br><span class="line"><span class="keyword">import</span> &#123; AppVisibility &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line">(<span class="built_in">Boolean</span>) AppVisibility.appVisible</span><br><span class="line"></span><br><span class="line"><span class="comment">// inside of a Vue file</span></span><br><span class="line">(<span class="built_in">Boolean</span>) <span class="keyword">this</span>.$q.appVisible</span><br></pre></td></tr></table></figure>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Watching for browser tab / app visibility changes:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// vue file</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span>...<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  watch: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="string">'$q.appVisible'</span> (val) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(val ? <span class="string">'App has focus now'</span> : <span class="string">'App lost focus (was minimized'</span>)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Autocomplete]]></title>
      <url>https://quasar-framework.org/components/autocomplete.html</url>
      <content type="html"><![CDATA[<p>The Quasar Autocomplete component binds to the parent textfield (eg. QInput, QSearch, QChipsInput) and offers suggestions to the user, while the user is typing. The suggestions offered to the user are based on either a static list of results or on an asynchronous function call (eg. containing an Ajax request).</p>
<input type="hidden" data-fullpage-demo="forms/autocomplete">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QAutocomplete'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>As long as this component is rendered by Vue, it will capture all Ajax calls.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Binds to parent QInput --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">color</span>=<span class="string">"amber"</span> <span class="attr">v-model</span>=<span class="string">"terms"</span> <span class="attr">placeholder</span>=<span class="string">"Type 'fre'"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-autocomplete</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">search</span>=<span class="string">"search"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:min-characters</span>=<span class="string">"3"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">selected</span>=<span class="string">"selected"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-input</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Binds to parent QSearch --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-search</span> <span class="attr">v-model</span>=<span class="string">"terms"</span> <span class="attr">placeholder</span>=<span class="string">"Start typing a country name"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-autocomplete</span> @<span class="attr">search</span>=<span class="string">"search"</span> @<span class="attr">selected</span>=<span class="string">"selected"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-search</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Adds a separator between results --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-search</span> <span class="attr">v-model</span>=<span class="string">"terms"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-autocomplete</span></span></span><br><span class="line"><span class="tag">    <span class="attr">separator</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">search</span>=<span class="string">"search"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">selected</span>=<span class="string">"selected"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-search</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Binds to parent QChipsInput --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-chips-input</span> <span class="attr">v-model</span>=<span class="string">"terms"</span> <span class="attr">placeholder</span>=<span class="string">"Start typing a country name"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-autocomplete</span> @<span class="attr">search</span>=<span class="string">"search"</span> @<span class="attr">selected</span>=<span class="string">"selected"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-chips-input</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Default Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>min-characters</code></td>
<td>Number</td>
<td>1</td>
<td>How many minimum characters can trigger component to suggest something?</td>
</tr>
<tr>
<td><code>max-results</code></td>
<td>Number</td>
<td>6</td>
<td>How many results can we display at a time?</td>
</tr>
<tr>
<td><code>max-height</code></td>
<td>String</td>
<td><em>None</em></td>
<td>(v0.17+) CSS unit to determine the maximum height of Autocomplete popover.</td>
</tr>
<tr>
<td><code>static-data</code></td>
<td>Object</td>
<td><em>None</em></td>
<td>Use static suggestions. No need to do an Ajax call. Filtering is provided by Autocomplete component.</td>
</tr>
<tr>
<td><code>filter</code></td>
<td>Function</td>
<td>Internal implementation</td>
<td>If provided, autocomplete will perform custom filtering.</td>
</tr>
<tr>
<td><code>debounce</code></td>
<td>Number</td>
<td>500</td>
<td>Time in milliseconds, between key presses and finding new results. Good for delay, if using AJAX requests.</td>
</tr>
<tr>
<td><code>separator</code></td>
<td>Boolean</td>
<td>false</td>
<td>If set to <code>true</code>, it ads a delimeter between the values to select from.</td>
</tr>
<tr>
<td><code>value-field</code></td>
<td>String/Function</td>
<td>value</td>
<td>(v0.17+) What property should we use for filling out the model with? Check example in the next sections.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><p>No need to trigger these methods manually as they are invoked automatically. Only use them when your use-case is something very specific.</p>
<table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>trigger()</code></td>
<td>Trigger suggestions (parent textfield must be focused).</td>
</tr>
<tr>
<td><code>hide()</code></td>
<td>Hide suggestions Popover.</td>
</tr>
<tr>
<td><code>setValue()</code></td>
<td>Set textfield string to the value supplied.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@search(terms, Function done)</code></td>
<td>Triggered by the component when a search should start and offer some results.</td>
</tr>
<tr>
<td><code>@selected(item, keyboard)</code></td>
<td>Triggered when user has selected a suggestion. On keyboard navigation the event is emitted with a second parameter set to true (v0.17+).</td>
</tr>
<tr>
<td><code>@show</code></td>
<td>Triggered when the selections popup opens.</td>
</tr>
<tr>
<td><code>@hide</code></td>
<td>Triggered when selections popup closes.</td>
</tr>
</tbody>
</table>
<p>Example for <code>search</code> event:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span> (<span class="params">terms, done</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something with terms, like an Ajax call for example</span></span><br><span class="line">  <span class="comment">// then call done(Array results)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// DO NOT forget to call done! When no results or an error occured,</span></span><br><span class="line">  <span class="comment">// just call with empty array as param. Example: done([])</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Using-value-field"><a href="#Using-value-field" class="headerlink" title="Using value-field"></a>Using value-field</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- as a String --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-autocomplete</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">search</span>=<span class="string">"search"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">selected</span>=<span class="string">"selected"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:min-characters</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">value-field</span>=<span class="string">"icon"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- as a Function --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-autocomplete</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">search</span>=<span class="string">"search"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">selected</span>=<span class="string">"selected"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value-field</span>=<span class="string">"v =&gt; `$&#123; v.icon &#125; - $&#123; v.label &#125;`"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Using-Static-Data"><a href="#Using-Static-Data" class="headerlink" title="Using Static Data"></a>Using Static Data</h2><p>When using static data, specify an Object (notice that it uses some properties from <a href="/components/lists-and-list-items.html">List and List Items</a> components:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// static-data</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// Property name that will be used by filter() to filter the array of objects below.</span></span><br><span class="line">  field: <span class="string">'value'</span>,</span><br><span class="line"></span><br><span class="line">  list: [</span><br><span class="line">    &#123;</span><br><span class="line">      value: <span class="string">'Romania'</span>, <span class="comment">// The value given, when selected</span></span><br><span class="line">      label: <span class="string">'Romania'</span>, <span class="comment">// The value displayed as main label for this suggested selection</span></span><br><span class="line"></span><br><span class="line">      sublabel: <span class="string">'Continent: Europe'</span>, <span class="comment">// optional</span></span><br><span class="line">      icon: <span class="string">'location_city'</span>, <span class="comment">// optional</span></span><br><span class="line">      stamp: <span class="string">'18 mil'</span>, <span class="comment">// optional</span></span><br><span class="line">      ...</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Here is the full list of properties that can be used:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>leftColor</code></td>
<td>String</td>
<td>Color for left side from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon on the left to use.</td>
</tr>
<tr>
<td><code>avatar</code></td>
<td>String</td>
<td>URL pointing to statics for an avatar.</td>
</tr>
<tr>
<td><code>letter</code></td>
<td>String</td>
<td>One character String.</td>
</tr>
<tr>
<td><code>leftInverted</code></td>
<td>Boolean</td>
<td>Invert mode, but only for icon and letter.</td>
</tr>
<tr>
<td><code>leftTextColor</code></td>
<td>String</td>
<td>Override default “white” text-color when using an icon or letter only.</td>
</tr>
<tr>
<td><code>image</code></td>
<td>String</td>
<td>URL pointing to statics for an image.</td>
</tr>
<tr>
<td><code>label</code></td>
<td>String</td>
<td>Main label of the selection.</td>
</tr>
<tr>
<td><code>sublabel</code></td>
<td>String</td>
<td>Sub-label of the selection.</td>
</tr>
<tr>
<td><code>labelLines</code></td>
<td>String/Number</td>
<td>Number of lines that label can expand to.</td>
</tr>
<tr>
<td><code>sublabelLines</code></td>
<td>String/Number</td>
<td>Number of lines that the sublabel can expand to.</td>
</tr>
<tr>
<td><code>inset</code></td>
<td>Boolean</td>
<td>Inset Label if no left-side is specified (no icon, avatar, letter or image).</td>
</tr>
<tr>
<td><code>rightColor</code></td>
<td>String</td>
<td>Color for right side from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>rightIcon</code></td>
<td>String</td>
<td>Icon on the right to use.</td>
</tr>
<tr>
<td><code>rightAvatar</code></td>
<td>String</td>
<td>URL pointing to statics for an avatar on right side.</td>
</tr>
<tr>
<td><code>rightLetter</code></td>
<td>String</td>
<td>One character String for right side.</td>
</tr>
<tr>
<td><code>rightImage</code></td>
<td>String</td>
<td>URL pointing to statics for an image on right side.</td>
</tr>
<tr>
<td><code>rightInverted</code></td>
<td>Boolean</td>
<td>Invert mode, but only for icon and letter.</td>
</tr>
<tr>
<td><code>rightTextColor</code></td>
<td>String</td>
<td>Override default “white” text-color when using an icon or letter only.</td>
</tr>
<tr>
<td><code>stamp</code></td>
<td>String</td>
<td>Stamp to use for right side. Example: ‘10 min ago’.</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-search</span> <span class="attr">inverted</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">v-model</span>=<span class="string">"terms"</span> <span class="attr">placeholder</span>=<span class="string">"Featuring static data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-autocomplete</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:static-data</span>=<span class="string">"&#123;field: 'value', list: countries&#125;"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">selected</span>=<span class="string">"selected"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-search</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> countries <span class="keyword">from</span> <span class="string">'countries.json'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// See above for the data format for the array of objects with required and optional data</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      terms: <span class="string">''</span>,</span></span><br><span class="line"><span class="undefined">      countries</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Custom-Filter"><a href="#Custom-Filter" class="headerlink" title="Custom Filter"></a>Custom Filter</h2><p>To perform custom filtering like fuzzy search, provide an optional function with following signature:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-search</span> <span class="attr">v-model</span>=<span class="string">"terms"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Provide custom filter function --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-autocomplete</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:filter</span>=<span class="string">"myFilter"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">search</span>=<span class="string">"search"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">selected</span>=<span class="string">"selected"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-search</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// fuzzysearch (needle, haystack) &#123; return true|false &#125;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  ...,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    myFilter(terms, &#123; field, list &#125;) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> token = terms.toLowerCase();</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> list.filter(<span class="function"><span class="params">item</span> =&gt;</span> fuzzysearch(token, item[field].toLowerCase()));</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Using-Asynchronous-Method-Ajax-call"><a href="#Using-Asynchronous-Method-Ajax-call" class="headerlink" title="Using Asynchronous Method (Ajax call?)"></a>Using Asynchronous Method (Ajax call?)</h2><p>If you’d like to call up data from the server, you may also do so with the following usage of <code>search()</code> method.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-search</span> <span class="attr">v-model</span>=<span class="string">"terms"</span> <span class="attr">placeholder</span>=<span class="string">"Start typing a country name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-autocomplete</span> @<span class="attr">search</span>=<span class="string">"search"</span> @<span class="attr">selected</span>=<span class="string">"selected"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-search</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  ...</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    search (terms, done) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// make an AJAX call</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// then call done(Array results)</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// DO NOT forget to call done! When no results or an error occurred,</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// just call with empty array as param. Example: done([])</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  ...</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Back to Top]]></title>
      <url>https://quasar-framework.org/components/back-to-top.html</url>
      <content type="html"><![CDATA[<p>This is actually a directive and not a component. It allows to make visible any DOM elements (like buttons) which appear after a certain scroll offset. When clicked/tapped they take the user to the top of the page.</p>
<input type="hidden" data-fullpage-demo="scrolling/back-to-top">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  directives: [<span class="string">'BackToTop'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Bare bones example --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-back-to-top</span></span></span><br><span class="line"><span class="tag">  <span class="attr">round</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"teal-5"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"fixed-bottom-right"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">"margin: 0 15px 15px 0"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"keyboard_arrow_up"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  With animation, custom scroll offset (after which button is visible)</span></span><br><span class="line"><span class="comment">  and animation duration.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Use "animate-*" CSS classes for effects when buttons/elements</span></span><br><span class="line"><span class="comment">  become visible. In this case, we'll use "animate-pop":</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-back-to-top.animate</span>=<span class="string">"&#123;offset: 500, duration: 200&#125;"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">round</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"fixed-bottom-right animate-pop"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">"margin: 0 15px 15px 0"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"keyboard_arrow_up"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>When using a <a href="/components/layout.html">Layout</a> then you can take advantage of the <a href="/components/fixed-positioning-on-layout.html">Fixed Positioning on Layout</a> component too and wrap your element with it, like this:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-page-sticky</span> <span class="attr">position</span>=<span class="string">"top-right"</span> <span class="attr">:offset</span>=<span class="string">"[18, 18]"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-back-to-top</span></span></span><br><span class="line"><span class="tag">    <span class="attr">round</span></span></span><br><span class="line"><span class="tag">    <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">"alert"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">icon</span>=<span class="string">"keyboard_arrow_up"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-page-sticky</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Modifiers"><a href="#Vue-Modifiers" class="headerlink" title="Vue Modifiers"></a>Vue Modifiers</h2><table>
<thead>
<tr>
<th>Vue Modifier</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>animate</code></td>
<td>Adds scrolling animation</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Binding-Value"><a href="#Vue-Binding-Value" class="headerlink" title="Vue Binding Value"></a>Vue Binding Value</h2><p>You can use the binding value in 3 forms:</p>
<ol>
<li><strong>No value</strong>. Defaults will apply.</li>
<li><strong>As a Number</strong>. This will be the scroll offset after which DOM element will be made visible.</li>
<li><strong>As an Object</strong> with <code>offset</code> and/or <code>duration</code> as props. Duration is ignored if <code>animate</code> modifier is not used.</li>
</ol>
<h2 id="Determining-Scrolling-Container"><a href="#Determining-Scrolling-Container" class="headerlink" title="Determining Scrolling Container"></a>Determining Scrolling Container</h2><p>Please read <a href="/components/scroll-observable.html#Determining-Scrolling-Container">here</a> about how Quasar determines the container to attach scrolling events to.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fullscreen]]></title>
      <url>https://quasar-framework.org/components/app-fullscreen.html</url>
      <content type="html"><![CDATA[<p>There are times when you want your website or App to run in fullscreen.<br>Quasar makes it easy by wrapping the Web <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API" target="_blank" rel="noopener">Fullscreen API</a>.</p>
<p>Please note that the behavior is different depending on the platform the code is running on, due to the fact that there isn’t a fixed Web standard for Web Fullscreen API yet.</p>
<input type="hidden" data-external-demo="web-api-wrappers/app-fullscreen">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  plugins: [<span class="string">'AppFullscreen'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// outside of a Vue file</span></span><br><span class="line"><span class="keyword">import</span> &#123; AppFullscreen &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// determine if platform has Fullscreen capability:</span></span><br><span class="line">(<span class="built_in">Boolean</span>) AppFullscreen.isCapable</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determining if website is in fullscreen mode:</span></span><br><span class="line">(<span class="built_in">Boolean</span>) AppFullscreen.isActive</span><br><span class="line"></span><br><span class="line"><span class="comment">// Requesting fullscreen mode:</span></span><br><span class="line">AppFullscreen.request()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exiting fullscreen mode:</span></span><br><span class="line">AppFullscreen.exit()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Toggle fullscreen mode:</span></span><br><span class="line">AppFullscreen.toggle()</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// inside of a Vue file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// determine if platform has Fullscreen capability:</span></span><br><span class="line">(<span class="built_in">Boolean</span>) <span class="keyword">this</span>.$q.fullscreen.isCapable</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determining if website is in fullscreen mode:</span></span><br><span class="line">(<span class="built_in">Boolean</span>) <span class="keyword">this</span>.$q.fullscreen.isActive</span><br><span class="line"></span><br><span class="line"><span class="comment">// Requesting fullscreen mode:</span></span><br><span class="line"><span class="keyword">this</span>.$q.fullscreen.request()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exiting fullscreen mode:</span></span><br><span class="line"><span class="keyword">this</span>.$q.fullscreen.exit()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Toggle fullscreen mode:</span></span><br><span class="line"><span class="keyword">this</span>.$q.fullscreen.toggle()</span><br></pre></td></tr></table></figure>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Watching for fullscreen changes:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// vue file</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span>...<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  watch: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="string">'$q.fullscreen.isActive'</span> (val) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(val ? <span class="string">'In fullscreen now'</span> : <span class="string">'Exited fullscreen'</span>)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Dropdown Button]]></title>
      <url>https://quasar-framework.org/components/button-dropdown.html</url>
      <content type="html"><![CDATA[<p>QBtnDropdown is a very convenient dropdown button. Goes very well with <a href="/components/lists-and-list-items.html">QList</a> as dropdown content, but it’s by no means limited to it.</p>
<input type="hidden" data-fullpage-demo="buttons/btn-dropdown">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QBtnDropdown'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-usage"><a href="#Basic-usage" class="headerlink" title="Basic usage"></a>Basic usage</h2><p>Simple dropdown menu<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-btn-dropdown</span> <span class="attr">label</span>=<span class="string">"Button"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- dropdown content --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list</span> <span class="attr">link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Item<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-btn-dropdown</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Use the <code>split</code> prop to separate target areas for opening dropdown and triggering <code>@click</code> event</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-btn-dropdown</span> <span class="attr">split</span> <span class="attr">label</span>=<span class="string">"Button"</span> @<span class="attr">click</span>=<span class="string">"handlerFunction"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- dropdown content --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list</span> <span class="attr">link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Item<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-btn-dropdown</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>All props except <code>split</code> are shared with <a href="/components/button.html">QBtn</a>.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>split</code></td>
<td>Boolean</td>
<td>Use a split QBtnDropdown</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Name of the icon to use.</td>
</tr>
<tr>
<td><code>icon-right</code></td>
<td>String</td>
<td>Name of the icon to place on right side of button. (only usable with <code>split</code> set to <code>true</code>)</td>
</tr>
<tr>
<td><code>loading</code></td>
<td>Boolean</td>
<td>Display a spinner, if true. Can be optionally used along <code>v-model</code>. Check <a href="#Button-with-Progress">Button with Progress</a> section.</td>
</tr>
<tr>
<td><code>percentage</code></td>
<td>Number</td>
<td>Optional property for displaying a determinate progress. Use along <code>loading</code>.</td>
</tr>
<tr>
<td><code>dark-percentage</code></td>
<td>Boolean</td>
<td>Optional property for displaying a determinate progress on a light button color. Use along <code>loading</code> and <code>percentage</code>.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>The button is disabled, if true. <code>@click</code> event won’t be triggered while in this state.</td>
</tr>
<tr>
<td><code>label</code></td>
<td>String/Number</td>
<td>Button label.</td>
</tr>
<tr>
<td><code>tabindex</code></td>
<td>Number</td>
<td>Set explicit tab index.</td>
</tr>
<tr>
<td><code>repeat-timeout</code></td>
<td>Number/Function</td>
<td>Enables multiple <code>@click</code> events on click/tap and hold. Function gets a Number (timesTriggered) as parameter.</td>
</tr>
<tr>
<td><code>wait-for-ripple</code></td>
<td>Boolean</td>
<td>Wait for ripple then before emitting <code>@click</code> event. Mat theme only.</td>
</tr>
<tr>
<td><code>content-class</code></td>
<td>String/Array/Object</td>
<td>Classes applied to the Popover container.</td>
</tr>
<tr>
<td><code>content-style</code></td>
<td>String/Array/Object</td>
<td>Style applied to the Popover container.</td>
</tr>
<tr>
<td><code>type</code></td>
<td>String</td>
<td>(v0.17+) One of “a” (uses an <code>&lt;a&gt;</code> tag), “button”, “submit”, “reset”.</td>
</tr>
</tbody>
</table>
<h4 id="Router-syntax-sugar"><a href="#Router-syntax-sugar" class="headerlink" title="Router syntax sugar"></a>Router syntax sugar</h4><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>to</code></td>
<td>String/Object</td>
<td>Makes button go to the indicated route when clicked.</td>
</tr>
<tr>
<td><code>replace</code></td>
<td>Boolean</td>
<td>Replaces current route instead of pushing to window history.</td>
</tr>
</tbody>
</table>
<p>The properties above are just syntactic sugar and work similar to <code>&lt;router-link&gt;</code> Vue component.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-btn-dropdown</span> <span class="attr">to</span>=<span class="string">"/"</span> <span class="attr">...</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">q-btn-dropdown</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- equivalent to: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn-dropdown</span> @<span class="attr">click</span>=<span class="string">"$router.push('/')"</span> <span class="attr">...</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">q-btn-dropdown</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="Apearance"><a href="#Apearance" class="headerlink" title="Apearance"></a>Apearance</h4><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>size</code></td>
<td>String</td>
<td>Button size. One of <code>xs</code>, <code>sm</code>, <code>md</code>, <code>lg</code>, <code>xl</code>, or a css unit string size eg. <code>25px</code>, <code>2rem</code>, <code>3vw</code>.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>A color from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>text-color</code></td>
<td>String</td>
<td>A color from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>align</code></td>
<td>String</td>
<td>Label/Content alignment. One of <code>left</code>, <code>center</code>, <code>right</code>, <code>around</code>, <code>between</code>.</td>
</tr>
<tr>
<td><code>dense</code></td>
<td>Boolean</td>
<td>Dense Button.</td>
</tr>
<tr>
<td><code>round</code></td>
<td>Boolean</td>
<td>Set true, if you want a round button.</td>
</tr>
<tr>
<td><code>outline</code></td>
<td>Boolean</td>
<td>Set true, if you want an outlined button.</td>
</tr>
<tr>
<td><code>flat</code></td>
<td>Boolean</td>
<td>Set true, if you want a flat button.</td>
</tr>
<tr>
<td><code>push</code></td>
<td>Boolean</td>
<td>Set true, if the button should have a push effect.</td>
</tr>
<tr>
<td><code>rounded</code></td>
<td>Boolean</td>
<td>Set true, if the square button should have rounded corners.</td>
</tr>
<tr>
<td><code>glossy</code></td>
<td>Boolean</td>
<td>Set true, if the button should be glossy.</td>
</tr>
<tr>
<td><code>fab</code></td>
<td>Boolean</td>
<td>Floating Action Button. <a href="/components/floating-action-button.html">See</a></td>
</tr>
<tr>
<td><code>fab-mini</code></td>
<td>Boolean</td>
<td>Smaller Floating Action Button.</td>
</tr>
<tr>
<td><code>no-wrap</code></td>
<td>Boolean</td>
<td>Prevent text wrapping</td>
</tr>
<tr>
<td><code>no-caps</code></td>
<td>Boolean</td>
<td>Set true, if you don’t want button content/label to be transformed to uppercase letter on Material Theme.</td>
</tr>
<tr>
<td><code>no-ripple</code></td>
<td>Boolean</td>
<td>Disable <a href="/components/material-ripples.html">Material Ripple</a>. Mat theme only.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@click</code></td>
<td>Triggered on button click/tap, if button is not disabled.</td>
</tr>
</tbody>
</table>
<h2 id="More-examples"><a href="#More-examples" class="headerlink" title="More examples"></a>More examples</h2><p>Complete example with <a href="/components/lists-and-list-items.html">QList</a>:</p>
<blockquote>
<p>Note the use of the <code>v-close-overlay</code> directive to close the dropdown on click. Don’t forget to register it in <code>quasar.conf.js</code></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-btn-dropdown</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"Dropdown"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list</span> <span class="attr">link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">v-for</span>=<span class="string">"n in 2"</span> <span class="attr">:key</span>=<span class="string">"`1.$&#123;n&#125;`"</span> <span class="attr">v-close-overlay</span> @<span class="attr">click.native</span>=<span class="string">"handlerFunction"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"folder"</span> <span class="attr">inverted</span> <span class="attr">color</span>=<span class="string">"primary"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Photos<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>February 22, 2016<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"info"</span> <span class="attr">color</span>=<span class="string">"amber"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-separator</span> <span class="attr">inset</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-list-header</span> <span class="attr">inset</span>&gt;</span>Files<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">v-close-overlay</span> @<span class="attr">click.native</span>=<span class="string">"handlerFunction"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"assignment"</span> <span class="attr">inverted</span> <span class="attr">color</span>=<span class="string">"secondary"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Vacation<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>February 22, 2016<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"info"</span> <span class="attr">color</span>=<span class="string">"amber"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-btn-dropdown</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Breadcrumbs]]></title>
      <url>https://quasar-framework.org/components/breadcrumbs.html</url>
      <content type="html"><![CDATA[<p>Quasar Breadcrumbs is a component used as a navigational aid in UI. It allows users to keep track of their location within programs, documents, or websites.</p>
<input type="hidden" data-fullpage-demo="navigation/breadcrumbs">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [</span><br><span class="line">    <span class="string">'QBreadcrumbs'</span>,</span><br><span class="line">    <span class="string">'QBreadcrumbsEl'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-breadcrumbs</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-breadcrumbs-el</span> <span class="attr">label</span>=<span class="string">"Home"</span> <span class="attr">icon</span>=<span class="string">"home"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-breadcrumbs-el</span> <span class="attr">label</span>=<span class="string">"Components"</span> <span class="attr">icon</span>=<span class="string">"widgets"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-breadcrumbs-el</span> <span class="attr">label</span>=<span class="string">"Breadcrumbs"</span> <span class="attr">icon</span>=<span class="string">"navigation"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-breadcrumbs</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>With route links and custom separator:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-breadcrumbs</span></span></span><br><span class="line"><span class="tag">  <span class="attr">separator</span>=<span class="string">"-&gt;"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">active-color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"light"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-breadcrumbs-el</span> <span class="attr">label</span>=<span class="string">"Home"</span> <span class="attr">to</span>=<span class="string">"/"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-breadcrumbs-el</span> <span class="attr">label</span>=<span class="string">"Components"</span> <span class="attr">to</span>=<span class="string">"/components"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-breadcrumbs-el</span> <span class="attr">label</span>=<span class="string">"Breadcrumbs"</span> <span class="attr">to</span>=<span class="string">"/components/breadcrums"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-breadcrumbs-el</span> <span class="attr">label</span>=<span class="string">"Bogus"</span> <span class="attr">to</span>=<span class="string">"/components/breadcrums/bogus"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-breadcrumbs</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>With separator as scoped slot (in this case an icon, but can be anything):<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-breadcrumbs</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"trending_flat"</span> <span class="attr">slot</span>=<span class="string">"separator"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-breadcrumbs-el</span> <span class="attr">active</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">q-breadcrumbs-el</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-breadcrumbs-el</span>&gt;</span>Components<span class="tag">&lt;/<span class="name">q-breadcrumbs-el</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-breadcrumbs-el</span>&gt;</span>Breadcrumbs<span class="tag">&lt;/<span class="name">q-breadcrumbs-el</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-breadcrumbs</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>With different alignment:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-breadcrumbs</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"arrow_forward"</span> <span class="attr">slot</span>=<span class="string">"separator"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-breadcrumbs-el</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">q-breadcrumbs-el</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-breadcrumbs-el</span>&gt;</span>Components<span class="tag">&lt;/<span class="name">q-breadcrumbs-el</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-breadcrumbs-el</span>&gt;</span>Breadcrumbs<span class="tag">&lt;/<span class="name">q-breadcrumbs-el</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-breadcrumbs</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="QBreadcrumbs-Vue-Properties"><a href="#QBreadcrumbs-Vue-Properties" class="headerlink" title="QBreadcrumbs Vue Properties"></a>QBreadcrumbs Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>A color from <a href="/components/color-palette.html">Quasar Color Palette</a></td>
</tr>
<tr>
<td><code>active-color</code></td>
<td>String</td>
<td>Active color, one from <a href="/components/color-palette.html">Quasar Color Palette</a></td>
</tr>
<tr>
<td><code>separator</code></td>
<td>String</td>
<td>Separator text between breadcrumb elements</td>
</tr>
<tr>
<td><code>align</code></td>
<td>String</td>
<td>One of ‘left’, ‘right’, ‘center’, ‘between’, ‘around’.</td>
</tr>
</tbody>
</table>
<h2 id="QBreadcrumbsEl-Vue-Properties"><a href="#QBreadcrumbsEl-Vue-Properties" class="headerlink" title="QBreadcrumbsEl Vue Properties"></a>QBreadcrumbsEl Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>label</code></td>
<td>String</td>
<td>Label of element</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon for element</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>A color from <a href="/components/color-palette.html">Quasar Color Palette</a></td>
</tr>
</tbody>
</table>
<h3 id="Using-QBreadcrumbsEl-as-a-Router-Link"><a href="#Using-QBreadcrumbsEl-as-a-Router-Link" class="headerlink" title="Using QBreadcrumbsEl as a Router Link"></a>Using QBreadcrumbsEl as a Router Link</h3><p>If you want your QBreadcrumbsEl to act the same as Vue’s <code>&lt;router-link&gt;</code>, then you can use these additional properties (which work exactly the same as <code>&lt;router-link&gt;</code>):</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>to</code></td>
<td>String / Object</td>
<td>Route to navigate to</td>
</tr>
<tr>
<td><code>exact</code></td>
<td>Boolean</td>
<td>Match the exact route specified (and not also its children) when adding <code>router-link-active</code> CSS class.</td>
</tr>
<tr>
<td><code>append</code></td>
<td>Boolean</td>
<td>Append route definition to current route when navigating.</td>
</tr>
<tr>
<td><code>replace</code></td>
<td>Boolean</td>
<td>Replaces current route with the new one instead of adding it to the window history queue.</td>
</tr>
</tbody>
</table>
<p>For more details on these properties, please refer to the <a href="http://router.vuejs.org/en/api/router-link.html" target="_blank" rel="noopener">Vue Router documentation</a>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Button Toggle]]></title>
      <url>https://quasar-framework.org/components/button-toggle.html</url>
      <content type="html"><![CDATA[<p>The QBtnToggle component is another basic element for user input, similar to QRadio but with buttons. You can use this to supply a way for the user to pick an option from multiple choices.</p>
<input type="hidden" data-fullpage-demo="forms/button-toggle">

<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QBtnToggle'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Three choices for the user --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn-toggle</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">toggle-color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:options</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#123;label: 'One', value: 'one'&#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#123;label: 'Two', value: 'two'&#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#123;label: 'Three', value: 'three'&#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">  ]"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which should be binded to a String in your scope. Choosing one option (clicking/tapping on a radio) makes your <code>v-model</code> change to Radio’s <code>val</code>.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>options</code></td>
<td>Array</td>
<td>An array of objects with <code>value</code> and <code>label</code> properties. The binary components will be created according to this array.</td>
</tr>
<tr>
<td><code>readonly</code></td>
<td>Boolean</td>
<td>Set to <code>true</code>, to make the radio read-only.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>Set to <code>true</code>, to disable the radio.</td>
</tr>
<tr>
<td><code>dense</code></td>
<td>Boolean</td>
<td>Dense Buttons.</td>
</tr>
<tr>
<td><code>outline</code></td>
<td>Boolean</td>
<td>Set true, if you want an outlined button.</td>
</tr>
<tr>
<td><code>flat</code></td>
<td>Boolean</td>
<td>Set true, if you want a flat button.</td>
</tr>
<tr>
<td><code>push</code></td>
<td>Boolean</td>
<td>Set true, if the button should have a push effect.</td>
</tr>
<tr>
<td><code>rounded</code></td>
<td>Boolean</td>
<td>Set true, if the square button should have rounded corners.</td>
</tr>
<tr>
<td><code>glossy</code></td>
<td>Boolean</td>
<td>Set true, if the button should be glossy.</td>
</tr>
<tr>
<td><code>no-wrap</code></td>
<td>Boolean</td>
<td>Prevent text wrapping</td>
</tr>
<tr>
<td><code>no-caps</code></td>
<td>Boolean</td>
<td>Set true, if you don’t want button content/label to be transformed to uppercase letter on Material Theme.</td>
</tr>
<tr>
<td><code>no-ripple</code></td>
<td>Boolean</td>
<td>Disable <a href="/components/material-ripples.html">Material Ripple</a>. Mat theme only.</td>
</tr>
<tr>
<td><code>wait-for-ripple</code></td>
<td>Boolean</td>
<td>Wait for ripple then before emitting <code>@click</code> event. Mat theme only.</td>
</tr>
<tr>
<td><code>size</code></td>
<td>String</td>
<td>(v0.16+) Button size. One of <code>xs</code>, <code>sm</code>, <code>md</code>, <code>lg</code>, <code>xl</code>, or a css unit string size eg. <code>25px</code>, <code>2rem</code>, <code>3vw</code>. More info below this table.</td>
</tr>
</tbody>
</table>
<h3 id="Color-Properties"><a href="#Color-Properties" class="headerlink" title="Color Properties"></a>Color Properties</h3><p>All can take values from <a href="/components/color-palette.html">Quasar Color Palette</a>.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>Color of buttons.</td>
</tr>
<tr>
<td><code>text-color</code></td>
<td>String</td>
<td>Optional color of buttons label/icon.</td>
</tr>
<tr>
<td><code>toggle-color</code></td>
<td>String</td>
<td>Color for button representing the current selection.</td>
</tr>
<tr>
<td><code>toggle-text-color</code></td>
<td>String</td>
<td>Optional color for button label/icon representing the current selection.</td>
</tr>
</tbody>
</table>
<h2 id="Options-Configuration"><a href="#Options-Configuration" class="headerlink" title="Options Configuration"></a>Options Configuration</h2><p>The <code>options</code> property must be an Array of Objects with this structure:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// required; the model gets this value when button is selected:</span></span><br><span class="line">  value: ...,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// include at least one of the following three props:</span></span><br><span class="line">  label: <span class="string">'...'</span>, <span class="comment">// Label for button</span></span><br><span class="line">  icon: <span class="string">'...'</span>, <span class="comment">// Icon for button</span></span><br><span class="line">  iconRight: <span class="string">'...'</span>, <span class="comment">// Icon for button on right side</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Optional properties that override the QBtnToggle props:</span></span><br><span class="line">  disable,</span><br><span class="line">  color,</span><br><span class="line">  textColor,</span><br><span class="line">  toggleColor,</span><br><span class="line">  toggleTextColor,</span><br><span class="line">  noCaps,</span><br><span class="line">  noWrap,</span><br><span class="line">  noRipple,</span><br><span class="line">  waitForRipple,</span><br><span class="line">  tabindex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@input</code></td>
<td>Triggered when it gets selected.</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Button Group]]></title>
      <url>https://quasar-framework.org/components/button-group.html</url>
      <content type="html"><![CDATA[<p>You can conveniently group <a href="/components/button.html">QBtn</a> and <a href="/components/button-dropdown.html">QBtnDropdown</a> using QBtnGroup. Be sure to check those component’s respective pages to see their props and methods.</p>
<input type="hidden" data-fullpage-demo="buttons/btn-group">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [</span><br><span class="line">    <span class="string">'QBtnGroup'</span>,</span><br><span class="line">    <span class="string">'QBtn'</span>,        <span class="comment">// if using QBtn</span></span><br><span class="line">    <span class="string">'QBtnDropdown'</span> <span class="comment">// if using QBtnDropdown</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-usage"><a href="#Basic-usage" class="headerlink" title="Basic usage"></a>Basic usage</h2><p>Simple group of three buttons:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-btn-group</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">label</span>=<span class="string">"One"</span> @<span class="attr">click</span>=<span class="string">"clickHandler1"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">label</span>=<span class="string">"Two"</span> @<span class="attr">click</span>=<span class="string">"clickHandler2"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">label</span>=<span class="string">"Three"</span> @<span class="attr">click</span>=<span class="string">"clickHandler3"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-btn-group</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Simple group of three push buttons:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-btn-group</span> <span class="attr">push</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">push</span> <span class="attr">label</span>=<span class="string">"One"</span> @<span class="attr">click</span>=<span class="string">"clickHandler1"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">push</span> <span class="attr">label</span>=<span class="string">"Two"</span> @<span class="attr">click</span>=<span class="string">"clickHandler2"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">push</span> <span class="attr">label</span>=<span class="string">"Three"</span> @<span class="attr">click</span>=<span class="string">"clickHandler3"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-btn-group</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Simple group of three outlined buttons:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-btn-group</span> <span class="attr">outline</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">outline</span> <span class="attr">label</span>=<span class="string">"One"</span> @<span class="attr">click</span>=<span class="string">"clickHandler1"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">outline</span> <span class="attr">label</span>=<span class="string">"Two"</span> @<span class="attr">click</span>=<span class="string">"clickHandler2"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">outline</span> <span class="attr">label</span>=<span class="string">"Three"</span> @<span class="attr">click</span>=<span class="string">"clickHandler3"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-btn-group</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>outline</code></td>
<td>Boolean</td>
<td>Set true, if you want an outlined button.</td>
</tr>
<tr>
<td><code>flat</code></td>
<td>Boolean</td>
<td>Set true, if you want a flat button.</td>
</tr>
<tr>
<td><code>push</code></td>
<td>Boolean</td>
<td>Set true, if the button should have a push effect.</td>
</tr>
<tr>
<td><code>rounded</code></td>
<td>Boolean</td>
<td>Set true, if the square button should have rounded corners.</td>
</tr>
</tbody>
</table>
<blockquote>
<p>You must use these props on both the parent QBtnGroup and the children QBtn/QBtnDropdown.</p>
</blockquote>
<h2 id="More-examples"><a href="#More-examples" class="headerlink" title="More examples"></a>More examples</h2><p>Simple group of three rounded buttons<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-btn-group</span> <span class="attr">rounded</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">rounded</span> <span class="attr">label</span>=<span class="string">"One"</span> @<span class="attr">click</span>=<span class="string">"clickHandler1"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">rounded</span> <span class="attr">label</span>=<span class="string">"Two"</span> @<span class="attr">click</span>=<span class="string">"clickHandler2"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">rounded</span> <span class="attr">label</span>=<span class="string">"Three"</span> @<span class="attr">click</span>=<span class="string">"clickHandler3"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-btn-group</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Simple group of three flat buttons<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-btn-group</span> <span class="attr">flat</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">label</span>=<span class="string">"One"</span> @<span class="attr">click</span>=<span class="string">"clickHandler1"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">label</span>=<span class="string">"Two"</span> @<span class="attr">click</span>=<span class="string">"clickHandler2"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">label</span>=<span class="string">"Three"</span> @<span class="attr">click</span>=<span class="string">"clickHandler3"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-btn-group</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Simple group of two rounded buttons and one rounded dropdown button:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-btn-group</span> <span class="attr">rounded</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">rounded</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">label</span>=<span class="string">"One"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">rounded</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">label</span>=<span class="string">"Two"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn-dropdown</span> <span class="attr">rounded</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">label</span>=<span class="string">"Three"</span> <span class="attr">split</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- dropdown content goes here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-list</span> <span class="attr">link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">v-close-overlay</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"folder"</span> <span class="attr">inverted</span> <span class="attr">color</span>=<span class="string">"primary"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Photos<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>February 22, 2016<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"info"</span> <span class="attr">color</span>=<span class="string">"amber"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-separator</span> <span class="attr">inset</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-list-header</span> <span class="attr">inset</span>&gt;</span>Files<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">v-close-overlay</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"assignment"</span> <span class="attr">inverted</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Vacation<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>February 22, 2016<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"info"</span> <span class="attr">color</span>=<span class="string">"amber"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-btn-dropdown</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-btn-group</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Building Reusable Components with Quasar]]></title>
      <url>https://quasar-framework.org/components/building-reusable-components.html</url>
      <content type="html"><![CDATA[<p>Vue greatly encourages the use of components to encapsulate reusable code. Following this practice can <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_blank" rel="noopener">DRY</a> up your code, saving tons of developer time and effort. Quasar also follows this same practice and distributes all its components encapsulated. This guide should help you build new components by either using existing Quasar components or by building your own from scratch.</p>
<p>Before you read this guide, please make sure you understand the concepts behind <a href="https://vuejs.org/v2/guide/components.html" target="_blank" rel="noopener">Vue components</a> and also read up on <a href="https://vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="noopener">Single File Components</a> (SFC).</p>
<h2 id="Using-existing-components"><a href="#Using-existing-components" class="headerlink" title="Using existing components"></a>Using existing components</h2><p>Quasar as a framework provides the building blocks to build your own apps. But, often the question arises as to how one can use the already existing Quasar components to build their own components.</p>
<p><strong>The first thing to notice is that Vue favors composition over inheritance</strong>.</p>
<p>Inheritance is a concept known from Object Oriented Programming, where classes are able to extend other classes in order to reuse their methods and attributes to build a new, but in some ways different, classes. Composition, on the other hand, is also a known concept from Object Oriented Programming. With composition, instead of extending or overwriting an existing class, the composed objects are built from the classes through interfaces or mixins, et. al. The main difference being inheritance builds an “is a” relationship between the objects and composition builds a “has a” relationship. Think about a page for a login, for example. It “has a” username field and “has a” password field. </p>
<p>Being able to compose components together to make more intricate components, is a powerful concept of SFCs. </p>
<h3 id="Compose-components-to-build-a-new-one"><a href="#Compose-components-to-build-a-new-one" class="headerlink" title="Compose components to build a new one"></a>Compose components to build a new one</h3><p>Most of the time you’ll want to take existing Quasar components and build new components from them.<br>You can refer to this as the <a href="https://en.wikipedia.org/wiki/Decorator_pattern" target="_blank" rel="noopener">Decorator / Wrapper Pattern</a>, also known from Object Oriented Programming. This pattern allows the developer to create new versions of an object by altering/extending its behavior through a wrapper object, which is given a new name. This new object can have any added methods or properties, but they do not affect the base object.</p>
<p>Let’s take a look at a simple example:</p>
<h3 id="Custom-select-component"><a href="#Custom-select-component" class="headerlink" title="Custom select component"></a>Custom select component</h3><p>Let’s assume we want to build a component that hides some of the props passed to <code>QSelect</code>. Specifically, we want to build a select component, which always has the <code>filter</code> prop set to true and always apply a default <code>filter-placeholder</code>.</p>
<p>A simple implementation of this wrapper component could look like this:</p>
<p><code>MySelect.vue</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;q-select :value=&quot;value&quot; :options=&quot;options&quot; @change=&quot;handleChange&quot; filter filter-placeholder=&quot;select&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123; QSelect &#125; from &apos;quasar&apos;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    props: [&apos;value&apos;, &apos;options&apos;],</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handleChange (newVal) &#123;</span><br><span class="line">        this.$emit(&apos;input&apos;, newVal)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      QSelect</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<p>Because <code>v-model=&quot;foo&quot;</code> is just syntactic sugar for <code>:value=&quot;foo&quot; @input=&quot;foo = $event.target.the value&quot;</code>, we can define a property <code>value</code> on our new component. This is then passed as <code>value</code> to the inner <code>QSelect</code>. Next, we can listen to the <code>change</code> event on the <code>QSelect</code> to trigger a method, as soon as the input has changed. If we receive such an event, we are emitting an <code>input</code> event from our new component and this new value is passed as a parameter, so it can again be used with <code>v-model</code>.</p>
<p>Now we can use the component like this:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;my-select v-model=&quot;selected&quot; :options=&quot;myOptions&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import MySelect from &apos;./MySelect&apos;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        selected: null,</span><br><span class="line">        myOptions: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    components: &#123; MySelect &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>This would render a <code>QSelect</code> with <code>filter</code> set to true and <code>filter-placeholder</code> set to “select”. A great way to inspect this is by using <a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener">vue-devtools</a>.</p>
<p>Note that it is now no longer possible to use the standard <code>QSelect</code> properties. If we wanted to set other properties on the internal <code>QSelect</code>, we would have to define all of them on our own component and pass them to <code>QSelect</code>.</p>
<h3 id="Pinpad-component"><a href="#Pinpad-component" class="headerlink" title="Pinpad component"></a>Pinpad component</h3><p>Now let’s assume we do not want to wrap an existing component to simplify it, but instead, we want to build an entirely new component, which is not included with Quasar. This example is taken from a forum post, where a user wanted to build a pin pad component.</p>
<p>If you think about pin pads for a minute, you will quickly come to the conclusion that pin pads, in most cases, are made up of a matrix of buttons.</p>
<p>That’s great, we already have the existing <code>QBtn</code> component included with Quasar, so these could be used to build our pin pad component.</p>
<p>The next thing we need for a pin pad is to order a set of buttons in a matrix. The CSS <a href="https://developer.mozilla.org/en/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes" target="_blank" rel="noopener">flexbox layout</a> could be an easy solution. Thankfully, Quasar also has you covered here, since it has a <a href="/components/flex-css.html">flexbox grid system</a> already built in.</p>
<p>If we throw these two thing together, building our pin pad is easy.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div v-for=&quot;row in 3&quot; class=&quot;row justify-center&quot;&gt;</span><br><span class="line">            &lt;div v-for=&quot;col in 3&quot; class=&quot;col-auto&quot;&gt;</span><br><span class="line">                &lt;q-btn @click=&quot;handleClick((row-1)*3 + col)&quot;&gt;</span><br><span class="line">                    &#123;&#123; (row-1)*3 + col &#125;&#125;</span><br><span class="line">                &lt;/q-btn&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123; QBtn &#125; from &apos;quasar&apos;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        pin: &apos;&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handleClick (digit) &#123;</span><br><span class="line">        this.pin += digit</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123; QBtn &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>The above code gives us a whole new component by using existing components.</p>
<p>We could now even extend this component with other Quasar components like a <code>QInput</code> to allow for manually entered pins.</p>
<p>Of course, this is just a minimal example. We’re missing styling of the buttons and all the logic that goes behind a pin pad.</p>
<h3 id="Mixins"><a href="#Mixins" class="headerlink" title="Mixins"></a>Mixins</h3><p>Mixins allow for the re-use of code, by holding certain methods or properties, which set of components may need. Mixins are a great way avoid code duplication.</p>
<p>To define a mixin, one has to export an object that looks similar to a normal component. Other components now can use this mixin to implement the mixin functionality.</p>
<p>For example, lets say we need to call a <code>register</code> method on a lot of different components. This method calls an API and returns some identifier that should be stored in the data object of the component.</p>
<p>First, let us define the RegisterMixin:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> RegisterMixin = &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      id: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    register () &#123;</span><br><span class="line">      <span class="comment">// Lets assume we extracted the AJAX call to the Registration class</span></span><br><span class="line">      <span class="keyword">new</span> Registration()</span><br><span class="line">        .register()</span><br><span class="line">        .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.id = response.id</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="keyword">this</span>.register()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now that we have defined the mixin, we can use it with any other component and it will be “mixed in” the component’s attributes.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; RegisterMixin &#125; from &apos;./registerMixin&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  mixins: [RegisterMixin]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>A component can use any number of mixins. But, be aware of how Vue merges the options. You can read more about mixins <a href="https://vuejs.org/v2/guide/mixins.html" target="_blank" rel="noopener">in the Vue docs</a>.</p>
<p>Quasar uses mixins for some of its internal functionality. For example the <a href="https://github.com/quasarframework/quasar/blob/dev/src/utils/router-link.js" target="_blank" rel="noopener">RouterLinkMixin</a>. It allows the adding of link functionality to different components.</p>
<p>There is a caveat. As great as mixins are, you cannot really use another single file component as a mixin, because only the JavaScript parts are mixed into your component and not the template or style definitions.</p>
<p>Let’s assume we want to build the <code>MySelect</code> component from above, using mixins.</p>
<p>If we would write the following code</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; QSelect &#125; from &apos;quasar&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  mixin: [QSelect]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>we would end up with a component that has all the internal methods, properties and data from <code>QSelect</code>, but no template at all. So we would have to get to the source of <code>QSelect</code> and copy the whole template definition. This would work up until <code>QSelect</code> gets updated and you forget to update the template as well. Even if you only update minor versions, it could still break, because you are not relying on the external interface of <code>QSelect</code>, which is described in the docs, nor the internal code, which normally one should never have to care about.</p>
<p>So mixins are great to share methods and properties between your own components.</p>
<h2 id="How-to-style-custom-components"><a href="#How-to-style-custom-components" class="headerlink" title="How to style custom components"></a>How to style custom components</h2><p>Styling custom components is easy. Just declare your styles in the <code>&lt;style&gt;</code> section of your single file component or import an external style definition by using <code>&lt;style src=&quot;/path/to/your/stlye&quot;&gt;&lt;/style&gt;</code></p>
<p>But, what if we want our styles to be consistent and be able to change them in a single place?</p>
<p>Quasar uses Stylus variables for that purpose. if you want to use some of the variables in your own components you can just import them like so:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;stylus&quot;&gt;</span><br><span class="line">  @import &apos;~variables&apos;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>Now you can use all the <a href="/components/stylus-variables.html">Stylus variables</a> like colors or breakpoints in your own component.</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">@import <span class="string">'~variables'</span></span><br><span class="line"></span><br><span class="line">h1</span><br><span class="line">  <span class="attribute">color</span> <span class="variable">$primary</span></span><br></pre></td></tr></table></figure>
<h2 id="Inter-component-communication"><a href="#Inter-component-communication" class="headerlink" title="Inter-component communication"></a>Inter-component communication</h2><p>Vue provides various ways to allow two or more components to communicate with each other.</p>
<h3 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h3><p><a href="https://vuejs.org/v2/guide/components.html#Props" target="_blank" rel="noopener">Props</a> are used to pass data from a parent component to a child component.</p>
<p>Almost all Quasar components use props to allow you to pass data or set options on them.</p>
<h3 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h3><p>For more complex communication events are used.</p>
<p>One particulary interesting thing about events is that <code>v-model=&quot;foo&quot;</code> is just syntactic sugar for <code>:value=&quot;foo&quot; @input=&quot;foo = $event.target.the value&quot;</code>. If you want to build a custom component you can use <code>v-model</code>. Just emit an <code>input</code> event with the payload somewhere in your code.</p>
<h2 id="Directives"><a href="#Directives" class="headerlink" title="Directives"></a>Directives</h2><p>Another form of reusable code in Vue are <a href="https://vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="noopener">directives</a>.</p>
<p>Quasar provides a set of directives out of the box you can use.</p>
<h3 id="Swiping-Panning-and-Hold"><a href="#Swiping-Panning-and-Hold" class="headerlink" title="Swiping, Panning and Hold"></a>Swiping, Panning and Hold</h3><p>The <a href="/components/touch-pan.html"><code>v-touch-pan</code></a>, <a href="/components/touch-swipe.html"><code>v-touch-swipe</code></a> and <a href="/components/touch-hold.html"><code>v-touch-hold</code></a> directives allow you to add gesture and touch interactions to your custom components.</p>
<h3 id="Ripple"><a href="#Ripple" class="headerlink" title="Ripple"></a>Ripple</h3><p>The <a href="/components/material-ripples.html">Material Ripple</a> directive allows you add the well know ripple effect to your custom components.</p>
<h2 id="Utils"><a href="#Utils" class="headerlink" title="Utils"></a>Utils</h2><p>In addition to components and directives Quasar also offers a set of JavaScript Utils to simplify your component development, check them out in the Components &gt; Utils section.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Cards]]></title>
      <url>https://quasar-framework.org/components/card.html</url>
      <content type="html"><![CDATA[<p>Quasar Cards are a great way to display important pieces of content, and are quickly emerging as a core design pattern for Apps. They’re a great way to contain and organize information, while also setting up predictable expectations for the user. With so much content to display at once, and often so little screen real-estate, Cards have fast become the design pattern of choice for many companies, including the likes of Google and Twitter.</p>
<p>Quasar Cards are a collection of components that you can use, based on the needs. It’s all about being creative. Experiment with different Web Components by embedding them in Card components to create awesome results.</p>
<input type="hidden" data-fullpage-demo="grouping/card">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [</span><br><span class="line">    <span class="string">'QCard'</span>,</span><br><span class="line">    <span class="string">'QCardTitle'</span>,</span><br><span class="line">    <span class="string">'QCardMain'</span>,</span><br><span class="line">    <span class="string">'QCardMedia'</span>,</span><br><span class="line">    <span class="string">'QCardSeparator'</span>,</span><br><span class="line">    <span class="string">'QCardActions'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Familiarize yourself with Card components with the examples below. The only requirement is that QCard needs to wrap all the other ones. Everything else is optional and can be inserted into your template anywhere as long as they are direct children of QCard.</p>
<p>Following are Vue properties of QCard component:</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>square</code></td>
<td>Boolean</td>
<td>Squared borders instead of round ones.</td>
</tr>
<tr>
<td><code>flat</code></td>
<td>Boolean</td>
<td>Remove shadow.</td>
</tr>
<tr>
<td><code>inline</code></td>
<td>Boolean</td>
<td>Make it inline. Also set a CSS width to work. Take a look at Grid example on the “More Examples” section.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One color from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>text-color</code></td>
<td>String</td>
<td>Override color of text, one from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>(v0.17.13+) To be set when the <code>color</code> is a dark one.</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- An basic example --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-card</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-card-title</span>&gt;</span></span><br><span class="line">    Card Title</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-card-title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-card-separator</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-card-main</span>&gt;</span></span><br><span class="line">    Card Content</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-card-main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>A more complex example:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-card</span> <span class="attr">inline</span> <span class="attr">style</span>=<span class="string">"width: 500px"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-card-media</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"~assets/donuts.png"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-card-media</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-card-title</span>&gt;</span></span><br><span class="line">    Cafe Basilico</span><br><span class="line">    <span class="tag">&lt;<span class="name">q-rating</span> <span class="attr">slot</span>=<span class="string">"subtitle"</span> <span class="attr">v-model</span>=<span class="string">"stars"</span> <span class="attr">:max</span>=<span class="string">"5"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"right"</span> <span class="attr">class</span>=<span class="string">"row items-center"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"place"</span> /&gt;</span> 250 ft</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-card-title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-card-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$・Italian, Cafe<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-faded"</span>&gt;</span>Small plates, salads &amp; sandwiches in an intimate setting.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-card-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-card-separator</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-card-actions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">round</span> <span class="attr">dense</span> <span class="attr">icon</span>=<span class="string">"event"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">label</span>=<span class="string">"5:30PM"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">label</span>=<span class="string">"7:30PM"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">label</span>=<span class="string">"9:00PM"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">label</span>=<span class="string">"Reserve"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-card-actions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Card-Title-QCardTitle"><a href="#Card-Title-QCardTitle" class="headerlink" title="Card Title (QCardTitle)"></a>Card Title (QCardTitle)</h3><p>QCardTitle has three main areas (all are optional): title, subtitle (“subtitle” slot) and right side (“right” slot).</p>
<p>Note that you can set title and subtitle as overlay on an image or video through a QCardMedia component too (see QCardMedia section).</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-card-title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    Optional. Anything that goes here without specifying "slot"</span></span><br><span class="line"><span class="comment">    is considered the main title</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  Title</span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Optional. Adding the subtitle. Notice slot="subtitle" --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"subtitle"</span>&gt;</span>Subtitle<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    Optional. Adding something on the right side,</span></span><br><span class="line"><span class="comment">    like an icon triggering a Popover with a menu.</span></span><br><span class="line"><span class="comment">    Notice the slot="right"</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">slot</span>=<span class="string">"right"</span> <span class="attr">name</span>=<span class="string">"more_vert"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-popover</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-list</span> <span class="attr">link</span> <span class="attr">class</span>=<span class="string">"no-border"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">v-close-overlay</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Remove Card"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">v-close-overlay</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Send Feedback"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">v-close-overlay</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Share"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-popover</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-icon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-card-title</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Card-Main-Content-QCardMain"><a href="#Card-Main-Content-QCardMain" class="headerlink" title="Card Main Content (QCardMain)"></a>Card Main Content (QCardMain)</h3><p>QCardMain defines an area containing the main Card content, like description, details or anything you need outside of the other Card component’s purpose.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-card-main</span>&gt;</span></span><br><span class="line">  Card main content.</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-card-main</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-card-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>$・Italian, Cafe<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-faded"</span>&gt;</span></span><br><span class="line">    Small plates, salads &amp; sandwiches in an intimate setting.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-card-main</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Card-Actions-QCardActions"><a href="#Card-Actions-QCardActions" class="headerlink" title="Card Actions (QCardActions)"></a>Card Actions (QCardActions)</h3><p>Cards can have some actions (buttons) attached to them.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>vertical</code></td>
<td>Boolean</td>
<td>Stack actions vertically</td>
</tr>
<tr>
<td><code>align</code></td>
<td>String</td>
<td>One of ‘start’, ‘center’, ‘end’, ‘around’, ‘between’ which aligns buttons in respect to the actions container</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Horizontal actions --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-card-actions</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    Define the buttons to your liking,</span></span><br><span class="line"><span class="comment">    these are just examples</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">round</span> <span class="attr">dense</span> <span class="attr">icon</span>=<span class="string">"event"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">label</span>=<span class="string">"5:30PM"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">label</span>=<span class="string">"7:30PM"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">label</span>=<span class="string">"9:00PM"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">label</span>=<span class="string">"Reserve"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-card-actions</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Vertical actions --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-card-actions</span> <span class="attr">vertical</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">label</span>=<span class="string">"Action 1"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">label</span>=<span class="string">"Action 2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-card-actions</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Card-Media-QCardMedia"><a href="#Card-Media-QCardMedia" class="headerlink" title="Card Media (QCardMedia)"></a>Card Media (QCardMedia)</h3><p>Cards can also contain media elements: images, videos (through <a href="/components/video-embedding.html">QVideo</a>) or a parallax (through <a href="/components/parallax.html">QParallax</a>). This can be done through QCardMedia component, which supports an optional overlay too (for things like title and/or subtitle).</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>overlay-position</code></td>
<td>String</td>
<td>One of ‘top’, ‘bottom’ or ‘full’ which sets the position of overlay on top of media element.</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Displaying an image --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-card-media</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"~assets/some-image.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-card-media</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Display a video (with help of QVideo component) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-card-media</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-video</span> <span class="attr">src</span>=<span class="string">"https://www.youtube.com/embed/k3_tw44QsZQ?rel=0"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-card-media</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Displaying a Parallax (with help of QParallax) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-card-media</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-parallax</span> <span class="attr">:src</span>=<span class="string">"'statics/parallax1.jpg'"</span> <span class="attr">:height</span>=<span class="string">"150"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"loading"</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-parallax</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-card-media</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Now let’s see how we can add overlays too (through “overlay” slot):<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-card-media</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"~assets/mountains.jpg"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Notice the slot="overlay" --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-card-title</span> <span class="attr">slot</span>=<span class="string">"overlay"</span>&gt;</span></span><br><span class="line">    Title</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"subtitle"</span>&gt;</span>Subtitle<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-card-title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-card-media</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Overlay at top of media elements.</span></span><br><span class="line"><span class="comment">  Notice overlay-position="top"</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-card-media</span> <span class="attr">overlay-position</span>=<span class="string">"top"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"~assets/mountains.jpg"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Notice the slot="overlay" --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-card-title</span> <span class="attr">slot</span>=<span class="string">"overlay"</span>&gt;</span></span><br><span class="line">    Title</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"subtitle"</span>&gt;</span>Subtitle<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-card-title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-card-media</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Overlay on full area of media elements</span></span><br><span class="line"><span class="comment">  Notice overlay-position="full"</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-card-media</span> <span class="attr">overlay-position</span>=<span class="string">"full"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"~assets/mountains.jpg"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Notice the slot="overlay" --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-card-title</span> <span class="attr">slot</span>=<span class="string">"overlay"</span>&gt;</span></span><br><span class="line">    Title</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"subtitle"</span>&gt;</span>Subtitle<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-card-title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-card-media</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Card-Inner-Separator"><a href="#Card-Inner-Separator" class="headerlink" title="Card Inner Separator"></a>Card Inner Separator</h3><p>You can choose to add a separator between Card components, which is basically a horizontal thin line, by adding QCardSeparator.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>inset</code></td>
<td>Boolean</td>
<td>Inset separator</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-card</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-card-title</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-card-title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Here is the separator --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-card-separator</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-card-actions</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-card-actions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Some-More-Examples"><a href="#Some-More-Examples" class="headerlink" title="Some More Examples"></a>Some More Examples</h2><h3 id="Coloring-Cards"><a href="#Coloring-Cards" class="headerlink" title="Coloring Cards"></a>Coloring Cards</h3><p>Use colors from <a href="/components/color-palette.html">Quasar Color Palette</a> to set a color for your Cards.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-card</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-card</span> <span class="attr">color</span>=<span class="string">"amber-8"</span> <span class="attr">text-color</span>=<span class="string">"black"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Lists-on-Cards"><a href="#Lists-on-Cards" class="headerlink" title="Lists on Cards"></a>Lists on Cards</h3><p>Place a QList with its QItems at root of your QCard, like this:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-card</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">icon</span>=<span class="string">"local bar"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Bar XYZ<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Have a drink.<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">color</span>=<span class="string">"red"</span> <span class="attr">icon</span>=<span class="string">"local gas station"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Gas Station<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Fill your gas tank.<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">color</span>=<span class="string">"amber"</span> <span class="attr">icon</span>=<span class="string">"local movies"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Cinema XYZ<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Watch a movie.<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>There’s also the possibility to create a nice header for your Cards with an image / avatar, a person name and some quick details. In this example, we skip using QCardList:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-card</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">avatar</span>=<span class="string">"/statics/boy-avatar.png"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Subhead<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Making-a-Grid-of-Cards"><a href="#Making-a-Grid-of-Cards" class="headerlink" title="Making a Grid of Cards"></a>Making a Grid of Cards</h3><p>In order to make a grid of Cards you need to use the <code>inline</code> property of QCard component and set a width for your Cards.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    In this example every card has a "style" tag with a width.</span></span><br><span class="line"><span class="comment">    Consider defining a CSS class instead to ease the template syntax.</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-card</span> <span class="attr">inline</span> <span class="attr">style</span>=<span class="string">"width: 300px"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-card</span> <span class="attr">inline</span> <span class="attr">style</span>=<span class="string">"width: 300px"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-card</span> <span class="attr">inline</span> <span class="attr">style</span>=<span class="string">"width: 300px"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">q-card</span> <span class="attr">inline</span> <span class="attr">style</span>=<span class="string">"width: 300px"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Card-with-Collapsibles"><a href="#Card-with-Collapsibles" class="headerlink" title="Card with Collapsibles"></a>Card with Collapsibles</h3><p>Since Collapsibles are List items too, it makes sense to use a QList component to encapsulate them. Also, imagine a Card with Collapsibles containing Cards. Inception :)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-card</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-card-title</span>&gt;</span></span><br><span class="line">    Card with Collapsible List</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-card-title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-card-separator</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">icon</span>=<span class="string">"explore"</span> <span class="attr">label</span>=<span class="string">"First"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        Lorem ipsum dolor sit amet...</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">icon</span>=<span class="string">"perm_identity"</span> <span class="attr">label</span>=<span class="string">"Second"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        Lorem ipsum dolor sit amet...</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">icon</span>=<span class="string">"shopping_cart"</span> <span class="attr">label</span>=<span class="string">"Third"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        Lorem ipsum dolor sit amet...</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Chat]]></title>
      <url>https://quasar-framework.org/components/chat.html</url>
      <content type="html"><![CDATA[<p>Quasar supplies a chat component called QChatMessage which is really a chat entry that renders the data given by the props.</p>
<input type="hidden" data-fullpage-demo="other-components/chat">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QChatMessage'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>This show a simple chat between two parties.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-chat-message</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">'Sunday, 19th'</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-chat-message</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">"me"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">avatar</span>=<span class="string">"statics/boy-avatar.png"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:text</span>=<span class="string">"['hunter2']"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">stamp</span>=<span class="string">"4 minutes ago"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">sent</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-chat-message</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">"Jane"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">avatar</span>=<span class="string">"statics/linux-avatar.png"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:text</span>=<span class="string">"['hey, if you type in your pw', 'it will show as stars']"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">stamp</span>=<span class="string">"7 minutes ago"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>sent</code></td>
<td>Boolean</td>
<td>Render as a sent message (so from current user)</td>
</tr>
<tr>
<td><code>label</code></td>
<td>String</td>
<td>Label of message</td>
</tr>
<tr>
<td><code>name</code></td>
<td>String</td>
<td>Name of the message creator</td>
</tr>
<tr>
<td><code>avatar</code></td>
<td>String</td>
<td>URL to the avatar image of the creator (use a static resource)</td>
</tr>
<tr>
<td><code>text</code></td>
<td>Array</td>
<td>Array of strings that are the message body. Strings are not sanitized, see details below.</td>
</tr>
<tr>
<td><code>stamp</code></td>
<td>String</td>
<td>Creation timestamp string</td>
</tr>
<tr>
<td><code>text-color</code></td>
<td>String</td>
<td>Color of the text</td>
</tr>
<tr>
<td><code>bg-color</code></td>
<td>String</td>
<td>Color of the chat message bubble</td>
</tr>
<tr>
<td><code>size</code></td>
<td>Number</td>
<td>1-12 out of 12 (same as col-*).</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>Note</strong> that <code>text</code> property is an Array of Strings. This is useful when two or more messages share the same (or very close) timestamp. They will be displayed on separate bubbles, but grouped together more closely so that the name of the creator and timestamp are displayed only once for this kind of group.</p>
</blockquote>
<blockquote>
<p><strong>IMPORTANT</strong><br>Strings in the <code>text</code> property are not sanitized so you can display arbitrary html as message. If you display text from unknown source, like messages from users, you should always sanitize it yourself. </p>
</blockquote>
<p>Please refer to the demo source for a more complete set of examples.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Button]]></title>
      <url>https://quasar-framework.org/components/button.html</url>
      <content type="html"><![CDATA[<p>Quasar has a component called QBtn which is a button with a few extra useful features. For instance, it comes in two shapes: rectangle (default) and round. It also has the material ripple effect by default when building with Material theme.</p>
<input type="hidden" data-fullpage-demo="buttons/btn">

<p>The button component also comes with a spinner or loading effect. You would use this for times when app execution may cause a delay and you want to give the user some feedback about that delay. When used, the button will display a spinning animation as soon as the user clicks the button.</p>
<p>When not disabled or spinning, QBtn emits a <code>@click</code> event, as soon as it is clicked or tapped.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QBtn'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Just label --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">label</span>=<span class="string">"New item"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Just icon --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">icon</span>=<span class="string">"map"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Icon &amp; Label --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">icon</span>=<span class="string">"create"</span> <span class="attr">label</span>=<span class="string">"New item"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>A standard round button.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Notice "round" specified and</span></span><br><span class="line"><span class="comment">  self-closing tag (as we don't need to specify any</span></span><br><span class="line"><span class="comment">  content for button -- the icon fills all available</span></span><br><span class="line"><span class="comment">  space anyway). The label is discarded.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">round</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">icon</span>=<span class="string">"card_giftcard"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Next is perfectly equivalent, but use "icon"</span></span><br><span class="line"><span class="comment">  property whenever you can.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">round</span> <span class="attr">color</span>=<span class="string">"secondary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"card_giftcard"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>IMPORTANT</strong><br>For round buttons, only use an icon as content, through “icon” property or QIcon component as the only child. Do not add anything else besides the icon, unless you want a Popover or Tooltip.</p>
</blockquote>
<p>Primary colored button of small size:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">size</span>=<span class="string">"sm"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"Edit"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<p>Button with “loading” state (we’ll go over these in more detail in its own section later):</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Regular shaped --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">  <span class="attr">loading</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">click</span>=<span class="string">"clickMethod"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"Button Label"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Round shaped (only use icon or spinner as content!) with loading state --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:loading</span>=<span class="string">"loading"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">round</span></span></span><br><span class="line"><span class="tag">    <span class="attr">icon</span>=<span class="string">"map"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">"handler"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-spinner-oval</span> <span class="attr">slot</span>=<span class="string">"loading"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      loading: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    handler () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.loading = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// we simulate a delay here:</span></span></span><br><span class="line"><span class="javascript">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.loading = <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">      &#125;, 3000)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Name of the icon to use.</td>
</tr>
<tr>
<td><code>icon-right</code></td>
<td>String</td>
<td>Name of the icon to place on right side of button.</td>
</tr>
<tr>
<td><code>loading</code></td>
<td>Boolean</td>
<td>Display a spinner, if true. Check <a href="#Button-with-Progress">Button with Progress</a>.</td>
</tr>
<tr>
<td><code>percentage</code></td>
<td>Number</td>
<td>Optional property for displaying a determinate progress. Use along <code>loading</code>.</td>
</tr>
<tr>
<td><code>dark-percentage</code></td>
<td>Boolean</td>
<td>Optional property for displaying a determinate progress on a light button color. Use along <code>loading</code> and <code>percentage</code>.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>The button is disabled, if true. <code>@click</code> event won’t be triggered while in this state.</td>
</tr>
<tr>
<td><code>label</code></td>
<td>String/Number</td>
<td>Button label.</td>
</tr>
<tr>
<td><code>tabindex</code></td>
<td>Number</td>
<td>Accessibility; set explicit HTML “tabindex” attribute value.</td>
</tr>
<tr>
<td><code>repeat-timeout</code></td>
<td>Number/Function</td>
<td>Enables multiple <code>@click</code> events on click/tap and hold. Function gets a Number (timesTriggered) as parameter.</td>
</tr>
<tr>
<td><code>wait-for-ripple</code></td>
<td>Boolean</td>
<td>Wait for ripple then before emitting <code>@click</code> event. Mat theme only.</td>
</tr>
<tr>
<td><code>type</code></td>
<td>String</td>
<td>(v0.17+) One of “a” (uses an <code>&lt;a&gt;</code> tag), “button”, “submit”, “reset”.</td>
</tr>
</tbody>
</table>
<h4 id="Router-syntax-sugar"><a href="#Router-syntax-sugar" class="headerlink" title="Router syntax sugar"></a>Router syntax sugar</h4><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>to</code></td>
<td>String/Object</td>
<td>Makes button go to the indicated route when clicked.</td>
</tr>
<tr>
<td><code>replace</code></td>
<td>Boolean</td>
<td>Replaces current route instead of pushing to window history.</td>
</tr>
</tbody>
</table>
<p>The properties above are just syntactic sugar and work similar to <code>&lt;router-link&gt;</code> Vue component.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">label</span>=<span class="string">"Home"</span> <span class="attr">to</span>=<span class="string">"/"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- equivalent to: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">label</span>=<span class="string">"Home"</span> @<span class="attr">click</span>=<span class="string">"$router.push('/')"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="Appearance"><a href="#Appearance" class="headerlink" title="Appearance"></a>Appearance</h4><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>size</code></td>
<td>String</td>
<td>Button size. One of <code>xs</code>, <code>sm</code>, <code>md</code>, <code>lg</code>, <code>xl</code>, or a css unit string size eg. <code>25px</code>, <code>2rem</code>, <code>3vw</code>. More info below this table.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>A color from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>text-color</code></td>
<td>String</td>
<td>A color from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>align</code></td>
<td>String</td>
<td>Label/Content alignment. One of <code>left</code>, <code>center</code>, <code>right</code>, <code>around</code>, <code>between</code>.</td>
</tr>
<tr>
<td><code>dense</code></td>
<td>Boolean</td>
<td>Dense Button.</td>
</tr>
<tr>
<td><code>round</code></td>
<td>Boolean</td>
<td>Set true, if you want a round button.</td>
</tr>
<tr>
<td><code>outline</code></td>
<td>Boolean</td>
<td>Set true, if you want an outlined button.</td>
</tr>
<tr>
<td><code>flat</code></td>
<td>Boolean</td>
<td>Set true, if you want a flat button.</td>
</tr>
<tr>
<td><code>push</code></td>
<td>Boolean</td>
<td>Set true, if the button should have a push effect.</td>
</tr>
<tr>
<td><code>rounded</code></td>
<td>Boolean</td>
<td>Set true, if the square button should have rounded corners.</td>
</tr>
<tr>
<td><code>glossy</code></td>
<td>Boolean</td>
<td>Set true, if the button should be glossy.</td>
</tr>
<tr>
<td><code>fab</code></td>
<td>Boolean</td>
<td>Floating Action Button. <a href="/components/floating-action-button.html">See</a></td>
</tr>
<tr>
<td><code>fab-mini</code></td>
<td>Boolean</td>
<td>Smaller Floating Action Button.</td>
</tr>
<tr>
<td><code>no-wrap</code></td>
<td>Boolean</td>
<td>Prevent text wrapping</td>
</tr>
<tr>
<td><code>no-caps</code></td>
<td>Boolean</td>
<td>Set true, if you don’t want button content/label to be transformed to uppercase letter on Material Theme.</td>
</tr>
<tr>
<td><code>no-ripple</code></td>
<td>Boolean</td>
<td>Disable <a href="/components/material-ripples.html">Material Ripple</a>. Mat theme only.</td>
</tr>
</tbody>
</table>
<p>Size property values:</p>
<table>
<thead>
<tr>
<th>Size value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>xs, …, xl</td>
<td>Predefined sizes</td>
</tr>
<tr>
<td>form</td>
<td>Same size as an input form component</td>
</tr>
<tr>
<td>form-label</td>
<td>Same size as an input form component with stack/float label</td>
</tr>
<tr>
<td>form-hide-underline</td>
<td>Same size as an input form component with no bottom border</td>
</tr>
<tr>
<td>form-label-hide-underline</td>
<td>Same size as an input form component with stack/float label and no bottom border</td>
</tr>
<tr>
<td>form-inverted</td>
<td>Same size as an inverted input form component</td>
</tr>
<tr>
<td>form-label-inverted</td>
<td>Same size as an inverted input form component with stack/float label</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@click</code></td>
<td>Triggered on button click/tap, if button is not disabled.</td>
</tr>
</tbody>
</table>
<h2 id="More-examples"><a href="#More-examples" class="headerlink" title="More examples"></a>More examples</h2><p>When adding an icon to a regular button, there are two possibilities for its position. The default position is left. Use <code>icon-right</code> property instead to position the icon to the right:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- icon will be placed on the left --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">icon</span>=<span class="string">"mail"</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">label</span>=<span class="string">"Button Label"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- icon will be placed on the right --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">icon-right</span>=<span class="string">"mail"</span> <span class="attr">color</span>=<span class="string">"teal"</span> <span class="attr">label</span>=<span class="string">"Button Label"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- icons will be placed on both sides --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">icon</span>=<span class="string">"mail"</span> <span class="attr">icon-right</span>=<span class="string">"mail"</span> <span class="attr">color</span>=<span class="string">"teal"</span> <span class="attr">label</span>=<span class="string">"Button Label"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Button-Sizes"><a href="#Button-Sizes" class="headerlink" title="Button Sizes"></a>Button Sizes</h2><p>Use <code>size</code> attribute with one of the following values: <code>xs</code>, <code>sm</code>, <code>md</code>, <code>lg</code>, <code>xl</code>. You don’t need to specify <code>md</code>, because that’s the default size.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">size</span>=<span class="string">"xs"</span> <span class="attr">label</span>=<span class="string">"Extra Small Button"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">size</span>=<span class="string">"sm"</span> <span class="attr">label</span>=<span class="string">"Small Button"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">size</span>=<span class="string">"md"</span> <span class="attr">label</span>=<span class="string">"Medium Button"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">size</span>=<span class="string">"lg"</span> <span class="attr">label</span>=<span class="string">"Large Button"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">size</span>=<span class="string">"xl"</span> <span class="attr">label</span>=<span class="string">"Extra Large Button"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>You can also use a CSS unit as size:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">size</span>=<span class="string">"25px"</span> <span class="attr">label</span>=<span class="string">"25 Pixels"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">size</span>=<span class="string">"2rem"</span> <span class="attr">label</span>=<span class="string">"2 Rem"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">size</span>=<span class="string">"3vh"</span> <span class="attr">label</span>=<span class="string">"3 View Height"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>You can also make use of globally available CSS helper class <code>block</code> (sets CSS <code>display</code> property to <code>block</code>) or <code>full-width</code> to expand the button.</p>
<h2 id="Button-Colors"><a href="#Button-Colors" class="headerlink" title="Button Colors"></a>Button Colors</h2><p>Use any color from the <a href="/components/color-palette.html">Quasar Color Palette</a>. Examples: <code>primary</code>, <code>orange</code>, <code>lime</code>, ‘amber-8’.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">label</span>=<span class="string">"Primary Button"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"amber"</span> <span class="attr">label</span>=<span class="string">"Amber Button"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">text-color</span>=<span class="string">"amber"</span> <span class="attr">label</span>=<span class="string">"Primary Button with Amber text"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Button-Style-Types"><a href="#Button-Style-Types" class="headerlink" title="Button Style Types"></a>Button Style Types</h2><p>There are also the <code>outline</code>, <code>push</code>, <code>round</code>, <code>flat</code>, <code>rounded</code> and <code>glossy</code> props for you to use to control some design aspects of the button.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- an outlined button --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">outline</span> <span class="attr">color</span>=<span class="string">"teal"</span> <span class="attr">label</span>=<span class="string">"Outlined Button"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- a rounded push button --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">rounded</span> <span class="attr">push</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">label</span>=<span class="string">"Rounded Push Button"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- a glossy button --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">glossy</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">label</span>=<span class="string">"Glossy"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- a flat dense round button --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">dense</span> <span class="attr">round</span> <span class="attr">icon</span>=<span class="string">"menu"</span> <span class="attr">color</span>=<span class="string">"primary"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Button-with-Progress"><a href="#Button-with-Progress" class="headerlink" title="Button with Progress"></a>Button with Progress</h2><p>Some button actions involve contacting a server, so an asynchronous response. It’s best that you inform the user about a background process taking place until the asynchronous response is ready. QBtn offers this possibility through the <code>loading</code> prop. This property will display a QSpinner (by default) instead of the icon and/or label of the button. Custom loading content can also be used.</p>
<p>Here is a full example highlighting what you can do with the <code>loading</code> property.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Notice `loading` prop --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">:loading</span>=<span class="string">"loading"</span> @<span class="attr">click</span>=<span class="string">"simulateProgress"</span> <span class="attr">label</span>=<span class="string">"Button Label"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      Notice slot="loading". This is optional.</span></span><br><span class="line"><span class="comment">      If missing, the default theme spinner will be used.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"loading"</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123; <span class="attr">loading</span>: <span class="literal">false</span> &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    simulateProgress () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// we set loading state</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.loading = <span class="literal">true</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// simulate a delay, like in</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// waiting for an Ajax call</span></span></span><br><span class="line"><span class="javascript">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// delay is over, now we reset loading state</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.loading = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// DON't forget to reset loading state</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// otherwise the button will keep on</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// being in "loading" state</span></span></span><br><span class="line"><span class="undefined">      &#125;, 3000)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>If you’d like to add a different spinner than the default one of the theme you are building your website/app with, you can do so by slotting in the <a href="/components/spinner.html">Spinner</a> component that you’d like.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">  <span class="attr">icon</span>=<span class="string">"mail"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"Get Mail"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"orange"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">click</span>=<span class="string">"simulateProgress"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-spinner-facebook</span> <span class="attr">slot</span>=<span class="string">"loading"</span> <span class="attr">size</span>=<span class="string">"20px"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>The “loading” slot can contain anything. It’s not limited to text or spinners only. You can use whatever DOM elements or components you want. The end result is that while in “loading” state, the Button content will be replaced by whatever the “loading” slot contains. Also, while in this state, the button gets disabled so no further click events are unnecessarily triggered.</p>
</blockquote>
<h3 id="Handling-Deterministic-Progress"><a href="#Handling-Deterministic-Progress" class="headerlink" title="Handling Deterministic Progress"></a>Handling Deterministic Progress</h3><p>Should you wish, you can also display a deterministic progress within the button by using the additional “percentage” property along with what you’ve already learned about buttons with progress:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:percentage</span>=<span class="string">"percentage"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:loading</span>=<span class="string">"loading"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">"Compute PI"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">"startComputing"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"loading"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-spinner-gears</span> <span class="attr">class</span>=<span class="string">"on-left"</span> /&gt;</span></span><br><span class="line">      Computing...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// remember to also register necessary components in quasar.conf.js</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      loading: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">      percentage: 0</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    startComputing () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.loading = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.percentage = <span class="number">0</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// we simulate progress here</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.interval = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// adding a random amount of percentage</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.percentage += <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">8</span> + <span class="number">10</span>)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// and when we are done...</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="keyword">this</span>.percentage &gt;= <span class="number">100</span>) &#123;</span></span><br><span class="line"><span class="javascript">          clearInterval(<span class="keyword">this</span>.interval)</span></span><br><span class="line"><span class="javascript">          <span class="comment">// DON'T forget to reset loading state:</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.loading = <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;, 700)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  beforeDestroy () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// we also take care of clearing interval</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// should the user navigate away before the progress has ended</span></span></span><br><span class="line"><span class="javascript">    clearInterval(<span class="keyword">this</span>.interval)</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>You can also use the <code>dark-percentage</code> prop if your button has a light color.</p>
<h3 id="Controlling-the-Button-for-Form-Submission"><a href="#Controlling-the-Button-for-Form-Submission" class="headerlink" title="Controlling the Button for Form Submission"></a>Controlling the Button for Form Submission</h3><p>When you have a button to submit a form’s input to the server, like a “Save” button, more often than not you will also want to give the user the ability to submit the form with a press of the enter key. If you would also like to give the user feedback of the saving process being in progress, and to prevent the user repeatedly pressing the button, you would need the button to show a loading spinner and be disabled from click events. QBtn allows this behavior if configured so.</p>
<p>To control this loading feature, all you need is logic in your form which sets the <code>v-model</code> of the button to <code>true</code>. Once it is set to <code>true</code>, the button displays the spinner. To stop the process, set the <code>v-model</code> value back to false.</p>
<p>The example below demonstrates this button control with the Enter key.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- a simple text field watching for the enter key release --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"test"</span> @<span class="attr">keyup.enter</span>=<span class="string">"simulateSubmit"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      A button with v-model set to submit.</span></span><br><span class="line"><span class="comment">      v-model scope variable must be a strict Boolean</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">:loading</span>=<span class="string">"submitting"</span> @<span class="attr">click</span>=<span class="string">"simulateSubmit"</span> <span class="attr">label</span>=<span class="string">"Save"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-spinner-facebook</span> <span class="attr">slot</span>=<span class="string">"loading"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      test: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">      submitting: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    simulateSubmit () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.submitting = <span class="literal">true</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// Simulating a delay here.</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// When we are done, we reset "submitting"</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// Boolean to false to restore the</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// initial state.</span></span></span><br><span class="line"><span class="javascript">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// delay simulated, we are done,</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// now restoring submit to its initial state</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.submitting = <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">      &#125;, 3000)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Disabling-a-Button"><a href="#Disabling-a-Button" class="headerlink" title="Disabling a Button"></a>Disabling a Button</h2><p>To disable the button, use the <code>disable</code> prop. Along with a small fade applied to the Button, the <code>@click</code> event will no longer be triggered.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">disable</span> <span class="attr">label</span>=<span class="string">"Primary Button"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"amber"</span> <span class="attr">:disable</span>=<span class="string">"booleanVar"</span> <span class="attr">label</span>=<span class="string">"Amber Button"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Dealing-with-forms"><a href="#Dealing-with-forms" class="headerlink" title="Dealing with forms"></a>Dealing with forms</h2><p><em>Requires Quasar v0.15.11+</em></p>
<p>Should you wish to use QBtn inside of a <code>&lt;form&gt;</code> tag, you should know about the difference between (type=”button”, which is implicit, and type=”submit”):</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">label</span>=<span class="string">"I do not submit form"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">label</span>=<span class="string">"I do submit the form"</span> /&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Using-a-Button-with-Vue-Router"><a href="#Using-a-Button-with-Vue-Router" class="headerlink" title="Using a Button with Vue Router"></a>Using a Button with Vue Router</h2><p>If you want to use a button to navigate to a new page you don’t need to use a wrapping <code>&lt;router-link&gt;</code> tag. Instead, you can use the <code>@click</code> event to handle the route change.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">click</span>=<span class="string">"$router.push('/path/to/new/page')"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"navigate"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Delaying-button-click-event"><a href="#Delaying-button-click-event" class="headerlink" title="Delaying button click event"></a>Delaying button click event</h2><p>On Material theme you can delay a button’s <code>@click</code> until the material ripple has reached the edge of the button using the <code>wait-for-ripple</code> prop. Useful from a UI perspective as an example when you want a button to dismiss a Modal.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">  <span class="attr">wait-for-ripple</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">click</span>=<span class="string">"clickHandler"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"Click Me"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Using-a-click-and-hold-button"><a href="#Using-a-click-and-hold-button" class="headerlink" title="Using a click and hold button"></a>Using a click and hold button</h2><p>If you want to trigger a button’s <code>@click</code> event multiple times on click and hold use the <code>repeat-timeout</code> prop. Accepts either a Number or a Function (returning a Number). The Number represents the time amount to wait until triggering <code>@click</code> event again.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Click and hold to trigger every second --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> @<span class="attr">click</span>=<span class="string">"clickHandler"</span> <span class="attr">:repeat-timeout</span>=<span class="string">"1000"</span> <span class="attr">label</span>=<span class="string">"Click Me"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Click and hold to trigger faster over time --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> @<span class="attr">click</span>=<span class="string">"clickHandler"</span> <span class="attr">:repeat-timeout</span>=<span class="string">"repeatFunction"</span> <span class="attr">label</span>=<span class="string">"Click Me"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">      clickHandler () &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'Handler Triggered'</span>)</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      repeatFunction (timesTriggered) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// first time timesTriggered is 0, so we add 1</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// to be sure we don't divide by 0</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="number">1000</span> / (timesTriggered + <span class="number">1</span>)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Carousel]]></title>
      <url>https://quasar-framework.org/components/carousel.html</url>
      <content type="html"><![CDATA[<p>Quasar Carousel is a Vue Component which you can use to display more information with less real estate, using slides. Useful for creating Wizards too.</p>
<input type="hidden" data-fullpage-demo="media/carousel">

<p>The Carousel height is determined by the slide with biggest height, unless the <code>height</code> prop is used.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [</span><br><span class="line">    <span class="string">'QCarousel'</span>,</span><br><span class="line">    <span class="string">'QCarouselSlide'</span>,</span><br><span class="line">    <span class="string">'QCarouselControl'</span></span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Here is a very basic example:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-carousel</span> <span class="attr">class</span>=<span class="string">"text-white"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-carousel-slide</span> <span class="attr">class</span>=<span class="string">"bg-primary"</span>&gt;</span></span><br><span class="line">    Slide 1</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-carousel-slide</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-carousel-slide</span> <span class="attr">class</span>=<span class="string">"bg-secondary"</span>&gt;</span></span><br><span class="line">    Slide 2</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-carousel-slide</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-carousel-slide</span> <span class="attr">class</span>=<span class="string">"bg-tertiary"</span>&gt;</span></span><br><span class="line">    Slide 3</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-carousel-slide</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-carousel</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="QCarousel-Parent"><a href="#QCarousel-Parent" class="headerlink" title="QCarousel (Parent)"></a>QCarousel (Parent)</h2><h3 id="QCarousel-Vue-Properties"><a href="#QCarousel-Vue-Properties" class="headerlink" title="QCarousel Vue Properties"></a>QCarousel Vue Properties</h3><p>Supports <code>v-model</code> which determines the slide number.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a>. It determines the color of the out of the box Carousel controls (arrows, quick nav).</td>
</tr>
<tr>
<td><code>arrows</code></td>
<td>Boolean</td>
<td>Show navigation arrows.</td>
</tr>
<tr>
<td><code>infinite</code></td>
<td>Boolean</td>
<td>Infinite slides scrolling.</td>
</tr>
<tr>
<td><code>autoplay</code></td>
<td>Boolean/Number</td>
<td>Auto scrolls between slides. Works great along <code>infinite</code> prop (but <code>infinite</code> is not required). If used as a number, it represents the number of milliseconds between scrolls.</td>
</tr>
<tr>
<td><code>quick-nav</code></td>
<td>Boolean</td>
<td>Shows navigational dots at bottom.</td>
</tr>
<tr>
<td><code>quick-nav-icon</code></td>
<td>String</td>
<td>Icon to use instead of the navigational dots at bottom.</td>
</tr>
<tr>
<td><code>quick-nav-position</code></td>
<td>String</td>
<td>(v0.17+) One of “top” or “bottom” for the quick navigation toolbar position.</td>
</tr>
<tr>
<td><code>no-swipe</code></td>
<td>Boolean</td>
<td>Disable navigation by touch/mouse actions.</td>
</tr>
<tr>
<td><code>handle-arrow-keys</code></td>
<td>Boolean</td>
<td>Allow navigation with left and right arrow key. In this case, it’s best to render only one such Carousel at a time.</td>
</tr>
<tr>
<td><code>easing</code></td>
<td>Function</td>
<td>Easing function used when changing slide from autoplay or button press.</td>
</tr>
<tr>
<td><code>swipe-easing</code></td>
<td>Function</td>
<td>Easing function used when changing slide with a swipe.</td>
</tr>
<tr>
<td><code>thumbnails</code></td>
<td>Array</td>
<td>(v0.15.11+) Array of thumbnails pointing to “statics” folder. Check examples.</td>
</tr>
<tr>
<td><code>thumbnails-horizontal</code></td>
<td>Boolean</td>
<td>(v0.15.11+) Thumbnails get displayed horizontally.</td>
</tr>
<tr>
<td><code>thumbnails-icon</code></td>
<td>String</td>
<td>Icon to use for thumbnails.</td>
</tr>
<tr>
<td><code>height</code></td>
<td>String</td>
<td>(v0.17+) CSS unit optionally defining the height of Carousel.</td>
</tr>
<tr>
<td><code>animation</code></td>
<td>Boolean/Number</td>
<td>If Boolean, enable/disable animation; if Number, tells the animation duration.</td>
</tr>
</tbody>
</table>
<h3 id="QCarousel-Vue-Methods"><a href="#QCarousel-Vue-Methods" class="headerlink" title="QCarousel Vue Methods"></a>QCarousel Vue Methods</h3><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>next()</code></td>
<td>Goes to next slide.</td>
</tr>
<tr>
<td><code>previous()</code></td>
<td>Goes to previous slide.</td>
</tr>
<tr>
<td><code>goToSlide(slideNumber)</code></td>
<td>Go to the desired slide. <code>slideNumber</code> is 0-based.</td>
</tr>
</tbody>
</table>
<h3 id="QCarousel-Vue-Events"><a href="#QCarousel-Vue-Events" class="headerlink" title="QCarousel Vue Events"></a>QCarousel Vue Events</h3><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@input(index)</code></td>
<td>Emits the index of the current slide.</td>
</tr>
<tr>
<td><code>@slide-trigger(oldIndex, newIndex, direction)</code></td>
<td>Emitted before animating to the new slide.</td>
</tr>
<tr>
<td><code>@slide(index, direction)</code></td>
<td>Emits the index of the current slide and the direction of the slide after the transition animation finishes. Emits even if navigating to the same slide.</td>
</tr>
<tr>
<td><code>@slide-direction(&#39;next&#39;/&#39;previous&#39;)</code></td>
<td>Emitted when navigating to a slide, describing direction (next / previous).</td>
</tr>
<tr>
<td><code>@fullscreen(true/false)</code></td>
<td>(v0.17.7+) Emitted when Fullscreen state gets toggled.</td>
</tr>
</tbody>
</table>
<h2 id="QCarouselSlide-Child"><a href="#QCarouselSlide-Child" class="headerlink" title="QCarouselSlide (Child)"></a>QCarouselSlide (Child)</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>img-src</code></td>
<td>String</td>
<td>An image from statics folder. Example: ‘statics/mountaings.png’.</td>
</tr>
</tbody>
</table>
<h2 id="QCarouselControl-Child"><a href="#QCarouselControl-Child" class="headerlink" title="QCarouselControl (Child)"></a>QCarouselControl (Child)</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>position</code></td>
<td>String</td>
<td>Position of the control: ‘top’, ‘top-right’, ‘top-left’, ‘bottom-right’, etc</td>
</tr>
<tr>
<td><code>offset</code></td>
<td>Array of 2 Numbers</td>
<td>Offset on horizontal and vertical (in pixels). Example (default value): <code>[18, 18]</code>.</td>
</tr>
</tbody>
</table>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><h3 id="Carousel-with-a-base-color-Arrows-Quick-Navigation-and-slides-with-images"><a href="#Carousel-with-a-base-color-Arrows-Quick-Navigation-and-slides-with-images" class="headerlink" title="Carousel with a base color, Arrows, Quick Navigation, and slides with images"></a>Carousel with a base color, Arrows, Quick Navigation, and slides with images</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-carousel</span></span></span><br><span class="line"><span class="tag">    <span class="attr">color</span>=<span class="string">"white"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">arrows</span></span></span><br><span class="line"><span class="tag">    <span class="attr">height</span>=<span class="string">"400px"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-carousel-slide</span> <span class="attr">img-src</span>=<span class="string">"statics/mountains.jpg"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"absolute-bottom custom-caption"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-display-1"</span>&gt;</span>First stop<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-headline"</span>&gt;</span>Mountains<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-carousel-slide</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-carousel-slide</span> <span class="attr">img-src</span>=<span class="string">"statics/parallax1.jpg"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"absolute-bottom custom-caption"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-display-1"</span>&gt;</span>Second stop<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-headline"</span>&gt;</span>Famous City<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-carousel-slide</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-carousel-slide</span> <span class="attr">img-src</span>=<span class="string">"statics/parallax2.jpg"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"absolute-bottom custom-caption"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-display-1"</span>&gt;</span>Third stop<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-headline"</span>&gt;</span>Famous Bridge<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-carousel-slide</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-carousel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">.custom-caption &#123;</span></span><br><span class="line"><span class="undefined">  text-align: center;</span></span><br><span class="line"><span class="undefined">  padding: 12px;</span></span><br><span class="line"><span class="undefined">  color: $grey-4;</span></span><br><span class="line"><span class="undefined">  background: rgba(0, 0, 0, 0.5);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Carousel-with-image-slides-and-thumbnails"><a href="#Carousel-with-image-slides-and-thumbnails" class="headerlink" title="Carousel with image slides and thumbnails"></a>Carousel with image slides and thumbnails</h3><blockquote>
<p>Requires Quasar v0.15.11+</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-carousel</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"white"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">arrows</span></span></span><br><span class="line"><span class="tag">  <span class="attr">quick-nav</span></span></span><br><span class="line"><span class="tag">  <span class="attr">height</span>=<span class="string">"300px"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:thumbnails</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">    'statics/mountains.jpg',</span></span></span><br><span class="line"><span class="tag"><span class="string">    'statics/parallax1.jpg',</span></span></span><br><span class="line"><span class="tag"><span class="string">    'statics/parallax2.jpg'</span></span></span><br><span class="line"><span class="tag"><span class="string">  ]"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-carousel-slide</span> <span class="attr">img-src</span>=<span class="string">"statics/mountains.jpg"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-carousel-slide</span> <span class="attr">img-src</span>=<span class="string">"statics/parallax1.jpg"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-carousel-slide</span> <span class="attr">img-src</span>=<span class="string">"statics/parallax2.jpg"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-carousel</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Horizontal thumbnails:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-carousel</span> <span class="attr">:thumbnails</span>=<span class="string">"...."</span> <span class="attr">thumbnails-horizontal</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-carousel</span>&gt;</span></span><br><span class="line"></span><br><span class="line">### Infinite scroll, auto-play and custom Quick Navigation icon. Second slide has a Youtube video.</span><br><span class="line">Use `infinite` Vue prop.</span><br><span class="line"></span><br><span class="line">``` html</span><br><span class="line"><span class="tag">&lt;<span class="name">q-carousel</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"white"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">arrows</span></span></span><br><span class="line"><span class="tag">  <span class="attr">quick-nav</span></span></span><br><span class="line"><span class="tag">  <span class="attr">quick-nav-icon</span>=<span class="string">"favorite"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">infinite</span></span></span><br><span class="line"><span class="tag">  <span class="attr">autoplay</span></span></span><br><span class="line"><span class="tag">  <span class="attr">height</span>=<span class="string">"300px"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-carousel-slide</span> <span class="attr">img-src</span>=<span class="string">"statics/mountains.jpg"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-carousel-slide</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-video</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"absolute-full"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">"https://www.youtube.com/embed/k3_tw44QsZQ?rel=0"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-carousel-slide</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-carousel-slide</span> <span class="attr">img-src</span>=<span class="string">"statics/parallax1.jpg"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-carousel-slide</span> <span class="attr">img-src</span>=<span class="string">"statics/parallax2.jpg"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-carousel</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Custom-Quick-Navigation-and-different-type-of-slides-content"><a href="#Custom-Quick-Navigation-and-different-type-of-slides-content" class="headerlink" title="Custom Quick Navigation and different type of slides content"></a>Custom Quick Navigation and different type of slides content</h3><p>Third slide has a Youtube video.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-carousel</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"white"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">quick-nav</span></span></span><br><span class="line"><span class="tag">  <span class="attr">height</span>=<span class="string">"300px"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-carousel-slide</span> <span class="attr">class</span>=<span class="string">"text-white bg-primary row flex-center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-display-2"</span>&gt;</span>First Slide<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-carousel-slide</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-carousel-slide</span> <span class="attr">class</span>=<span class="string">"text-white bg-secondary row flex-center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-display-2"</span>&gt;</span>Second Slide<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-carousel-slide</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-carousel-slide</span> <span class="attr">class</span>=<span class="string">"text-white bg-primary"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"n in 7"</span> <span class="attr">:key</span>=<span class="string">"`custom-$&#123;n&#125;`"</span> <span class="attr">class</span>=<span class="string">"q-ma-sm"</span>&gt;</span></span><br><span class="line">      &#123;&#123; lorem &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-carousel-slide</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-carousel-slide</span> <span class="attr">img-src</span>=<span class="string">"statics/mountains.jpg"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-carousel-slide</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-video</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"absolute-full"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">"https://www.youtube.com/embed/k3_tw44QsZQ?rel=0"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-carousel-slide</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-carousel-slide</span> <span class="attr">img-src</span>=<span class="string">"statics/parallax1.jpg"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-carousel-slide</span> <span class="attr">img-src</span>=<span class="string">"statics/parallax2.jpg"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-carousel-control</span> <span class="attr">slot</span>=<span class="string">"control-nav"</span> <span class="attr">slot-scope</span>=<span class="string">"carousel"</span> <span class="attr">:offset</span>=<span class="string">"[18, 52]"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">"carousel.previous"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:disable</span>=<span class="string">"!carousel.canGoToPrevious"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">color</span>=<span class="string">"amber"</span> <span class="attr">text-color</span>=<span class="string">"black"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">icon</span>=<span class="string">"keyboard_arrow_left"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">round</span> <span class="attr">dense</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"q-mr-small"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">"carousel.next"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:disable</span>=<span class="string">"!carousel.canGoToNext"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">color</span>=<span class="string">"amber"</span> <span class="attr">text-color</span>=<span class="string">"black"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">icon</span>=<span class="string">"keyboard_arrow_right"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">round</span> <span class="attr">dense</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-carousel-control</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">    <span class="attr">slot</span>=<span class="string">"quick-nav"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">slot-scope</span>=<span class="string">"props"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">color</span>=<span class="string">"white"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">flat</span></span></span><br><span class="line"><span class="tag">    <span class="attr">dense</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:label</span>=<span class="string">"`$&#123;props.slide + 1&#125;`"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">"props.goToSlide()"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:class</span>=<span class="string">"&#123;inactive: !props.current&#125;"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-carousel</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Using-v-model-amp-some-custom-controls-autoplay-button-progressbar-fullscreen-toggle"><a href="#Using-v-model-amp-some-custom-controls-autoplay-button-progressbar-fullscreen-toggle" class="headerlink" title="Using v-model &amp; some custom controls: autoplay button, progressbar, fullscreen toggle"></a>Using v-model &amp; some custom controls: autoplay button, progressbar, fullscreen toggle</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Controlling from outside of Carousel:</span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rounded</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">click</span>=<span class="string">"slide = 1"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">icon</span>=<span class="string">"arrow_downward"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"Navigate to second slide"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"q-ml-sm"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-carousel</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"slide"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"amber"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">quick-nav</span></span></span><br><span class="line"><span class="tag">  <span class="attr">infinite</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:autoplay</span>=<span class="string">"autoplay"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">height</span>=<span class="string">"400px"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-carousel-slide</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">"n in 7"</span> <span class="attr">:key</span>=<span class="string">"`car-$&#123;n&#125;`"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"flex flex-center"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:class</span>=<span class="string">"`bg-$&#123;colors[n % 5]&#125;`"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-display-3"</span>&gt;</span>Slide &#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Slides can contain any content.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-carousel-slide</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-carousel-control</span></span></span><br><span class="line"><span class="tag">    <span class="attr">slot</span>=<span class="string">"control"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">position</span>=<span class="string">"top-right"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:offset</span>=<span class="string">"[18, 18]"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"text-white"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"background: rgba(0, 0, 0, .3); padding: 4px; border-radius: 4px"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">dark</span> <span class="attr">color</span>=<span class="string">"amber"</span> <span class="attr">v-model</span>=<span class="string">"autoplay"</span> <span class="attr">label</span>=<span class="string">"Auto Play"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-carousel-control</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-carousel-control</span></span></span><br><span class="line"><span class="tag">    <span class="attr">slot</span>=<span class="string">"control-button"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">slot-scope</span>=<span class="string">"carousel"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">position</span>=<span class="string">"bottom-right"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:offset</span>=<span class="string">"[18, 22]"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">      <span class="attr">round</span> <span class="attr">dense</span> <span class="attr">push</span></span></span><br><span class="line"><span class="tag">      <span class="attr">color</span>=<span class="string">"amber"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:icon</span>=<span class="string">"carousel.inFullscreen ? 'fullscreen_exit' : 'fullscreen'"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">"carousel.toggleFullscreen()"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-carousel-control</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-carousel-control</span> <span class="attr">slot</span>=<span class="string">"control-progress"</span> <span class="attr">slot-scope</span>=<span class="string">"carousel"</span> <span class="attr">position</span>=<span class="string">"bottom"</span> <span class="attr">:offset</span>=<span class="string">"[42, 100]"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">:percentage</span>=<span class="string">"carousel.percentage"</span> <span class="attr">stripe</span> <span class="attr">color</span>=<span class="string">"amber"</span> <span class="attr">:animate</span>=<span class="string">"autoplay"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-carousel-control</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-carousel</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Custom-easing-animation"><a href="#Custom-easing-animation" class="headerlink" title="Custom easing animation."></a>Custom easing animation.</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-carousel</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"text-white"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:easing</span>=<span class="string">"overshoot"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">infinite</span></span></span><br><span class="line"><span class="tag">    <span class="attr">autoplay</span></span></span><br><span class="line"><span class="tag">    <span class="attr">arrows</span></span></span><br><span class="line"><span class="tag">    <span class="attr">color</span>=<span class="string">"white"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">height</span>=<span class="string">"250px"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-carousel-slide</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">"n in 7"</span> <span class="attr">:key</span>=<span class="string">"`anim-$&#123;n&#125;`"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"flex flex-center"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:class</span>=<span class="string">"`bg-$&#123;colors[n % 5]&#125;`"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-display-3"</span>&gt;</span>Slide &#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-carousel-slide</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-carousel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; easing &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// easing is a collection;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// we're picking "overshoot" from it</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">      overshoot: easing.overshoot</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Launching-on-Fullscreen"><a href="#Launching-on-Fullscreen" class="headerlink" title="Launching on Fullscreen"></a>Launching on Fullscreen</h3><p>Useful for creating Wizards.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">class</span>=<span class="string">"glossy"</span> @<span class="attr">click</span>=<span class="string">"modal = true"</span>&gt;</span></span><br><span class="line">      Launch</span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-modal</span> <span class="attr">v-model</span>=<span class="string">"modal"</span> <span class="attr">maximized</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-carousel</span></span></span><br><span class="line"><span class="tag">        <span class="attr">color</span>=<span class="string">"white"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">arrows</span></span></span><br><span class="line"><span class="tag">        <span class="attr">quick-nav</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"text-white full-height"</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-carousel-slide</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-for</span>=<span class="string">"n in 7"</span> <span class="attr">:key</span>=<span class="string">"`full-$&#123;n&#125;`"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"flex flex-center"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:class</span>=<span class="string">"`bg-$&#123;colors[n % 5]&#125;`"</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-display-3"</span>&gt;</span>Step &#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">q-carousel-slide</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-carousel-control</span></span></span><br><span class="line"><span class="tag">          <span class="attr">slot</span>=<span class="string">"control-full"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">slot-scope</span>=<span class="string">"carousel"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">position</span>=<span class="string">"bottom-right"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:offset</span>=<span class="string">"[18, 22]"</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">            <span class="attr">rounded</span> <span class="attr">push</span></span></span><br><span class="line"><span class="tag">            <span class="attr">color</span>=<span class="string">"amber"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">icon</span>=<span class="string">"close"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">label</span>=<span class="string">"Close me"</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">click</span>=<span class="string">"modal = false"</span></span></span><br><span class="line"><span class="tag">          /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">q-carousel-control</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-carousel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-modal</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123; <span class="attr">modal</span>: <span class="literal">false</span> &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Collapsible (+ Accordion)]]></title>
      <url>https://quasar-framework.org/components/collapsible.html</url>
      <content type="html"><![CDATA[<p>Quasar Collapsibles allow the hiding of content that is not immediately relevant to the user. Think of them as accordion elements that expand when clicked on.</p>
<input type="hidden" data-fullpage-demo="grouping/collapsible">

<p>They are basically QItem components wrapped with additional functionality. So they can be included in QLists and inherit QItem component properties.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QCollapsible'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">icon</span>=<span class="string">"explore"</span> <span class="attr">label</span>=<span class="string">"First"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      Content</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">icon</span>=<span class="string">"perm_identity"</span> <span class="attr">label</span>=<span class="string">"Second"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      Content</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">icon</span>=<span class="string">"shopping_cart"</span> <span class="attr">label</span>=<span class="string">"Third"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      Content</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Accordion"><a href="#Accordion" class="headerlink" title="Accordion"></a>Accordion</h3><p>You can group multiple Collapsibles to act as an Accordion, which is to open only one Collapsible at a time while closing the others automatically. For this, use <code>group</code> Vue property and specify a unique name within the Vue parent container of the Collapsibles.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">group</span>=<span class="string">"somegroup"</span> <span class="attr">icon</span>=<span class="string">"explore"</span> <span class="attr">label</span>=<span class="string">"First"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      Content</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">group</span>=<span class="string">"somegroup"</span> <span class="attr">icon</span>=<span class="string">"perm_identity"</span> <span class="attr">label</span>=<span class="string">"Second"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      Content</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">group</span>=<span class="string">"somegroup"</span> <span class="attr">icon</span>=<span class="string">"shopping_cart"</span> <span class="attr">label</span>=<span class="string">"Third"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      Content</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Since QCollapsible is a wrapper over QItem components, it inherits some of their properties as you can see below.</p>
<p>Supports <code>v-model</code> to control the state (open/close).</p>
<table>
<thead>
<tr>
<th>Own Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>opened</code></td>
<td>Boolean</td>
<td>Control if Collapsible is opened or not when first rendered.</td>
</tr>
<tr>
<td><code>group</code></td>
<td>String</td>
<td>Unique name which allows to group multiple Collapsible so they work as an Accordion.</td>
</tr>
<tr>
<td><code>popup</code></td>
<td>Boolean</td>
<td>“Popup” mode instead of default behavior.</td>
</tr>
<tr>
<td><code>indent</code></td>
<td>Boolean</td>
<td>Indent Collapsible content. Useful when building a menu with it.</td>
</tr>
<tr>
<td><code>icon-toggle</code></td>
<td>Boolean</td>
<td>Expand/Contract only by clicking/tapping on the arrow on the right.</td>
</tr>
<tr>
<td><code>collapse-icon</code></td>
<td>String</td>
<td>Icon used instead of default arrow on the right side.</td>
</tr>
<tr>
<td><code>header-style</code></td>
<td>Array/String/Object</td>
<td>Vue style binding for header.</td>
</tr>
<tr>
<td><code>header-class</code></td>
<td>Array/String/Object</td>
<td>Vue class binding for header.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>Disable current Collapsible.</td>
</tr>
<tr>
<td><code>duration</code></td>
<td>Number</td>
<td>(v0.17.13+) Toggle animation duration in milliseconds. Default: 300</td>
</tr>
<tr>
<td><code>tag</code></td>
<td>Boolean</td>
<td>Tag to use. Default is “div”.</td>
</tr>
</tbody>
</table>
<p>QItem &amp; QItem related components inherited properties:</p>
<table>
<thead>
<tr>
<th>Inherited Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Set to <code>true</code> when background is dark.</td>
</tr>
<tr>
<td><code>icon</code>, <code>right-icon</code></td>
<td>String</td>
<td>Icon to use. Either use an icon, image, avatar or letter.</td>
</tr>
<tr>
<td><code>image</code>, <code>right-image</code></td>
<td>String</td>
<td>URL to image to use (point to statics). Either use an icon, image, avatar or letter.</td>
</tr>
<tr>
<td><code>avatar</code>, <code>right-avatar</code></td>
<td>String</td>
<td>URL to avatar to use (point to statics). Either use an icon, image, avatar or letter.</td>
</tr>
<tr>
<td><code>letter</code>, <code>right-letter</code></td>
<td>String</td>
<td>One character String to define a letter. Either use an icon, image, avatar or letter.</td>
</tr>
<tr>
<td><code>label</code></td>
<td>String</td>
<td>Label to use as title.</td>
</tr>
<tr>
<td><code>sublabel</code></td>
<td>String</td>
<td>Label to use as subtitle.</td>
</tr>
<tr>
<td><code>label-lines</code></td>
<td>String / Number</td>
<td>Number of lines the label can span to. Ellipsis are used when overflowing.</td>
</tr>
<tr>
<td><code>sublabel-lines</code></td>
<td>String / Number</td>
<td>Number of lines the sublabel can span to. Ellipsis are used when overflowing.</td>
</tr>
<tr>
<td><code>dense</code></td>
<td>Boolean</td>
<td>Use a dense QItem.</td>
</tr>
<tr>
<td><code>sparse</code></td>
<td>Boolean</td>
<td>Use a sparse QItem.</td>
</tr>
<tr>
<td><code>multiline</code></td>
<td>Boolean</td>
<td>Use a multiline QItem. Useful in cases where you use label and sublabel that spans multiple lines, but even then it’s optional.</td>
</tr>
<tr>
<td><code>separator</code></td>
<td>Boolean</td>
<td>Use a separator from other QItems or QCollapsibles, just like on QItem.</td>
</tr>
<tr>
<td><code>inset-separator</code></td>
<td>Boolean</td>
<td>Inset separator, same behavior as <code>separator</code>.</td>
</tr>
</tbody>
</table>
<h3 id="Using-QCollapsible-as-a-Router-Link"><a href="#Using-QCollapsible-as-a-Router-Link" class="headerlink" title="Using QCollapsible as a Router Link"></a>Using QCollapsible as a Router Link</h3><p><em>v0.17.9+</em></p>
<p>If you want your QCollapsible to act the same as Vue’s <code>&lt;router-link&gt;</code>, then you can use these additional properties (which work exactly the same as <code>&lt;router-link&gt;</code>):</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>to</code></td>
<td>String / Object</td>
<td>Route to navigate to</td>
</tr>
<tr>
<td><code>exact</code></td>
<td>Boolean</td>
<td>Match the exact route specified (and not also its children) when adding <code>router-link-active</code> CSS class.</td>
</tr>
<tr>
<td><code>append</code></td>
<td>Boolean</td>
<td>Append route definition to current route when navigating.</td>
</tr>
<tr>
<td><code>replace</code></td>
<td>Boolean</td>
<td>Replaces current route with the new one instead of adding it to the window history queue.</td>
</tr>
</tbody>
</table>
<p>For more details on these properties, please refer to the <a href="http://router.vuejs.org/en/api/router-link.html" target="_blank" rel="noopener">Vue Router documentation</a>.</p>
<blockquote>
<p><strong>NOTE</strong><br>When you use a QCollapsible as a Router Link then the user will be able to toggle it only by clicking on the right-side icon. The rest of QCollapsible space is used to trigger the navigation.</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">to</span>=<span class="string">"/some/page"</span> <span class="attr">icon</span>=<span class="string">"explore"</span> <span class="attr">label</span>=<span class="string">"First"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    Content</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Methods</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>toggle()</code></td>
<td>Toggle open/close state.</td>
</tr>
<tr>
<td><code>show()</code></td>
<td>Open it.</td>
</tr>
<tr>
<td><code>hide()</code></td>
<td>Close it.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@show</code></td>
<td>Triggered after opening Collapsible.</td>
</tr>
<tr>
<td><code>@hide</code></td>
<td>Triggered after closing Collapsible.</td>
</tr>
</tbody>
</table>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><h3 id="Using-a-v-model"><a href="#Using-a-v-model" class="headerlink" title="Using a v-model"></a>Using a v-model</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-collapsible</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">"open"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">icon</span>=<span class="string">"perm_identity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">"With a model and events"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>...content...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123; <span class="attr">open</span>: <span class="literal">true</span> &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    toggle () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.open = !<span class="keyword">this</span>.open</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Custom-Header"><a href="#Custom-Header" class="headerlink" title="Custom Header"></a>Custom Header</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-collapsible</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">small</span> <span class="attr">class</span>=<span class="string">"q-mr-sm"</span>&gt;</span></span><br><span class="line">      Custom header</span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"using slot"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"star"</span> <span class="attr">color</span>=<span class="string">"red"</span> <span class="attr">size</span>=<span class="string">"24px"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Collapsible content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Popup-Mode"><a href="#Popup-Mode" class="headerlink" title="Popup Mode"></a>Popup Mode</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">popup</span> <span class="attr">icon</span>=<span class="string">"mail"</span> <span class="attr">label</span>=<span class="string">"Inbox"</span> <span class="attr">sublabel</span>=<span class="string">"5 unread emails"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>...content...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">popup</span> <span class="attr">icon</span>=<span class="string">"send"</span> <span class="attr">label</span>=<span class="string">"Outbox"</span> <span class="attr">sublabel</span>=<span class="string">"Empty"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>...content...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Creating-a-Menu"><a href="#Creating-a-Menu" class="headerlink" title="Creating a Menu"></a>Creating a Menu</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-list</span> <span class="attr">separator</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">indent</span> <span class="attr">icon</span>=<span class="string">"mail"</span> <span class="attr">label</span>=<span class="string">"Inbox"</span> <span class="attr">sublabel</span>=<span class="string">"5 unread emails"</span> <span class="attr">opened</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">indent</span> <span class="attr">icon</span>=<span class="string">"receipt"</span> <span class="attr">label</span>=<span class="string">"Receipts"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">label</span>=<span class="string">"Today"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>...content...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">label</span>=<span class="string">"Yesterday"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>...content...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">indent</span> <span class="attr">icon</span>=<span class="string">"schedule"</span> <span class="attr">label</span>=<span class="string">"Postponed"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>...content...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">indent</span> <span class="attr">icon</span>=<span class="string">"send"</span> <span class="attr">label</span>=<span class="string">"Outbox"</span> <span class="attr">sublabel</span>=<span class="string">"Empty"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">label</span>=<span class="string">"Today"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>...content...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">label</span>=<span class="string">"Yesterday"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>...content...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">indent</span> <span class="attr">icon</span>=<span class="string">"drafts"</span> <span class="attr">label</span>=<span class="string">"Draft"</span> <span class="attr">sublabel</span>=<span class="string">"Draft a new email"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>...content...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Preselecting-Items"><a href="#Preselecting-Items" class="headerlink" title="Preselecting Items"></a>Preselecting Items</h3><p>Collapsible items can be opened by default:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">opened</span> <span class="attr">icon</span>=<span class="string">"explore"</span> <span class="attr">label</span>=<span class="string">"First"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    Content</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- or --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">:opened</span>=<span class="string">"boolean_variable"</span> <span class="attr">icon</span>=<span class="string">"explore"</span> <span class="attr">label</span>=<span class="string">"First"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    Content</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Indenting-Content"><a href="#Indenting-Content" class="headerlink" title="Indenting Content"></a>Indenting Content</h3><p>When you are building a complex menu (with sub-menus), like for example on a Left or Right side of QLayout, it’s useful to also have some kind of left-side indentation on the Collapsible content:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">indent</span> <span class="attr">icon</span>=<span class="string">"explore"</span> <span class="attr">label</span>=<span class="string">"First"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">link</span> <span class="attr">...</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">link</span> <span class="attr">...</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">link</span> <span class="attr">...</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Making-Use-of-Events"><a href="#Making-Use-of-Events" class="headerlink" title="Making Use of Events"></a>Making Use of Events</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-collapsible</span></span></span><br><span class="line"><span class="tag">    <span class="attr">indent</span></span></span><br><span class="line"><span class="tag">    <span class="attr">icon</span>=<span class="string">"explore"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">"Counter"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">show</span>=<span class="string">"startCounting"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">hide</span>=<span class="string">"stopCounting"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">color</span>=<span class="string">"secondary"</span>&gt;</span></span><br><span class="line">        Counting: &#123;&#123; counter &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-mt-md"</span>&gt;</span></span><br><span class="line">      Will only count when opened, using the show/hide events to control count timer.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">      counter: 0</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    startCounting () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.hndl = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.counter++</span></span><br><span class="line"><span class="undefined">      &#125;, 1000)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    stopCounting () &#123;</span></span><br><span class="line"><span class="javascript">      clearInterval(<span class="keyword">this</span>.hndl)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Ubiquity"><a href="#Ubiquity" class="headerlink" title="Ubiquity"></a>Ubiquity</h3><p>Be creative. In the example below we’re using a Card as Collapsible content.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">icon</span>=<span class="string">"explore"</span> <span class="attr">label</span>=<span class="string">"First Card"</span> <span class="attr">sublabel</span>=<span class="string">"Contains a Card"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-card</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-card-title</span>&gt;</span></span><br><span class="line">      Card Title</span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-card-title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-card-main</span>&gt;</span></span><br><span class="line">      Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-card-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Chip]]></title>
      <url>https://quasar-framework.org/components/chip.html</url>
      <content type="html"><![CDATA[<p>The Chip component is basically a simple UI block entity, representing for example more advanced underlying data, such as a contact, in a compact way.</p>
<p>Chips can contain entities such as an avatar, text or an icon, optionally having a pointer too. They can also be closed or removed if configured so.</p>
<input type="hidden" data-fullpage-demo="other-components/chip">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QChip'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Some basic examples:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- icon on left side --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">icon</span>=<span class="string">"alarm"</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span></span><br><span class="line">  q-chip</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- icon on right side --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">icon-right</span>=<span class="string">"alarm"</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span></span><br><span class="line">  q-chip</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- avatar on left side --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">avatar</span>=<span class="string">"/statics/some.png"</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span></span><br><span class="line">  q-chip</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- floating chip applied to a button (v0.15.7+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">round</span> <span class="attr">dense</span> <span class="attr">color</span>=<span class="string">"dark"</span> <span class="attr">icon</span>=<span class="string">"announcement"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">floating</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>There are a number of properties available:</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>floating</code></td>
<td>Boolean</td>
<td>Allows the chip to float over other elements on top-right side of them.</td>
</tr>
<tr>
<td><code>tag</code></td>
<td>Boolean</td>
<td>Makes it a “tag” type.</td>
</tr>
<tr>
<td><code>detail</code></td>
<td>Boolean</td>
<td>Highlights the area on the right (icon or avatar), should there be one.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon for left side.</td>
</tr>
<tr>
<td><code>icon-right</code></td>
<td>String</td>
<td>Icon for right side.</td>
</tr>
<tr>
<td><code>avatar</code></td>
<td>String</td>
<td>URL pointing to statics folder for an image which gets placed on left side.</td>
</tr>
<tr>
<td><code>small</code></td>
<td>Boolean</td>
<td>Reduces the size of the chip. Makes it compact. Use this or “dense”, but not both.</td>
</tr>
<tr>
<td><code>dense</code></td>
<td>Boolean</td>
<td>(Quasar v0.15.7+) Makes chip small, with minimum padding. Use this or “small”, but not both.</td>
</tr>
<tr>
<td><code>square</code></td>
<td>Boolean</td>
<td>Gives the chip right-angled corners. Rounded corners are default.</td>
</tr>
<tr>
<td><code>pointing</code></td>
<td>String</td>
<td>Adds a carat to the chip, pointing either <code>up</code>, <code>right</code>, <code>down</code> or <code>left</code>.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>The color the chip should be.</td>
</tr>
<tr>
<td><code>text-color</code></td>
<td>String</td>
<td>Override the text color of the chip.</td>
</tr>
<tr>
<td><code>closable</code></td>
<td>Boolean</td>
<td>Adds a close button to the right of the chip, which when clicked, will emit <code>@hide</code> event.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@hide</code></td>
<td>The close button has been clicked/tapped.</td>
</tr>
<tr>
<td><code>@focus</code></td>
<td>The chip has been focused.</td>
</tr>
<tr>
<td><code>@click</code></td>
<td>Chip has been clicked/tapped outside of close button.</td>
</tr>
</tbody>
</table>
<p>When using <code>closable</code> property a close button will be displayed on the right side. When clicking/tapping on the button the <code>@hide</code> event will be triggered. This does not removes the chip by itself. You will have to handle it yourself.</p>
<p>The two events fire independently but not both simultaneously, depending on where the user has clicked/tapped (on close button or anywhere else within the Chip).</p>
<h2 id="More-Examples"><a href="#More-Examples" class="headerlink" title="More Examples"></a>More Examples</h2><p>You can add the ability to hide the chip too.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">closable</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span></span><br><span class="line">  Joe</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>You can also use a chip to label a button.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"light"</span> <span class="attr">label</span>=<span class="string">"Inbox"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">floating</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span>22<span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Or to label anything you want, as long as the container has <code>position: relative</code> (hint: use <code>relative-position</code> Quasar CSS helper class):<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"relative-position"</span>&gt;</span></span><br><span class="line">  ....content...</span><br><span class="line">  <span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">floating</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span>22<span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>You can also use chips as pointing labels.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">pointing</span>=<span class="string">"up"</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span></span><br><span class="line">  Pointing Up</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>You can create advanced label chips, with an avatar/image and a closeable button to delete the chip.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">closable</span> <span class="attr">avatar</span>=<span class="string">"statics/some.png"</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span></span><br><span class="line">  Joe</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>You can also create chips that look like tags.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">tag</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">icon-right</span>=<span class="string">"mail"</span>&gt;</span></span><br><span class="line">  New</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>This chip highlights the icon by using the <code>detail</code> property.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">tag</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">detail</span> <span class="attr">icon</span>=<span class="string">"mail"</span>&gt;</span></span><br><span class="line">  10 emails</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>One more example where we add a shadow to a chip:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">class</span>=<span class="string">"shadow-1"</span> <span class="attr">square</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span>10k<span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Checkbox]]></title>
      <url>https://quasar-framework.org/components/checkbox.html</url>
      <content type="html"><![CDATA[<p>The Quasar Checkbox component is a basic element to be used for selection or toggling by the user. It has a number of features, as described below.</p>
<input type="hidden" data-fullpage-demo="forms/checkbox">

<p>Please also refer to the <a href="/components/option-group.html">Option Group documentation</a> on other possibilities for creating groups of Toggles.</p>
<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QCheckbox'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- No label: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- With a label --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">label</span>=<span class="string">"Checkbox Label"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Disabled: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">disable</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which should be binded to a Boolean or Array in your scope.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>val</code></td>
<td>Object</td>
<td>Used to modify the v-model of the Checkbox when using an Array as <code>v-model</code>.</td>
</tr>
<tr>
<td><code>true-value</code></td>
<td>Any</td>
<td>Gets into “true” state when model has this value.</td>
</tr>
<tr>
<td><code>false-value</code></td>
<td>Any</td>
<td>Gets into “false” state when model has this value.</td>
</tr>
<tr>
<td><code>indeterminate-value</code></td>
<td>Any</td>
<td>Gets into “indeterminate” state when model has this value. Default is <code>null</code>.</td>
</tr>
<tr>
<td><code>toggle-indeterminate</code></td>
<td>Boolean</td>
<td>Toggle between 3 states, including “indeterminate”.</td>
</tr>
<tr>
<td><code>label</code></td>
<td>String</td>
<td>The text label for the Checkbox.</td>
</tr>
<tr>
<td><code>left-label</code></td>
<td>Boolean</td>
<td>Set to <code>true</code>, if the label should be placed to the left of the Checkbox.</td>
</tr>
<tr>
<td><code>checked-icon</code></td>
<td>String</td>
<td>Optional icon to use, when the Checkbox is checked.</td>
</tr>
<tr>
<td><code>unchecked-icon</code></td>
<td>String</td>
<td>Optional icon to use, when the Checkbox is not checked.</td>
</tr>
<tr>
<td><code>indeterminate-icon</code></td>
<td>String</td>
<td>Optional icon to use, when the Checkbox is in indeterminate state.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>Color from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>keep-color</code></td>
<td>Boolean</td>
<td>Keep color when not truthy too.</td>
</tr>
<tr>
<td><code>readonly</code></td>
<td>Boolean</td>
<td>Set to <code>true</code>, to make the checkbox read-only.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>Set to <code>true</code>, to disable the checkbox.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Set to <code>true</code> when background is dark.</td>
</tr>
<tr>
<td><code>no-focus</code></td>
<td>Boolean</td>
<td>(v0.17+) Disable accessibility for this component so that it can’t receive focus.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@input</code></td>
<td>Triggered when it changes model.</td>
</tr>
<tr>
<td><code>@blur</code></td>
<td>Triggered, when Checkbox loses focus.</td>
</tr>
<tr>
<td><code>@focus</code></td>
<td>Triggered, when Checkbox gains focus.</td>
</tr>
</tbody>
</table>
<h2 id="Array-as-Model"><a href="#Array-as-Model" class="headerlink" title="Array as Model"></a>Array as Model</h2><p>If you have a number of checkboxes for a selection, use an array as the model object and specify <code>val</code> property.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"selection"</span> <span class="attr">val</span>=<span class="string">"one"</span> <span class="attr">label</span>=<span class="string">"One"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"selection"</span> <span class="attr">val</span>=<span class="string">"two"</span> <span class="attr">label</span>=<span class="string">"Two"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"selection"</span> <span class="attr">val</span>=<span class="string">"three"</span> <span class="attr">label</span>=<span class="string">"Three"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      selection: [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>Ticking all Checkboxes will make <code>selection</code> scope variable to be <code>[&#39;one&#39;, &#39;two&#39;, &#39;three&#39;]</code>. Unticking all Checkboxes will result in <code>selection</code> being an empty array <code>[]</code>.</p>
<h2 id="More-Examples"><a href="#More-Examples" class="headerlink" title="More Examples"></a>More Examples</h2><p>There are a number of props, which are available to help quickly format a Checkbox. An interesting feature of Checkbox is the ripple effect that user gets when clicking/tapping on it to change its state.</p>
<h3 id="Custom-Model-Values"><a href="#Custom-Model-Values" class="headerlink" title="Custom Model Values"></a>Custom Model Values</h3><p>Instead of the default <code>true/false</code> values, you can use custom ones:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-checkbox</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"customModel"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"Do you agree with the terms &amp; conditions?"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">true-value</span>=<span class="string">"yes"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">false-value</span>=<span class="string">"no"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Specific-Icons"><a href="#Specific-Icons" class="headerlink" title="Specific Icons"></a>Specific Icons</h3><p>Sometimes, you might need a checkbox simply as a type of button, to maybe turn something on or off. You can do this with the <code>checked-icon</code> and <code>unchecked-icon</code> props.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- a happy and unhappy smiley, maybe for a one-touch satisfaction feedback --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-checkbox</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"checked"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">checked-icon</span>=<span class="string">"sentiment very satisfied"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">unchecked-icon</span>=<span class="string">"sentiment very dissatisfied"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- an eye and a crossed out eye to indicate visibility --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-checkbox</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"checked"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">checked-icon</span>=<span class="string">"visibility"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">unchecked-icon</span>=<span class="string">"visibility_off"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h3><p>Use the <code>color</code> prop to control the Checkbox color.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">color</span>=<span class="string">"teal"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">color</span>=<span class="string">"orange"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">color</span>=<span class="string">"dark"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Label-Position"><a href="#Label-Position" class="headerlink" title="Label Position"></a>Label Position</h3><p>Use the <code>left-label</code> prop, to move the label to the left of Checkbox.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-checkbox</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"checked"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"teal"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">left-label</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"Checkbox Label"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Usage-Inside-of-a-List"><a href="#Usage-Inside-of-a-List" class="headerlink" title="Usage Inside of a List"></a>Usage Inside of a List</h3><p>In the following example we use the Right side of QItems to insert Checkbox, but it works anywhere.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-list</span> <span class="attr">link</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    Rendering a &lt;label&gt; tag (notice tag="label")</span></span><br><span class="line"><span class="comment">    so the whole QItem will respond to clicks to</span></span><br><span class="line"><span class="comment">    change Checkbox state.</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Events and reminders<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Events and reminders<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Lorem ipsum<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span> <span class="attr">multiline</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Events and reminders<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Color Input]]></title>
      <url>https://quasar-framework.org/components/color-input.html</url>
      <content type="html"><![CDATA[<p>The Color component provides a method to input colors. There is also one more version available: <a href="/components/color-picker.html">Color Picker</a>.</p>
<input type="hidden" data-fullpage-demo="forms/color/color-input">

<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.<br><strong>You might also want to check</strong> <a href="/components/color-utils.html">Color Utils</a>.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QColor'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-color</span> <span class="attr">v-model</span>=<span class="string">"modelHex"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span></span><br><span class="line"><span class="javascript">    modelHex: <span class="string">'#C7044B'</span>,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// and the other types of models:</span></span></span><br><span class="line"><span class="javascript">    modelHexa: <span class="string">'#F0FF1CBF'</span>,</span></span><br><span class="line"><span class="undefined">    modelRgb: &#123; r: 112, g: 204, b: 55 &#125;,</span></span><br><span class="line"><span class="undefined">    modelRgba: &#123; r: 138, g: 36, b: 138, a: 64 &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which must be a String, Number or Date Object.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>readonly</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, component is displayed as read-only.</td>
</tr>
<tr>
<td><code>display-value</code></td>
<td>String</td>
<td>Text to display on input frame. Supersedes ‘placeholder’.</td>
</tr>
<tr>
<td><code>hide-underline</code></td>
<td>Boolean</td>
<td>Hides the bottom border.</td>
</tr>
<tr>
<td><code>popover</code></td>
<td>Boolean</td>
<td>Always display with a Popover, regardless of Platform.</td>
</tr>
<tr>
<td><code>modal</code></td>
<td>Boolean</td>
<td>Always display with a Modal, regardless of Platform.</td>
</tr>
<tr>
<td><code>format-model</code></td>
<td>String</td>
<td>Data type of model (useful especially when starting out with undefined or null). One of ‘auto’, ‘hex’, ‘rgb’, ‘hexa’, ‘rgba’.</td>
</tr>
<tr>
<td><code>placeholder</code></td>
<td>String</td>
<td>Placeholder text for input frame to use when model is not set (empty).</td>
</tr>
<tr>
<td><code>ok-label</code></td>
<td>String</td>
<td>Text for the button to accept the input (when using Modal).</td>
</tr>
<tr>
<td><code>cancel-label</code></td>
<td>String</td>
<td>Text for the button to cancel input with no change (when using Modal).</td>
</tr>
<tr>
<td><code>clearable</code></td>
<td>Boolean</td>
<td>If used, the component offers the user an actionable icon to reset the current value to <code>clear-value</code> (if it is set) or otherwise <code>default-value</code>. The icon appears only when the current value matches <code>clear-value</code>/<code>default-value</code>.</td>
</tr>
<tr>
<td><code>default-value</code></td>
<td>String/Object</td>
<td>Default color for picker when model is not yet set.</td>
</tr>
<tr>
<td><code>clear-value</code></td>
<td>String/Object</td>
<td>The value to which to reset the field model to when using <code>clearable</code>, unless <code>default-value</code> is specified.</td>
</tr>
</tbody>
</table>
<p>Common input frame properties:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>prefix</code></td>
<td>String</td>
<td>A text that should be shown before the value of model.</td>
</tr>
<tr>
<td><code>suffix</code></td>
<td>String</td>
<td>A text that should be shown after the value of model.</td>
</tr>
<tr>
<td><code>float-label</code></td>
<td>String</td>
<td>A text label that will “float” up above the input field, once the input field gets focus.</td>
</tr>
<tr>
<td><code>stack-label</code></td>
<td>String</td>
<td>A text label that will be shown above the input field and is static.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>inverted</code></td>
<td>Boolean</td>
<td>Inverted mode. Color is applied to background instead.</td>
</tr>
<tr>
<td><code>inverted-light</code></td>
<td>Boolean</td>
<td>Inverted mode with a light color. Color is applied to background instead.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Is component rendered on a dark background?</td>
</tr>
<tr>
<td><code>align</code></td>
<td>String</td>
<td>One of ‘left’, ‘center’ or ‘right’ which determines the text align.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, component is disabled and the user cannot change model.</td>
</tr>
<tr>
<td><code>warning</code></td>
<td>Boolean</td>
<td>If set to true, the input fields colors are changed to show there is a warning.</td>
</tr>
<tr>
<td><code>error</code></td>
<td>Boolean</td>
<td>If set to true, the input fields colors are changed to show there is an error.</td>
</tr>
<tr>
<td><code>before</code></td>
<td>Array of Objects</td>
<td>Icon buttons on left side of input frame. Read below more details.</td>
</tr>
<tr>
<td><code>after</code></td>
<td>Array of Objects</td>
<td>Icon buttons on right side of input frame. Read below more details.</td>
</tr>
<tr>
<td><code>no-parent-field</code></td>
<td>Boolean</td>
<td>Avoid trying to connect to a parent QField.</td>
</tr>
</tbody>
</table>
<h3 id="Lazy-Input"><a href="#Lazy-Input" class="headerlink" title="Lazy Input"></a>Lazy Input</h3><p>Vue will soon supply the <code>.lazy</code> modifier for v-model on components too, but until then, you can use the longer equivalent form:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-color</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">change</span>=<span class="string">"val =&gt; &#123; model = val &#125;"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Icon-buttons"><a href="#Icon-buttons" class="headerlink" title="Icon buttons"></a>Icon buttons</h3><p>This section refers to <code>before</code> and <code>after</code> properties which can add additional buttons as icons to the component. Here is the structure of the two properties:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// required icon</span></span><br><span class="line">  icon: <span class="built_in">String</span>,</span><br><span class="line">  <span class="comment">// required function to call when</span></span><br><span class="line">  <span class="comment">// icon is clicked/tapped</span></span><br><span class="line">  handler: <span class="built_in">Function</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Optional. Show icon button</span></span><br><span class="line">  <span class="comment">// if model has a value</span></span><br><span class="line">  content: <span class="built_in">Boolean</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Optional. Show icon button</span></span><br><span class="line">  <span class="comment">// if model is marked with error</span></span><br><span class="line">  error: <span class="built_in">Boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Examples:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Show an icon button (with 'warning' as icon)</span></span><br><span class="line"><span class="comment">  when there is an error on component (through "error" prop)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-color</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"color"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:error</span>=<span class="string">"error"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:after</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">      icon: 'warning',</span></span></span><br><span class="line"><span class="tag"><span class="string">      error: true,</span></span></span><br><span class="line"><span class="tag"><span class="string">      handler () &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        // do something...</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">  ]"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Show an icon button (with 'arrow_forward' as icon)</span></span><br><span class="line"><span class="comment">  when the model has a non empty value</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-color</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"color"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:after</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">      icon: 'arrow_forward',</span></span></span><br><span class="line"><span class="tag"><span class="string">      content: true,</span></span></span><br><span class="line"><span class="tag"><span class="string">      handler () &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        // do something...</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">  ]"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>show()</code></td>
<td>Show Popover (on desktop) and Dialog (on mobile) to select date and/or time. Returns a Promise.</td>
</tr>
<tr>
<td><code>hide()</code></td>
<td>Hide Popover (on desktop) and Dialog (on mobile) to select date and/or time and execute Function after it’s been hidden. Returns a Promise.</td>
</tr>
<tr>
<td><code>toggle()</code></td>
<td>Toggle the Popover or Modal.</td>
</tr>
<tr>
<td><code>clear()</code></td>
<td>Sets model to empty string (removes current value).</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@input(newVal)</code></td>
<td>Triggered on immediate model value change.</td>
</tr>
<tr>
<td><code>@change(newVal)</code></td>
<td>Triggered on lazy model value change.</td>
</tr>
<tr>
<td><code>@clear(clearVal)</code></td>
<td>Triggered when the model is cleared.</td>
</tr>
<tr>
<td><code>@blur</code></td>
<td>Triggered when the modal/ popup is closed.</td>
</tr>
<tr>
<td><code>@focus</code></td>
<td>Triggered when the modal/ popup is opened.</td>
</tr>
</tbody>
</table>
<h2 id="More-Examples"><a href="#More-Examples" class="headerlink" title="More Examples"></a>More Examples</h2><h3 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h3><p>Use the <code>color</code> and <code>inverted</code>/<code>inverted-light</code> props to control the color.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-color</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"amber-7"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">float-label</span>=<span class="string">"Float Label"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-color</span></span></span><br><span class="line"><span class="tag">  <span class="attr">inverted</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">float-label</span>=<span class="string">"Float Label"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Also, if QColor is displayed on a dark background, add the <code>dark</code> property.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-color</span> <span class="attr">dark</span> <span class="attr">color</span>=<span class="string">"secondary"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Chips Input]]></title>
      <url>https://quasar-framework.org/components/chips-input.html</url>
      <content type="html"><![CDATA[<p>The Quasar Chips Input allows user to enter a group of text items, which is also editable in the form of quick deletion of the Chips in the list.</p>
<input type="hidden" data-fullpage-demo="forms/chips-input">

<p>For more details on Chips used within Chips Input, please refer to its <a href="/components/chip.html">documentation</a>.</p>
<p>For autocomplete functionality, also refer to <a href="/components/autocomplete.html">QAutocomplete</a> documentation.</p>
<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QChipsInput'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-chips-input</span> <span class="attr">v-model</span>=<span class="string">"model"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Disabled --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-chips-input</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">disable</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- With floating label --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-chips-input</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">float-label</span>=<span class="string">"Floating Label"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- With custom placeholder --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-chips-input</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">placeholder</span>=<span class="string">"Type some names"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- On error state --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-chips-input</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">error</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>The model variable must be an Array.</p>
</blockquote>
<p>The user can remove a Chip by clicking/tapping on the <code>close</code> icon. Adding a Chip is done by clicking/tapping on the component, typing and then hitting the <code>send</code> icon or <code>&lt;ENTER&gt;</code> key. Pressing Backspace key either removes content of the textfield or if that is empty then the last Chip.</p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which should be binded to an Array of Strings in your scope.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>chips-color</code></td>
<td>String</td>
<td>Override default children chips text color.</td>
</tr>
<tr>
<td><code>chips-bg-color</code></td>
<td>String</td>
<td>Override default children chips background color.</td>
</tr>
<tr>
<td><code>add-icon</code></td>
<td>String</td>
<td>Override add icon (the one on the right side) to another one.</td>
</tr>
<tr>
<td><code>readonly</code></td>
<td>Boolean</td>
<td>If readonly user can not add or remove chips.</td>
</tr>
</tbody>
</table>
<p>Also note you can use the native DOM attributes of an input: “max-length”, “autocomplete” and so on.</p>
<p>Common input field properties:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>autofocus</code></td>
<td>Boolean</td>
<td>Focus input field after rendering component.</td>
</tr>
<tr>
<td><code>placeholder</code></td>
<td>String</td>
<td>A text to be shown on textfield, mainly to explain what should be entered.</td>
</tr>
<tr>
<td><code>loading</code></td>
<td>Boolean</td>
<td>Place the default spinner of the theme after textfield to highlight some process takes place in the background.</td>
</tr>
</tbody>
</table>
<p>Also note you can use the native DOM attributes of an input: “name”, “max-length”, “autocomplete” and so on. They are applied to the native <code>&lt;input&gt;</code> contained by QChipsInput.</p>
<p>Common input frame properties:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>prefix</code></td>
<td>String</td>
<td>A text that should be shown before the textfield.</td>
</tr>
<tr>
<td><code>suffix</code></td>
<td>String</td>
<td>A text that should be shown after the textfield.</td>
</tr>
<tr>
<td><code>float-label</code></td>
<td>String</td>
<td>A text label that will “float” up above the input field, once the input field gets focus.</td>
</tr>
<tr>
<td><code>stack-label</code></td>
<td>String</td>
<td>A text label that will be shown above the input field and is static.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>inverted</code></td>
<td>Boolean</td>
<td>Inverted mode. Color is applied to background instead.</td>
</tr>
<tr>
<td><code>inverted-light</code></td>
<td>Boolean</td>
<td>Inverted mode with a light color. Color is applied to background instead.</td>
</tr>
<tr>
<td><code>hide-underline</code></td>
<td>Boolean</td>
<td>Hides the bottom border.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Is QChipsInput rendered on a dark background?</td>
</tr>
<tr>
<td><code>align</code></td>
<td>String</td>
<td>One of ‘left’, ‘center’ or ‘right’ which determines the text align within textfield.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, textfield is disabled and the user cannot type anything.</td>
</tr>
<tr>
<td><code>warning</code></td>
<td>Boolean</td>
<td>If set to true, the component colors are changed to show there is a warning.</td>
</tr>
<tr>
<td><code>error</code></td>
<td>Boolean</td>
<td>If set to true, the input fields colors are changed to show there is an error.</td>
</tr>
<tr>
<td><code>before</code></td>
<td>Array of Objects</td>
<td>Icon buttons on left side of input frame. Read below more details.</td>
</tr>
<tr>
<td><code>after</code></td>
<td>Array of Objects</td>
<td>Icon buttons on right side of input frame. Read below more details.</td>
</tr>
<tr>
<td><code>no-parent-field</code></td>
<td>Boolean</td>
<td>Avoid trying to connect to a parent QField.</td>
</tr>
<tr>
<td><code>upper-case</code></td>
<td>Boolean</td>
<td>Transform input to upper case.</td>
</tr>
<tr>
<td><code>lower-case</code></td>
<td>Boolean</td>
<td>Transform input to lower case.</td>
</tr>
</tbody>
</table>
<h3 id="Icon-buttons"><a href="#Icon-buttons" class="headerlink" title="Icon buttons"></a>Icon buttons</h3><p>This section refers to <code>before</code> and <code>after</code> properties which can add additional buttons as icons to the textfield. Here is the structure of the two properties:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// required icon</span></span><br><span class="line">  icon: <span class="built_in">String</span>,</span><br><span class="line">  <span class="comment">// required function to call when</span></span><br><span class="line">  <span class="comment">// icon is clicked/tapped</span></span><br><span class="line">  handler: <span class="built_in">Function</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Optional. Show icon button</span></span><br><span class="line">  <span class="comment">// if model has a value</span></span><br><span class="line">  content: <span class="built_in">Boolean</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Optional. Show icon button</span></span><br><span class="line">  <span class="comment">// if textfield is marked with error</span></span><br><span class="line">  error: <span class="built_in">Boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Examples:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-chips-input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:after</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">      icon: 'warning',</span></span></span><br><span class="line"><span class="tag"><span class="string">      error: true,</span></span></span><br><span class="line"><span class="tag"><span class="string">      handler () &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        // do something...</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">  ]"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h3><p>As you may have noticed above, there’s a “color”, “chips-color” and “chips-bg-color” along with “inverted”/“inverted-light” and “dark” properties.<br>By default, if you only use “color” then the input frame and Chips will share the color. If there’s also a “chips-color” or “chips-bg-color” specified then the encapsulated chips’ colors will be overwritten.<br>When you want the frame inverted (color is applied to background), then specify “inverted” property. Use “inverted-light” when the color is light.<br>When used on a dark background, specify “dark” property.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Use a color. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-chips-input</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">v-model</span>=<span class="string">"model"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Use a color on inverted mode (background gets colored). --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-chips-input</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">v-model</span>=<span class="string">"model"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Coloring the encapsulated Chips.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-chips-input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"amber"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">chips-color</span>=<span class="string">"yellow"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">chips-bg-color</span>=<span class="string">"black"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">inverted-light</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  When we use the component on a dark background,</span></span><br><span class="line"><span class="comment">  so we specify "dark" property.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-grey-9"</span> <span class="attr">style</span>=<span class="string">"padding: 15px"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-chips-input</span> <span class="attr">dark</span> <span class="attr">color</span>=<span class="string">"amber"</span> <span class="attr">v-model</span>=<span class="string">"model"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Lazy-Input"><a href="#Lazy-Input" class="headerlink" title="Lazy Input"></a>Lazy Input</h3><p>Vue will soon supply the <code>.lazy</code> modifier for v-model on components too, but until then, you can use the longer equivalent form:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-chips-input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">change</span>=<span class="string">"val =&gt; &#123; model = val &#125;"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Autocomplete"><a href="#Autocomplete" class="headerlink" title="Autocomplete"></a>Autocomplete</h3><p>You can use <a href="/components/autocomplete.html">QAutocomplete</a> to provide the user a list of values to select from.<br>While the list of found values is open <code>&lt;ENTER&gt;</code> key will select a value from it and add it to the list.<br>If you want to add a value not found in the list either hit the <code>send</code> icon or press <code>&lt;ESC&gt;</code> key to hide the list and then the <code>&lt;ENTER&gt;</code> key.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-chips-input</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">placeholder</span>=<span class="string">"Add from list or new ones"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-autocomplete</span> @<span class="attr">search</span>=<span class="string">"search"</span> @<span class="attr">selected</span>=<span class="string">"selected"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-chips-input</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>add(value)</code></td>
<td>Adds <code>value</code> to the model.</td>
</tr>
<tr>
<td><code>remove(index)</code></td>
<td>Removes value at <code>index</code> in model.</td>
</tr>
<tr>
<td><code>focus()</code></td>
<td>Focuses the input text field within Chips Input.</td>
</tr>
<tr>
<td><code>select()</code></td>
<td>Selects all textfield text and focuses.</td>
</tr>
<tr>
<td><code>clear()</code></td>
<td>Resets the model to an empty string.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@input(newVal)</code></td>
<td>Triggered immediately on model value change.</td>
</tr>
<tr>
<td><code>@change(newVal)</code></td>
<td>Triggered on lazy model value change.</td>
</tr>
<tr>
<td><code>@clear(clearVal)</code></td>
<td>Triggered when the model is cleared.</td>
</tr>
<tr>
<td><code>@duplicate(val)</code></td>
<td>Triggered when user tries to add a duplicate value.</td>
</tr>
<tr>
<td><code>@add(val)</code></td>
<td>Triggered when user adds a value.</td>
</tr>
<tr>
<td><code>@remove({index, value})</code></td>
<td>Triggered when one Chip is removed.</td>
</tr>
</tbody>
</table>
<h2 id="More-Examples"><a href="#More-Examples" class="headerlink" title="More Examples"></a>More Examples</h2><h3 id="Wrapped-with-QField"><a href="#Wrapped-with-QField" class="headerlink" title="Wrapped with QField"></a>Wrapped with QField</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-field</span></span></span><br><span class="line"><span class="tag">  <span class="attr">icon</span>=<span class="string">"account_box"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"Birthday"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:count</span>=<span class="string">"10"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">helper</span>=<span class="string">"Some helper here"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-chips-input</span> <span class="attr">float-label</span>=<span class="string">"Float Label"</span> <span class="attr">v-model</span>=<span class="string">"model"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Usage-Inside-of-a-List"><a href="#Usage-Inside-of-a-List" class="headerlink" title="Usage Inside of a List"></a>Usage Inside of a List</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">multiline</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"edit"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-chips-input</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">placeholder</span>=<span class="string">"Type names"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Color Utils]]></title>
      <url>https://quasar-framework.org/components/color-utils.html</url>
      <content type="html"><![CDATA[<p>Quasar provides a set of useful functions to manipulate colors easily in most use cases, without the high additional cost of integrating dedicated libraries.</p>
<h3 id="Helping-Tree-Shake"><a href="#Helping-Tree-Shake" class="headerlink" title="Helping Tree-Shake"></a>Helping Tree-Shake</h3><p>You will notice all examples import <code>colors</code> Object from Quasar. However, if you need only one method from it, then you can use ES6 destructuring to help Tree Shaking embed only that method and not all of <code>colors</code>.</p>
<p>Example with <code>setBrand()</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// we import all of `colors`</span></span><br><span class="line"><span class="keyword">import</span> &#123; colors &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"><span class="comment">// destructuring to keep only what is needed</span></span><br><span class="line"><span class="keyword">const</span> &#123; setBrand &#125; = colors</span><br><span class="line"></span><br><span class="line">setBrand(<span class="string">'primary'</span>, <span class="string">'#f33'</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="Color-Conversion"><a href="#Color-Conversion" class="headerlink" title="Color Conversion"></a>Color Conversion</h2><p>These functions take a color as string or Object and convert it to another format.</p>
<table>
<thead>
<tr>
<th>Function</th>
<th>Source format</th>
<th>Destination format</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>rgbToHex</code></td>
<td>Object</td>
<td>String</td>
<td>Converts a RGB/A color Object (<code>{ r: [0-255], g: [0-255], b: [0-255}&lt;,  a: [0-100]&gt;}</code>) to it’s HEX/A representation as a String (<code>#RRGGBB&lt;AA&gt;</code>). If Alpha channel is present in the original object it will be present also in the output.</td>
</tr>
<tr>
<td><code>rgbToHsv</code></td>
<td>Object</td>
<td>Object</td>
<td>Converts a RGB/A color Object (<code>{ r: [0-255], g: [0-255], b: [0-255}&lt;,  a: [0-100]&gt;}</code>) to it’s HSV/A representation as an Object (<code>{ h: [0-360], s: [0-100], v: [0-100},  a: [0-100]}</code>). If Alpha channel is present in the original object it will be present also in the output.</td>
</tr>
<tr>
<td><code>hexToRgb</code></td>
<td>String</td>
<td>Object</td>
<td>Converts a HEX/A color String (<code>#RRGGBB&lt;AA&gt;</code>) to it’s RGB/A representation as an Object (<code>{ r: [0-255], g: [0-255], b: [0-255}&lt;,  a: [0-100]&gt;}</code>) to it’s . If Alpha channel is present in the original object it will be present also in the output.</td>
</tr>
<tr>
<td><code>textToRgb</code></td>
<td>String</td>
<td>Object</td>
<td>Converts a HEX/A color String (<code>#RRGGBB&lt;AA&gt;</code>) or a RGB/A color String(<code>rgb(R, G, B&lt;, A&gt;)</code>) to it’s RGB/A representation as an Object (<code>{ r: [0-255], g: [0-255], b: [0-255}&lt;,  a: [0-100]&gt;}</code>) to it’s . If Alpha channel is present in the original object it will be present also in the output.</td>
</tr>
<tr>
<td><code>hsvToRgb</code></td>
<td>String</td>
<td>Object</td>
<td>Converts a HSV/A color Object (<code>{ h: [0-360], s: [0-100], v: [0-100},  a: [0-100]}</code>) to it’s RGB/A representation as an Object (<code>{ r: [0-255], g: [0-255], b: [0-255}&lt;,  a: [0-100]&gt;}</code>) to it’s . If Alpha channel is present in the original object it will be present also in the output.</td>
</tr>
</tbody>
</table>
<h2 id="Color-Processing"><a href="#Color-Processing" class="headerlink" title="Color Processing"></a>Color Processing</h2><p>These functions perform changes on the color or extract specific information.</p>
<h3 id="lighten-color-percent"><a href="#lighten-color-percent" class="headerlink" title="lighten (color, percent)"></a>lighten (color, percent)</h3><p>Lighten the <code>color</code> (if <code>percent</code> is positive) or darken it (if <code>percent</code> is negative).</p>
<p>Accepts a HEX/A String or a RGB/A String as <code>color</code> and a <code>percent</code> (0 to 100 or -100 to 0) of lighten/darken to be applied to the <code>color</code>.<br>Returns a HEX String representation of the calculated <code>color</code>.</p>
<h3 id="luminosity-color"><a href="#luminosity-color" class="headerlink" title="luminosity (color)"></a>luminosity (color)</h3><p>Calculates the <a href="http://www.w3.org/TR/WCAG20/#relativeluminancedef" target="_blank" rel="noopener">relative luminance</a> of the <code>color</code>.</p>
<p>Accepts a HEX/A String, a RGB/A String or a RGB/A Object as <code>color</code>.<br>Returns a value between 0 and 1.</p>
<h2 id="Dynamic-Change-of-Brand-Colors-Dynamic-Theme-Colors"><a href="#Dynamic-Change-of-Brand-Colors-Dynamic-Theme-Colors" class="headerlink" title="Dynamic Change of Brand Colors (Dynamic Theme Colors)"></a>Dynamic Change of Brand Colors (Dynamic Theme Colors)</h2><blockquote>
<p><strong>WARNING</strong><br>This is only supported on <a href="https://caniuse.com/#feat=css-variables" target="_blank" rel="noopener">browsers that support CSS Variables</a> (Custom Properties).<br>It is not going to work on IE11, but it will fall back to the brand colors from the CSS theme.</p>
<p>This feature requires Quasar v0.15.7+</p>
</blockquote>
<p>You can dynamically customize the brand colors during run-time: <code>primary</code>, <code>secondary</code>, <code>tertiary</code>, <code>positive</code>, <code>negative</code>, <code>info</code>, <code>warning</code>, <code>light</code>, <code>dark</code>, <code>faded</code>. That means you can have one build of your application with a default color theme but show it with a runtime selected one.</p>
<p>The main color configuration is done using CSS custom properties, stored on the root element (<code>:root</code>). Each property has a name of <code>--q-color-${name}</code> (example: <code>--q-color-primary</code>, <code>--q-color-secondary</code>) and should have a valid CSS color as value.</p>
<p>The CSS Custom properties use the same inheritance rules as normal CSS, so you can only redefine your desired colors and the rest will be inherited from the parent elements.</p>
<p>The recommended workflow is to set your customized color properties on the <code>html</code> (<code>document.documentElement</code>) or <code>body</code> (<code>document.body</code>) elements. This will allow you to revert to the default color by just deleting your custom one.</p>
<p>More info on CSS custom properties (variables): <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables</a></p>
<h3 id="Helper-setBrand"><a href="#Helper-setBrand" class="headerlink" title="Helper - setBrand"></a>Helper - setBrand</h3><p>Quasar offers a helper function for setting custom colors in the <code>colors</code> utils: <code>setBrand(colorName, colorValue[, element])</code></p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Type</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>colorName</code></td>
<td>String</td>
<td><em>Yes</em></td>
<td>One of <code>primary</code>, <code>secondary</code>, <code>tertiary</code>, <code>positive</code>, <code>negative</code>, <code>info</code>, <code>warning</code>, <code>light</code>, <code>dark</code>, <code>faded</code></td>
</tr>
<tr>
<td><code>colorValue</code></td>
<td>String</td>
<td><em>Yes</em></td>
<td>Valid CSS color value</td>
</tr>
<tr>
<td><code>element</code></td>
<td>Element</td>
<td>-</td>
<td>(Default: <code>document.body</code>) Element where the custom property will be set.</td>
</tr>
</tbody>
</table>
<p>Example of setting brand colors using the helper:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; colors &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line">colors.setBrand(<span class="string">'light'</span>, <span class="string">'#DDD'</span>)</span><br><span class="line">colors.setBrand(<span class="string">'primary'</span>, <span class="string">'#33F'</span>)</span><br><span class="line">colors.setBrand(<span class="string">'primary'</span>, <span class="string">'#F33'</span>, <span class="built_in">document</span>.getElementById(<span class="string">'rebranded-section-id'</span>))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>The helper function will also take care of setting dependent custom properties for some colors (<code>positive</code>, <code>negative</code>, <code>light</code>), so this is the recommended way of usage instead of the raw Javascript <code>setProperty()</code>.</p>
</blockquote>
<h3 id="Helper-getBrand"><a href="#Helper-getBrand" class="headerlink" title="Helper - getBrand"></a>Helper - getBrand</h3><p>Quasar offers a helper function for getting custom colors in the <code>colors</code> utils: <code>getBrand(colorName[, element])</code></p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Type</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>colorName</code></td>
<td>String</td>
<td><em>Yes</em></td>
<td>One of <code>primary</code>, <code>secondary</code>, <code>tertiary</code>, <code>positive</code>, <code>negative</code>, <code>info</code>, <code>warning</code>, <code>light</code>, <code>dark</code>, <code>faded</code></td>
</tr>
<tr>
<td><code>element</code></td>
<td>Element</td>
<td>-</td>
<td>(Default: <code>document.body</code>) Element where the custom property will be read.</td>
</tr>
</tbody>
</table>
<p>Example of getting brand colors using the helper:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; colors &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line">colors.getBrand(<span class="string">'primary'</span>) <span class="comment">// '#33F'</span></span><br><span class="line">colors.getBrand(<span class="string">'primary'</span>, <span class="built_in">document</span>.getElementById(<span class="string">'rebranded-section-id'</span>))</span><br></pre></td></tr></table></figure>
<p>What this helper does is wrap the raw Javascript <code>getPropertyValue()</code> and it’s available for convenience. Example of equivalent raw Javascript:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// equivalent of colors.getBrand('primary') in raw Javascript:</span></span><br><span class="line"></span><br><span class="line">getComputedStyle(<span class="built_in">document</span>.documentElement)</span><br><span class="line">  .getPropertyValue(<span class="string">'--q-color-primary'</span>) <span class="comment">// #0273d4</span></span><br></pre></td></tr></table></figure>
<h3 id="Create-Dynamic-Custom-Colors"><a href="#Create-Dynamic-Custom-Colors" class="headerlink" title="Create Dynamic Custom Colors"></a>Create Dynamic Custom Colors</h3><p>You can use <code>setBrand</code> and <code>getBrand</code> to define custom brand colors to use in your application.<br>An example of such a new custom color usage:</p>
<figure class="highlight styl"><table><tr><td class="code"><pre><span class="line"><span class="variable">$primary</span>-darkened = darken(<span class="variable">$primary</span>, <span class="number">10%</span>)</span><br><span class="line"></span><br><span class="line">:root</span><br><span class="line">  --q-<span class="attribute">color</span>-primary-darkened <span class="variable">$primary</span>-darkened</span><br><span class="line"></span><br><span class="line">.text-primary-darkened</span><br><span class="line">  <span class="attribute">color</span> <span class="variable">$primary</span>-darkened !important</span><br><span class="line">  <span class="attribute">color</span> var(--q-color-primary-darkened) !important</span><br><span class="line">.bg-primary-darkened</span><br><span class="line">  <span class="attribute">background</span> <span class="variable">$primary</span>-darkened !important</span><br><span class="line">  <span class="attribute">background</span> var(--q-color-primary-darkened) !important</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; colors &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; lighten, setBrand &#125; = colors</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newPrimaryColor = <span class="string">'#933'</span></span><br><span class="line">setBrand(<span class="string">'primary'</span>, newPrimaryColor)</span><br><span class="line">setBrand(<span class="string">'primary-darkened'</span>, lighten(newPrimaryColor, <span class="number">-10</span>))</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Color Palette]]></title>
      <url>https://quasar-framework.org/components/color-palette.html</url>
      <content type="html"><![CDATA[<p>Quasar Framework offers a wide selection of colors out of the box. You can use them both as Stylus variables in your CSS code or directly as CSS classes in your HTML templates.</p>
<input type="hidden" data-fullpage-demo="style-and-identity/color-palette">

<p>This page comes in really handy after reading <a href="/guide/quasar-theming.html">Quasar Theming</a>. You might also want to check <a href="/components/color-utils.html">Color Utils</a>.</p>
<h2 id="Brand-Colors"><a href="#Brand-Colors" class="headerlink" title="Brand Colors"></a>Brand Colors</h2><p>There can be three main colors used throughout your App, called <code>primary</code>, <code>secondary</code> and <code>tertiary</code>.</p>
<p>Most of the colors that Quasar Components use are strongly linked with these three colors that you can change. Choosing these colors is the first step one should take when differentiating the design of an App. You’ll notice immediately upon changing their default values that Quasar Components follow these colors as a guideline.</p>
<h2 id="Color-List"><a href="#Color-List" class="headerlink" title="Color List"></a>Color List</h2><p>Here’s the list of colors provided out of the box. Use them as CSS classes (in HTML templates) or as Stylus variables (in <code>&lt;style lang=&quot;stylus&quot;&gt;</code> tags) within your app’s <code>*.vue</code> files.</p>
<p><code>primary</code>, <code>secondary</code>, <code>tertiary</code><br><code>positive</code>, <code>negative</code>, <code>info</code>, <code>warning</code>, <code>white</code>, <code>black</code>, <code>light</code>, <code>dark</code>, <code>faded</code></p>
<p> Colors come in the following preset hues:<br><code>red</code>, <code>pink</code>, <code>purple</code>, <code>deep-purple</code>, <code>indigo</code>, <code>blue</code>, <code>light-blue</code>, <code>cyan</code>, <code>teal</code>, <code>green</code>, <code>light-green</code>, <code>lime</code>, <code>yellow</code>, <code>amber</code>, <code>orange</code>, <code>deep-orange</code>, <code>brown</code>, <code>grey</code>, <code>blue-grey</code></p>
<p>Example of color variation: <code>red</code>, <code>red-1</code>, <code>red-2</code>, …, <code>red-14</code>. See the demo to get an idea of what variations do to the shade of the color. Variation 11 to 14 are color accents.</p>
<h2 id="Using-as-CSS-Classes"><a href="#Using-as-CSS-Classes" class="headerlink" title="Using as CSS Classes"></a>Using as CSS Classes</h2><p>Use <code>text-</code> or <code>bg-</code> prefixes as class names to change the color of text or the color of the background.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- changing text color --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-primary"</span>&gt;</span>....<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- changing background color --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"bg-positive"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Using-Stylus-Variables"><a href="#Using-Stylus-Variables" class="headerlink" title="Using Stylus Variables"></a>Using Stylus Variables</h2><p>In your app’s <code>*.vue</code> files you can use the colors as <code>$primary</code>, <code>$red-1</code>, and so on.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Notice lang="stylus" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"stylus"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">// "variables" is a Webpack alias injected by Quasar CLI</span></span><br><span class="line"><span class="undefined">@import '~variables'</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">div</span></span><br><span class="line"><span class="undefined">  color $red-1</span></span><br><span class="line"><span class="undefined">  background-color $grey-5</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Adding-Your-Own-Colors"><a href="#Adding-Your-Own-Colors" class="headerlink" title="Adding Your Own Colors"></a>Adding Your Own Colors</h2><p>If you want to use your own colors for your components (let’s say we are adding a color named “brand”) all you need to do is add the following CSS into your app:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.text-brand</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#a2aa33</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bg-brand</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#a2aa33</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now we can use this color for Quasar components:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">color</span>=<span class="string">"brand"</span> <span class="attr">...</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Dynamic-Change-of-Brand-Colors-Dynamic-Theme-Colors"><a href="#Dynamic-Change-of-Brand-Colors-Dynamic-Theme-Colors" class="headerlink" title="Dynamic Change of Brand Colors (Dynamic Theme Colors)"></a>Dynamic Change of Brand Colors (Dynamic Theme Colors)</h2><blockquote>
<p><strong>WARNING</strong><br>This is only supported on <a href="https://caniuse.com/#feat=css-variables" target="_blank" rel="noopener">browsers that support CSS Variables</a> (Custom Properties).<br>It is not going to work on IE11, but it will fall back to the brand colors from the CSS theme.</p>
<p>This feature requires Quasar v0.15.7+</p>
</blockquote>
<p>You can dynamically customize the brand colors during run-time: <code>primary</code>, <code>secondary</code>, <code>tertiary</code>, <code>positive</code>, <code>negative</code>, <code>info</code>, <code>warning</code>, <code>light</code>, <code>dark</code>, <code>faded</code>. That means you can have one build of your application with a default color theme but show it with a runtime selected one.</p>
<p>The main color configuration is done using CSS custom properties, stored on the root element (<code>:root</code>). Each property has a name of <code>--q-color-${name}</code> (example: <code>--q-color-primary</code>, <code>--q-color-secondary</code>) and should have a valid CSS color as value.</p>
<p>The CSS Custom properties use the same inheritance rules as normal CSS, so you can only redefine your desired colors and the rest will be inherited from the parent elements.</p>
<p>The recommended workflow is to set your customized color properties on the <code>html</code> (<code>document.documentElement</code>) or <code>body</code> (<code>document.body</code>) elements. This will allow you to revert to the default color by just deleting your custom one.</p>
<p>More info on CSS custom properties (variables): <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables</a></p>
<h3 id="Helper-setBrand"><a href="#Helper-setBrand" class="headerlink" title="Helper - setBrand"></a>Helper - setBrand</h3><p>Quasar offers a helper function for setting custom colors in the <code>colors</code> utils: <code>setBrand(colorName, colorValue[, element])</code></p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Type</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>colorName</code></td>
<td>String</td>
<td><em>Yes</em></td>
<td>One of <code>primary</code>, <code>secondary</code>, <code>tertiary</code>, <code>positive</code>, <code>negative</code>, <code>info</code>, <code>warning</code>, <code>light</code>, <code>dark</code>, <code>faded</code></td>
</tr>
<tr>
<td><code>colorValue</code></td>
<td>String</td>
<td><em>Yes</em></td>
<td>Valid CSS color value</td>
</tr>
<tr>
<td><code>element</code></td>
<td>Element</td>
<td>-</td>
<td>(Default: <code>document.body</code>) Element where the custom property will be set.</td>
</tr>
</tbody>
</table>
<p>Example of setting brand colors using the helper:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; colors &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line">colors.setBrand(<span class="string">'light'</span>, <span class="string">'#DDD'</span>)</span><br><span class="line">colors.setBrand(<span class="string">'primary'</span>, <span class="string">'#33F'</span>)</span><br><span class="line">colors.setBrand(<span class="string">'primary'</span>, <span class="string">'#F33'</span>, <span class="built_in">document</span>.getElementById(<span class="string">'rebranded-section-id'</span>))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>The helper function will also take care of setting dependent custom properties for some colors (<code>positive</code>, <code>negative</code>, <code>light</code>), so this is the recommended way of usage instead of the raw Javascript <code>setProperty()</code>.</p>
</blockquote>
<h3 id="Helper-getBrand"><a href="#Helper-getBrand" class="headerlink" title="Helper - getBrand"></a>Helper - getBrand</h3><p>Quasar offers a helper function for setting custom colors in the <code>colors</code> utils: <code>getBrand(colorName[, element])</code></p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Type</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>colorName</code></td>
<td>String</td>
<td><em>Yes</em></td>
<td>One of <code>primary</code>, <code>secondary</code>, <code>tertiary</code>, <code>positive</code>, <code>negative</code>, <code>info</code>, <code>warning</code>, <code>light</code>, <code>dark</code>, <code>faded</code></td>
</tr>
<tr>
<td><code>element</code></td>
<td>Element</td>
<td>-</td>
<td>(Default: <code>document.body</code>) Element where the custom property will be read.</td>
</tr>
</tbody>
</table>
<p>Example of getting brand colors using the helper:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; colors &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line">colors.getBrand(<span class="string">'primary'</span>) <span class="comment">// '#33F'</span></span><br><span class="line">colors.getBrand(<span class="string">'primary'</span>, <span class="built_in">document</span>.getElementById(<span class="string">'rebranded-section-id'</span>))</span><br></pre></td></tr></table></figure>
<p>What this helper does is wrap the raw Javascript <code>getPropertyValue()</code> and it’s available for convenience. Here is an example of equivalent vanilla Javascript:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// equivalent of colors.getBrand('primary') in raw Javascript:</span></span><br><span class="line"></span><br><span class="line">getComputedStyle(<span class="built_in">document</span>.documentElement)</span><br><span class="line">  .getPropertyValue(<span class="string">'--q-color-primary'</span>) <span class="comment">// #0273d4</span></span><br></pre></td></tr></table></figure>
<h3 id="Setting-Up-Defaults"><a href="#Setting-Up-Defaults" class="headerlink" title="Setting Up Defaults"></a>Setting Up Defaults</h3><p><em>Quasar v0.17+;</em> <strong>Not supported by IE11</strong></p>
<p>Should you wish to set up some brand colors without tampering with the Stylus variables, you can do so in quasar.conf.js:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// quasar.conf.js</span><br><span class="line">return &#123;</span><br><span class="line">  framework: &#123;</span><br><span class="line">    config: &#123;</span><br><span class="line">      brand: &#123;</span><br><span class="line">        primary: &apos;#ff0000&apos;,</span><br><span class="line">        // ...</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This is especially useful when you use the Quasar UMD version, where you would place the global <code>quasarConfig</code> Object before your Quasar script tag.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// optional</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.quasarConfig = &#123;</span></span><br><span class="line"><span class="undefined">    brand: &#123;</span></span><br><span class="line"><span class="javascript">      primary: <span class="string">'#ff0000'</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// ...</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Context Menu]]></title>
      <url>https://quasar-framework.org/components/context-menu.html</url>
      <content type="html"><![CDATA[<p>This component allows you to display a context menu (popup) instead of the default browser one when user performs a right-click (or long tap on touch capable devices).</p>
<input type="hidden" data-fullpage-demo="navigation/context-menu">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QContextMenu'</span>],</span><br><span class="line">  directives: [<span class="string">'CloseOverlay'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Context menus can contain anything. In the example below, we display a menu.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-context-menu</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list</span> <span class="attr">link</span> <span class="attr">separator</span> <span class="attr">style</span>=<span class="string">"min-width: 150px; max-height: 300px;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">v-close-overlay</span> @<span class="attr">click.native</span>=<span class="string">"showToast()"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Label"</span> <span class="attr">sublabel</span>=<span class="string">"Value"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">v-close-overlay</span> @<span class="attr">click.native</span>=<span class="string">"showOtherToast()"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Other Label"</span> <span class="attr">sublabel</span>=<span class="string">"Other Value"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-context-menu</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The position of the popup is calculated so that it will be displayed on the available screen real estate, switching sides (right/left and/or top/bottom) when necessary.<br>Clicking/Tapping outside of the popup will close the Context Menu.</p>
<blockquote>
<p>Notice the “v-close-overlay” directive. When applied to any element within a popup (Popover, Modal) like in this case, it closes it.</p>
</blockquote>
<blockquote>
<p><strong>IMPORTANT</strong><br>When on a mobile app and user hits the phone/tablet back button, the Context Menu will get closed automatically.<br>When on a desktop browser and user hits the &lt;ESCAPE&gt; key, the Context Menu will get close automatically.</p>
</blockquote>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>Disabled or not</td>
</tr>
</tbody>
</table>
<p>QContextMenu also supports a Boolean ‘v-model’ which controls the open/close state.</p>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>show()</code></td>
<td>Open Context Menu</td>
</tr>
<tr>
<td><code>hide()</code></td>
<td>Close Context Menu</td>
</tr>
</tbody>
</table>
<p>Note that you need to pass the original DOM event to the show() method as the first argument to have the context menu show  correctly.</p>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@show</code></td>
<td>Triggered when showing up.</td>
</tr>
<tr>
<td><code>@hide</code></td>
<td>Triggered when closing/hiding.</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Cookies]]></title>
      <url>https://quasar-framework.org/components/cookies.html</url>
      <content type="html"><![CDATA[<p>This is a wrapper over the standardized <code>document.cookie</code>.</p>
<blockquote>
<p><strong>NOTE</strong><br>In addition, you can read and write cookies using JSON objects.</p>
</blockquote>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  plugins: [<span class="string">'Cookies'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Note-about-SSR"><a href="#Note-about-SSR" class="headerlink" title="Note about SSR"></a>Note about SSR</h3><p>When building for SSR, use only the <code>$q.cookies</code> form. If you need to use the <code>import { Cookies } from &#39;quasar&#39;</code>, then you’ll need to do it like this:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Cookies &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you need access to `ssrContext`</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">ssrContext</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> cookies = process.env.SERVER</span><br><span class="line">    ? Cookies.parseSSR(ssrContext)</span><br><span class="line">    : Cookies <span class="comment">// otherwise we're on client</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// "cookies" is equivalent to the global import as in non-SSR builds</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The <code>ssrContext</code> is available in App Plugins or preFetch feature where it is supplied as parameter.</p>
<p>The reason for this is that in a client-only app, every user will be using a fresh instance of the app in their browser. For server-side rendering we want the same: each request should have a fresh, isolated app instance so that there is no cross-request state pollution. So Cookies needs to be bound to each request separately.</p>
<h2 id="Read-a-Cookie"><a href="#Read-a-Cookie" class="headerlink" title="Read a Cookie"></a>Read a Cookie</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// outside of a Vue file</span></span><br><span class="line"><span class="keyword">import</span> &#123; Cookies &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> value = Cookies.get(<span class="string">'cookie_name'</span>)</span><br></pre></td></tr></table></figure>
<p>When cookie is not set, the return value is <code>undefined</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// inside of a Vue file</span></span><br><span class="line"><span class="keyword">this</span>.$q.cookies.get(<span class="string">'cookie_name'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Read-All-Cookies"><a href="#Read-All-Cookies" class="headerlink" title="Read All Cookies"></a>Read All Cookies</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// outside of a Vue file</span></span><br><span class="line"><span class="keyword">import</span> &#123; Cookies &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cookies = Cookies.all()</span><br></pre></td></tr></table></figure>
<p><code>cookies</code> variable will be an object with key-value pairs (cookie_name : cookie_value).</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// inside of a Vue file</span></span><br><span class="line"><span class="keyword">this</span>.$q.cookies.all()</span><br></pre></td></tr></table></figure>
<h2 id="Verify-if-Cookie-is-Set"><a href="#Verify-if-Cookie-is-Set" class="headerlink" title="Verify if Cookie is Set"></a>Verify if Cookie is Set</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// outside of a Vue file</span></span><br><span class="line"><span class="keyword">import</span> &#123; Cookies &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line">(<span class="built_in">Boolean</span>) Cookies.has(<span class="string">'cookie_name'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// inside of a Vue file</span></span><br><span class="line"><span class="keyword">this</span>.$q.cookies.has(<span class="string">'cookie_name'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Write-a-Cookie"><a href="#Write-a-Cookie" class="headerlink" title="Write a Cookie"></a>Write a Cookie</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// outside of a Vue file</span></span><br><span class="line"><span class="keyword">import</span> &#123; Cookies &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line">Cookies.set(<span class="string">'cookie_name'</span>, cookie_value, options)</span><br></pre></td></tr></table></figure>
<p><code>options</code> is an Object which can have the following properties: <code>expires</code>, <code>path</code>, <code>domain</code>, <code>secure</code>. They are explained below.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// outside of a Vue file</span></span><br><span class="line"><span class="keyword">import</span> &#123; Cookies &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line">Cookies.set(<span class="string">'quasar'</span>, <span class="string">'framework'</span>, &#123;</span><br><span class="line">  secure: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// inside of a Vue file</span></span><br><span class="line"><span class="keyword">this</span>.$q.cookies.set(<span class="string">'cookie_name'</span>, cookie_value, options)</span><br></pre></td></tr></table></figure>
<h3 id="Option-expires"><a href="#Option-expires" class="headerlink" title="Option expires"></a>Option <code>expires</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">expires: <span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>Define lifetime of the cookie. Value can be a Number which will be interpreted as days from time of creation or a Date object. If omitted, the cookie becomes a session cookie.</p>
<h3 id="Option-path"><a href="#Option-path" class="headerlink" title="Option path"></a>Option <code>path</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path: <span class="string">'/'</span></span><br></pre></td></tr></table></figure>
<p>Define the path where the cookie is valid. By default the path of the cookie is the path of the page where the cookie was created (standard browser behavior). If you want to make it available for instance across the entire domain use path: ‘/‘. Default: path of page where the cookie was created.</p>
<h3 id="Option-domain"><a href="#Option-domain" class="headerlink" title="Option domain"></a>Option <code>domain</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">domain: <span class="string">'quasar-framework.org'</span></span><br></pre></td></tr></table></figure>
<p>Define the domain where the cookie is valid. Default: domain of page where the cookie was created.</p>
<h3 id="Option-secure"><a href="#Option-secure" class="headerlink" title="Option secure"></a>Option <code>secure</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">secure: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>If true, the cookie transmission requires a secure protocol (HTTPS) and will NOT be sent over HTTP. Default value is <code>false</code>.</p>
<h2 id="Remove-a-Cookie"><a href="#Remove-a-Cookie" class="headerlink" title="Remove a Cookie"></a>Remove a Cookie</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// outside of a Vue file</span></span><br><span class="line"><span class="keyword">import</span> &#123; Cookies &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line">Cookies.remove(<span class="string">'cookie_name'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// inside of a Vue file</span></span><br><span class="line"><span class="keyword">this</span>.$q.cookies.remove(<span class="string">'cookie_name'</span>)</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Color Picker]]></title>
      <url>https://quasar-framework.org/components/color-picker.html</url>
      <content type="html"><![CDATA[<p>The ColorPicker component provides a method to input colors. There is also one more version available: <a href="/components/color-input.html">Color Input</a>.</p>
<input type="hidden" data-fullpage-demo="forms/color/color-picker">

<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.<br><strong>You might also want to check</strong> <a href="/components/color-utils.html">Color Utils</a>.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QColorPicker'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-color-picker</span> <span class="attr">v-model</span>=<span class="string">"modelHex"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span></span><br><span class="line"><span class="javascript">    modelHex: <span class="string">'#C7044B'</span>,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// and the other types of models:</span></span></span><br><span class="line"><span class="javascript">    modelHexa: <span class="string">'#F0FF1CBF'</span>,</span></span><br><span class="line"><span class="undefined">    modelRgb: &#123; r: 112, g: 204, b: 55 &#125;,</span></span><br><span class="line"><span class="undefined">    modelRgba: &#123; r: 138, g: 36, b: 138, a: 64 &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which must be a String, Number or Date Object.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Is component rendered on a dark background?</td>
</tr>
<tr>
<td><code>default-value</code></td>
<td>String/Object</td>
<td>Default color hex/rgb for picker when model is not yet set.</td>
</tr>
<tr>
<td><code>format-model</code></td>
<td>String</td>
<td>Data type of model (useful especially when starting out with undefined or null). One of ‘auto’, ‘hex’, ‘rgb’, ‘hexa’, ‘rgba’.</td>
</tr>
<tr>
<td><code>readonly</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, component is displayed as read-only.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, component is disabled and the user cannot change model.</td>
</tr>
<tr>
<td><code>no-parent-field</code></td>
<td>Boolean</td>
<td>Avoid trying to connect to a parent QField.</td>
</tr>
</tbody>
</table>
<h3 id="Lazy-Input"><a href="#Lazy-Input" class="headerlink" title="Lazy Input"></a>Lazy Input</h3><p>Vue will soon supply the <code>.lazy</code> modifier for v-model on components too, but until then, you can use the longer equivalent form:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-color-picker</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">change</span>=<span class="string">"val =&gt; &#123; model = val &#125;"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>clear()</code></td>
<td>Sets model to empty string (removes current value).</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@input(newVal)</code></td>
<td>Triggered on immediate model value change.</td>
</tr>
<tr>
<td><code>@change(newVal)</code></td>
<td>Triggered on lazy model value change.</td>
</tr>
</tbody>
</table>
<h2 id="More-Examples"><a href="#More-Examples" class="headerlink" title="More Examples"></a>More Examples</h2><h3 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h3><p>Use the <code>color</code> and <code>inverted</code>/<code>inverted-light</code> props to control the color.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-color-picker</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"amber-7"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">float-label</span>=<span class="string">"Float Label"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-color-picker</span></span></span><br><span class="line"><span class="tag">  <span class="attr">inverted</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">float-label</span>=<span class="string">"Float Label"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Also, if QColor is displayed on a dark background, add the <code>dark</code> property.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-color-picker</span> <span class="attr">dark</span> <span class="attr">color</span>=<span class="string">"secondary"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Date Utils]]></title>
      <url>https://quasar-framework.org/components/date-utils.html</url>
      <content type="html"><![CDATA[<p>Quasar provides a set of useful functions to manipulate JS Date easily in most use cases, without the high additional cost of integrating dedicated libraries like <a href="https://momentjs.com" target="_blank" rel="noopener">moment</a>.</p>
<p>Most Quasar date functions take as parameter either a Unix timestamp or a String representing a date which needs to be parsable by the native JS <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank" rel="noopener">Date constructor</a>. Some examples: <code>1497159857411</code>, <code>Sun Jun 11 2017 08:44:42 GMT+0300</code>, <code>2017-06-16</code>.</p>
<p>Returned values are all JS Dates.</p>
<p>Get familiar with JS native Date class, which is very powerful, and remember that you don’t need solutions like Momentjs which add hundreds of minified KB to your bundle.</p>
<h3 id="Helping-Tree-Shake"><a href="#Helping-Tree-Shake" class="headerlink" title="Helping Tree-Shake"></a>Helping Tree-Shake</h3><p>You will notice all examples import <code>date</code> Object from Quasar. However, if you need only one method from it, then you can use ES6 destructuring to help Tree Shaking embed only that method and not all of <code>date</code>.</p>
<p>Example with <code>addToDate()</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// we import all of `date`</span></span><br><span class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"><span class="comment">// destructuring to keep only what is needed</span></span><br><span class="line"><span class="keyword">const</span> &#123; addToDate &#125; = date</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newDate = addToDate(<span class="keyword">new</span> <span class="built_in">Date</span>(), &#123; <span class="attr">days</span>: <span class="number">7</span>, <span class="attr">month</span>: <span class="number">1</span> &#125;)</span><br></pre></td></tr></table></figure></p>
<h2 id="Format-for-display"><a href="#Format-for-display" class="headerlink" title="Format for display"></a>Format for display</h2><p>It takes a string of tokens and replaces them with their corresponding date values:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> timeStamp = <span class="built_in">Date</span>.now()</span><br><span class="line"><span class="keyword">let</span> formattedString = date.formatDate(timeStamp, <span class="string">'YYYY-MM-DDTHH:mm:ss.SSSZ'</span>)</span><br></pre></td></tr></table></figure></p>
<p>For i18n, you can use a third parameter:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> formattedString = date.formatDate(timesStamp, <span class="string">'MMMM - dddd'</span>, &#123;</span><br><span class="line">  dayNames: [<span class="string">'Duminica'</span>, <span class="string">'Luni'</span>, <span class="comment">/* and all the rest of days - remember starting with Sunday */</span>],</span><br><span class="line">  monthNames: [<span class="string">'Ianuarie'</span>, <span class="string">'Februarie'</span>, <span class="comment">/* and all the rest of months */</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>Available format tokens:</p>
<table>
<thead>
<tr>
<th>Unit</th>
<th>Formats available</th>
</tr>
</thead>
<tbody>
<tr>
<td>Year</td>
<td><ul><li><strong>YY</strong>: 70 71 … 29 30</li><li><strong>YYYY</strong>: 1970 1971 … 2029 2030</li></ul></td>
</tr>
<tr>
<td>Month</td>
<td><ul><li><strong>M</strong>: 1 2 … 11 12</li><li><strong>MM</strong>: 01 02 … 11 12</li><li><strong>MMM</strong>: Jan Feb … Nov Dec</li><li><strong>MMMM</strong>: January February … November December</li></ul></td>
</tr>
<tr>
<td>Quarter</td>
<td><ul><li><strong>Q</strong>: Quarter number 1 2 3 4</li><li><strong>Qo</strong>: Quarter number 1st 2nd 3rd 4th</li></ul></td>
</tr>
<tr>
<td>Day of Month</td>
<td><ul><li><strong>D</strong>: 1 2 … 30 31</li><li><strong>Do</strong>: 1st 2nd … 30th 31st</li><li><strong>DD</strong>: 01 02 … 30 31</li></ul></td>
</tr>
<tr>
<td>Day of Year</td>
<td><ul><li><strong>DDD</strong>: 1 2 … 364 365</li><li><strong>DDDD</strong>: 001 002 … 364 365</li></ul></td>
</tr>
<tr>
<td>Day of Week</td>
<td><ul><li><strong>d</strong>: 0 1 … 5 6</li><li><strong>dd</strong>: Su Mo … Fr Sa</li><li><strong>ddd</strong>: Sun Mon … Fri Sat</li><li><strong>dddd</strong>: Sunday Monday … Friday Saturday</li></ul></td>
</tr>
<tr>
<td>Day of Week (ISO)</td>
<td><ul><li><strong>E</strong>: 1 2 … 6 7</li></ul></td>
</tr>
<tr>
<td>Week of Year</td>
<td><ul><li><strong>w</strong>: 1 2 … 52 53</li><li><strong>ww</strong>: 01 02 … 52 53</li></ul></td>
</tr>
<tr>
<td>Hour</td>
<td><ul><li><strong>H</strong>: 0 1 … 22 23</li><li><strong>HH</strong>: 00 01 … 22 23</li><li><strong>h</strong>: 0 … 11 12</li><li><strong>hh</strong>: 01 02 … 11 12</li></ul></td>
</tr>
<tr>
<td>Minute</td>
<td><ul><li><strong>m</strong>: 0 1 … 58 59</li><li><strong>mm</strong>: 00 01 … 58 59</li></ul></td>
</tr>
<tr>
<td>Second</td>
<td><ul><li><strong>s</strong>: 0 1 … 58 59</li><li><strong>ss</strong>: 00 01 … 58 59</li></ul></td>
</tr>
<tr>
<td>Fractional Second</td>
<td><ul><li><strong>S</strong>: 0 1 … 8 9</li><li><strong>SS</strong>: 00 01 … 98 99</li><li><strong>SSS</strong>: 000 001 … 998 999</li></ul></td>
</tr>
<tr>
<td>Timezone offset</td>
<td><ul><li><strong>Z</strong>: -07:00 -06:00 … +06:00 +07:00</li><li><strong>ZZ</strong>: -0700 -0600 … +0600 +0700</li></ul></td>
</tr>
<tr>
<td>AM/PM</td>
<td><ul><li><strong>A</strong>: AM, PM</li><li><strong>a</strong>: am, pm</li><li><strong>aa</strong>: a.m, p.m</li></ul></td>
</tr>
<tr>
<td>Unix Timestamp</td>
<td><ul><li><strong>X</strong>: 1360013296</li><li><strong>x</strong> (ms): 1360013296123</li></ul></td>
</tr>
</tbody>
</table>
<h2 id="Manipulate-dates"><a href="#Manipulate-dates" class="headerlink" title="Manipulate dates"></a>Manipulate dates</h2><h3 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h3><p><strong>Try to create dates with native JS Date class</strong> like so:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure></p>
<p>The following method is just a wrapper to help you in cases where you just need current time but with a different year, or month, or second etc.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newDate = date.buildDate(&#123; <span class="attr">year</span>:<span class="number">2010</span>, <span class="attr">date</span>:<span class="number">5</span>, <span class="attr">hours</span>:<span class="number">15</span>, <span class="attr">milliseconds</span>:<span class="number">123</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>You can pass a second argument (a boolean) for setting UTC time (true) instead of local time.</p>
<p>The object literal provided can contain the following keys (all are optional):</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>milliseconds</code></td>
<td>for the milliseconds component of the date/time</td>
</tr>
<tr>
<td><code>seconds</code></td>
<td>for the seconds component of the date/time</td>
</tr>
<tr>
<td><code>minutes</code></td>
<td>for the minutes component of the date/time</td>
</tr>
<tr>
<td><code>hours</code></td>
<td>for the hours component of the date/time</td>
</tr>
<tr>
<td><code>date</code></td>
<td>for the day component of the date/time</td>
</tr>
<tr>
<td><code>month</code></td>
<td>for the month component of the date/time</td>
</tr>
<tr>
<td><code>year</code></td>
<td>for the year component of the date/time</td>
</tr>
</tbody>
</table>
<h3 id="Validate"><a href="#Validate" class="headerlink" title="Validate"></a>Validate</h3><p>To check if a date string is valid use:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dateString = <span class="string">'Wed, 09 Aug 1995 00:00:00 GMT'</span></span><br><span class="line"><span class="keyword">if</span> (date.isValid(dateString)) &#123;</span><br><span class="line">  <span class="comment">// Do something with date string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Add-Subtract"><a href="#Add-Subtract" class="headerlink" title="Add/Subtract"></a>Add/Subtract</h3><p>To add/subtract some duration to/from a date use:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">2</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">newDate = date.addToDate(newDate, &#123; <span class="attr">days</span>: <span class="number">7</span>, <span class="attr">month</span>: <span class="number">1</span> &#125;)</span><br><span class="line"><span class="comment">// `newDate` is now 2017-3-14 00:00:00</span></span><br><span class="line"></span><br><span class="line">newDate = date.subtractFromDate(newDate, &#123; <span class="attr">hours</span>: <span class="number">24</span>, <span class="attr">milliseconds</span>: <span class="number">10000</span> &#125;)</span><br><span class="line"><span class="comment">// `newDate` is now 2017-3-12 23:59:50</span></span><br></pre></td></tr></table></figure></p>
<p>The object literal provided can contain the following keys (all are optional):</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>milliseconds</code></td>
<td>for a duration in milliseconds</td>
</tr>
<tr>
<td><code>seconds</code></td>
<td>for a duration in seconds</td>
</tr>
<tr>
<td><code>minutes</code></td>
<td>for a duration in minutes</td>
</tr>
<tr>
<td><code>hours</code></td>
<td>for a duration in hours</td>
</tr>
<tr>
<td><code>days</code></td>
<td>for a duration in days</td>
</tr>
<tr>
<td><code>month</code></td>
<td>for a duration in months</td>
</tr>
<tr>
<td><code>year</code></td>
<td>for a duration in years</td>
</tr>
</tbody>
</table>
<h3 id="Set-date-time"><a href="#Set-date-time" class="headerlink" title="Set date/time"></a>Set date/time</h3><p>To set a specified unit(s) of date/time:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> adjustedDate = date.adjustDate(newDate, &#123; <span class="attr">year</span>: <span class="number">2010</span>, <span class="attr">month</span>: <span class="number">2</span> &#125;)</span><br><span class="line"><span class="comment">// `adjustedDate` is 2010-2-2</span></span><br></pre></td></tr></table></figure></p>
<p>You can pass a third argument (a Boolean) for setting UTC time (<code>true</code>) instead of local time.</p>
<p>The object literal provided can contain the following keys (all are optional):</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>milliseconds</code></td>
<td>for the milliseconds component of the date/time</td>
</tr>
<tr>
<td><code>seconds</code></td>
<td>for the seconds component of the date/time</td>
</tr>
<tr>
<td><code>minutes</code></td>
<td>for the minutes component of the date/time</td>
</tr>
<tr>
<td><code>hours</code></td>
<td>for the hours component of the date/time</td>
</tr>
<tr>
<td><code>day</code></td>
<td>for the day component of the date/time</td>
</tr>
<tr>
<td><code>month</code></td>
<td>for the month component of the date/time</td>
</tr>
<tr>
<td><code>year</code></td>
<td>for the year component of the date/time</td>
</tr>
</tbody>
</table>
<h2 id="Query-dates"><a href="#Query-dates" class="headerlink" title="Query dates"></a>Query dates</h2><h3 id="Minimum-Maximum"><a href="#Minimum-Maximum" class="headerlink" title="Minimum/Maximum"></a>Minimum/Maximum</h3><p>To get the minimum/maximum date of a date set (i.e. array) use:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dates = [ <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">6</span>, <span class="number">24</span>), <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">5</span>, <span class="number">20</span>), <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">6</span>, <span class="number">26</span>) ]</span><br><span class="line"><span class="keyword">let</span> min = date.getMinDate(dates) <span class="comment">// `min` is 2017-5-20</span></span><br><span class="line"><span class="keyword">let</span> max = date.getMaxDate(dates) <span class="comment">// `max` is 2017-6-26</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Or simply use multiple parameters:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> min = date.getMinDate(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">6</span>, <span class="number">24</span>), <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">5</span>, <span class="number">20</span>), <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">6</span>, <span class="number">26</span>))</span><br><span class="line"><span class="comment">// `min` is 2017-5-20</span></span><br><span class="line"><span class="keyword">let</span> max = date.getMaxDate(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">6</span>, <span class="number">24</span>), <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">5</span>, <span class="number">20</span>), <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">6</span>, <span class="number">26</span>))</span><br><span class="line"><span class="comment">// `max` is 2017-6-26</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Time-range"><a href="#Time-range" class="headerlink" title="Time range"></a>Time range</h3><p>To check if a date is in a given date/time range use:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dateTarget = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="keyword">let</span> dateFrom = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="keyword">let</span> dateTo = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// **strictly** (i.e. exclusive range)</span></span><br><span class="line"><span class="keyword">if</span> (date.isBetweenDates(dateTarget, dateFrom, dateTo)) &#123;</span><br><span class="line">  <span class="comment">// Do something with dateTarget</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// including which margin you want</span></span><br><span class="line"><span class="keyword">if</span> (date.isBetweenDates(dateTarget, dateFrom, dateTo, &#123; <span class="attr">inclusiveFrom</span>: <span class="literal">true</span>, <span class="attr">inclusiveTo</span>: <span class="literal">true</span> &#125;)) &#123;</span><br><span class="line">  <span class="comment">// Do something with dateTarget</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>To normalize a date in a given date/time range use:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newDate = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="keyword">let</span> dateMin = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2010</span>, <span class="number">2</span>, <span class="number">23</span>)</span><br><span class="line"><span class="keyword">let</span> dateMax = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2012</span>, <span class="number">4</span>, <span class="number">12</span>)</span><br><span class="line"><span class="keyword">let</span> dateNormalized = date.getDateBetween(newDate, dateMin, dateMax)</span><br><span class="line"><span class="comment">// Returns `newDate` if it's between 2010-2-23 and 2012-4-12; `dateMin` if it's lower; `dateMax` if it's greater</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Equality"><a href="#Equality" class="headerlink" title="Equality"></a>Equality</h3><p>To check if two dates’ unit are <strong>equal</strong> use:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">let</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">3</span>, <span class="number">8</span>)</span><br><span class="line"><span class="keyword">let</span> unit = <span class="string">'year'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (date.isSameDate(date1, date2, <span class="comment">/* optional */</span> unit)) &#123;</span><br><span class="line">  <span class="comment">// true because date1 and date2's year is the same</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Unit parameter can be omitted, in which case a full date/time comparison will occur, otherwise it allows to perform partial comparison:</p>
<table>
<thead>
<tr>
<th>Unit</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>second</code></td>
<td>test if same second only</td>
</tr>
<tr>
<td><code>minute</code></td>
<td>test if same minute only</td>
</tr>
<tr>
<td><code>hour</code></td>
<td>test if same hour only</td>
</tr>
<tr>
<td><code>day</code></td>
<td>test if same day only</td>
</tr>
<tr>
<td><code>month</code></td>
<td>test if same month only</td>
</tr>
<tr>
<td><code>year</code></td>
<td>test if same year only</td>
</tr>
</tbody>
</table>
<h3 id="Difference"><a href="#Difference" class="headerlink" title="Difference"></a>Difference</h3><p>To compute the difference between two dates use:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">12</span>)</span><br><span class="line"><span class="keyword">let</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">3</span>, <span class="number">8</span>)</span><br><span class="line"><span class="keyword">let</span> unit = <span class="string">'days'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> diff = date.getDateDiff(date1, date2, unit)</span><br><span class="line"><span class="comment">// `diff` is 34 (days)</span></span><br></pre></td></tr></table></figure></p>
<p>The unit parameter indicates the unit of measurement, if not specified then it is <code>days</code> by default:</p>
<table>
<thead>
<tr>
<th>Unit</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>seconds</code></td>
<td>distance in seconds</td>
</tr>
<tr>
<td><code>minutes</code></td>
<td>distance in minutes</td>
</tr>
<tr>
<td><code>hours</code></td>
<td>distance in hours</td>
</tr>
<tr>
<td><code>days</code></td>
<td>distance in days</td>
</tr>
<tr>
<td><code>months</code></td>
<td>distance in months</td>
</tr>
<tr>
<td><code>years</code></td>
<td>distance in years</td>
</tr>
</tbody>
</table>
<h3 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h3><p>To get the <a href="https://en.wikipedia.org/wiki/ISO_week_date" target="_blank" rel="noopener">ISO week number in year</a> for a given date object use:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">let</span> week = date.getWeekOfYear(newDate) <span class="comment">// `week` is 1</span></span><br></pre></td></tr></table></figure></p>
<p>To get the day number in year for a given date object use:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">let</span> day = date.getDayOfYear(newDate) <span class="comment">// `day` is 35</span></span><br></pre></td></tr></table></figure></p>
<p>To get the day number in week for a given date object use:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">1</span>, <span class="number">9</span>)</span><br><span class="line"><span class="keyword">let</span> day = date.getDayOfWeek(newDate) <span class="comment">// `day` is 4</span></span><br></pre></td></tr></table></figure></p>
<p>To get the number of days in the month for the specified date:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newDate = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="keyword">let</span> days = date.daysInMonth(newDate) <span class="comment">// e.g. 30</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Start-End-of-time"><a href="#Start-End-of-time" class="headerlink" title="Start/End of time"></a>Start/End of time</h3><p>To mutate the original date object by setting it to the start of a unit of time use:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2000</span>)</span><br><span class="line"><span class="comment">// set to beginning of year 2000 (January 1st, 2000, 00:00:00.000)</span></span><br><span class="line">newDate = date.startOfDate(newDate, <span class="string">'year'</span>)</span><br><span class="line"><span class="comment">// set to end of year 2000 (December 31st, 2000, 23:59:59.999)</span></span><br><span class="line">newDate = date.endOfDate(newDate, <span class="string">'year'</span>)</span><br></pre></td></tr></table></figure></p>
<p>The second parameter indicates a unit to reset to (beginning of it or end of it):</p>
<table>
<thead>
<tr>
<th>Unit</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>second</code></td>
<td>reset seconds</td>
</tr>
<tr>
<td><code>minute</code></td>
<td>reset minutes</td>
</tr>
<tr>
<td><code>hour</code></td>
<td>reset hours</td>
</tr>
<tr>
<td><code>day</code></td>
<td>reset days</td>
</tr>
<tr>
<td><code>month</code></td>
<td>reset months</td>
</tr>
<tr>
<td><code>year</code></td>
<td>reset years</td>
</tr>
</tbody>
</table>
<h3 id="Get-Format"><a href="#Get-Format" class="headerlink" title="Get Format"></a>Get Format</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line">date.inferDateFormat(<span class="keyword">new</span> <span class="built_in">Date</span>()) <span class="comment">// 'date'</span></span><br><span class="line">date.inferDateFormat(<span class="number">35346363</span>) <span class="comment">// 'number'</span></span><br><span class="line">date.inferDateFormat(<span class="string">'Mon Feb 05 2018 23:05:29'</span>) <span class="comment">// string</span></span><br></pre></td></tr></table></figure>
<h3 id="Cloning-Date"><a href="#Cloning-Date" class="headerlink" title="Cloning Date"></a>Cloning Date</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newDate = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="keyword">const</span> clonedDate = date.clone(newDate)</span><br><span class="line"></span><br><span class="line">date.addToDate(newDate, &#123; <span class="attr">days</span>: <span class="number">1</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newDate.getDate() === clonedDate.getDate()) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Datetime Input]]></title>
      <url>https://quasar-framework.org/components/datetime-input.html</url>
      <content type="html"><![CDATA[<p>The Datetime component provides a method to input dates and time or both. There is also one more version available: <a href="/components/datetime-picker.html">Datetime Picker</a>.</p>
<input type="hidden" data-fullpage-demo="forms/datetime/datetime-input">

<p>You’ll notice in the demos that the iOS and Material Datetime pickers look and act totally different, just like their native counterparts.</p>
<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QDatetime'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Only Date --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-datetime</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"date"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Only Time --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-datetime</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"time"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Date &amp; Time --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-datetime</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"datetime"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Internationalization"><a href="#Internationalization" class="headerlink" title="Internationalization"></a>Internationalization</h2><p>The day and month names are taken care of by default through <a href="/components/internationalization.html">Quasar I18n</a>. If your desired language pack is missing, please provide a PR for it.</p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which must be a String, Number or Date Object.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>type</code></td>
<td>String</td>
<td>One of <code>date</code>, <code>time</code> or <code>datetime</code>. Default is <code>date</code>.</td>
</tr>
<tr>
<td><code>clearable</code></td>
<td>Boolean</td>
<td>If used, the component offers the user an actionable icon to reset the current value to <code>clear-value</code> (if it is set) or otherwise <code>default-value</code>. The icon appears only when the current value matches <code>clear-value</code>/<code>default-value</code>.</td>
</tr>
<tr>
<td><code>default-value</code></td>
<td>String/Object</td>
<td>Default color for picker when model is not yet set.</td>
</tr>
<tr>
<td><code>clear-value</code></td>
<td>String/Object</td>
<td>The value to which to reset the field model to when using <code>clearable</code>, unless <code>default-value</code> is specified.</td>
</tr>
<tr>
<td><code>minimal</code></td>
<td>Boolean</td>
<td>(v0.15.9+) Don’t display header.</td>
</tr>
<tr>
<td><code>readonly</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, component is displayed as read-only.</td>
</tr>
<tr>
<td><code>min</code></td>
<td>String</td>
<td>Optional minimum value it can take. Has same format as Datetime model.</td>
</tr>
<tr>
<td><code>max</code></td>
<td>String</td>
<td>Optional maximum value it can take. Has same format as Datetime model.</td>
</tr>
<tr>
<td><code>default-view</code></td>
<td>String</td>
<td>One of ‘year’, ‘month’, ‘day’, ‘hour’, ‘minute’.</td>
</tr>
<tr>
<td><code>default-value</code></td>
<td>String/Number/Date</td>
<td>Default date/time for picker when model is not yet set.</td>
</tr>
<tr>
<td><code>display-value</code></td>
<td>String</td>
<td>Text to display on input frame. Supersedes ‘placeholder’.</td>
</tr>
<tr>
<td><code>first-day-of-week</code></td>
<td>Number</td>
<td>0-6, 0 - Sunday, 1 Monday, ….</td>
</tr>
<tr>
<td><code>hide-underline</code></td>
<td>Boolean</td>
<td>Hides the bottom border.</td>
</tr>
<tr>
<td><code>popover</code></td>
<td>Boolean</td>
<td>Always display with a Popover, regardless of Platform.</td>
</tr>
<tr>
<td><code>modal</code></td>
<td>Boolean</td>
<td>Always display with a Modal, regardless of Platform.</td>
</tr>
<tr>
<td><code>format</code></td>
<td>String</td>
<td>Format as described on Handling JS Date page under <a href="/components/date-utils.html#Format-for-display">Format for display</a> section.</td>
</tr>
<tr>
<td><code>format-model</code></td>
<td>String</td>
<td>Data type of model (useful especially when starting out with undefined or null). One of ‘auto’, ‘date’, ‘number’, ‘string’.</td>
</tr>
<tr>
<td><code>format24h</code></td>
<td>Boolean</td>
<td>Override default i18n setting. Use 24 hour time for Material picker instead of AM/PM system which is default.</td>
</tr>
<tr>
<td><code>placeholder</code></td>
<td>String</td>
<td>Placeholder text for input frame to use when model is not set (empty).</td>
</tr>
<tr>
<td><code>ok-label</code></td>
<td>String</td>
<td>Text for the button to accept the input (when using Modal).</td>
</tr>
<tr>
<td><code>cancel-label</code></td>
<td>String</td>
<td>Text for the button to cancel input with no change (when using Modal).</td>
</tr>
<tr>
<td><code>header-label</code></td>
<td>String</td>
<td>(v0.17.10+) Override weekday string on popup. Applies to Material theme only.</td>
</tr>
</tbody>
</table>
<p>Common input frame properties:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>prefix</code></td>
<td>String</td>
<td>A text that should be shown before the value of model.</td>
</tr>
<tr>
<td><code>suffix</code></td>
<td>String</td>
<td>A text that should be shown after the value of model.</td>
</tr>
<tr>
<td><code>float-label</code></td>
<td>String</td>
<td>A text label that will “float” up above the input field, once the input field gets focus.</td>
</tr>
<tr>
<td><code>stack-label</code></td>
<td>String</td>
<td>A text label that will be shown above the input field and is static.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>inverted</code></td>
<td>Boolean</td>
<td>Inverted mode. Color is applied to background instead.</td>
</tr>
<tr>
<td><code>inverted-light</code></td>
<td>Boolean</td>
<td>Inverted mode with a light color. Color is applied to background instead.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Is component rendered on a dark background?</td>
</tr>
<tr>
<td><code>align</code></td>
<td>String</td>
<td>One of ‘left’, ‘center’ or ‘right’ which determines the text align.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, component is disabled and the user cannot change model.</td>
</tr>
<tr>
<td><code>warning</code></td>
<td>Boolean</td>
<td>If set to true, the input fields colors are changed to show there is a warning.</td>
</tr>
<tr>
<td><code>error</code></td>
<td>Boolean</td>
<td>If set to true, the input fields colors are changed to show there is an error.</td>
</tr>
<tr>
<td><code>before</code></td>
<td>Array of Objects</td>
<td>Icon buttons on left side of input frame. Read below more details.</td>
</tr>
<tr>
<td><code>after</code></td>
<td>Array of Objects</td>
<td>Icon buttons on right side of input frame. Read below more details.</td>
</tr>
<tr>
<td><code>no-parent-field</code></td>
<td>Boolean</td>
<td>Avoid trying to connect to a parent QField.</td>
</tr>
</tbody>
</table>
<h3 id="Lazy-Input"><a href="#Lazy-Input" class="headerlink" title="Lazy Input"></a>Lazy Input</h3><p>Vue will soon supply the <code>.lazy</code> modifier for v-model on components too, but until then, you can use the longer equivalent form:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-datetime</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">"date"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">change</span>=<span class="string">"val =&gt; &#123; model = val &#125;"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Icon-buttons"><a href="#Icon-buttons" class="headerlink" title="Icon buttons"></a>Icon buttons</h3><p>This section refers to <code>before</code> and <code>after</code> properties which can add additional buttons as icons to the component. Here is the structure of the two properties:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// required icon</span></span><br><span class="line">  icon: <span class="built_in">String</span>,</span><br><span class="line">  <span class="comment">// required function to call when</span></span><br><span class="line">  <span class="comment">// icon is clicked/tapped</span></span><br><span class="line">  handler: <span class="built_in">Function</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Optional. Show icon button</span></span><br><span class="line">  <span class="comment">// if model has a value</span></span><br><span class="line">  content: <span class="built_in">Boolean</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Optional. Show icon button</span></span><br><span class="line">  <span class="comment">// if model is marked with error</span></span><br><span class="line">  error: <span class="built_in">Boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Examples:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Show an icon button (with 'warning' as icon)</span></span><br><span class="line"><span class="comment">  when there is an error on component (through "error" prop)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-datetime</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"date"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:error</span>=<span class="string">"error"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:after</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">      icon: 'warning',</span></span></span><br><span class="line"><span class="tag"><span class="string">      error: true,</span></span></span><br><span class="line"><span class="tag"><span class="string">      handler () &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        // do something...</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">  ]"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Show an icon button (with 'arrow_forward' as icon)</span></span><br><span class="line"><span class="comment">  when the model has a non empty value</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-datetime</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"date"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:after</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">      icon: 'arrow_forward',</span></span></span><br><span class="line"><span class="tag"><span class="string">      content: true,</span></span></span><br><span class="line"><span class="tag"><span class="string">      handler () &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        // do something...</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">  ]"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>show()</code></td>
<td>Show Popover (on desktop) and Dialog (on mobile) to select date and/or time. Returns a Promise.</td>
</tr>
<tr>
<td><code>hide()</code></td>
<td>Hide Popover (on desktop) and Dialog (on mobile) to select date and/or time and execute Function after it’s been hidden. Returns a Promise.</td>
</tr>
<tr>
<td><code>toggle()</code></td>
<td>Toggle the Popover or Modal.</td>
</tr>
<tr>
<td><code>clear()</code></td>
<td>Sets model to empty string (removes current value).</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@input(newVal)</code></td>
<td>Triggered on immediate model value change.</td>
</tr>
<tr>
<td><code>@change(newVal)</code></td>
<td>Triggered on lazy model value change.</td>
</tr>
<tr>
<td><code>@clear(clearVal)</code></td>
<td>Triggered when the model is cleared.</td>
</tr>
<tr>
<td><code>@blur</code></td>
<td>Triggered when the modal/ popup is closed.</td>
</tr>
<tr>
<td><code>@focus</code></td>
<td>Triggered when the modal/ popup is opened.</td>
</tr>
</tbody>
</table>
<h2 id="The-Model"><a href="#The-Model" class="headerlink" title="The Model"></a>The Model</h2><p>Quasar uses its own date utility to work with date values within the model of the component.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br>The model (variable binded to <code>v-model</code>) must either be empty (undefined) or a string in the form of a valid ISO 8601 datetime value, like <code>2016-10-24T10:40:14.674Z</code>. It can also be a shorter derivative of this string, like <code>2016-10-24</code> or <code>2016-10-24T10:40</code>. The value can also be a Unix Timestamp (including milliseconds), like <code>1477298414674</code>. Last but not least, it can also be an instance of the Javascript Date Object, like <code>new Date()</code>.</p>
</blockquote>
<p>For more information about how Quasar works with dates, please refer to the <a href="/components/date-utils.html">Handling JS Date</a> documentation page.</p>
<p>Here are a few examples of setting up the value prop:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-datetime</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"datetime"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// ....</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      model: <span class="literal">undefined</span> <span class="comment">// empty value</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// OR</span></span></span><br><span class="line"><span class="javascript">      model: <span class="keyword">new</span> <span class="built_in">Date</span>() <span class="comment">// as in "right this moment"</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// OR</span></span></span><br><span class="line"><span class="javascript">      model: <span class="number">1477298414674</span> <span class="comment">// Unix Timestamp with milliseconds</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// OR</span></span></span><br><span class="line"><span class="javascript">      model: <span class="string">'2016-10-24T10:40:14.674Z'</span> <span class="comment">// full ISO 8601 compliant value</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// OR</span></span></span><br><span class="line"><span class="javascript">      model: <span class="string">`2016-10-24`</span> <span class="comment">// Any derivative of a valid ISO 8601 datetime value will</span></span></span><br><span class="line"><span class="javascript">                          <span class="comment">// also work, like '2016-10-24T10:40:14'</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// OR</span></span></span><br><span class="line"><span class="javascript">      model: <span class="string">`2016-10-24T10:40`</span>, <span class="comment">// For an ISO 8601 value, the time must be included</span></span></span><br><span class="line"><span class="javascript">                                 <span class="comment">// A Unix Timestamp will also work.</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="comment">// ...</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="More-Examples"><a href="#More-Examples" class="headerlink" title="More Examples"></a>More Examples</h2><h3 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h3><p>Use the <code>color</code> and <code>inverted</code>/<code>inverted-light</code> props to control the color.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-datetime</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"amber-7"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">float-label</span>=<span class="string">"Float Label"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">"date"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-datetime</span></span></span><br><span class="line"><span class="tag">  <span class="attr">inverted</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">float-label</span>=<span class="string">"Float Label"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">"date"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Also, if QDatetime is displayed on a dark background, add the <code>dark</code> property.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-datetime</span> <span class="attr">dark</span> <span class="attr">color</span>=<span class="string">"secondary"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Usage-Inside-of-a-List"><a href="#Usage-Inside-of-a-List" class="headerlink" title="Usage Inside of a List"></a>Usage Inside of a List</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Date or Time<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"access_time"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-datetime</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"time"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"update"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-datetime</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"date"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Date &amp; Time<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"notifications"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-datetime</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"datetime"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Dialog]]></title>
      <url>https://quasar-framework.org/components/dialog.html</url>
      <content type="html"><![CDATA[<p>Quasar Dialogs are a great way to offer the user the ability to choose a specific action or list of actions. They also can provide the user with important information, or require them to make a decision (or multiple decisions).</p>
<p>From a UI perspective, you can think of Dialogs as a type of “floating” modal, which covers only a portion of the screen. This means Dialogs should only be used for quick actions, like password verification, small App notifications or quick options. More in depth user flows should be reserved for ​Modals​.</p>
<input type="hidden" data-fullpage-demo="popups/dialog">

<blockquote>
<p>Dialogs can be used either as a component in your Vue file templates (for complex use-cases, like specific form components with validation etc), or as a globally available method (for some basic use cases, equivalent to native JS alert(), prompt(), …).</p>
</blockquote>
<h2 id="Basic-Usage-as-a-Method"><a href="#Basic-Usage-as-a-Method" class="headerlink" title="Basic Usage as a Method"></a>Basic Usage as a Method</h2><p>First, we install it:</p>
<p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  plugins: [<span class="string">'Dialog'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Now let’s see how we can use it:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// outside of a Vue file</span></span><br><span class="line"><span class="keyword">import</span> &#123; Dialog &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line">(<span class="built_in">Promise</span>) Dialog.create(configObj)</span><br><span class="line"></span><br><span class="line"><span class="comment">// inside of a Vue file</span></span><br><span class="line">(<span class="built_in">Promise</span>) <span class="keyword">this</span>.$q.dialog(configObj)</span><br></pre></td></tr></table></figure></p>
<p>Basic syntax for the config object:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$q.dialog(&#123;</span><br><span class="line">  title: <span class="string">'Warning'</span>,</span><br><span class="line">  message: <span class="string">'You are about to run out of disk space.'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// optional</span></span><br><span class="line">  color: <span class="string">'primary'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// optional; we want an "OK" button</span></span><br><span class="line">  ok: <span class="literal">true</span>, <span class="comment">// takes i18n value, or String for "OK" button label</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// optional; we want a "Cancel" button</span></span><br><span class="line">  cancel: <span class="literal">true</span>, <span class="comment">// takes i18n value, or String for "Cancel" button label</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// optional; prevent user dismissal when not clicking on a Dialog button</span></span><br><span class="line">  preventClose: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  noBackdropDismiss: <span class="literal">false</span>, <span class="comment">// gets set to "true" automatically if preventClose is "true"</span></span><br><span class="line">  noEscDismiss: <span class="literal">false</span>, <span class="comment">// gets set to "true" automatically if preventClose is "true"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// optional; stacks button vertically instead of horizontally (default)</span></span><br><span class="line">  stackButtons: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// optional; a position of the Dialog (top, bottom, left, right)</span></span><br><span class="line">  position: <span class="string">'top'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// optional; show an input box (make Dialog similar to a JS prompt)</span></span><br><span class="line">  prompt: &#123;</span><br><span class="line">    model: <span class="string">''</span>,</span><br><span class="line">    type: <span class="string">'text'</span> <span class="comment">// optional</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// optional; show a radio, checkbox or toggle</span></span><br><span class="line">  options: &#123;</span><br><span class="line">    type: <span class="string">'radio'</span>, <span class="comment">// or 'checkbox' / 'toggle'</span></span><br><span class="line">    model: <span class="string">'opt2'</span>, <span class="comment">// Array when checkbox/toggle! (like '[]')</span></span><br><span class="line">    items: [</span><br><span class="line">      &#123;<span class="attr">label</span>: <span class="string">'Option 1'</span>, <span class="attr">value</span>: <span class="string">'opt1'</span>, <span class="attr">color</span>: <span class="string">'secondary'</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">label</span>: <span class="string">'Option 2'</span>, <span class="attr">value</span>: <span class="string">'opt2'</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">label</span>: <span class="string">'Option 3'</span>, <span class="attr">value</span>: <span class="string">'opt3'</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>IMPORTANT</strong><br>When user hits the phone/tablet back button (only for Cordova apps), the Action Sheet will get closed automatically.<br>Also, when on a desktop browser, hitting the &lt;ESCAPE&gt; key also closes the Action Sheet.</p>
</blockquote>
<h3 id="Handling-Outcome"><a href="#Handling-Outcome" class="headerlink" title="Handling Outcome"></a>Handling Outcome</h3><p>The returning object when creating an ActionSheet is a Promise, so you can leverage the Promise API to handle the outcome:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$q.dialog(&#123;...&#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Picked "OK"</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Picked "Cancel" or dismissed</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// OR with async/await:</span></span><br><span class="line"><span class="keyword">async</span> showActionSheet () &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">this</span>.$q.dialog(&#123;...&#125;)</span><br><span class="line">    <span class="comment">// user picked "OK"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> () &#123;</span><br><span class="line">    <span class="comment">// Picked "Cancel" or dismissed</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><h4 id="Alert"><a href="#Alert" class="headerlink" title="Alert"></a>Alert</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$q.dialog(&#123;</span><br><span class="line">  title: <span class="string">'Alert'</span>,</span><br><span class="line">  message: <span class="string">'Modern HTML5 front-end framework on steroids.'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="Confirm"><a href="#Confirm" class="headerlink" title="Confirm"></a>Confirm</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$q.dialog(&#123;</span><br><span class="line">  title: <span class="string">'Confirm'</span>,</span><br><span class="line">  message: <span class="string">'Modern HTML5 front-end framework on steroids.'</span>,</span><br><span class="line">  ok: <span class="string">'Agree'</span>,</span><br><span class="line">  cancel: <span class="string">'Disagree'</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.$q.notify(<span class="string">'Agreed!'</span>)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.$q.notify(<span class="string">'Disagreed...'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="Prompt"><a href="#Prompt" class="headerlink" title="Prompt"></a>Prompt</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$q.dialog(&#123;</span><br><span class="line">  title: <span class="string">'Prompt'</span>,</span><br><span class="line">  message: <span class="string">'Modern front-end framework on steroids.'</span>,</span><br><span class="line">  prompt: &#123;</span><br><span class="line">    model: <span class="string">''</span>,</span><br><span class="line">    type: <span class="string">'text'</span> <span class="comment">// optional</span></span><br><span class="line">  &#125;,</span><br><span class="line">  cancel: <span class="literal">true</span>,</span><br><span class="line">  color: <span class="string">'secondary'</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.$q.notify(<span class="string">`You typed: "<span class="subst">$&#123;data&#125;</span>"`</span>)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.$q.notify(<span class="string">'Ok, no mood for talking, right?'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="Single-Choice-Selection"><a href="#Single-Choice-Selection" class="headerlink" title="Single Choice Selection"></a>Single Choice Selection</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$q.dialog(&#123;</span><br><span class="line">  title: <span class="string">'Options'</span>,</span><br><span class="line">  message: <span class="string">'Modern front-end framework on steroids.'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    type: <span class="string">'radio'</span>,</span><br><span class="line">    model: <span class="string">'opt2'</span>,</span><br><span class="line">    items: [</span><br><span class="line">      &#123;<span class="attr">label</span>: <span class="string">'Option 1'</span>, <span class="attr">value</span>: <span class="string">'opt1'</span>, <span class="attr">color</span>: <span class="string">'secondary'</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">label</span>: <span class="string">'Option 2'</span>, <span class="attr">value</span>: <span class="string">'opt2'</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">label</span>: <span class="string">'Option 3'</span>, <span class="attr">value</span>: <span class="string">'opt3'</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  cancel: <span class="literal">true</span>,</span><br><span class="line">  preventClose: <span class="literal">true</span>,</span><br><span class="line">  color: <span class="string">'secondary'</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.$q.notify(<span class="string">`You selected: <span class="subst">$&#123;data&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="Multiple-Choice-Selection"><a href="#Multiple-Choice-Selection" class="headerlink" title="Multiple Choice Selection"></a>Multiple Choice Selection</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$q.dialog(&#123;</span><br><span class="line">  title: <span class="string">'Options'</span>,</span><br><span class="line">  message: <span class="string">'Modern front-end framework on steroids.'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    type: <span class="string">'checkbox'</span>,</span><br><span class="line">    model: [],</span><br><span class="line">    items: [</span><br><span class="line">      &#123;<span class="attr">label</span>: <span class="string">'Option 1'</span>, <span class="attr">value</span>: <span class="string">'opt1'</span>, <span class="attr">color</span>: <span class="string">'secondary'</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">label</span>: <span class="string">'Option 2'</span>, <span class="attr">value</span>: <span class="string">'opt2'</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">label</span>: <span class="string">'Option 3'</span>, <span class="attr">value</span>: <span class="string">'opt3'</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  cancel: <span class="literal">true</span>,</span><br><span class="line">  preventClose: <span class="literal">true</span>,</span><br><span class="line">  color: <span class="string">'secondary'</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.$q.notify(<span class="string">`You selected: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="Stacked-Buttons"><a href="#Stacked-Buttons" class="headerlink" title="Stacked Buttons"></a>Stacked Buttons</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$q.dialog(&#123;</span><br><span class="line">  title: <span class="string">'Stacked buttons'</span>,</span><br><span class="line">  message: <span class="string">'Go to a movie.'</span>,</span><br><span class="line">  ok: <span class="string">'Yes, please!'</span>,</span><br><span class="line">  cancel: <span class="string">'Uhm, nope'</span>,</span><br><span class="line">  stackButtons: <span class="literal">true</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.$q.notify(<span class="string">'Agreed!'</span>)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.$q.notify(<span class="string">'Disagreed...'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="Custom-Buttons"><a href="#Custom-Buttons" class="headerlink" title="Custom Buttons"></a>Custom Buttons</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$q.dialog(&#123;</span><br><span class="line">  title: <span class="string">'Custom buttons'</span>,</span><br><span class="line">  message: <span class="string">'Go to a movie.'</span>,</span><br><span class="line">  ok: &#123;</span><br><span class="line">    push: <span class="literal">true</span>,</span><br><span class="line">    label: <span class="string">'Yes, please!'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  cancel: &#123;</span><br><span class="line">    push: <span class="literal">true</span>,</span><br><span class="line">    color: <span class="string">'negative'</span>,</span><br><span class="line">    label: <span class="string">'Uhm, nope'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.$q.notify(<span class="string">'Agreed!'</span>)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.$q.notify(<span class="string">'Disagreed...'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="Prevent-accidental-close"><a href="#Prevent-accidental-close" class="headerlink" title="Prevent accidental close"></a>Prevent accidental close</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$q.dialog(&#123;</span><br><span class="line">  title: <span class="string">'Prevent close'</span>,</span><br><span class="line">  message: <span class="string">'This dialog cannot be dismissed by clicking/tapping on the background overlay.'</span>,</span><br><span class="line">  ok: <span class="literal">true</span>,</span><br><span class="line">  cancel: <span class="literal">true</span>,</span><br><span class="line">  preventClose: <span class="literal">true</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.$q.notify(<span class="string">'You said OK!'</span>)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.$q.notify(<span class="string">`You didn't agree`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="Basic-Usage-As-a-Component"><a href="#Basic-Usage-As-a-Component" class="headerlink" title="Basic Usage As a Component"></a>Basic Usage As a Component</h2><p>First, we install it:</p>
<p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QDialog'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Now let’s see how we can use it:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-dialog</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">"customDialogModel"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stack-buttons</span></span></span><br><span class="line"><span class="tag">    <span class="attr">prevent-close</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">ok</span>=<span class="string">"onOk"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">cancel</span>=<span class="string">"onCancel"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">show</span>=<span class="string">"onShow"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">hide</span>=<span class="string">"onHide"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- This or use "title" prop on &lt;q-dialog&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>Favorite Superhero<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- This or use "message" prop on &lt;q-dialog&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"message"</span>&gt;</span>What is your superhero of choice?<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"body"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-field</span></span></span><br><span class="line"><span class="tag">        <span class="attr">icon</span>=<span class="string">"account_circle"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">helper</span>=<span class="string">"We need your name so we can send you to the movies."</span></span></span><br><span class="line"><span class="tag">        <span class="attr">label</span>=<span class="string">"Your name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:label-width</span>=<span class="string">"3"</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"buttons"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">label</span>=<span class="string">"Choose Superman"</span> @<span class="attr">click</span>=<span class="string">"choose(props.ok, 'Superman')"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"black"</span> <span class="attr">label</span>=<span class="string">"Choose Batman"</span> @<span class="attr">click</span>=<span class="string">"choose(props.ok, 'Batman')"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"negative"</span> <span class="attr">label</span>=<span class="string">"Choose Spiderman"</span> @<span class="attr">click</span>=<span class="string">"choose(props.ok, 'Spiderman')"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">label</span>=<span class="string">"No thanks"</span> @<span class="attr">click</span>=<span class="string">"props.cancel"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-dialog</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// model for Dialog example</span></span></span><br><span class="line"><span class="javascript">      customDialogModel: <span class="literal">false</span>,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      name: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// when props.ok() gets called</span></span></span><br><span class="line"><span class="undefined">    onOk (data) &#123; &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// when props.cancel() gets called</span></span></span><br><span class="line"><span class="undefined">    onCancel () &#123; &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// when we show it to the user</span></span></span><br><span class="line"><span class="undefined">    onShow () &#123; &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// when it gets hidden</span></span></span><br><span class="line"><span class="undefined">    onHide () &#123; &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// custom handler</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">async</span> choose (okFn, hero) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="keyword">this</span>.name.length === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$q.dialog(&#123;</span></span><br><span class="line"><span class="javascript">          title: <span class="string">'Please specify your name!'</span>,</span></span><br><span class="line"><span class="javascript">          message: <span class="string">`Can't buy tickets without knowing your name.`</span></span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">await</span> okFn()</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$q.notify(<span class="string">`Ok <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>, going with <span class="subst">$&#123;hero&#125;</span>`</span>)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="QDialog-Vue-Properties"><a href="#QDialog-Vue-Properties" class="headerlink" title="QDialog Vue Properties"></a>QDialog Vue Properties</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>title</code></td>
<td>String</td>
<td>Title of Dialog.</td>
</tr>
<tr>
<td><code>message</code></td>
<td>String</td>
<td>Message of Dialog.</td>
</tr>
<tr>
<td><code>prompt</code></td>
<td>Object</td>
<td>Check below table for details.</td>
</tr>
<tr>
<td><code>options</code></td>
<td>Object</td>
<td>Check below table for details.</td>
</tr>
<tr>
<td><code>ok</code></td>
<td>Boolean/String/Object</td>
<td>Do we have an OK button? Optionally specify which label to use for it OR the button props in an Object.</td>
</tr>
<tr>
<td><code>cancel</code></td>
<td>Boolean/String/Object</td>
<td>Do we have a Cancel button? Optionally specify which label to use for it OR the button props in an Object.</td>
</tr>
<tr>
<td><code>stack-buttons</code></td>
<td>Boolean</td>
<td>Stack buttons vertically instead of default horizontally.</td>
</tr>
<tr>
<td><code>prevent-close</code></td>
<td>Boolean</td>
<td>Dialog can be dismissed only by clicking/tapping on OK/Cancel buttons.</td>
</tr>
<tr>
<td><code>no-esc-dismiss</code></td>
<td>Boolean</td>
<td>“ESC” key won’t dismiss the Dialog. Overriden to “true” if “prevent-close” is “true”.</td>
</tr>
<tr>
<td><code>no-backdrop-dismiss</code></td>
<td>Boolean</td>
<td>Click/Tap on backdrop won’t dismiss Dialog. Overriden to “true” if “prevent-close” is “true”.</td>
</tr>
<tr>
<td><code>no-refocus</code></td>
<td>Boolean</td>
<td>(v0.17+) By default, when closing a Dialog, the previous focused element gets focused again. When property is set to <code>true</code> it disables this behaviour.</td>
</tr>
<tr>
<td><code>position</code></td>
<td>String</td>
<td>Position of Dialog (top, bottom, left, right).</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>A color from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
</tbody>
</table>
<p>Prompt Object:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  model: <span class="string">'..'</span> <span class="comment">// String,</span></span><br><span class="line">  type: <span class="string">'text'</span> <span class="comment">// optional</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Options Object:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type: <span class="string">'radio'</span>, <span class="comment">// or 'checkbox', 'toggle'</span></span><br><span class="line">  model: <span class="string">'opt2'</span>, <span class="comment">// Array when checkbox / toggle (like '[]')</span></span><br><span class="line">  items: [</span><br><span class="line">    &#123;<span class="attr">label</span>: <span class="string">'Option 1'</span>, <span class="attr">value</span>: <span class="string">'opt1'</span>, <span class="attr">color</span>: <span class="string">'secondary'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">label</span>: <span class="string">'Option 2'</span>, <span class="attr">value</span>: <span class="string">'opt2'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">label</span>: <span class="string">'Option 3'</span>, <span class="attr">value</span>: <span class="string">'opt3'</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="QDialog-Vue-Events"><a href="#QDialog-Vue-Events" class="headerlink" title="QDialog Vue Events"></a>QDialog Vue Events</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@ok</code></td>
<td>When “props.ok()” got called.</td>
</tr>
<tr>
<td><code>@cancel</code></td>
<td>When “props.cancel()” got called.</td>
</tr>
<tr>
<td><code>@show</code></td>
<td>Dialog has just been showed to the user.</td>
</tr>
<tr>
<td><code>@hide</code></td>
<td>Dialog has been hidden (regardless of outcome).</td>
</tr>
<tr>
<td><code>@escape-key</code></td>
<td>Dialog dismissed with ESCAPE key.</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Data Table]]></title>
      <url>https://quasar-framework.org/components/datatable.html</url>
      <content type="html"><![CDATA[<p>QTable is a Component that allows you to display data in a tabular manner. Features:</p>
<ul>
<li>Filtering</li>
<li>Sorting</li>
<li>Single / Multiple rows selection with custom selection actions</li>
<li>Pagination (including server-side if required)</li>
<li>Total customization of rows and cells through scoped slots</li>
<li>Ability to add additional row(s) at top or bottom of data rows</li>
<li>Column picker (through QTableColumns component described in one of the sections)</li>
<li>Custom top and/or bottom Table controls</li>
<li>Responsive design (“dense” mode for narrow windows)<input type="hidden" data-fullpage-demo="grouping/table/table-features" data-source="grouping/table">

</li>
</ul>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [</span><br><span class="line">    <span class="string">'QTable'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pick only what you are using from:</span></span><br><span class="line">    <span class="string">'QTh'</span>,</span><br><span class="line">    <span class="string">'QTr'</span>,</span><br><span class="line">    <span class="string">'QTd'</span>,</span><br><span class="line">    <span class="string">'QTableColumns'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>This is the most basic QTable:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-table</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">"Table Title"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:data</span>=<span class="string">"tableData"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:columns</span>=<span class="string">"columns"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">row-key</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span></span><br><span class="line"><span class="undefined">    columns: [</span></span><br><span class="line"><span class="undefined">      &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">'desc'</span>,</span></span><br><span class="line"><span class="javascript">        required: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        label: <span class="string">'Dessert (100g serving)'</span>,</span></span><br><span class="line"><span class="javascript">        align: <span class="string">'left'</span>,</span></span><br><span class="line"><span class="javascript">        field: <span class="string">'name'</span>,</span></span><br><span class="line"><span class="javascript">        sortable: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        classes: <span class="string">'my-class'</span>,</span></span><br><span class="line"><span class="javascript">        style: <span class="string">'width: 500px'</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      ...</span></span><br><span class="line"><span class="undefined">    ],</span></span><br><span class="line"><span class="undefined">    tableData: [</span></span><br><span class="line"><span class="undefined">      &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">'Frozen Yogurt'</span>,</span></span><br><span class="line"><span class="undefined">        calories: 159,</span></span><br><span class="line"><span class="undefined">        fat: 6.0,</span></span><br><span class="line"><span class="undefined">        carbs: 24,</span></span><br><span class="line"><span class="undefined">        protein: 4.0,</span></span><br><span class="line"><span class="undefined">        sodium: 87,</span></span><br><span class="line"><span class="javascript">        calcium: <span class="string">'14%'</span>,</span></span><br><span class="line"><span class="javascript">        iron: <span class="string">'1%'</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      ...</span></span><br><span class="line"><span class="undefined">    ]</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Internationalization"><a href="#Internationalization" class="headerlink" title="Internationalization"></a>Internationalization</h2><p>The default values of the different QTable labels are taken care of by default through <a href="/components/internationalization.html">Quasar I18n</a>. If your desired language pack is missing, please provide a PR for it.</p>
<h2 id="QTable-Vue-Properties"><a href="#QTable-Vue-Properties" class="headerlink" title="QTable Vue Properties"></a>QTable Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>grid</code></td>
<td>Boolean</td>
<td>(v0.17+) Use “grid mode”. See example below.</td>
</tr>
<tr>
<td><code>data</code></td>
<td>Array of Objects</td>
<td>Data containing Array of rows to display.</td>
</tr>
<tr>
<td><code>columns</code></td>
<td>Array of Objects</td>
<td>(<strong>Required</strong>) Defining each column’s properties.</td>
</tr>
<tr>
<td><code>row-key</code></td>
<td>String</td>
<td>(<strong>Required</strong>) Property name of each row defining a unique <strong>data</strong> key for the respective rows.</td>
</tr>
<tr>
<td><code>pagination</code></td>
<td>Object</td>
<td><strong>Use with .sync</strong>. Control of the pagination and sorting. Can enable Table “server-mode” by containing <code>rowsNumber</code> property. See next sections for details.</td>
</tr>
<tr>
<td><code>rows-per-page-options</code></td>
<td>Array</td>
<td>Array of Numbers representing options for user to select how many rows per page should be shown. Example: ‘[3, 5, 7, 0]’. Notice value 0 means “All” and empty array hides the selection.</td>
</tr>
<tr>
<td><code>selection</code></td>
<td>String</td>
<td>Set selection mode. One of ‘single’, ‘multiple’ or (default) ‘none’.</td>
</tr>
<tr>
<td><code>selected</code></td>
<td>Array</td>
<td><strong>Use with .sync</strong>. Array of unique keys for selected row(s).</td>
</tr>
<tr>
<td><code>visible-columns</code></td>
<td>Array</td>
<td>Array of Strings containing the ‘name’ column property value of the visible columns.</td>
</tr>
<tr>
<td><code>loading</code></td>
<td>Boolean</td>
<td>Show a background process is in progress (like fetching data and so on).</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>Color of the default Table controls (pagination, checkboxes, …).</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>When using Table on a dark background.</td>
</tr>
<tr>
<td><code>dense</code></td>
<td>Boolean</td>
<td>Dense Table, when you want to display more data using the same real estate on window. Gets activated by default on narrow windows.</td>
</tr>
<tr>
<td><code>title</code></td>
<td>String</td>
<td>Title of Table.</td>
</tr>
<tr>
<td><code>hide-header</code></td>
<td>Boolean</td>
<td>Hide Table header.</td>
</tr>
<tr>
<td><code>hide-bottom</code></td>
<td>Boolean</td>
<td>Hide Table bottom (usually containing pagination controls).</td>
</tr>
<tr>
<td><code>separator</code></td>
<td>String</td>
<td>Sets separator for rows/columns/cell. One of ‘horizontal’, ‘vertical’, ‘cell’, ‘none’.</td>
</tr>
<tr>
<td><code>table-style</code></td>
<td>String/Array/Object</td>
<td>Style for the <code>&lt;table&gt;</code> tag itself.</td>
</tr>
<tr>
<td><code>table-class</code></td>
<td>String/Array/Object</td>
<td>Classes for the <code>&lt;table&gt;</code> tag itself.</td>
</tr>
<tr>
<td><code>filter</code></td>
<td>String</td>
<td>Filter String for Table used by <code>filter-method()</code>.</td>
</tr>
<tr>
<td><code>filter-method</code></td>
<td>Function</td>
<td>When you want a custom filtering method. See next sections for details.</td>
</tr>
<tr>
<td><code>sort-method</code></td>
<td>Function</td>
<td>When you want a custom filtering method. See next sections for details.</td>
</tr>
<tr>
<td><code>binary-state-sort</code></td>
<td>Boolean</td>
<td>(v0.17.11+) By default, sorting a column has 3 states (no sort, ascending, descending). By using this property it only allows 2 states (ascending, descending).</td>
</tr>
</tbody>
</table>
<p>Label properties are by default defined in Quasar’s i18n, but you can override them:</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>no-data-label</code></td>
<td>String</td>
<td>Message to display when no rows are available.</td>
</tr>
<tr>
<td><code>no-results-label</code></td>
<td>String</td>
<td>Message to display when no rows match the filter.</td>
</tr>
<tr>
<td><code>loading-label</code></td>
<td>String</td>
<td>Message to display when Table currently has no rows but is in the process of fetching them.</td>
</tr>
<tr>
<td><code>selected-rows-label(rowsNumber)</code></td>
<td>Function</td>
<td>Function that returns a message (String) to display how many rows are selected. Takes a Number parameter which is the actual rows number that are selected.</td>
</tr>
<tr>
<td><code>rows-per-page-label</code></td>
<td>String</td>
<td>Override ‘Rows per page:’ message.</td>
</tr>
<tr>
<td><code>pagination-label(start,end,total)</code></td>
<td>Function</td>
<td>Override default ‘x-y of z’ pagination label.</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>IMPORTANT</strong><br>Initial sorted column, sorting direction &amp; page is configured through the <code>pagination</code> prop. Check the Pagination section below.</p>
</blockquote>
<h2 id="QTableColumns-Vue-Properties"><a href="#QTableColumns-Vue-Properties" class="headerlink" title="QTableColumns Vue Properties"></a>QTableColumns Vue Properties</h2><p>Supports <code>v-model</code> which should be the String for single selection and Array for multiple selection.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>columns</code></td>
<td>Array of Objects</td>
<td>(<strong>Required</strong>) Defining each column’s properties.</td>
</tr>
<tr>
<td><code>label</code></td>
<td>String</td>
<td>Overrides text displayed in input frame. See “Working with Display Value” section below.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Is it rendered on a dark background?</td>
</tr>
</tbody>
</table>
<h3 id="Defining-the-Columns"><a href="#Defining-the-Columns" class="headerlink" title="Defining the Columns"></a>Defining the Columns</h3><p>Let’s take an example of configuring the <code>columns</code> property. Let’s assume we are telling QTable that row-key is ‘name’.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">columns: <span class="comment">/* array of Objects */</span> [</span><br><span class="line">  <span class="comment">// column Object definition</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// unique id (used by row-key, pagination.sortBy, ...)</span></span><br><span class="line">    name: <span class="string">'desc'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// label for header</span></span><br><span class="line">    label: <span class="string">'Dessert (100g serving)'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// row Object property to determine value for this column</span></span><br><span class="line">    field: <span class="string">'name'</span>,</span><br><span class="line">    <span class="comment">// OR field: row =&gt; row.some.nested.prop</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// (optional) if we use visible-columns, this col will always be visible</span></span><br><span class="line">    required: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// (optional) alignment</span></span><br><span class="line">    align: <span class="string">'left'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// (optional) tell QTable you want this column sortable</span></span><br><span class="line">    sortable: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// (optional) compare function if you have</span></span><br><span class="line">    <span class="comment">// some custom data or want a specific way to compare two rows</span></span><br><span class="line">    sort: <span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="built_in">parseInt</span>(a, <span class="number">10</span>) - <span class="built_in">parseInt</span>(b, <span class="number">10</span>)</span><br><span class="line">    <span class="comment">// function return value:</span></span><br><span class="line">    <span class="comment">//   * is less than 0 then sort a to an index lower than b, i.e. a comes first</span></span><br><span class="line">    <span class="comment">//   * is 0 then leave a and b unchanged with respect to each other, but sorted with respect to all different elements</span></span><br><span class="line">    <span class="comment">//   * is greater than 0 then sort b to an index lower than a, i.e. b comes first</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// (optional) you can format the data with a function</span></span><br><span class="line">    format: <span class="function"><span class="params">val</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;val&#125;</span>%`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// v0.17.9+; if using scoped slots, apply this yourself instead</span></span><br><span class="line">    style: <span class="string">'width: 500px'</span>,</span><br><span class="line">    classes: <span class="string">'my-special-class'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'calories'</span>, <span class="attr">label</span>: <span class="string">'Calories'</span>, <span class="attr">field</span>: <span class="string">'calories'</span>, <span class="attr">sortable</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'fat'</span>, <span class="attr">label</span>: <span class="string">'Fat (g)'</span>, <span class="attr">field</span>: <span class="string">'fat'</span>, <span class="attr">sortable</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'carbs'</span>, <span class="attr">label</span>: <span class="string">'Carbs (g)'</span>, <span class="attr">field</span>: <span class="string">'carbs'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'protein'</span>, <span class="attr">label</span>: <span class="string">'Protein (g)'</span>, <span class="attr">field</span>: <span class="string">'protein'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'sodium'</span>, <span class="attr">label</span>: <span class="string">'Sodium (mg)'</span>, <span class="attr">field</span>: <span class="string">'sodium'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'calcium'</span>, <span class="attr">label</span>: <span class="string">'Calcium (%)'</span>, <span class="attr">field</span>: <span class="string">'calcium'</span>, <span class="attr">sortable</span>: <span class="literal">true</span>, <span class="attr">sort</span>: <span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="built_in">parseInt</span>(a, <span class="number">10</span>) - <span class="built_in">parseInt</span>(b, <span class="number">10</span>) &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'iron'</span>, <span class="attr">label</span>: <span class="string">'Iron (%)'</span>, <span class="attr">field</span>: <span class="string">'iron'</span>, <span class="attr">sortable</span>: <span class="literal">true</span>, <span class="attr">sort</span>: <span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="built_in">parseInt</span>(a, <span class="number">10</span>) - <span class="built_in">parseInt</span>(b, <span class="number">10</span>) &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>IMPORTANT</strong><br>If your data is nested and you need to fill a column with a certain value in the nested objects, you can grab a property value within the nested objects like so: <code>field: obj =&gt; obj.some.nested.prop</code></p>
</blockquote>
<h3 id="Pagination"><a href="#Pagination" class="headerlink" title="Pagination"></a>Pagination</h3><p>When you want to control Table’s pagination, use <code>pagination</code> prop, but don’t forget to add the <code>.sync</code> modifier:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-table</span> <span class="attr">:pagination.sync</span>=<span class="string">"pagination"</span> <span class="attr">...</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span> @<span class="attr">click</span>=<span class="string">"pagination.page++"</span> <span class="attr">label</span>=<span class="string">"Next page"</span> <span class="attr">...</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span></span><br><span class="line"><span class="undefined">    pagination: &#123;</span></span><br><span class="line"><span class="javascript">      sortBy: <span class="literal">null</span>, <span class="comment">// String, column "name" property value</span></span></span><br><span class="line"><span class="javascript">      descending: <span class="literal">false</span>,</span></span><br><span class="line"><span class="undefined">      page: 1,</span></span><br><span class="line"><span class="javascript">      rowsPerPage: <span class="number">5</span> <span class="comment">// current rows per page being displayed</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>When pagination has a property named <code>rowsNumber</code>, then this means that you’ll be configuring Table for server-side pagination (&amp; sorting &amp; filtering).</p>
</blockquote>
<h3 id="Custom-Filter-Method"><a href="#Custom-Filter-Method" class="headerlink" title="Custom Filter Method"></a>Custom Filter Method</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-table</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:filter</span>=<span class="string">"terms"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:filter-method</span>=<span class="string">"myFilter"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">...</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">filter</span>: <span class="string">''</span> &#125;),</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// this is actually the default filtering method:</span></span></span><br><span class="line"><span class="undefined">    myFilter (rows, terms, cols, cellValue) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> lowerTerms = terms ? terms.toLowerCase() : <span class="string">''</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> rows.filter(</span></span><br><span class="line"><span class="javascript">        row =&gt; cols.some(<span class="function"><span class="params">col</span> =&gt;</span> (cellValue(col, row) + <span class="string">''</span>).toLowerCase().indexOf(lowerTerms) !== <span class="number">-1</span>)</span></span><br><span class="line"><span class="undefined">      )</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Custom-Sort-Method"><a href="#Custom-Sort-Method" class="headerlink" title="Custom Sort Method"></a>Custom Sort Method</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-table</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:sort-method</span>=<span class="string">"mySort"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">...</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// this is actually the default filtering method:</span></span></span><br><span class="line"><span class="undefined">    mySort (data, sortBy, descending) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> col = <span class="keyword">this</span>.computedCols.find(<span class="function"><span class="params">def</span> =&gt;</span> def.name === sortBy)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (col === <span class="literal">null</span> || col.field === <span class="keyword">void</span> <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> data</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span></span></span><br><span class="line"><span class="undefined">        dir = descending ? -1 : 1,</span></span><br><span class="line"><span class="javascript">        val = <span class="keyword">typeof</span> col.field === <span class="string">'function'</span></span></span><br><span class="line"><span class="javascript">          ? <span class="function"><span class="params">v</span> =&gt;</span> col.field(v)</span></span><br><span class="line"><span class="javascript">          : <span class="function"><span class="params">v</span> =&gt;</span> v[col.field]</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> data.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span></span></span><br><span class="line"><span class="undefined">          A = val(a),</span></span><br><span class="line"><span class="undefined">          B = val(b)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (A === <span class="literal">null</span> || A === <span class="keyword">void</span> <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="number">-1</span> * dir</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (B === <span class="literal">null</span> || B === <span class="keyword">void</span> <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="number">1</span> * dir</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (col.sort) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> col.sort(A, B) * dir</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (isNumber(A) &amp;&amp; isNumber(B)) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> (A - B) * dir</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (isDate(A) &amp;&amp; isDate(B)) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> sortDate(A, B) * dir</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="keyword">typeof</span> A === <span class="string">'boolean'</span> &amp;&amp; <span class="keyword">typeof</span> B === <span class="string">'boolean'</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> (a - b) * dir</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        [A, B] = [A, B].map(<span class="function"><span class="params">s</span> =&gt;</span> (s + <span class="string">''</span>).toLowerCase())</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> A &lt; B</span></span><br><span class="line"><span class="undefined">          ? -1 * dir</span></span><br><span class="line"><span class="undefined">          : (A === B ? 0 : dir)</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Popup-Edit"><a href="#Popup-Edit" class="headerlink" title="Popup Edit"></a>Popup Edit</h3><p><em>Quasar v0.17.10+</em></p>
<p>Below is an example with the user being able to edit “in place” with the help of <a href="/components/popup-edit.html">QPopupEdit</a> component. Please note that we are using the “body” scoped slot. <strong>QPopupEdit won’t work with cell scoped slots.</strong><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-table</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:data</span>=<span class="string">"data"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:columns</span>=<span class="string">"columns"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:filter</span>=<span class="string">"filter"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:title</span>=<span class="string">"title"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">row-key</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tr</span> <span class="attr">slot</span>=<span class="string">"body"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"desc"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      &#123;&#123; props.row.name &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">q-popup-edit</span> <span class="attr">v-model</span>=<span class="string">"props.row.name"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-field</span> <span class="attr">count</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"props.row.name"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-popup-edit</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"calories"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      &#123;&#123; props.row.calories &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">q-popup-edit</span> <span class="attr">v-model</span>=<span class="string">"props.row.calories"</span> <span class="attr">title</span>=<span class="string">"Update calories"</span> <span class="attr">buttons</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model</span>=<span class="string">"props.row.calories"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-popup-edit</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"fat"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span>&#123;&#123; props.row.fat &#125;&#125;<span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"carbs"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span>&#123;&#123; props.row.carbs &#125;&#125;<span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"protein"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span>&#123;&#123; props.row.protein &#125;&#125;<span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"sodium"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span>&#123;&#123; props.row.sodium &#125;&#125;<span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"calcium"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span>&#123;&#123; props.row.calcium &#125;&#125;<span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"iron"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span>&#123;&#123; props.row.iron &#125;&#125;<span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-table</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="QTable-Vue-Events"><a href="#QTable-Vue-Events" class="headerlink" title="QTable Vue Events"></a>QTable Vue Events</h3><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@request</code></td>
<td>Object { pagination, filter, getCellValue }</td>
<td>Gets triggered when using server-side pagination (<code>pagination</code> property Object contains <code>rowsNumber</code>)</td>
</tr>
<tr>
<td><code>@fullscreen</code></td>
<td>Boolean (<code>true</code>/<code>false</code>)</td>
<td>(v0.17.7+) Emitted when Fullscreen state gets toggled.</td>
</tr>
</tbody>
</table>
<h2 id="Server-side-Pagination-Filtering-Sorting"><a href="#Server-side-Pagination-Filtering-Sorting" class="headerlink" title="Server-side Pagination, Filtering, Sorting"></a>Server-side Pagination, Filtering, Sorting</h2><p>When your database contains a big number of rows for a Table, obviously it’s not feasible to load them all for multiple reasons (memory, UI rendering performance, …). Instead, you can load only a Table page. Whenever the user wants to navigate to another Table page, or wants to sort by a column or wants to filter the Table, a request is sent to the server to fetch the partial data.</p>
<ol>
<li><p>First step to enable this behavior is to specify <code>pagination</code> prop, which MUST contain <code>rowsNumber</code>. QTable needs to know the total number of rows available in order to correctly render the pagination links.</p>
</li>
<li><p>Second step is to listen for <code>@request</code> event on QTable. This event is triggered when data needs to be fetched from the server because either page number or sorting or filtering changed.</p>
</li>
<li><p>It’s best that you also specify the <code>loading</code> prop in order to notify the user that a background process is in progress.</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-table</span></span></span><br><span class="line"><span class="tag">    <span class="attr">ref</span>=<span class="string">"table"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:data</span>=<span class="string">"serverData"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:columns</span>=<span class="string">"columns"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:filter</span>=<span class="string">"filter"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">row-key</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:pagination.sync</span>=<span class="string">"serverPagination"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:loading</span>=<span class="string">"loading"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">request</span>=<span class="string">"request"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"top-right"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-search</span> <span class="attr">hide-underline</span> <span class="attr">v-model</span>=<span class="string">"filter"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> tableData <span class="keyword">from</span> <span class="string">'assets/table-data'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      filter: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">      loading: <span class="literal">false</span>,</span></span><br><span class="line"><span class="undefined">      serverPagination: &#123;</span></span><br><span class="line"><span class="undefined">        page: 1,</span></span><br><span class="line"><span class="javascript">        rowsNumber: <span class="number">10</span> <span class="comment">// specifying this determines pagination is server-side</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      serverData: [],</span></span><br><span class="line"><span class="undefined">      columns: [</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          name: <span class="string">'desc'</span>,</span></span><br><span class="line"><span class="javascript">          required: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">          label: <span class="string">'Dessert (100g serving)'</span>,</span></span><br><span class="line"><span class="javascript">          align: <span class="string">'left'</span>,</span></span><br><span class="line"><span class="javascript">          field: <span class="string">'name'</span>,</span></span><br><span class="line"><span class="javascript">          sortable: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">name</span>: <span class="string">'calories'</span>, <span class="attr">label</span>: <span class="string">'Calories'</span>, <span class="attr">field</span>: <span class="string">'calories'</span>, <span class="attr">sortable</span>: <span class="literal">true</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">name</span>: <span class="string">'fat'</span>, <span class="attr">label</span>: <span class="string">'Fat (g)'</span>, <span class="attr">field</span>: <span class="string">'fat'</span>, <span class="attr">sortable</span>: <span class="literal">true</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">name</span>: <span class="string">'carbs'</span>, <span class="attr">label</span>: <span class="string">'Carbs (g)'</span>, <span class="attr">field</span>: <span class="string">'carbs'</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">name</span>: <span class="string">'protein'</span>, <span class="attr">label</span>: <span class="string">'Protein (g)'</span>, <span class="attr">field</span>: <span class="string">'protein'</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">name</span>: <span class="string">'sodium'</span>, <span class="attr">label</span>: <span class="string">'Sodium (mg)'</span>, <span class="attr">field</span>: <span class="string">'sodium'</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">name</span>: <span class="string">'calcium'</span>, <span class="attr">label</span>: <span class="string">'Calcium (%)'</span>, <span class="attr">field</span>: <span class="string">'calcium'</span>, <span class="attr">sortable</span>: <span class="literal">true</span>, <span class="attr">sort</span>: <span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="built_in">parseInt</span>(a, <span class="number">10</span>) - <span class="built_in">parseInt</span>(b, <span class="number">10</span>) &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">name</span>: <span class="string">'iron'</span>, <span class="attr">label</span>: <span class="string">'Iron (%)'</span>, <span class="attr">field</span>: <span class="string">'iron'</span>, <span class="attr">sortable</span>: <span class="literal">true</span>, <span class="attr">sort</span>: <span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="built_in">parseInt</span>(a, <span class="number">10</span>) - <span class="built_in">parseInt</span>(b, <span class="number">10</span>) &#125;</span></span><br><span class="line"><span class="undefined">      ]</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    request (&#123; pagination, filter &#125;) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// we set QTable to "loading" state</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.loading = <span class="literal">true</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// we do the server data fetch, based on pagination and filter received</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// (using Axios here, but can be anything; parameters vary based on backend implementation)</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      axios</span></span><br><span class="line"><span class="javascript">      .get(<span class="string">`/data/<span class="subst">$&#123;pagination.page&#125;</span>?sortBy=<span class="subst">$&#123;pagination.sortBy&#125;</span>&amp;descending=<span class="subst">$&#123;pagination.descending&#125;</span>&amp;filter=<span class="subst">$&#123;filter&#125;</span>`</span>)</span></span><br><span class="line"><span class="javascript">      .then(<span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// updating pagination to reflect in the UI</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.serverPagination = pagination</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// we also set (or update) rowsNumber</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.serverPagination.rowsNumber = data.rowsNumber</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// then we update the rows with the fetched ones</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.serverData = data.rows</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// finally we tell QTable to exit the "loading" state</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.loading = <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="javascript">      .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// there's an error... do SOMETHING</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// we tell QTable to exit the "loading" state</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.loading = <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  mounted () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// once mounted, we need to trigger the initial server data fetch</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.request(&#123;</span></span><br><span class="line"><span class="javascript">      pagination: <span class="keyword">this</span>.serverPagination,</span></span><br><span class="line"><span class="javascript">      filter: <span class="keyword">this</span>.filter</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Examples-Features"><a href="#Examples-Features" class="headerlink" title="Examples - Features"></a>Examples - Features</h2><h3 id="Filter-Column-selection-Separators-Toggle-Fullscreen"><a href="#Filter-Column-selection-Separators-Toggle-Fullscreen" class="headerlink" title="Filter, Column selection, Separators, Toggle Fullscreen"></a>Filter, Column selection, Separators, Toggle Fullscreen</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-table</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:data</span>=<span class="string">"tableData"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:columns</span>=<span class="string">"columns"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:filter</span>=<span class="string">"filter"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:visible-columns</span>=<span class="string">"visibleColumns"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:separator</span>=<span class="string">"separator"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">row-key</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"top-left"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-search</span></span></span><br><span class="line"><span class="tag">        <span class="attr">hide-underline</span></span></span><br><span class="line"><span class="tag">        <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">"filter"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"col-6"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"top-right"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-table-columns</span></span></span><br><span class="line"><span class="tag">        <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"q-mr-sm"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">"visibleColumns"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:columns</span>=<span class="string">"columns"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">        <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">"separator"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:options</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">          &#123; label: 'Horizontal', value: 'horizontal' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">          &#123; label: 'Vertical', value: 'vertical' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">          &#123; label: 'Cell', value: 'cell' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">          &#123; label: 'None', value: 'none' &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">        ]"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">hide-underline</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">        <span class="attr">flat</span> <span class="attr">round</span> <span class="attr">dense</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:icon</span>=<span class="string">"props.inFullscreen ? 'fullscreen_exit' : 'fullscreen'"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">"props.toggleFullscreen"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span></span><br><span class="line"><span class="undefined">    tableData: [ ... ],</span></span><br><span class="line"><span class="undefined">    columns: [ ... ],</span></span><br><span class="line"><span class="javascript">    visibleColumns: [<span class="string">'desc'</span>, <span class="string">'fat'</span>, <span class="string">'carbs'</span>, <span class="string">'protein'</span>, <span class="string">'sodium'</span>, <span class="string">'calcium'</span>, <span class="string">'iron'</span>],</span></span><br><span class="line"><span class="javascript">    separator: <span class="string">'horizontal'</span>,</span></span><br><span class="line"><span class="javascript">    filter: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Grid-Mode"><a href="#Grid-Mode" class="headerlink" title="Grid Mode"></a>Grid Mode</h3><p><em>Requires Quasar v0.17+</em></p>
<p>Notice we’ll be using a Vue scoped slot called <code>item</code> to define how each record (the equivalent of a row in non-grid mode) should look. This allows you total freedom.</p>
<p>The code below is the equivalent of the demo. Feel free to tweak however you want as all the QTable features are available in grid mode too. In the example below, we hide the header, but you can show it should you want – the user will be able to sort the data by columns etc.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-table</span></span></span><br><span class="line"><span class="tag">  <span class="attr">grid</span></span></span><br><span class="line"><span class="tag">  <span class="attr">hide-header</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:data</span>=<span class="string">"data"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:columns</span>=<span class="string">"columns"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:filter</span>=<span class="string">"filter"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:selection</span>=<span class="string">"selection"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:selected.sync</span>=<span class="string">"selected"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:visible-columns</span>=<span class="string">"visibleColumns"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">row-key</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"top-right"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-search</span> <span class="attr">hide-underline</span> <span class="attr">v-model</span>=<span class="string">"filter"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">    <span class="attr">slot</span>=<span class="string">"item"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">slot-scope</span>=<span class="string">"props"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"q-pa-xs col-xs-12 col-sm-6 col-md-4 col-lg-3 transition-generic"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:style</span>=<span class="string">"props.selected ? 'transform: scale(0.95);' : ''"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-card</span> <span class="attr">class</span>=<span class="string">"transition-generic"</span> <span class="attr">:class</span>=<span class="string">"props.selected ? 'bg-grey-2' : ''"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-card-title</span> <span class="attr">class</span>=<span class="string">"relative-position"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"props.selected"</span> <span class="attr">:label</span>=<span class="string">"props.row.name"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-card-title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-card-separator</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-card-main</span> <span class="attr">class</span>=<span class="string">"q-pa-none"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-list</span> <span class="attr">no-border</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">v-for</span>=<span class="string">"col in props.cols.filter(col =&gt; col.name !== 'desc')"</span> <span class="attr">:key</span>=<span class="string">"col.name"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>&#123;&#123; col.label &#125;&#125;<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">q-item-tile</span>&gt;</span>&#123;&#123; col.value &#125;&#125;<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-card-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Row-selection-Extra-top-bottom-rows-Loading-state"><a href="#Row-selection-Extra-top-bottom-rows-Loading-state" class="headerlink" title="Row selection, Extra top/bottom rows, Loading state"></a>Row selection, Extra top/bottom rows, Loading state</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-table</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:data</span>=<span class="string">"tableData"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:columns</span>=<span class="string">"columns"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:selection</span>=<span class="string">"selection"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:selected.sync</span>=<span class="string">"selected"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:loading</span>=<span class="string">"loading"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">row-key</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:class</span>=<span class="string">"tableClass"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-tr</span> <span class="attr">slot</span>=<span class="string">"top-row"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">colspan</span>=<span class="string">"100%"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Extra top row<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-tr</span> <span class="attr">slot</span>=<span class="string">"bottom-row"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">colspan</span>=<span class="string">"100%"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Extra bottom row<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"top-left"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">"selection"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">stack-label</span>=<span class="string">"Selection"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">hide-underline</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:options</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">          &#123; label: 'Single', value: 'single' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">          &#123; label: 'Multiple', value: 'multiple' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">          &#123; label: 'None', value: 'none' &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">        ]"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"min-width: 100px"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"top-right"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-toggle</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">"loading"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">label</span>=<span class="string">"Loading state"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"q-mb-sm"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-toggle</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">"dark"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">label</span>=<span class="string">"On dark background"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span></span><br><span class="line"><span class="undefined">    tableData: [ ... ],</span></span><br><span class="line"><span class="undefined">    columns: [ ... ],</span></span><br><span class="line"><span class="javascript">    loading: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">    dark: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">    selection: <span class="string">'multiple'</span>,</span></span><br><span class="line"><span class="undefined">    selected: [</span></span><br><span class="line"><span class="javascript">      <span class="comment">// initial selection; notice we specify the</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// row-key prop of the selected row</span></span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">name</span>: <span class="string">'Ice cream sandwich'</span> &#125;</span></span><br><span class="line"><span class="undefined">    ]</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Controlling-pagination-custom-controls-amp-watching-for-page-navigation"><a href="#Controlling-pagination-custom-controls-amp-watching-for-page-navigation" class="headerlink" title="Controlling pagination, custom controls &amp; watching for page navigation"></a>Controlling pagination, custom controls &amp; watching for page navigation</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-table</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:data</span>=<span class="string">"tableData"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:columns</span>=<span class="string">"columns"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:pagination.sync</span>=<span class="string">"paginationControl"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">row-key</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"pagination"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span> <span class="attr">class</span>=<span class="string">"row flex-center q-py-sm"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">        <span class="attr">round</span> <span class="attr">dense</span> <span class="attr">size</span>=<span class="string">"sm"</span> <span class="attr">icon</span>=<span class="string">"undo"</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">class</span>=<span class="string">"q-mr-sm"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:disable</span>=<span class="string">"props.isFirstPage"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">"props.prevPage"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-mr-sm"</span> <span class="attr">style</span>=<span class="string">"font-size: small"</span>&gt;</span></span><br><span class="line">        Page &#123;&#123; props.pagination.page &#125;&#125; / &#123;&#123; props.pagesNumber &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">        <span class="attr">round</span> <span class="attr">dense</span> <span class="attr">size</span>=<span class="string">"sm"</span> <span class="attr">icon</span>=<span class="string">"redo"</span> <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:disable</span>=<span class="string">"props.isLastPage"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">"props.nextPage"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span></span><br><span class="line"><span class="undefined">    tableData: [ ... ],</span></span><br><span class="line"><span class="undefined">    columns: [ ... ],</span></span><br><span class="line"><span class="undefined">    paginationControl: &#123; rowsPerPage: 3, page: 1 &#125;,</span></span><br><span class="line"><span class="undefined">  &#125;),</span></span><br><span class="line"><span class="undefined">  watch: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="string">'paginationControl.page'</span> (page) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$q.notify(&#123;</span></span><br><span class="line"><span class="javascript">        color: <span class="string">'secondary'</span>,</span></span><br><span class="line"><span class="javascript">        message: <span class="string">`Navigated to page <span class="subst">$&#123;page&#125;</span>`</span>,</span></span><br><span class="line"><span class="undefined">        actions: page &lt; 4</span></span><br><span class="line"><span class="undefined">          ? [&#123;</span></span><br><span class="line"><span class="javascript">            label: <span class="string">'Go to last page'</span>,</span></span><br><span class="line"><span class="javascript">            handler: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">this</span>.paginationControl.page = <span class="number">4</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">          &#125;]</span></span><br><span class="line"><span class="javascript">          : <span class="literal">null</span></span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Row-selection-actions"><a href="#Row-selection-actions" class="headerlink" title="Row selection actions"></a>Row selection actions</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-table</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:data</span>=<span class="string">"tableData"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:columns</span>=<span class="string">"columns"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">selection</span>=<span class="string">"multiple"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:selected.sync</span>=<span class="string">"selectedSecond"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">row-key</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">title</span>=<span class="string">"Select some rows"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- gets displayed only when there's at least one row selected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"top-selection"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">flat</span> <span class="attr">label</span>=<span class="string">"Action 1"</span> <span class="attr">class</span>=<span class="string">"q-mr-sm"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">flat</span> <span class="attr">label</span>=<span class="string">"Action 2"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"negative"</span> <span class="attr">flat</span> <span class="attr">round</span> <span class="attr">delete</span> <span class="attr">icon</span>=<span class="string">"delete"</span> @<span class="attr">click</span>=<span class="string">"deleteRow"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Hide-header-amp-bottom"><a href="#Hide-header-amp-bottom" class="headerlink" title="Hide header &amp; bottom"></a>Hide header &amp; bottom</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-table</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:data</span>=<span class="string">"tableData"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:columns</span>=<span class="string">"columns"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">row-key</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">hide-header</span></span></span><br><span class="line"><span class="tag">  <span class="attr">hide-bottom</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Display-a-nested-property-or-format-a-column"><a href="#Display-a-nested-property-or-format-a-column" class="headerlink" title="Display a nested property or format a column"></a>Display a nested property or format a column</h3><p>You can display the value of a nested property. For example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">columns: [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'author'</span>,</span><br><span class="line">    label: <span class="string">'Author'</span>,</span><br><span class="line">    field: <span class="function"><span class="params">row</span> =&gt;</span> row.author.name</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>Then you can go even further and format the value for a specific column in your column definition. Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">columns: [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'author'</span>,</span><br><span class="line">    label: <span class="string">'Author'</span>,</span><br><span class="line">    field: <span class="function"><span class="params">row</span> =&gt;</span> row.author.name,</span><br><span class="line">    format: <span class="function"><span class="params">val</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;val&#125;</span>%`</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>The value returned by <code>field</code> is used for sorting rows, while the <code>format</code> value is specifically meant for displaying a value to the user. This is very useful for cases where you need to sort by the initial value of your data. You can (if you want to), however, avoid the <code>format</code> and use custom scoped slots (row, column cell) for defining how Quasar should format the cell(s).</p>
<h2 id="Examples-Customization"><a href="#Examples-Customization" class="headerlink" title="Examples - Customization"></a>Examples - Customization</h2><h3 id="Custom-table-top-amp-bottom"><a href="#Custom-table-top-amp-bottom" class="headerlink" title="Custom table top &amp; bottom"></a>Custom table top &amp; bottom</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-table</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:data</span>=<span class="string">"tableData"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:columns</span>=<span class="string">"columns"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">row-key</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"top"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span> <span class="attr">class</span>=<span class="string">"row flex-center fit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"~assets/quasar-logo-full.svg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"bottom"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span> <span class="attr">class</span>=<span class="string">"row flex-center fit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">      <span class="attr">round</span> <span class="attr">dense</span> <span class="attr">icon</span>=<span class="string">"chevron_left"</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">class</span>=<span class="string">"q-mr-md"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:disable</span>=<span class="string">"props.isFirstPage"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">"props.prevPage"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">      <span class="attr">round</span> <span class="attr">dense</span> <span class="attr">icon</span>=<span class="string">"chevron_right"</span> <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:disable</span>=<span class="string">"props.isLastPage"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">"props.nextPage"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Custom-column-cell"><a href="#Custom-column-cell" class="headerlink" title="Custom column cell"></a>Custom column cell</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-table</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:data</span>=<span class="string">"tableData"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:columns</span>=<span class="string">"columns"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">row-key</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- slot name syntax: body-cell-&lt;column_name&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">slot</span>=<span class="string">"body-cell-desc"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">small</span> <span class="attr">color</span>=<span class="string">"secondary"</span>&gt;</span>&#123;&#123; props.value &#125;&#125;<span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Custom-rows"><a href="#Custom-rows" class="headerlink" title="Custom rows"></a>Custom rows</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-table</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:data</span>=<span class="string">"tableData"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:columns</span>=<span class="string">"columns"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">row-key</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tr</span> <span class="attr">slot</span>=<span class="string">"body"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"desc"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text-italic"</span>&gt;</span>&#123;&#123; props.row.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-tooltip</span>&gt;</span>I'd like to eat "&#123;&#123; props.row.name &#125;&#125;"<span class="tag">&lt;/<span class="name">q-tooltip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"calories"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row items-center justify-between no-wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">size</span>=<span class="string">"sm"</span> <span class="attr">round</span> <span class="attr">dense</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">icon</span>=<span class="string">"remove"</span> @<span class="attr">click</span>=<span class="string">"props.row.calories--"</span> <span class="attr">class</span>=<span class="string">"q-mr-xs"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">size</span>=<span class="string">"sm"</span> <span class="attr">round</span> <span class="attr">dense</span> <span class="attr">color</span>=<span class="string">"tertiary"</span> <span class="attr">icon</span>=<span class="string">"add"</span> @<span class="attr">click</span>=<span class="string">"props.row.calories++"</span> <span class="attr">class</span>=<span class="string">"q-mr-sm"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; props.row.calories &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"fat"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span>&#123;&#123; props.row.fat &#125;&#125;<span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"carbs"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">small</span> <span class="attr">square</span> <span class="attr">color</span>=<span class="string">"amber"</span>&gt;</span>&#123;&#123; props.row.carbs &#125;&#125;<span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"protein"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span>&#123;&#123; props.row.protein &#125;&#125;<span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"sodium"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span>&#123;&#123; props.row.sodium &#125;&#125;<span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"calcium"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span>&#123;&#123; props.row.calcium &#125;&#125;<span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"iron"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      &#123;&#123; props.row.iron &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Alternative-custom-rows"><a href="#Alternative-custom-rows" class="headerlink" title="Alternative custom rows"></a>Alternative custom rows</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-table</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:data</span>=<span class="string">"tableData"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:columns</span>=<span class="string">"columns"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">title</span>=<span class="string">"Click on a row"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">dark</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"bg-black"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"amber"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">row-key</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tr</span> <span class="attr">slot</span>=<span class="string">"body"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span> <span class="attr">:props</span>=<span class="string">"props"</span> @<span class="attr">click.native</span>=<span class="string">"rowClick(props.row)"</span> <span class="attr">class</span>=<span class="string">"cursor-pointer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">v-for</span>=<span class="string">"col in props.cols"</span> <span class="attr">:key</span>=<span class="string">"col.name"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      # &#123;&#123; col.value &#125;&#125; #</span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Custom-header-has-tooltips"><a href="#Custom-header-has-tooltips" class="headerlink" title="Custom header (has tooltips)"></a>Custom header (has tooltips)</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-table</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:data</span>=<span class="string">"tableData"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:columns</span>=<span class="string">"columns"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">row-key</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">slot</span>=<span class="string">"header"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-th</span> <span class="attr">key</span>=<span class="string">"desc"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      Dessert</span><br><span class="line">      <span class="tag">&lt;<span class="name">q-tooltip</span>&gt;</span>Pick a desert<span class="tag">&lt;/<span class="name">q-tooltip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-th</span> <span class="attr">key</span>=<span class="string">"calories"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      Calories</span><br><span class="line">      <span class="tag">&lt;<span class="name">q-tooltip</span>&gt;</span>These are the calories<span class="tag">&lt;/<span class="name">q-tooltip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-th</span> <span class="attr">key</span>=<span class="string">"fat"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      Fat</span><br><span class="line">      <span class="tag">&lt;<span class="name">q-tooltip</span>&gt;</span>This is the fat<span class="tag">&lt;/<span class="name">q-tooltip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-th</span> <span class="attr">key</span>=<span class="string">"carbs"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      Carbs</span><br><span class="line">      <span class="tag">&lt;<span class="name">q-tooltip</span>&gt;</span>These are the carbohydrates<span class="tag">&lt;/<span class="name">q-tooltip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-th</span> <span class="attr">key</span>=<span class="string">"protein"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      Protein</span><br><span class="line">      <span class="tag">&lt;<span class="name">q-tooltip</span>&gt;</span>These are the proteins<span class="tag">&lt;/<span class="name">q-tooltip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-th</span> <span class="attr">key</span>=<span class="string">"sodium"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      Sodium</span><br><span class="line">      <span class="tag">&lt;<span class="name">q-tooltip</span>&gt;</span>This is the sodium<span class="tag">&lt;/<span class="name">q-tooltip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-th</span> <span class="attr">key</span>=<span class="string">"calcium"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      Calcium</span><br><span class="line">      <span class="tag">&lt;<span class="name">q-tooltip</span>&gt;</span>This is the calcium<span class="tag">&lt;/<span class="name">q-tooltip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-th</span> <span class="attr">key</span>=<span class="string">"iron"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      Iron</span><br><span class="line">      <span class="tag">&lt;<span class="name">q-tooltip</span>&gt;</span>This is the iron<span class="tag">&lt;/<span class="name">q-tooltip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Alternative-custom-header"><a href="#Alternative-custom-header" class="headerlink" title="Alternative custom header"></a>Alternative custom header</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-table</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:data</span>=<span class="string">"tableData"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:columns</span>=<span class="string">"columns"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">row-key</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tr</span> <span class="attr">slot</span>=<span class="string">"header"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-th</span> <span class="attr">v-for</span>=<span class="string">"col in props.cols"</span> <span class="attr">:key</span>=<span class="string">"col.name"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      # &#123;&#123; col.label &#125;&#125; #</span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Custom-header-amp-rows-with-selection-amp-expandable-rows"><a href="#Custom-header-amp-rows-with-selection-amp-expandable-rows" class="headerlink" title="Custom header &amp; rows with selection &amp; expandable rows"></a>Custom header &amp; rows with selection &amp; expandable rows</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-table</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:data</span>=<span class="string">"tableData"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:columns</span>=<span class="string">"columns"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">selection</span>=<span class="string">"multiple"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:selected.sync</span>=<span class="string">"selected"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">row-key</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tr</span> <span class="attr">slot</span>=<span class="string">"header"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-th</span> <span class="attr">auto-width</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-checkbox</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-if</span>=<span class="string">"props.multipleSelect"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">"props.selected"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">indeterminate-value</span>=<span class="string">"some"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-th</span> <span class="attr">v-for</span>=<span class="string">"col in props.cols"</span> <span class="attr">:key</span>=<span class="string">"col.name"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      &#123;&#123; col.label &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"body"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-tr</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">auto-width</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">v-model</span>=<span class="string">"props.selected"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"desc"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">v-model</span>=<span class="string">"props.expand"</span> <span class="attr">checked-icon</span>=<span class="string">"remove"</span> <span class="attr">unchecked-icon</span>=<span class="string">"add"</span> <span class="attr">class</span>=<span class="string">"q-mr-md"</span> /&gt;</span></span><br><span class="line">        &#123;&#123; props.row.name &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"calories"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span>&#123;&#123; props.row.calories &#125;&#125;<span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"fat"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span>&#123;&#123; props.row.fat &#125;&#125;<span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"carbs"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span>&#123;&#123; props.row.carbs &#125;&#125;<span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"protein"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span>&#123;&#123; props.row.protein &#125;&#125;<span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"sodium"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span>&#123;&#123; props.row.sodium &#125;&#125;<span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"calcium"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span>&#123;&#123; props.row.calcium &#125;&#125;<span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"iron"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">small</span> <span class="attr">square</span> <span class="attr">color</span>=<span class="string">"amber"</span>&gt;</span>&#123;&#123; props.row.iron &#125;&#125;<span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-tr</span> <span class="attr">v-show</span>=<span class="string">"props.expand"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">colspan</span>=<span class="string">"100%"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-left"</span>&gt;</span>This is expand slot for row above: &#123;&#123; props.row.name &#125;&#125;.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-table</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[DOM Utils]]></title>
      <url>https://quasar-framework.org/components/dom-utils.html</url>
      <content type="html"><![CDATA[<h3 id="Helping-Tree-Shake"><a href="#Helping-Tree-Shake" class="headerlink" title="Helping Tree-Shake"></a>Helping Tree-Shake</h3><p>You will notice all examples import different parts of Quasar. However, if you need only one specific util method, then you can use ES6 destructuring to help Tree Shaking embed only that method and not all around it.</p>
<p>Example with <code>dom</code> utils:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; dom &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"><span class="keyword">const</span> &#123; offset &#125; = dom</span><br><span class="line"></span><br><span class="line"><span class="comment">// Offset on screen</span></span><br><span class="line"><span class="built_in">console</span>.log(offset(DomElement))</span><br><span class="line"><span class="comment">// &#123; top: 10, left: 100 &#125;</span></span><br></pre></td></tr></table></figure></p>
<p>You can also import all of dom utils and use whatever you need like this (but note that your bundle will contain unused methods too):<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; dom &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Offset on screen</span></span><br><span class="line"><span class="built_in">console</span>.log(dom.offset(DomElement))</span><br><span class="line"><span class="comment">// &#123; top: 10, left: 100 &#125;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Offset-on-screen-viewport"><a href="#Offset-on-screen-viewport" class="headerlink" title="Offset on screen viewport"></a>Offset on screen viewport</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; dom &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"><span class="keyword">const</span> &#123; offset &#125; = dom</span><br><span class="line"></span><br><span class="line"><span class="comment">// Offset on screen</span></span><br><span class="line"><span class="built_in">console</span>.log(offset(DomElement))</span><br><span class="line"><span class="comment">// &#123; top: 10, left: 100 &#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Get-Computed-Style"><a href="#Get-Computed-Style" class="headerlink" title="Get Computed Style"></a>Get Computed Style</h2><p>This applies only when DomElement is visible! It returns the <strong>computed</strong> browser style, so the property you are asking for doesn’t necessary has to be applied within a <code>style</code> attribute.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; dom &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"><span class="keyword">const</span> &#123; style &#125; = dom</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get COMPUTED style (when DomElement is visible!)</span></span><br><span class="line"><span class="comment">// Computed means a DomElement might not have "height" CSS property set,</span></span><br><span class="line"><span class="comment">// but that does not mean it doesn't have a height when it's displayed.</span></span><br><span class="line"><span class="comment">// The following method accesses the computed CSS provided by the browser:</span></span><br><span class="line"><span class="built_in">console</span>.log(style(DomElement, <span class="string">'height'</span>))</span><br><span class="line"><span class="comment">// '10px' &lt;&lt;&lt; notice it returns a String ending in 'px'</span></span><br></pre></td></tr></table></figure>
<h2 id="Get-Height-Width"><a href="#Get-Height-Width" class="headerlink" title="Get Height / Width"></a>Get Height / Width</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; dom &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"><span class="keyword">const</span> &#123; height, width &#125; = dom</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Some aliases of the previous method for "width" and "height" which</span></span><br><span class="line"><span class="comment">// returns Numbers instead of Strings:</span></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  height(DomElement),</span><br><span class="line">  width(DomElement)</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 10 100</span></span><br></pre></td></tr></table></figure>
<h2 id="Apply-CSS-Properties-in-Batch"><a href="#Apply-CSS-Properties-in-Batch" class="headerlink" title="Apply CSS Properties in Batch"></a>Apply CSS Properties in Batch</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; dom &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"><span class="keyword">const</span> &#123; css &#125; = dom</span><br><span class="line"></span><br><span class="line"><span class="comment">// Apply a list of CSS properties to a DomNode</span></span><br><span class="line">css(DomElement, &#123;</span><br><span class="line">  height: <span class="string">'10px'</span>,</span><br><span class="line">  display: <span class="string">'flex'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="Execute-when-DOM-is-ready"><a href="#Execute-when-DOM-is-ready" class="headerlink" title="Execute when DOM is ready"></a>Execute when DOM is ready</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; dom &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"><span class="keyword">const</span> &#123; ready &#125; = dom</span><br><span class="line"></span><br><span class="line"><span class="comment">// Execute a Function when DOM is ready:</span></span><br><span class="line">ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ....</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="Get-Crossbrowser-CSS-Transform-Property"><a href="#Get-Crossbrowser-CSS-Transform-Property" class="headerlink" title="Get Crossbrowser CSS Transform Property"></a>Get Crossbrowser CSS Transform Property</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; dom &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"><span class="keyword">const</span> &#123; cssTransform &#125; = dom</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> props = cssTransform(<span class="string">'rotateX(30deg)'</span>)</span><br><span class="line"><span class="comment">// props = &#123;</span></span><br><span class="line"><span class="comment">//   transform: 'rotateX(30deg)',</span></span><br><span class="line"><span class="comment">//   '-webkit-transform': 'rotateX(30deg)',</span></span><br><span class="line"><span class="comment">//   '-ms-transform': 'rotateX(30deg)',</span></span><br><span class="line"><span class="comment">//   '-o-transform': 'rotateX(30deg)',</span></span><br><span class="line"><span class="comment">//   '-moz-transform': 'rotateX(30deg)'</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Then you can apply it with css(el, props)</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Editor (WYSIWYG)]]></title>
      <url>https://quasar-framework.org/components/editor---wysiwyg.html</url>
      <content type="html"><![CDATA[<p>QEditor is a WYSIWYG (“what you see is what you get”) editor component.</p>
<input type="hidden" data-fullpage-demo="forms/editor">

<blockquote>
<p>WARNING<br>Using <a href="https://vuejs.org/v2/api/#v-html" target="_blank" rel="noopener">v-html</a> on the resulting v-model renders you vulnerable to Cross Site Scripting attacks.<br>If the content is user generated, be sure to <a href="https://github.com/punkave/sanitize-html" target="_blank" rel="noopener">sanitize</a> it either on render or server side.</p>
</blockquote>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QEditor'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-editor</span> <span class="attr">v-model</span>=<span class="string">"model"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Internationalization"><a href="#Internationalization" class="headerlink" title="Internationalization"></a>Internationalization</h2><p>The tooltips content of QEditor are part of <a href="/components/internationalization.html">Quasar I18n</a>. If your desired language pack is missing, please provide a PR for it.</p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which you should bind to a String in your scope, which is essentially HTML code.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>readonly</code></td>
<td>Boolean</td>
<td>Sets editor in readonly mode.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>Sets editor in disable mode.</td>
</tr>
<tr>
<td><code>min-height</code></td>
<td>String</td>
<td>CSS unit for minimum height of the input area.</td>
</tr>
<tr>
<td><code>max-height</code></td>
<td>String</td>
<td>CSS unit for maximum height of the input area.</td>
</tr>
<tr>
<td><code>height</code></td>
<td>String</td>
<td>CSS unit for height of the input area.</td>
</tr>
<tr>
<td><code>definitions</code></td>
<td>Object</td>
<td>Object with definitions (see next sections).</td>
</tr>
<tr>
<td><code>fonts</code></td>
<td>Object</td>
<td>Object with fonts definitions (see next sections).</td>
</tr>
<tr>
<td><code>toolbar</code></td>
<td>Array</td>
<td>Array of Arrays of Objects/Strings with toolbar commands (see next sections).</td>
</tr>
<tr>
<td><code>toolbar-color</code></td>
<td>String</td>
<td>Color (from Quasar Palette) of toolbar commands.</td>
</tr>
<tr>
<td><code>toolbar-text-color</code></td>
<td>String</td>
<td>Text color (from Quasar Palette) of toolbar commands.</td>
</tr>
<tr>
<td><code>toolbar-toggle-color</code></td>
<td>String</td>
<td>Color (from Quasar Palette) of toolbar commands when in “active” state.</td>
</tr>
<tr>
<td><code>toolbar-bg</code></td>
<td>String</td>
<td>Toolbar background color (from Quasar Palette).</td>
</tr>
<tr>
<td><code>toolbar-flat</code></td>
<td>Boolean</td>
<td>Toolbar buttons become of “flat” type.</td>
</tr>
<tr>
<td><code>toolbar-outline</code></td>
<td>Boolean</td>
<td>Toolbar buttons become of “outline” type.</td>
</tr>
<tr>
<td><code>toolbar-push</code></td>
<td>Boolean</td>
<td>Toolbar buttons become of “push” type.</td>
</tr>
<tr>
<td><code>toolbar-rounded</code></td>
<td>Boolean</td>
<td>Toolbar buttons become of “rounded” type.</td>
</tr>
<tr>
<td><code>content-style</code></td>
<td>Object</td>
<td>CSS Style in Object format for the input area.</td>
</tr>
<tr>
<td><code>content-class</code></td>
<td>Object/Array/String</td>
<td>CSS classes for the input area.</td>
</tr>
</tbody>
</table>
<h3 id="Definitions"><a href="#Definitions" class="headerlink" title="Definitions"></a>Definitions</h3><p>By default, QEditor offers most if not all the commands you’d need in a WYSIWYG editor: bold, italic, strike, underline, unordered (list), ordered (list), subscript, superscript, link, fullscreen, quote, left (align), center (align), right (align), justify (align), print, outdent, indent, removeFormat, hr, undo, redo, h1 to h6, p (paragraph), code (code paragraph), size-1 to size-7.</p>
<p>Each of these commands are pre-configured with icons with tooltips. However, if you want to override some of their settings you can do so with the help of <code>definitions</code> Object property.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  overriding "bold" command to include a label instead of an icon</span></span><br><span class="line"><span class="comment">  and also changing its tooltip</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">:definitions="&#123;</span><br><span class="line">  bold: &#123;label: 'Bold', icon: null, tip: 'My bold tooltip'&#125;</span><br><span class="line">&#125;"</span><br></pre></td></tr></table></figure>
<p>Example adding your own definition. In this case make sure you don’t overlap the default commands:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- we can later use "save" and "upload" in "toolbar" prop --&gt;</span></span><br><span class="line">:definitions="&#123;</span><br><span class="line">  save: &#123;</span><br><span class="line">    tip: 'Save your work',</span><br><span class="line">    icon: 'save',</span><br><span class="line">    label: 'Save',</span><br><span class="line">    handler: saveWork</span><br><span class="line">  &#125;,</span><br><span class="line">  upload: &#123;</span><br><span class="line">    tip: 'Upload to cloud',</span><br><span class="line">    icon: 'cloud_upload',</span><br><span class="line">    label: 'Upload',</span><br><span class="line">    handler: uploadIt</span><br><span class="line">  &#125;</span><br><span class="line">&#125;"</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Notice the handlers. It references methods in your Vue scope</span></span><br><span class="line"><span class="comment">  for when toolbar commands using these definitions are clicked/tapped.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Command definitions properties:</p>
<table>
<thead>
<tr>
<th>Property Name</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>label</code></td>
<td>String</td>
<td>Label of button</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon of button</td>
</tr>
<tr>
<td><code>tip</code></td>
<td>String</td>
<td>Tooltip of button</td>
</tr>
<tr>
<td><code>cmd</code></td>
<td>String</td>
<td>Either this or “handler” is required. One of the commands described at the beginning of this section.</td>
</tr>
<tr>
<td><code>handler</code></td>
<td>Function</td>
<td>Either this or “cmd” is required. Function for when button gets clicked/tapped.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean/Function</td>
<td>Is button disabled? If specifying a function, return a Boolean value.</td>
</tr>
</tbody>
</table>
<p>Another example of adding a definition using a QEditor command:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">:definitions="&#123;</span><br><span class="line">  customItalic: &#123;</span><br><span class="line">    cmd: 'italic',</span><br><span class="line">    icon: 'camera_enhance',</span><br><span class="line">    tip: 'Italic'</span><br><span class="line">  &#125;</span><br><span class="line">&#125;"</span><br></pre></td></tr></table></figure></p>
<h3 id="Fonts"><a href="#Fonts" class="headerlink" title="Fonts"></a>Fonts</h3><p>Example of specifying fonts so that you can later use them as options in the toolbar. These become “commands” themselves, so make sure you don’t overlap any of the default commands.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">:fonts="&#123;</span><br><span class="line">  arial: 'Arial',</span><br><span class="line">  arial_black: 'Arial Black',</span><br><span class="line">  comic_sans: 'Comic Sans MS'</span><br><span class="line">&#125;"</span><br></pre></td></tr></table></figure></p>
<p>Then in toolbar, you can reference them. The example below creates a dropdown.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">:toolbar="[</span><br><span class="line">  ...,</span><br><span class="line">  [&#123;</span><br><span class="line">    label: $q.i18n.editor.defaultFont,</span><br><span class="line">    icon: $q.icon.editor.font,</span><br><span class="line">    fixedIcon: true,</span><br><span class="line">    list: 'no-icons',</span><br><span class="line">    options: ['default_font', 'arial', 'arial_black', 'comic_sans']</span><br><span class="line">  &#125;]</span><br><span class="line">]"</span><br></pre></td></tr></table></figure></p>
<h3 id="Toolbar"><a href="#Toolbar" class="headerlink" title="Toolbar"></a>Toolbar</h3><p>The <code>toolbar</code> property is the place where you configure how your toolbar looks like, based on your own commands and the default ones. <strong>It’s an Array of Arrays of Object/Strings</strong>. Each sub-array represents a Button Group.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[ <span class="comment">// array of button groups</span></span><br><span class="line">  [ ... ], <span class="comment">// button group</span></span><br><span class="line">  [ ... ], <span class="comment">// button group</span></span><br><span class="line">  ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">:toolbar="[</span><br><span class="line">  ['bold', 'italic', 'strike', 'underline'],</span><br><span class="line">  ['token', 'hr', 'link', 'custom_btn'],</span><br><span class="line">  ['print', 'fullscreen']</span><br><span class="line">]"</span><br></pre></td></tr></table></figure>
<p>Take a look at the demo and the examples below to see how you can also specify dropdowns. You can make dropdowns as single selection, meaning only one command from its list can have an “active” state.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Example of a dropdown with text alignment commands --&gt;</span></span><br><span class="line">:toolbar="[</span><br><span class="line">  [</span><br><span class="line">    &#123;</span><br><span class="line">      label: $q.i18n.editor.align,</span><br><span class="line">      icon: $q.icon.editor.align,</span><br><span class="line">      fixedLabel: true,</span><br><span class="line">      list: 'only-icons',</span><br><span class="line">      options: ['left', 'center', 'right', 'justify']</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">]"</span><br></pre></td></tr></table></figure></p>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@input</code></td>
<td>Triggered when input area content changes.</td>
</tr>
<tr>
<td><code>@fullscreen(true/false)</code></td>
<td>(v0.17.7+) Emitted when Fullscreen state gets toggled.</td>
</tr>
</tbody>
</table>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><h3 id="Complex-Example"><a href="#Complex-Example" class="headerlink" title="Complex Example"></a>Complex Example</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-editor</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:toolbar</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">    ['bold', 'italic', 'strike', 'underline', 'subscript', 'superscript'],</span></span></span><br><span class="line"><span class="tag"><span class="string">    ['token', 'hr', 'link', 'custom_btn'],</span></span></span><br><span class="line"><span class="tag"><span class="string">    ['print', 'fullscreen'],</span></span></span><br><span class="line"><span class="tag"><span class="string">    [</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        label: $q.i18n.editor.formatting,</span></span></span><br><span class="line"><span class="tag"><span class="string">        icon: $q.icon.editor.formatting,</span></span></span><br><span class="line"><span class="tag"><span class="string">        list: 'no-icons',</span></span></span><br><span class="line"><span class="tag"><span class="string">        options: ['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'code']</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        label: $q.i18n.editor.fontSize,</span></span></span><br><span class="line"><span class="tag"><span class="string">        icon: $q.icon.editor.fontSize,</span></span></span><br><span class="line"><span class="tag"><span class="string">        fixedLabel: true,</span></span></span><br><span class="line"><span class="tag"><span class="string">        fixedIcon: true,</span></span></span><br><span class="line"><span class="tag"><span class="string">        list: 'no-icons',</span></span></span><br><span class="line"><span class="tag"><span class="string">        options: ['size-1', 'size-2', 'size-3', 'size-4', 'size-5', 'size-6', 'size-7']</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        label: $q.i18n.editor.defaultFont,</span></span></span><br><span class="line"><span class="tag"><span class="string">        icon: $q.icon.editor.font,</span></span></span><br><span class="line"><span class="tag"><span class="string">        fixedIcon: true,</span></span></span><br><span class="line"><span class="tag"><span class="string">        list: 'no-icons',</span></span></span><br><span class="line"><span class="tag"><span class="string">        options: ['default_font', 'arial', 'arial_black', 'comic_sans', 'courier_new', 'impact', 'lucida_grande', 'times_new_roman', 'verdana']</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      'removeFormat'</span></span></span><br><span class="line"><span class="tag"><span class="string">    ],</span></span></span><br><span class="line"><span class="tag"><span class="string">    ['quote', 'unordered', 'ordered', 'outdent', 'indent'],</span></span></span><br><span class="line"><span class="tag"><span class="string">    [</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        label: $q.i18n.editor.align,</span></span></span><br><span class="line"><span class="tag"><span class="string">        icon: $q.icon.editor.align,</span></span></span><br><span class="line"><span class="tag"><span class="string">        fixedLabel: true,</span></span></span><br><span class="line"><span class="tag"><span class="string">        list: 'only-icons',</span></span></span><br><span class="line"><span class="tag"><span class="string">        options: ['left', 'center', 'right', 'justify']</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        label: $q.i18n.editor.align,</span></span></span><br><span class="line"><span class="tag"><span class="string">        icon: $q.icon.editor.align,</span></span></span><br><span class="line"><span class="tag"><span class="string">        fixedLabel: true,</span></span></span><br><span class="line"><span class="tag"><span class="string">        options: ['left', 'center', 'right', 'justify']</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    ],</span></span></span><br><span class="line"><span class="tag"><span class="string">    ['undo', 'redo']</span></span></span><br><span class="line"><span class="tag"><span class="string">  ]"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:fonts</span>=<span class="string">"&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">    arial: 'Arial',</span></span></span><br><span class="line"><span class="tag"><span class="string">    arial_black: 'Arial Black',</span></span></span><br><span class="line"><span class="tag"><span class="string">    comic_sans: 'Comic Sans MS',</span></span></span><br><span class="line"><span class="tag"><span class="string">    courier_new: 'Courier New',</span></span></span><br><span class="line"><span class="tag"><span class="string">    impact: 'Impact',</span></span></span><br><span class="line"><span class="tag"><span class="string">    lucida_grande: 'Lucida Grande',</span></span></span><br><span class="line"><span class="tag"><span class="string">    times_new_roman: 'Times New Roman',</span></span></span><br><span class="line"><span class="tag"><span class="string">    verdana: 'Verdana'</span></span></span><br><span class="line"><span class="tag"><span class="string">  &#125;"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Overriding-amp-extending-default-toolbar-buttons-definitions"><a href="#Overriding-amp-extending-default-toolbar-buttons-definitions" class="headerlink" title="Overriding &amp; extending default toolbar buttons definitions"></a>Overriding &amp; extending default toolbar buttons definitions</h3><p>This particular case:</p>
<ul>
<li>overrides bold &amp; italic default definitions (label, icon, their tooltips)</li>
<li>adds a new custom command which basically is same as “italic”</li>
<li>adds “save”, “upload” &amp; “spellcheck” commands</li>
<li>adds a disabled button</li>
<li>adds a custom “Import” button</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-editor</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:toolbar</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">    ['bold', 'italic'],</span></span></span><br><span class="line"><span class="tag"><span class="string">    ['customItalic'],</span></span></span><br><span class="line"><span class="tag"><span class="string">    ['save', 'upload'],</span></span></span><br><span class="line"><span class="tag"><span class="string">    ['spellcheck'],</span></span></span><br><span class="line"><span class="tag"><span class="string">    ['disabledButton'],</span></span></span><br><span class="line"><span class="tag"><span class="string">    ['custom_btn']</span></span></span><br><span class="line"><span class="tag"><span class="string">  ]"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:definitions</span>=<span class="string">"&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">    bold: &#123;cmd: 'bold', label: 'Bold', icon: null, tip: 'My bold tooltip'&#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">    italic: &#123;cmd: 'italic', icon: 'border_color', tip: 'My italic tooltip'&#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">    customItalic: &#123;cmd: 'italic', icon: 'camera_enhance', tip: 'Italic'&#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">    save: &#123;tip: 'Save your work', icon: 'save', label: 'Save', handler: saveWork&#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">    upload: &#123;tip: 'Upload to cloud', icon: 'cloud_upload', label: 'Upload', handler: upload&#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">    spellcheck: &#123;tip: 'Run spell-check', icon: 'spellcheck', handler: spellCheck&#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">    disabledButton: &#123;tip: 'I am disabled...', disable: true, icon: 'cloud_off'&#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">  &#125;"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">    <span class="attr">slot</span>=<span class="string">"custom_btn"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">dense</span></span></span><br><span class="line"><span class="tag">    <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">icon</span>=<span class="string">"import_contacts"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">"Import"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">"importSomething"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-editor</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Custom-Style"><a href="#Custom-Style" class="headerlink" title="Custom Style"></a>Custom Style</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-editor</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">toolbar-text-color</span>=<span class="string">"white"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">toolbar-toggle-color</span>=<span class="string">"yellow-8"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">toolbar-flat</span></span></span><br><span class="line"><span class="tag">  <span class="attr">toolbar-bg</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:toolbar</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">    ['bold', 'italic', 'underline'],</span></span></span><br><span class="line"><span class="tag"><span class="string">    [&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">      label: $q.i18n.editor.formatting,</span></span></span><br><span class="line"><span class="tag"><span class="string">      icon: $q.icon.editor.formatting,</span></span></span><br><span class="line"><span class="tag"><span class="string">      list: 'no-icons',</span></span></span><br><span class="line"><span class="tag"><span class="string">      options: ['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'code']</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;]</span></span></span><br><span class="line"><span class="tag"><span class="string">  ]"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Types-of-dropdowns"><a href="#Types-of-dropdowns" class="headerlink" title="Types of dropdowns"></a>Types of dropdowns</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-editor</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:toolbar</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">    [</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        label: 'Icons &amp; Label',</span></span></span><br><span class="line"><span class="tag"><span class="string">        icon: 'filter_1',</span></span></span><br><span class="line"><span class="tag"><span class="string">        fixedLabel: true,</span></span></span><br><span class="line"><span class="tag"><span class="string">        fixedIcon: true,</span></span></span><br><span class="line"><span class="tag"><span class="string">        options: ['bold', 'italic', 'strike', 'underline']</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    ],</span></span></span><br><span class="line"><span class="tag"><span class="string">    [</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        label: 'Only label',</span></span></span><br><span class="line"><span class="tag"><span class="string">        icon: 'filter_2',</span></span></span><br><span class="line"><span class="tag"><span class="string">        fixedLabel: true,</span></span></span><br><span class="line"><span class="tag"><span class="string">        fixedIcon: true,</span></span></span><br><span class="line"><span class="tag"><span class="string">        list: 'no-icons',</span></span></span><br><span class="line"><span class="tag"><span class="string">        options: ['bold', 'italic', 'strike', 'underline']</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    ],</span></span></span><br><span class="line"><span class="tag"><span class="string">    [</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        label: 'Only icons',</span></span></span><br><span class="line"><span class="tag"><span class="string">        icon: 'filter_3',</span></span></span><br><span class="line"><span class="tag"><span class="string">        fixedLabel: true,</span></span></span><br><span class="line"><span class="tag"><span class="string">        fixedIcon: true,</span></span></span><br><span class="line"><span class="tag"><span class="string">        list: 'only-icons',</span></span></span><br><span class="line"><span class="tag"><span class="string">        options: ['bold', 'italic', 'strike', 'underline']</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    ]</span></span></span><br><span class="line"><span class="tag"><span class="string">  ]"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Dropdowns-with-exclusive-options"><a href="#Dropdowns-with-exclusive-options" class="headerlink" title="Dropdowns with exclusive options"></a>Dropdowns with exclusive options</h3><p>User can pick only one option from each dropdown.</p>
<ul>
<li>First has icon and label changing based on current selection</li>
<li>Second has fixed label but dynamic icon</li>
<li>Third has fixed icon but dynamic label</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-editor</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:toolbar</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">    [</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        label: 'Dynamic label',</span></span></span><br><span class="line"><span class="tag"><span class="string">        icon: 'help_outline',</span></span></span><br><span class="line"><span class="tag"><span class="string">        options: ['left', 'center', 'right', 'justify']</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    ],</span></span></span><br><span class="line"><span class="tag"><span class="string">    [</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        label: 'Static label',</span></span></span><br><span class="line"><span class="tag"><span class="string">        fixedLabel: true,</span></span></span><br><span class="line"><span class="tag"><span class="string">        options: ['left', 'center', 'right', 'justify']</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    ],</span></span></span><br><span class="line"><span class="tag"><span class="string">    [</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        label: 'Some label',</span></span></span><br><span class="line"><span class="tag"><span class="string">        icon: 'account_balance',</span></span></span><br><span class="line"><span class="tag"><span class="string">        fixedIcon: true,</span></span></span><br><span class="line"><span class="tag"><span class="string">        options: ['left', 'center', 'right', 'justify']</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    ]</span></span></span><br><span class="line"><span class="tag"><span class="string">  ]"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Datetime Picker]]></title>
      <url>https://quasar-framework.org/components/datetime-picker.html</url>
      <content type="html"><![CDATA[<p>The DatetimePicker component provides a method to input dates and time or both. There is also one more version available: <a href="/components/datetime-input.html">Datetime Input</a>.</p>
<input type="hidden" data-fullpage-demo="forms/datetime/datetime-picker">

<p>You’ll notice in the demos that the iOS and Material Datetime pickers look and act totally different, just like their native counterparts.</p>
<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QDatetimePicker'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Only Date --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-datetime-picker</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"date"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Only Time --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-datetime-picker</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"time"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Date &amp; Time --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-datetime-picker</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"datetime"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Internationalization"><a href="#Internationalization" class="headerlink" title="Internationalization"></a>Internationalization</h2><p>The day and month names are taken care of by default through <a href="/components/internationalization.html">Quasar I18n</a>. If your desired language pack is missing, please provide a PR for it.</p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which must be a String, Number or Date Object.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>type</code></td>
<td>String</td>
<td>One of <code>date</code>, <code>time</code> or <code>datetime</code>. Default is <code>date</code>.</td>
</tr>
<tr>
<td><code>readonly</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, component is displayed as read-only.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, component is disabled and the user cannot change model.</td>
</tr>
<tr>
<td><code>minimal</code></td>
<td>Boolean</td>
<td>(v0.15.9+) Don’t display header.</td>
</tr>
<tr>
<td><code>min</code></td>
<td>String</td>
<td>Optional minimum value it can take. Has same format as Datetime model.</td>
</tr>
<tr>
<td><code>max</code></td>
<td>String</td>
<td>Optional maximum value it can take. Has same format as Datetime model.</td>
</tr>
<tr>
<td><code>default-view</code></td>
<td>String</td>
<td>One of ‘year’, ‘month’, ‘day’, ‘hour’, ‘minute’.</td>
</tr>
<tr>
<td><code>default-value</code></td>
<td>String/Number/Date</td>
<td>Default date/time for picker when model is not yet set.</td>
</tr>
<tr>
<td><code>display-value</code></td>
<td>String</td>
<td>Text to display on input frame. Supersedes ‘placeholder’.</td>
</tr>
<tr>
<td><code>first-day-of-week</code></td>
<td>Number</td>
<td>0-6, 0 - Sunday, 1 Monday, ….</td>
</tr>
<tr>
<td><code>format-model</code></td>
<td>String</td>
<td>Data type of model (useful especially when starting out with undefined or null). One of ‘auto’, ‘date’, ‘number’, ‘string’.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Is component rendered on a dark background?</td>
</tr>
<tr>
<td><code>format24h</code></td>
<td>Boolean</td>
<td>Override default i18n setting. Use 24 hour time for Material picker instead of AM/PM system which is default.</td>
</tr>
<tr>
<td><code>no-parent-field</code></td>
<td>Boolean</td>
<td>Avoid trying to connect to a parent QField.</td>
</tr>
<tr>
<td><code>header-label</code></td>
<td>String</td>
<td>(v0.17.10+) Override weekday string. Applies to Material theme only.</td>
</tr>
</tbody>
</table>
<h3 id="Lazy-Input"><a href="#Lazy-Input" class="headerlink" title="Lazy Input"></a>Lazy Input</h3><p>Vue will soon supply the <code>.lazy</code> modifier for v-model on components too, but until then, you can use the longer equivalent form:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-datetime-picker</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">"date"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">change</span>=<span class="string">"val =&gt; &#123; model = val &#125;"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>setYear(val)</code></td>
<td>Sets year.</td>
</tr>
<tr>
<td><code>setMonth(val)</code></td>
<td>Sets month.</td>
</tr>
<tr>
<td><code>setDay(val)</code></td>
<td>Sets day.</td>
</tr>
<tr>
<td><code>setHour(val)</code></td>
<td>Sets hour.</td>
</tr>
<tr>
<td><code>setMinute(val)</code></td>
<td>Sets minute.</td>
</tr>
<tr>
<td><code>setView(val)</code></td>
<td>Sets view. One of ‘year’, ‘month’, ‘day’, ‘hour’, ‘minute’. Notice that depending of <code>type</code> prop, some may not be available.</td>
</tr>
<tr>
<td><code>clear()</code></td>
<td>Sets model to empty string (removes current value).</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@input(newVal)</code></td>
<td>Triggered on immediate model value change.</td>
</tr>
<tr>
<td><code>@change(newVal)</code></td>
<td>Triggered on lazy model value change.</td>
</tr>
</tbody>
</table>
<h2 id="The-Model"><a href="#The-Model" class="headerlink" title="The Model"></a>The Model</h2><p>Quasar uses its own date utility to work with date values within the model of the component.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br>The model (variable binded to <code>v-model</code>) must either be empty (undefined) or a string in the form of a valid ISO 8601 datetime value, like <code>2016-10-24T10:40:14.674Z</code>. It can also be a shorter derivative of this string, like <code>2016-10-24</code> or <code>2016-10-24T10:40</code>. The value can also be a Unix Timestamp (including milliseconds), like <code>1477298414674</code>. Last but not least, it can also be an instance of the Javascript Date Object, like <code>new Date()</code>.</p>
</blockquote>
<p>For more information about how Quasar works with dates, please refer to the <a href="/components/date-utils.html">Handling JS Date</a> documentation page.</p>
<p>Here are a few examples of setting up the value prop:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-datetime-picker</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"datetime"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// ....</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      model: <span class="literal">undefined</span> <span class="comment">// empty value</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// OR</span></span></span><br><span class="line"><span class="javascript">      model: <span class="keyword">new</span> <span class="built_in">Date</span>() <span class="comment">// as in "right this moment"</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// OR</span></span></span><br><span class="line"><span class="javascript">      model: <span class="number">1477298414674</span> <span class="comment">// Unix Timestamp with milliseconds</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// OR</span></span></span><br><span class="line"><span class="javascript">      model: <span class="string">'2016-10-24T10:40:14.674Z'</span> <span class="comment">// full ISO 8601 compliant value</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// OR</span></span></span><br><span class="line"><span class="javascript">      model: <span class="string">`2016-10-24`</span> <span class="comment">// Any derivative of a valid ISO 8601 datetime value will</span></span></span><br><span class="line"><span class="javascript">                          <span class="comment">// also work, like '2016-10-24T10:40:14'</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// OR</span></span></span><br><span class="line"><span class="javascript">      model: <span class="string">`2016-10-24T10:40`</span>, <span class="comment">// For an ISO 8601 value, the time must be included</span></span></span><br><span class="line"><span class="javascript">                                 <span class="comment">// A Unix Timestamp will also work.</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="comment">// ...</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="More-Examples"><a href="#More-Examples" class="headerlink" title="More Examples"></a>More Examples</h2><h3 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h3><p>Use the <code>color</code> and <code>inverted</code>/<code>inverted-light</code> props to control the color.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-datetime</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"amber-7"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">float-label</span>=<span class="string">"Float Label"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">"date"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-datetime</span></span></span><br><span class="line"><span class="tag">  <span class="attr">inverted</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">float-label</span>=<span class="string">"Float Label"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">"date"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Also, if QDatetime is displayed on a dark background, add the <code>dark</code> property.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-datetime-picker</span> <span class="attr">dark</span> <span class="attr">color</span>=<span class="string">"secondary"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Usage-Inside-of-a-List"><a href="#Usage-Inside-of-a-List" class="headerlink" title="Usage Inside of a List"></a>Usage Inside of a List</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Date or Time<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"access_time"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-datetime-picker</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"time"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"update"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-datetime-picker</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"date"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Date &amp; Time<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"notifications"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-datetime-picker</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"datetime"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Element Resize Observable]]></title>
      <url>https://quasar-framework.org/components/element-resize-observable.html</url>
      <content type="html"><![CDATA[<p>QResizeObservable is a Quasar component that emits a <code>resize</code> event whenever the wrapping DOM element / component (defined as direct parent of QResizeObservable) changes its size. Note that no polling is involved, but overusing it is costly too.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [</span><br><span class="line">    <span class="string">'QResizeObservable'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    we listen for size changes on this next</span></span><br><span class="line"><span class="comment">    &lt;div&gt;, so we place the observer as direct child:</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-resize-observable</span> @<span class="attr">resize</span>=<span class="string">"onResize"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  ...,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    ...,</span></span><br><span class="line"><span class="undefined">    onResize (size) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(size)</span></span><br><span class="line"><span class="javascript">      <span class="comment">// &#123;</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//   width: 20 // width of container (in px)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//   height: 50 // height of container (in px)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Please note that QResizeObservable will issue an event as soon as it gets rendered and attached to DOM, so you can have the initial size of the container.</p>
<h3 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h3><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>debounce</code></td>
<td>Number</td>
<td>(Quasar v0.15.7+, default: 100) Debounce time in milliseconds</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Field]]></title>
      <url>https://quasar-framework.org/components/field.html</url>
      <content type="html"><![CDATA[<p>Field component allows you to easily build your responsive Forms UI by wrapping each Form component (QInput, QSelect, QDatetime, QChipsInput and so on) to enrich it with a main label, an icon, error placeholder and error state, helper placeholder and/or item/character counter.</p>
<input type="hidden" data-fullpage-demo="forms/field">

<p>On small windows, label and content will stack vertically, while on bigger windows label will be placed on the left of QField content. Icons are always placed at the left of label and content, regardless of window width.</p>
<p>Works with ANY component, not only Form ones.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QField'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-field</span></span></span><br><span class="line"><span class="tag">  <span class="attr">icon</span>=<span class="string">"cloud"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"Your Gmail"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">helper</span>=<span class="string">"Helper"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:error</span>=<span class="string">"mailHasError"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">error-label</span>=<span class="string">"We need a valid email"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:count</span>=<span class="string">"10"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">suffix</span>=<span class="string">"@gmail.com"</span> <span class="attr">v-model</span>=<span class="string">"model"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>label</code></td>
<td>String</td>
<td>Main label to use.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>An icon to use on left of label.</td>
</tr>
<tr>
<td><code>icon-color</code></td>
<td>String</td>
<td>Optional color of icon.</td>
</tr>
<tr>
<td><code>helper</code></td>
<td>String</td>
<td>Helper text which gets placed below your wrapped form component.</td>
</tr>
<tr>
<td><code>error</code></td>
<td>Boolean</td>
<td>Highlight field and wrapped form component has an error.</td>
</tr>
<tr>
<td><code>error-label</code></td>
<td>String</td>
<td>If <code>error</code> is specified and <code>true</code>, then field helper is replaced by this prop. Doesn’t depend on field helper existance.</td>
</tr>
<tr>
<td><code>warning</code></td>
<td>Boolean</td>
<td>Highlight field and wrapped form component has a warning.</td>
</tr>
<tr>
<td><code>warning-label</code></td>
<td>String</td>
<td>If <code>warning</code> is specified and <code>true</code>, then field helper is replaced by this prop. Doesn’t depend on field helper existance.</td>
</tr>
<tr>
<td><code>count</code></td>
<td>Number/Boolean</td>
<td>Add a counter of characters or items (like Chips) in your wrapped form component. If Boolean, it just counts them. If Number, it also adds a maximum number to it, but doesn’t acts as a restraint.</td>
</tr>
<tr>
<td><code>inset</code></td>
<td>String</td>
<td>Inset you field to align with other fields when current one is missing an icon and/or label. One of ‘icon’, ‘label’ or ‘full’ (inset for both icon and label).</td>
</tr>
<tr>
<td><code>orientation</code></td>
<td>String</td>
<td>Overrides the responsive orientation. One of ‘vertical’ or ‘horizontal’.</td>
</tr>
<tr>
<td><code>label-width</code></td>
<td>Number</td>
<td>Out of 12 grid points, how much should the label take? Default is 5. Minimum is 1 and maximum is 12.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Is your field used on a dark background?</td>
</tr>
</tbody>
</table>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>The following are just a glimpse of what QField can do for you.</p>
<h3 id="Using-Counter"><a href="#Using-Counter" class="headerlink" title="Using Counter"></a>Using Counter</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  16 characters max.</span></span><br><span class="line"><span class="comment">  Notice "count" property (and optional max-length</span></span><br><span class="line"><span class="comment">  to enforce max number of characters)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-field</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:count</span>=<span class="string">"16"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">max-length</span>=<span class="string">"16"</span> <span class="attr">v-model</span>=<span class="string">"model"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Counting Chips. Notice "count" property --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-field</span></span></span><br><span class="line"><span class="tag">  <span class="attr">count</span></span></span><br><span class="line"><span class="tag">  <span class="attr">icon</span>=<span class="string">"account_box"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">helper</span>=<span class="string">"Some helper here"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:label-width</span>=<span class="string">"3"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-chips-input</span> <span class="attr">float-label</span>=<span class="string">"Float Label"</span> <span class="attr">v-model</span>=<span class="string">"model"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Counting selected options --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-field</span></span></span><br><span class="line"><span class="tag">  <span class="attr">count</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">"select"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:options</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        label: 'Google',</span></span></span><br><span class="line"><span class="tag"><span class="string">        icon: 'email',</span></span></span><br><span class="line"><span class="tag"><span class="string">        value: 'goog'</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        label: 'Facebook',</span></span></span><br><span class="line"><span class="tag"><span class="string">        description: 'Enables communication',</span></span></span><br><span class="line"><span class="tag"><span class="string">        value: 'fb'</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        label: 'Twitter',</span></span></span><br><span class="line"><span class="tag"><span class="string">        secondIcon: 'alarm',</span></span></span><br><span class="line"><span class="tag"><span class="string">        value: 'twtr'</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    ]"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Validations-with-Vuelidate"><a href="#Validations-with-Vuelidate" class="headerlink" title="Validations with Vuelidate"></a>Validations with Vuelidate</h3><p>Quasar’s recommendation for doing form components validations is  <a href="https://monterail.github.io/vuelidate/" target="_blank" rel="noopener">Vuelidate</a> as it fits great with the overall architecture. It’s simple, lightweight and <strong>model-based</strong>.</p>
<p>You need to have Vuelidate added to your project first. See <a href="/components/form-validation.html">here</a>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-field</span></span></span><br><span class="line"><span class="tag">    <span class="attr">icon</span>=<span class="string">"mail"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">"Email"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">helper</span>=<span class="string">"Type the email we can use to contact you"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:error</span>=<span class="string">"$v.email.$error"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">error-label</span>=<span class="string">"Please type a valid email"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">count</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"email"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"email"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">blur</span>=<span class="string">"$v.email.$touch"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; required, email &#125; <span class="keyword">from</span> <span class="string">'vuelidate/lib/validators'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      email: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  validations: &#123;</span></span><br><span class="line"><span class="undefined">    email: &#123; required, email &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Float-Label-QInput"><a href="#Float-Label-QInput" class="headerlink" title="Float Label QInput"></a>Float Label QInput</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-field</span></span></span><br><span class="line"><span class="tag">  <span class="attr">icon</span>=<span class="string">"cloud"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">helper</span>=<span class="string">"Helper"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">float-label</span>=<span class="string">"Float Label"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Custom-Label-Width"><a href="#Custom-Label-Width" class="headerlink" title="Custom Label Width"></a>Custom Label Width</h3><p>If you customize label width for one QField then it’s best to apply it to all its sibling QFields for UI consistency.<br>Since Quasar is using a 12 point grid system, assign a number &gt;= 1 and &lt; 12 for the label width. Default is <code>5</code>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-field</span></span></span><br><span class="line"><span class="tag">  <span class="attr">helper</span>=<span class="string">"Helper"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:label-width</span>=<span class="string">"3"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"Label"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"model"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Using-Inset"><a href="#Using-Inset" class="headerlink" title="Using Inset"></a>Using Inset</h3><p>Inset is useful to perfectly align all QFields when some have icons and labels and some are missing either or both of them.</p>
<p>If, for example, no QField uses icon, then it makes sense to not add inset for any of the QFields. Same goes for label.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  This example has icon and label. Since having</span></span><br><span class="line"><span class="comment">  both of them, it gets set as reference for</span></span><br><span class="line"><span class="comment">  the other QFields when adding inset to them.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-field</span></span></span><br><span class="line"><span class="tag">  <span class="attr">icon</span>=<span class="string">"cloud"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">helper</span>=<span class="string">"Helper"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"Horizontal"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"model"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  This example has only label, so</span></span><br><span class="line"><span class="comment">  we inset for the icon (because there</span></span><br><span class="line"><span class="comment">  is at least one QField having icon too)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-field</span></span></span><br><span class="line"><span class="tag">  <span class="attr">helper</span>=<span class="string">"Helper"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"Label"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">inset</span>=<span class="string">"icon"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"model"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  This example has no icon or label, so</span></span><br><span class="line"><span class="comment">  we inset for them both (as there is a</span></span><br><span class="line"><span class="comment">  sibling QField with both icon and label).</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-field</span></span></span><br><span class="line"><span class="tag">  <span class="attr">helper</span>=<span class="string">"Helper"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">inset</span>=<span class="string">"full"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"model"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Wrapping-Side-by-Side-QInputs"><a href="#Wrapping-Side-by-Side-QInputs" class="headerlink" title="Wrapping Side by Side QInputs"></a>Wrapping Side by Side QInputs</h3><p>We use Quasar CSS Flex to create a non wrappable row where we place two QInputs.</p>
<p>When more than one Form component is wrapped by QField, avoid adding a counter to QField because only one will end up synching its length to it. Each Form component has its own length and there’s only one placeholder for the counter, so in the end you will only confuse the user.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Example featuring stacked labels --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-field</span></span></span><br><span class="line"><span class="tag">  <span class="attr">icon</span>=<span class="string">"security"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">helper</span>=<span class="string">"Helper"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"Label"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- We create a row --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row no-wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">class</span>=<span class="string">"col"</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">stack-label</span>=<span class="string">"Input 1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">class</span>=<span class="string">"col"</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">stack-label</span>=<span class="string">"Input 2"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Dark-Background"><a href="#Dark-Background" class="headerlink" title="Dark Background"></a>Dark Background</h3><p>When placing a QField on a dark background, use <code>dark</code> property to inform QField it needs to adjust colors.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  This example has a wrapping &lt;div&gt; with a dark</span></span><br><span class="line"><span class="comment">  background associated with it.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-grey-9"</span> <span class="attr">style</span>=<span class="string">"padding: 10px"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Notice "dark" property --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-field</span></span></span><br><span class="line"><span class="tag">    <span class="attr">dark</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">"Knob"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">helper</span>=<span class="string">"Touch to change"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">icon</span>=<span class="string">"cake"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:error</span>=<span class="string">"error"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-knob</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"knob"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:min</span>=<span class="string">"knobMin"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:max</span>=<span class="string">"knobMax"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">class</span>=<span class="string">"on-left"</span> <span class="attr">name</span>=<span class="string">"volume_up"</span> /&gt;</span> &#123;&#123;knob&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-knob</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Option-Group"><a href="#Option-Group" class="headerlink" title="Option Group"></a>Option Group</h3><p>Here’s an example with an Option Group component.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-field</span></span></span><br><span class="line"><span class="tag">  <span class="attr">icon</span>=<span class="string">"flight_takeoff"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"Flight"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">helper</span>=<span class="string">"Pick the day when you want to go"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-option-group</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"radio"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">"option"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:options</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; label: 'Monday', value: 'monday' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; label: 'Tuesday', value: 'tuesday' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; label: 'Friday', value: 'friday' &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    ]"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Floating Action Buttons]]></title>
      <url>https://quasar-framework.org/components/floating-action-button.html</url>
      <content type="html"><![CDATA[<p>A Floating Action Button (FAB) represents the primary action in an App Page. But, it’s not limited to only a single action. It can contain any number of sub-actions too. And more importantly, it can also be used inline in your Pages or Layouts.</p>
<input type="hidden" data-fullpage-demo="layout-demo/floating-action-button" data-source="../layout-demo/floating-action-button.vue">

<p>Note that you don’t need a QLayout to use FABs.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [</span><br><span class="line">    <span class="string">'QFab'</span>,</span><br><span class="line">    <span class="string">'QFabAction'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>There are two types of FABs: expandable (has sub-actions) and non-expandable.</p>
<h3 id="Non-Expandable"><a href="#Non-Expandable" class="headerlink" title="Non-Expandable"></a>Non-Expandable</h3><p>If you want a non-expandable FAB, <a href="/components/button.html">all you need is a round button</a> – wrapped in <a href="/components/page-sticky.html">QPageSticky</a> if used on a QLayout.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Non-expandable without being on a QLayout --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">  <span class="attr">round</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">click</span>=<span class="string">"method"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"fixed"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">icon</span>=<span class="string">"mail"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">"right: 18px; bottom: 18px"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Non-expandable on a QLayout --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-page-sticky</span> <span class="attr">position</span>=<span class="string">"bottom-right"</span> <span class="attr">:offset</span>=<span class="string">"[18, 18]"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">    <span class="attr">round</span></span></span><br><span class="line"><span class="tag">    <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">"method"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">icon</span>=<span class="string">"mail"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-page-sticky</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Expandable"><a href="#Expandable" class="headerlink" title="Expandable"></a>Expandable</h3><p>Expandable FABs are defined by two components: QFab (parent) and QFabAction (children).<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Expandable --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-fab</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"purple"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">icon</span>=<span class="string">"keyboard_arrow_up"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">direction</span>=<span class="string">"up"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-fab-action</span></span></span><br><span class="line"><span class="tag">    <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">"someMethod"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">icon</span>=<span class="string">"mail"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-fab-action</span></span></span><br><span class="line"><span class="tag">    <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">"someMethod"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">icon</span>=<span class="string">"alarm"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-fab</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Expandable, fixed position without a QLayout --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-fab</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"fixed"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">"right: 18px; bottom: 18px"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">icon</span>=<span class="string">"wifi"</span></span></span><br><span class="line"><span class="tag">&gt;</span>....<span class="tag">&lt;/<span class="name">q-fab</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Expandable, fixed position on a QLayout --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-page-sticky</span> <span class="attr">position</span>=<span class="string">"bottom-right"</span> <span class="attr">:offset</span>=<span class="string">"[18, 18]"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-fab</span></span></span><br><span class="line"><span class="tag">    <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">icon</span>=<span class="string">"wifi"</span></span></span><br><span class="line"><span class="tag">  &gt;</span>....<span class="tag">&lt;/<span class="name">q-fab</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-page-sticky</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>We’ll continue describing only the expandable FAB, as the non-expandable FAB is, as mentioned above, a simple <a href="/components/button.html">round button</a>.</p>
<h2 id="Toggle-through-v-model"><a href="#Toggle-through-v-model" class="headerlink" title="Toggle through v-model"></a>Toggle through v-model</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-fab</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"open"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">icon</span>=<span class="string">"wifi"</span></span></span><br><span class="line"><span class="tag">    &gt;</span>....<span class="tag">&lt;/<span class="name">q-fab</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      open: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    toggleFab () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.open = !<span class="keyword">this</span>.open</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Labeling-with-Tooltips"><a href="#Labeling-with-Tooltips" class="headerlink" title="Labeling with Tooltips"></a>Labeling with Tooltips</h2><p>Notice <code>slot=&quot;tooltip&quot;</code> for the Tooltip on main button and where are the Tooltips placed for the Fab action buttons.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-fab</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">active-icon</span>=<span class="string">"alarm"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">direction</span>=<span class="string">"up"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tooltip</span></span></span><br><span class="line"><span class="tag">    <span class="attr">slot</span>=<span class="string">"tooltip"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">anchor</span>=<span class="string">"center left"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">self</span>=<span class="string">"center right"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:offset</span>=<span class="string">"[20, 0]"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    Tooltip in FAB</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-tooltip</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-fab-action</span> <span class="attr">color</span>=<span class="string">"purple"</span> @<span class="attr">click</span>=<span class="string">"toast('mail')"</span> <span class="attr">icon</span>=<span class="string">"mail"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-tooltip</span> <span class="attr">anchor</span>=<span class="string">"center left"</span> <span class="attr">self</span>=<span class="string">"center right"</span> <span class="attr">:offset</span>=<span class="string">"[20, 0]"</span>&gt;</span>Mail<span class="tag">&lt;/<span class="name">q-tooltip</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-fab-action</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-fab-action</span> <span class="attr">color</span>=<span class="string">"secondary"</span> @<span class="attr">click</span>=<span class="string">"toast('alarm')"</span> <span class="attr">icon</span>=<span class="string">"alarm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-tooltip</span> <span class="attr">anchor</span>=<span class="string">"center left"</span> <span class="attr">self</span>=<span class="string">"center right"</span> <span class="attr">:offset</span>=<span class="string">"[20, 0]"</span>&gt;</span>Alarm<span class="tag">&lt;/<span class="name">q-tooltip</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-fab-action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-fab</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>For more information about Tooltips, please refer to the <a href="/components/tooltip.html">Tooltip documentation</a>.</p>
<h2 id="QFab-Parent"><a href="#QFab-Parent" class="headerlink" title="QFab (Parent)"></a>QFab (Parent)</h2><h3 id="QFab-Vue-Properties"><a href="#QFab-Vue-Properties" class="headerlink" title="QFab Vue Properties"></a>QFab Vue Properties</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Default Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>n/a</td>
<td>The color of the button, from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>text-color</code></td>
<td>String</td>
<td>n/a</td>
<td>The color of the button icon, from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>direction</code></td>
<td>String</td>
<td>“right”</td>
<td>The direction in which to expand; one of the following values: “up”, “down”, “left”, “right”.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>“add”</td>
<td>Icon to use when not expanded</td>
</tr>
<tr>
<td><code>active-icon</code></td>
<td>String</td>
<td>“close”</td>
<td>The icon to change to when expanded.</td>
</tr>
<tr>
<td><code>outline</code></td>
<td>Boolean</td>
<td>n/a</td>
<td>Set true, for an outlined button.</td>
</tr>
<tr>
<td><code>push</code></td>
<td>Boolean</td>
<td>n/a</td>
<td>Set true, for a push styled button.</td>
</tr>
<tr>
<td><code>flat</code></td>
<td>Boolean</td>
<td>n/a</td>
<td>Set true, for a flat styled button.</td>
</tr>
<tr>
<td><code>glossy</code></td>
<td>Boolean</td>
<td>n/a</td>
<td>Make button “glossy”.</td>
</tr>
<tr>
<td><code>persistent</code></td>
<td>Boolean</td>
<td>false</td>
<td>(v0.17.17+) Do not hide when route changes.</td>
</tr>
</tbody>
</table>
<h3 id="QFab-Vue-Methods"><a href="#QFab-Vue-Methods" class="headerlink" title="QFab Vue Methods"></a>QFab Vue Methods</h3><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>toggle()</code></td>
<td>Toggle open/close state.</td>
</tr>
<tr>
<td><code>show()</code></td>
<td>Open FAB.</td>
</tr>
<tr>
<td><code>hide()</code></td>
<td>Close FAB.</td>
</tr>
</tbody>
</table>
<h3 id="QFab-Vue-Events"><a href="#QFab-Vue-Events" class="headerlink" title="QFab Vue Events"></a>QFab Vue Events</h3><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@show</code></td>
<td>Triggered when clicking/tapping on main FAB to open it.</td>
</tr>
<tr>
<td><code>@hide</code></td>
<td>Triggered when clicking/tapping on main FAB to close it.</td>
</tr>
</tbody>
</table>
<h2 id="QFabAction-Child"><a href="#QFabAction-Child" class="headerlink" title="QFabAction (Child)"></a>QFabAction (Child)</h2><p>The cool bit about FABs is, they give the user the ability to select from a number of actions. These actions can be offered through a list of QFabAction components witin the QFab.</p>
<h3 id="Basic-Usage-1"><a href="#Basic-Usage-1" class="headerlink" title="Basic Usage"></a>Basic Usage</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- a q-fab with two actions --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-fab</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"purple"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">icon</span>=<span class="string">"keyboard_arrow_up"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">direction</span>=<span class="string">"up"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-fab-action</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"white"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">"someMethod()"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">icon</span>=<span class="string">"mail"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-fab-action</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"white"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">"someMethod()"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">icon</span>=<span class="string">"alarm"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-fab</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="QFabAction-Vue-Properties"><a href="#QFabAction-Vue-Properties" class="headerlink" title="QFabAction Vue Properties"></a>QFabAction Vue Properties</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>The color of the button.</td>
</tr>
<tr>
<td><code>text-color</code></td>
<td>String</td>
<td>n/a</td>
<td>The color of the button icon.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>The icon of the button.</td>
</tr>
<tr>
<td><code>outline</code></td>
<td>Boolean</td>
<td>Set true, for an outlined button.</td>
</tr>
<tr>
<td><code>push</code></td>
<td>Boolean</td>
<td>Set true, for a push styled button.</td>
</tr>
<tr>
<td><code>flat</code></td>
<td>Boolean</td>
<td>Set true, for a flat styled button.</td>
</tr>
<tr>
<td><code>glossy</code></td>
<td>Boolean</td>
<td>Make button “glossy”.</td>
</tr>
</tbody>
</table>
<h3 id="QFabAction-Vue-Events"><a href="#QFabAction-Vue-Events" class="headerlink" title="QFabAction Vue Events"></a>QFabAction Vue Events</h3><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@click</code></td>
<td>Triggered when clicking/tapping on the small fab.</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>Note</strong><br>Clicking on a QFabAction will automatically close the list of sub-actions and return the FAB to its original state.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Form Validation]]></title>
      <url>https://quasar-framework.org/components/form-validation.html</url>
      <content type="html"><![CDATA[<p>Recommended package for Form Validations is <code>Vuelidate</code>.<br>Get started with the <a href="https://monterail.github.io/vuelidate/" target="_blank" rel="noopener">documentation</a>.</p>
<h2 id="Installation-of-Vuelidate"><a href="#Installation-of-Vuelidate" class="headerlink" title="Installation of Vuelidate"></a>Installation of Vuelidate</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn add vuelidate</span><br><span class="line"><span class="comment"># or:</span></span><br><span class="line">$ npm install --save vuelidate</span><br><span class="line"></span><br><span class="line">$ quasar new plugin vuelidate</span><br></pre></td></tr></table></figure>
<p>An app plugin file got created: <code>/src/plugins/vuelidate.js</code>. We edit it:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vuelidate <span class="keyword">from</span> <span class="string">'vuelidate'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; Vue &#125;) =&gt; &#123;</span><br><span class="line">  Vue.use(Vuelidate)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Then, edit <code>/quasar.conf.js</code> to add the app plugin file to the build. Add this to the main plugins <strong>at the top of the file</strong>, not in the <code>framework</code> plugins section.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">plugins: [<span class="string">'vuelidate'</span>]</span><br></pre></td></tr></table></figure></p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"form.email"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">blur</span>=<span class="string">"$v.form.email.$touch"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">keyup.enter</span>=<span class="string">"submit"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:error</span>=<span class="string">"$v.form.email.$error"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"submit"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; required, email &#125; <span class="keyword">from</span> <span class="string">'vuelidate/lib/validators'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">      form: &#123;</span></span><br><span class="line"><span class="javascript">        email: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  validations: &#123;</span></span><br><span class="line"><span class="undefined">    form: &#123;</span></span><br><span class="line"><span class="undefined">      email: &#123; required, email &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    submit () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$v.form.$touch()</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="keyword">this</span>.$v.form.$error) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$q.notify(<span class="string">'Please review fields again.'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// ...</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Formatter Utils]]></title>
      <url>https://quasar-framework.org/components/formatter-utils.html</url>
      <content type="html"><![CDATA[<h3 id="Helping-Tree-Shake"><a href="#Helping-Tree-Shake" class="headerlink" title="Helping Tree-Shake"></a>Helping Tree-Shake</h3><p>You will notice all examples import <code>format</code> Object from Quasar. However, if you need only one formatter method from it, then you can use ES6 destructuring to help Tree Shaking embed only that method and not all of <code>format</code>.</p>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// we import all of `date`</span></span><br><span class="line"><span class="keyword">import</span> &#123; format &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"><span class="comment">// destructuring to keep only what is needed</span></span><br><span class="line"><span class="keyword">const</span> &#123; capitalize, humanStorageSize &#125; = format</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( capitalize(<span class="string">'some text'</span>) )</span><br><span class="line"><span class="comment">// Some text</span></span><br><span class="line"><span class="built_in">console</span>.log( humanStorageSize(<span class="number">13087</span>) )</span><br><span class="line"><span class="comment">// 12.78 kB</span></span><br></pre></td></tr></table></figure></p>
<p>You can also import all formatters and use whatever you need like this (but note that your bundle will probably contain unused methods too):<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; format &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( format.capitalize(<span class="string">'some text'</span>) )</span><br><span class="line"><span class="built_in">console</span>.log( format.humanStorageSize(<span class="number">13087</span>) )</span><br></pre></td></tr></table></figure></p>
<h2 id="Capitalize"><a href="#Capitalize" class="headerlink" title="Capitalize"></a>Capitalize</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; format &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"><span class="keyword">const</span> &#123; capitalize &#125; = format</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( capitalize(<span class="string">'some text'</span>) )</span><br><span class="line"><span class="comment">// Some text</span></span><br></pre></td></tr></table></figure>
<h2 id="Format-to-Human-Readable-Size"><a href="#Format-to-Human-Readable-Size" class="headerlink" title="Format to Human Readable Size"></a>Format to Human Readable Size</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; format &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"><span class="keyword">const</span> &#123; humanStorageSize &#125; = format</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( humanStorageSize(<span class="number">13087</span>) )</span><br><span class="line"><span class="comment">// 12.78 kB</span></span><br></pre></td></tr></table></figure>
<h2 id="Normalize-Number-to-Interval"><a href="#Normalize-Number-to-Interval" class="headerlink" title="Normalize Number to Interval"></a>Normalize Number to Interval</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; format &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"><span class="keyword">const</span> &#123; between &#125; = format</span><br><span class="line"></span><br><span class="line"><span class="comment">// (Number) between(Number, Number min, Number max)</span></span><br><span class="line"><span class="built_in">console</span>.log( between(<span class="number">50</span>, <span class="number">10</span>, <span class="number">20</span>) )</span><br><span class="line"><span class="comment">// 20</span></span><br></pre></td></tr></table></figure>
<h2 id="Pad-String"><a href="#Pad-String" class="headerlink" title="Pad String"></a>Pad String</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; format &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"><span class="keyword">const</span> &#123; pad &#125; = format</span><br><span class="line"></span><br><span class="line"><span class="comment">// (String) pad(String toPad, Number length, String paddingCharacter)</span></span><br><span class="line"><span class="comment">// length is default 2</span></span><br><span class="line"><span class="comment">// paddingCharacter is default '0'</span></span><br><span class="line"><span class="built_in">console</span>.log( pad(<span class="string">'2'</span>, <span class="number">4</span>) )</span><br><span class="line"><span class="comment">// '0002'</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Flex CSS]]></title>
      <url>https://quasar-framework.org/components/flex-css.html</url>
      <content type="html"><![CDATA[<p>Quasar provides lots of CSS classes to help you build your UI easily with the help of <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="noopener">Flexbox</a>. Think of it like operating with rows and columns with many options at hand.</p>
<blockquote>
<p>The final section of this page will show you how to create responsive UIs. Also take a look at the demo (best viewed by clicking “Desktop View” when on a desktop, because that’s where you can resize the window width to see helper classes in action). Click on “View Source” too to see the demo’s source code.</p>
</blockquote>
<input type="hidden" data-fullpage-demo="css-helpers/flex-css" data-source="css-helpers/flex-css">

<h2 id="Background-on-Flexbox"><a href="#Background-on-Flexbox" class="headerlink" title="Background on Flexbox"></a>Background on Flexbox</h2><p>The Flexbox Layout (Flexible Box) module (currently a W3C Last Call Working Draft) aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown and/or dynamic (thus the word “flex”).</p>
<p>The main idea behind the flex layout is to give the container the ability to alter its items’ width/height (and order) to best fill the available space (mostly to accommodate to all kind of display devices and screen sizes). A flex container expands items to fill available free space, or shrinks them to prevent overflow.</p>
<p>Most importantly, the flexbox layout is direction-agnostic as opposed to the regular layouts (block which is vertically-based and inline which is horizontally-based). While those work well for pages, they lack flexibility (no pun intended) to support large or complex applications (especially when it comes to orientation changing, resizing, stretching, shrinking, etc.).</p>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>Quasar Flex CSS classes apply to either the Container (Parent) or the Container’s items (Children).</p>
<p><img src="/images/flexbox-container.svg" alt="Flexbox Container"><br><img src="/images/flexbox-items.svg" alt="Flexbox Items"></p>
<h2 id="Parent-Classes"><a href="#Parent-Classes" class="headerlink" title="Parent Classes"></a>Parent Classes</h2><h3 id="Setting-Direction"><a href="#Setting-Direction" class="headerlink" title="Setting Direction"></a>Setting Direction</h3><p>One of the following CSS classes is mandatory for the parent in order for the children ones (described in next sections) to have any effect.</p>
<p><img src="/images/flexbox-direction.svg" alt="Flexbox Direction"></p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>row</code></td>
<td>Flex row</td>
</tr>
<tr>
<td><code>row inline</code></td>
<td>Inline Flex row</td>
</tr>
<tr>
<td><code>column</code></td>
<td>Flex column</td>
</tr>
<tr>
<td><code>column inline</code></td>
<td>Inline Flex column</td>
</tr>
<tr>
<td><code>row reverse</code></td>
<td>Flex row with <code>flex-direction</code> set to <code>row-reverse</code></td>
</tr>
<tr>
<td><code>column reverse</code></td>
<td>Flex column with <code>flex-direction</code> set to <code>column-reverse</code></td>
</tr>
</tbody>
</table>
<p>Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>First column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Second column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Third column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Wrapping-by-default"><a href="#Wrapping-by-default" class="headerlink" title="Wrapping by default"></a>Wrapping by default</h3><p>By default, all rows and columns are wrapping content.</p>
<p><img src="/images/flexbox-wrap.svg" alt="Flexbox Direction"></p>
<p>However if you explicitly do not want to wrap and by so doing you want to fit all content into one line, then add <code>no-wrap</code> CSS helper class.</p>
<p>Also, if you want to wrap in reverse order, then <code>reverse-wrap</code> is available.</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>wrap</code></td>
<td>Wrap if necessary (“on” by default, no need to specify it)</td>
</tr>
<tr>
<td><code>no-wrap</code></td>
<td>Do NOT wrap even if necessary</td>
</tr>
<tr>
<td><code>reverse-wrap</code></td>
<td>Wrap backwards if necessary</td>
</tr>
</tbody>
</table>
<h3 id="Alignment"><a href="#Alignment" class="headerlink" title="Alignment"></a>Alignment</h3><p><strong>For alignment along the main axis</strong>, use classes below. It helps distribute extra free space left over when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. It also exerts some control over the alignment of items when they overflow the line.</p>
<p><img src="/images/flexbox-main-axis-align.svg" alt="Flexbox Justify Content"></p>
<p><strong>For alignment perpendicular to the main axis</strong>, use classes below. This defines the default behavior for how flex items are laid out along the cross axis on the current line. Think of it as the horizontal-* version for the cross-axis (perpendicular to the main-axis).</p>
<p><img src="/images/flexbox-cross-axis-align.svg" alt="Flexbox Items Align"></p>
<p>The next classes <strong>align a flex container’s lines</strong> within when there is extra space in the cross-axis, similar to how horizontal-* aligns individual items within the main-axis.</p>
<p><img src="/images/flexbox-content-align.svg" alt="Flexbox Content Align"></p>
<h2 id="Children-Classes"><a href="#Children-Classes" class="headerlink" title="Children Classes"></a>Children Classes</h2><h3 id="Distribution-of-Size"><a href="#Distribution-of-Size" class="headerlink" title="Distribution of Size"></a>Distribution of Size</h3><p>Quasar uses a 12 point column system for distributing size of row children. Here are some examples of the CSS helper classes available:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-8"</span>&gt;</span>two thirds<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span>one sixth<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-auto"</span>&gt;</span>auto size based on content and available space<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>fills remaining available space<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>In the example above, <code>col-8</code> fills two thirds (2/3) of the row width, because 8/12 = 2/3 = 66%, while <code>col-2</code> occupies one sixth (2/12 = 1/6 ~ 16.67%).</p>
<p>CSS helper class <code>col-auto</code> makes the cell fill only the space it needs to be rendered, with the possibility to shrink when not enough space is available. <code>col</code>, on the other hand, tries to fill all space available while also shrinking if needed.</p>
<p>Another example with a visual representation below it:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     we have 3 children, so equivalent</span></span><br><span class="line"><span class="comment">     to above would be to use `col-4`</span></span><br><span class="line"><span class="comment">     on each of the children</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-6"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/images/flexbox-grow.svg" alt="Flexbox Grow"></p>
<p>There’s also the possible to offset a cell. Example: <code>offset-4</code> which offsets a third of space (4/12 = 1/3 = 33%).</p>
<h3 id="Wrapping"><a href="#Wrapping" class="headerlink" title="Wrapping"></a>Wrapping</h3><p>Wrapping is a key feature in understanding Flex CSS classes. You are not bound to use exactly 12 points per row. You can use less or even more.</p>
<p>This allows you, among other things, to dynamically stack rows vertically on smaller screens while displaying them on a single line on bigger screens. Read “Responsive Design” section.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 2 + 6 &lt; 12, so next element is placed on same line --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-6"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 2 + 6 + 10 &gt; 12, so next element wraps to next line --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-10"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    10 + 3 &gt; 12, so next element wraps to next line.</span></span><br><span class="line"><span class="comment">    Note that we take into consideration the current line only</span></span><br><span class="line"><span class="comment">    (with col-10 only, since it was wrapped to its own line).</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Note that rows are wrappable by default. Should you wish to disable this, use <code>no-wrap</code> CSS helper class.</p>
</blockquote>
<h3 id="Self-Alignment"><a href="#Self-Alignment" class="headerlink" title="Self Alignment"></a>Self Alignment</h3><p><strong>An item can override the aligned specified on parent</strong>. This allows alignment to be overridden for individual flex items. Please see the <a href="#Alignment">Alignment</a> explanation from Parent Classes to understand the available values (<code>self-start</code>, <code>self-center</code>, <code>self-baseline</code>, <code>self-end</code>, <code>self-stretch</code>).</p>
<p><img src="/images/flexbox-self.svg" alt="Flexbox Grow"></p>
<h3 id="Order"><a href="#Order" class="headerlink" title="Order"></a>Order</h3><p><strong>You can set the order</strong> of children elements by using <code>order-first</code> and <code>order-last</code> CSS helper classes.</p>
<p>By default, flex items are laid out in the source order. However, the order property controls the order in which they appear in the flex container. If you need more granularity, use <code>order</code> CSS property and assign the desired value.</p>
<p>Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"order: 2"</span>&gt;</span>Second column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"order-last"</span>&gt;</span>Third column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"order-first"</span>&gt;</span>First column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Here is how the CSS <code>order</code> property works:</p>
<p><img src="/images/flexbox-order.svg" alt="Flexbox Order"></p>
<h2 id="Responsive-Design"><a href="#Responsive-Design" class="headerlink" title="Responsive Design"></a>Responsive Design</h2><p>Flex CSS Helper classes can be applied based on the width of the screen, to help you in making a responsive UI. The 12 points grid is inspired by Bootstrap’s, so there are a lot of similarities.</p>
<p>What we’ve learned so far is that, for example, we can size the columns regardless of window width. If we are to create a response UI, we need to dynamically change the sizing while taking into account how wide the window is. First, let’s learn about some tokens that you can inject at middle of <code>col-*</code>, <code>offset-*</code> and <code>col-auto</code> helper classes (look at table below for tokens).</p>
<table>
<thead>
<tr>
<th>Token</th>
<th>Max window width</th>
<th>Description / When it applies</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>xs</code></td>
<td>576px</td>
<td>Extra small sized window</td>
</tr>
<tr>
<td><code>sm</code></td>
<td>768px</td>
<td>Small sized window</td>
</tr>
<tr>
<td><code>md</code></td>
<td>992px</td>
<td>Medium-sized window</td>
</tr>
<tr>
<td><code>lg</code></td>
<td>1200px</td>
<td>Large sized window</td>
</tr>
<tr>
<td><code>xl</code></td>
<td>Infinite</td>
<td>Extra large sized window</td>
</tr>
</tbody>
</table>
<p>Example: <code>col-md-7</code>, <code>offset-lg-3</code>, <code>col-xs-auto</code>.</p>
<blockquote>
<p>Before diving into examples, make sure you read and understood <a href="#Wrapping">Children Classes &gt; Wrapping</a> because it is key to understanding how you can build a responsive design.</p>
</blockquote>
<p>A full example: let’s say we have a row with three children. On extra small windows, we need to stack the children vertically, on small windows we need to display them side by side (each having equal width), and starting with medium windows we should display them all on same line:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4"</span>&gt;</span></span><br><span class="line">    col</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4"</span>&gt;</span></span><br><span class="line">    col</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4"</span>&gt;</span></span><br><span class="line">    col</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Notice in the above example that we used <code>col-xs-12</code> (12/12 = 100% of row, so each child will take full width of the container making all children stack vertically, since rows are wrapping content by default), <code>col-sm-6</code> (6/12 = 50% of row) and <code>col-md-4</code> (4/12 = 33% of row).</p>
<p>Like previously mentioned, rows wrap content by default, so when 12 (or more) grid points are used for a row, content is wrapped to the next line. If we have two <code>&lt;div&gt;</code>s and we use <code>col-8</code> on both, they will also stack, since 8 + 8 = 16 and we can only display 12 points on a single line.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    more than 12 grid points together,</span></span><br><span class="line"><span class="comment">    so second &lt;div&gt; will wrap on next line</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-8"</span>&gt;</span>col<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-8"</span>&gt;</span>col<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Also check <a href="/components/visibility.html#Window-Width-Related">CSS Helpers &gt; Visibility</a> page to see thresholds on window width and these tokens (xs, sm, md, lg, xl) used on their own to hide or show DOM elements.</p>
<h3 id="Customize-breakpoints"><a href="#Customize-breakpoints" class="headerlink" title="Customize breakpoints"></a>Customize breakpoints</h3><p>If you want to customize existing responsive breakpoints or add new ones, you can edit the <code>$size</code> Stylus variable:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sizes = &#123;</span><br><span class="line">  xs: 0,</span><br><span class="line">  sm: 575px</span><br><span class="line">  md: 767px</span><br><span class="line">  lg: 991px</span><br><span class="line">  xl: 1199px</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>IMPORTANT</strong><br>When customizing breakpoints, the smallest one must <em>always</em> be zero.</p>
</blockquote>
<h2 id="Flex-Addons"><a href="#Flex-Addons" class="headerlink" title="Flex Addons"></a>Flex Addons</h2><p><em>v0.17+</em></p>
<p>When enabled (through <code>quasar.conf &gt; framework &gt; cssAddon: true</code>) it provides breakpoint aware versions for all flex (and display) related CSS classes.</p>
<blockquote>
<p>Note that there will be a noticeable bump in CSS footprint when enabling it. So only do it if you really need it.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.flex-&lt;bp&gt;-(block|inline)</span><br><span class="line">.(row|column|flex)-&lt;bp&gt;(|-inline)</span><br><span class="line">.reverse-&lt;bp&gt;</span><br><span class="line">.(wrap|no-wrap|reverse-wrap)-&lt;bp&gt;</span><br><span class="line">.order-&lt;bp&gt;-(first|last|none)</span><br><span class="line">.justify-&lt;bp&gt;-(start|end|center|between|around)</span><br><span class="line">.items-&lt;bp&gt;-(start|end|center|baseline|stretch)</span><br><span class="line">.content-&lt;bp&gt;-(start|end|center|between|around)</span><br><span class="line">.self-&lt;bp&gt;-(start|end|center|baseline|stretch)</span><br><span class="line">.flex-&lt;bp&gt;-center</span><br><span class="line">.gutter-&lt;bp&gt;(|-x|-y)-(xs|sm|md|lg|xl)</span><br><span class="line">.(col|offset)-&lt;bp&gt;(|0..12)</span><br></pre></td></tr></table></figure>
<p>Starting with <em>v0.17.6</em> the addon was enhanced with responsive classes for spacing, both for padding and for margin:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.q-(p|m)(t|r|b|l|a|x|y)-&lt;bp&gt;-(none|auto|xs|sm|md|lg|xl)</span><br><span class="line">.q-my-&lt;bp&gt;-form</span><br></pre></td></tr></table></figure>
<p>Examples: <code>row-md</code> <code>items-lg-end</code> <code>q-pa-xs q-pa-sm-sm q-px-md-lg q-py-md-md</code></p>
<h2 id="Using-Gutters"><a href="#Using-Gutters" class="headerlink" title="Using Gutters"></a>Using Gutters</h2><p>There are 5 types of gutter, depending on the amount of space that you want between your elements:</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Size</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>gutter-xs</code></td>
<td>8px</td>
<td>extra small gutter</td>
</tr>
<tr>
<td><code>gutter-sm</code></td>
<td>16px</td>
<td>small gutter</td>
</tr>
<tr>
<td><code>gutter-md</code></td>
<td>32px</td>
<td>medium gutter</td>
</tr>
<tr>
<td><code>gutter-lg</code></td>
<td>48px</td>
<td>large gutter</td>
</tr>
<tr>
<td><code>gutter-xl</code></td>
<td>64px</td>
<td>extra large gutter</td>
</tr>
</tbody>
</table>
<p>Let’s look at a basic example. Please take note of the structure. You need a wrapping <code>&lt;div&gt;</code> and your content must be <strong>inside</strong> the <code>&lt;div&gt;</code> which has <code>col-*</code> CSS helper classes. The gutter classes make use of negative margins, so if your flex grid content is contained within, for example, a <code>q-collapsible</code> with a clickable area immediately above the flex grid, you must specify <code>class=&quot;overflow-hidden&quot;</code> to avoid the contents overlapping the active area of the parent component.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Example with extra small gutter and two equal width cols --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- wrapping &lt;div&gt; required --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"overflow-hidden"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- the row with a type of gutter --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row gutter-xs"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-6"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Your content here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-6"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Your content here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>IMPORTANT</strong><br>Some components have default margins, like the form components. This will add to the gutter, which is probably not what you want. For such cases, use <code>no-margin</code> class on those components, like in the example below:</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"overflow-hidden"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row gutter-xs"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-6"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">class</span>=<span class="string">"no-margin"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-6"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">class</span>=<span class="string">"no-margin"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>By default, the gutter applies both horizontally and vertically. If for example you want different levels of gutter only horizontally or only vertically, use <code>gutter-x-*</code> and <code>gutter-y-*</code> CSS classes:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- small gutter horizontally, large gutter vertically --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"overflow-hidden"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row gutter-x-sm gutter-y-lg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-6"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">class</span>=<span class="string">"no-margin"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-6"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">class</span>=<span class="string">"no-margin"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="QInput-Example"><a href="#QInput-Example" class="headerlink" title="QInput Example"></a>QInput Example</h3><p>Let’s say we want to build something depicted in the two pictures below.<br><img src="/images/gutter-sm.png" alt="QInput on sm+ windows"><br>… which becomes like below on xs windows:<br><img src="/images/gutter-xs.png" alt="QInput on xs windows"></p>
<p>The template for this would look like below. Note we are using <code>no-margin</code> CSS helper class for QInputs to not add additional space to gutter.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row gutter-sm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-12"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">inverted</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">class</span>=<span class="string">"no-margin"</span> <span class="attr">float-label</span>=<span class="string">"col-12"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">inverted</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">class</span>=<span class="string">"no-margin"</span> <span class="attr">float-label</span>=<span class="string">"col-xs-12 col-sm-6 TOP LEFT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">inverted</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">class</span>=<span class="string">"no-margin"</span> <span class="attr">float-label</span>=<span class="string">"col-xs-12 col-sm-6 TOP RIGHT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">inverted</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">class</span>=<span class="string">"no-margin"</span> <span class="attr">float-label</span>=<span class="string">"col-xs-12 col-sm-6 BOTTOM LEFT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">inverted</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">class</span>=<span class="string">"no-margin"</span> <span class="attr">float-label</span>=<span class="string">"col-xs-12 col-sm-6 BOTTOM RIGHT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-12"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">inverted</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">class</span>=<span class="string">"no-margin"</span> <span class="attr">float-label</span>=<span class="string">"col-12"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Handling Back Button]]></title>
      <url>https://quasar-framework.org/components/handling-back-button.html</url>
      <content type="html"><![CDATA[<p>When writing reusable code for building a mobile App and a website, it’s important to know how to handle the “Back” button. More specifically, how to manage buttons on your layout/page that should make your App “go back” to the previous screen.</p>
<blockquote>
<p>If you have no knowledge of <a href="http://router.vuejs.org/" target="_blank" rel="noopener">Vue Router</a>, we highly recommend you read and understand how it works first.</p>
</blockquote>
<h2 id="Cordova-Use-Case"><a href="#Cordova-Use-Case" class="headerlink" title="Cordova Use Case"></a>Cordova Use Case</h2><p>Quasar handles the back button for you by default, so it can hide any opened Modals/Dialogs <strong>instead of the default behavior</strong> which is to return to the previous page (which is not a nice user experience).</p>
<p>Also, when on the home route (‘/‘) and user presses the back button on the phone/tablet, Quasar will make your app exit. Should you wish to disable this behavior, then you can do so by configuring quasar.conf.js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Quasar v0.17+ only</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  framework: &#123;</span><br><span class="line">    config: &#123;</span><br><span class="line">      cordova: &#123;</span><br><span class="line">        backButtonExit: <span class="literal">true</span>/<span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Navigation-Scenario"><a href="#Navigation-Scenario" class="headerlink" title="Navigation Scenario"></a>Navigation Scenario</h2><p>Consider this situation: We have an App with two pages (so two routes): a login page (route “/“) and another page with a list of items on multiple layout tabs - let’s call this page “List page” from now on, where each tab has a route like “/list/shoes”, “/list/hats”. The Login page redirects to List page and List page has a “Logout” button, which redirects the user to the Login page.</p>
<p>How would you handle this situation? Normally, you’d write code like below for the Login and Logout button (we won’t go into details of handling the login information and communicating with a server as this is outside of the exercise here):</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Login button --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> @<span class="attr">click</span>=<span class="string">"$router.push('/list')"</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Logout button --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> @<span class="attr">click</span>=<span class="string">"$router.push('/login')"</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Now you build your App and install it on a phone. You open up the App, hit login then logout, then the phone’s back button. What you most likely want is for your App to exit at this point… but it doesn’t! It goes to the “/list” route instead. It’s kind of obvious why. Web history builds up as you hit the buttons:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Start App</span><br><span class="line">--&gt; window.history.length is 1</span><br><span class="line"></span><br><span class="line"># Hit Login button</span><br><span class="line">--&gt; window.history.length is 2</span><br><span class="line"></span><br><span class="line"># Hit Logout button</span><br><span class="line">--&gt; window.history.length is 3!</span><br></pre></td></tr></table></figure></p>
<p>What you’d like instead, is when you hit the Logout button, the <code>window.history.length</code> to be 1 again. Quasar can handle this automatically for you. Read about the <code>v-go-back</code> Vue directive.</p>
<h2 id="Directive-“v-go-back”"><a href="#Directive-“v-go-back”" class="headerlink" title="Directive “v-go-back”"></a>Directive “v-go-back”</h2><p>Let’s rewrite the Logout button to act as we would actually want it to work, which is to make <code>window.history.length</code> be 1 again.</p>
<p>First, we install the directive. Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  directives: [<span class="string">'GoBack'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Then we use it:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Logout button --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-go-back</span>=<span class="string">" '/' "</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"Logout"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>This directive determines if the Platform is Cordova, and if so, it performs a <code>window.history.back()</code> call instead of a <code>$router.push(&#39;/&#39;)</code>.</p>
<h2 id="Quirks"><a href="#Quirks" class="headerlink" title="Quirks"></a>Quirks</h2><p>Now you may think everything will work smoothly, but you must be careful about how your app is stacking up the window history. Remember, we started out by saying that the List page has a layout with multiple tabs, each one with its own route (“/list/shoes”, “/list/hats”). If we’d use <code>to=&quot;/list/shoes&quot;</code> and <code>to=&quot;/list/hats&#39;&quot;</code> on your Tabs (read more about Tabs <a href="/components/tabs.html">here</a>), then window history will build up when switching between the tabs.</p>
<p>This incorrect behavior for apps is due to Vue Router pushing routes to the history by default. What you’d like instead, is for your window history length to stay the same, even if routes change. Fortunately, Vue Router comes to the rescue with the <code>replace</code> property, which essentially replaces current route instead of pushing it as a new route.</p>
<p>So, besides <code>to=&quot; &#39;...route...&#39; &quot;</code> you should add the <code>replace</code> attribute (becoming <code>to=&quot; &#39;...route...&#39; &quot; replace</code>). This will replace the current route in the window history rather than pushing it.</p>
<p>The same applies to <code>&lt;router-link&gt;</code>s.</p>
<blockquote>
<p>Always <strong>think</strong> about how you redirect your App to a new route, depending on what you want to achieve. Think if you really want to push a new route to window history or if you want to “replace” the current route. Otherwise the phone/tablet/browser “Back” button won’t work quite as expected. Instead of finally exiting the App, it will make you go through all the routes in the reverse order they were visited. So when you hit back and go to the Login page, you’d expect another back to make the App exit, but it might make your App go to one of the List tabs, depending on the user’s navigation history.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Global Event Bus]]></title>
      <url>https://quasar-framework.org/components/global-event-bus.html</url>
      <content type="html"><![CDATA[<p>Events are important for the inner workings of your App.<br>Sometimes you need an event bus or a publish/subscribe channel. Vue already has an event bus for each component. For convenience, you can use the root Vue component for this through <code>this.$root</code> to register and listen for events.</p>
<blockquote>
<p><strong>IMPORTANT!</strong><br>Not to be confused with events supported by Quasar Components. Those are Vue events emitted by the respective components and don’t interfere with the global event bus.</p>
</blockquote>
<p>Please check the Vue <a href="https://vuejs.org/v2/api/#Instance-Methods-Events" target="_blank" rel="noopener">Instance Methods / Events</a> page for the API. Then let’s see how, for example, to register an event on the root Vue component of your app:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// callback</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cb</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(msg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// listen for an event</span></span><br><span class="line"><span class="keyword">this</span>.$root.$on(<span class="string">'event_name'</span>, cb)</span><br><span class="line"></span><br><span class="line"><span class="comment">// listen once (only) for an event</span></span><br><span class="line"><span class="keyword">this</span>.$root.$once(<span class="string">'event_name'</span>, cb)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make sure you stop listening for an event</span></span><br><span class="line"><span class="comment">// when your respective component gets destroyed</span></span><br><span class="line"><span class="keyword">this</span>.$root.$off(<span class="string">'event_name'</span>, cb)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Emitting an event:</span></span><br><span class="line"><span class="keyword">this</span>.$root.$emit(<span class="string">'event_name'</span>, <span class="string">'some message'</span>)</span><br></pre></td></tr></table></figure>
<p>Example using event to open drawer from another component or page</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// (1) This code is inside layout file that have a drawer</span></span><br><span class="line"><span class="comment">//     if this.leftDrawerOpen is true, drawer is displayed</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (2) Listen for an event in created</span></span><br><span class="line">created()&#123;</span><br><span class="line">  <span class="keyword">this</span>.$root.$on(<span class="string">"openLeftDrawer"</span>, <span class="keyword">this</span>.openLeftDrawercb);</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  openURL,</span><br><span class="line">  <span class="comment">// (3) Define the callback in methods</span></span><br><span class="line">  openLeftDrawercb() &#123;</span><br><span class="line">    <span class="keyword">this</span>.leftDrawerOpen = !<span class="keyword">this</span>.leftDrawerOpen;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (4) In another component or page, emit the event!</span></span><br><span class="line"><span class="comment">//     Call the method when clicking button etc.</span></span><br><span class="line">methods: &#123;</span><br><span class="line">  openLeftDrawer() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$root.$emit(<span class="string">"openLeftDrawer"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Icons]]></title>
      <url>https://quasar-framework.org/components/icons.html</url>
      <content type="html"><![CDATA[<p>The Quasar Icon component allows you to easily insert icons within other components or any other area of your pages, as you’d like.<br>Quasar currently supports: <a href="https://material.io/icons/" target="_blank" rel="noopener">Material Icons</a> , <a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">Font Awesome</a>, <a href="http://ionicons.com/" target="_blank" rel="noopener">Ionicons</a>, <a href="https://materialdesignicons.com/" target="_blank" rel="noopener">MDI</a> and <a href="https://icomoon.io/" target="_blank" rel="noopener">IcoMoon</a>.</p>
<p>Except for IcoMoon (which has a license), you can either choose to use only one of them or use multiple. Quasar just needs to know which icon set to use for its components.</p>
<p>We’ll see how we can install an icon set in the following section.<br>Please <a href="https://github.com/quasarframework/quasar/issues/new" target="_blank" rel="noopener">submit a request</a> if your favorite font icon is not listed here.</p>
<h2 id="Installing"><a href="#Installing" class="headerlink" title="Installing"></a>Installing</h2><p>If you are building a website only, then using a CDN (Content Delivery Network) approach can be an option you can follow. However, when building a mobile or Electron app, you most likely do not want to depend on an Internet connection, so it’s best that you follow the next steps.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br>Due to the license of IcoMoon and its custom build option, this icon font is not provided by out of the box. You will need to use <a href="https://icomoon.io/app/#/select" target="_blank" rel="noopener">their website</a> to create your custom icon font files and then copy them to your app’s folder and import them in an app plugin (<code>$ quasar new plugin icomoon</code>).</p>
</blockquote>
<h3 id="Adding-an-Icon-Set"><a href="#Adding-an-Icon-Set" class="headerlink" title="Adding an Icon Set"></a>Adding an Icon Set</h3><p>First step is to make an icon set available in your website/app. For this, edit <code>/quasar.conf.js</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">extras: [</span><br><span class="line">  <span class="string">'material-icons'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Icon sets are available through <a href="https://github.com/quasarframework/quasar-extras" target="_blank" rel="noopener">quasar-extras</a> package. You don’t need to import it in your app, just configure <code>/quasar.conf.js</code> as indicated.</p>
</blockquote>
<p>Adding more than one set (showing all options):<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">extras: [</span><br><span class="line">  <span class="string">'material-icons'</span>,</span><br><span class="line">  <span class="string">'mdi'</span>,</span><br><span class="line">  <span class="string">'ionicons'</span>,</span><br><span class="line">  <span class="string">'fontawesome'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<h3 id="Quasar-Using-an-Icon-Set"><a href="#Quasar-Using-an-Icon-Set" class="headerlink" title="Quasar Using an Icon Set"></a>Quasar Using an Icon Set</h3><p>Unless configured otherwise, Quasar uses Material Icons as its icon set for its components. You can however tell Quasar to use some other icon set, but be sure to include that set in your website/app (see step above: <a href="#Adding-an-icon-set">Adding an Icon Set</a>).</p>
<p>So let’s say we included Ionicons and we want Quasar to use it for its components. We edit <code>/quasar.conf.js</code> again:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  iconSet: <span class="string">'ionicons'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Full-Example"><a href="#Full-Example" class="headerlink" title="Full Example"></a>Full Example</h3><p>Here is an example of including Ionicons &amp; Fontawesome and telling Quasar to use Fontawesome for its components.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">extras: [</span><br><span class="line">  <span class="string">'ionicons'</span>,</span><br><span class="line">  <span class="string">'fontawesome'</span></span><br><span class="line">],</span><br><span class="line">framework: &#123;</span><br><span class="line">  iconSet: <span class="string">'fontawesome'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This will enable you to use both Ionicons &amp; Fontawesome in your app, and all Quasar components will display Fontawesome icons.</p>
<h3 id="Including-from-CDN"><a href="#Including-from-CDN" class="headerlink" title="Including from CDN"></a>Including from CDN</h3><p>If you want to make use of CDNs (Content Delivery Network), all you need is to include style tags in your <code>index.template.html</code> which point to the CDN URL.</p>
<p>In case you follow this path, do not also add the icon sets that you want in <code>/quasar.conf.js &gt; extras</code>. Simply edit <code>index.template.html</code> as follows.</p>
<p>The example link tag below would include Font Awesome v4.7.0 icons. Do a Google search for CDNs to make sure you include the latest version. Following are just examples.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- in `/src/index.template.html` --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- CDN example for Material Icons --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">    <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">"https://fonts.googleapis.com/icon?family=Material+Icons"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- CDN example for Fontawesome 5.0.13 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">    <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">"https://use.fontawesome.com/releases/v5.0.13/css/all.css"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">integrity</span>=<span class="string">"sha384-DNOHZ68U8hZfKXOrtjWvjxusGo9WQnrNx2sqG0tfsghAvtVlRW3tvkXWZh58N9jp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- CDN example for Ionicons --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">    <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">"https://unpkg.com/ionicons@4.1.1/dist/css/ionicons.min.css"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Using-Fontawesome-Pro"><a href="#Using-Fontawesome-Pro" class="headerlink" title="Using Fontawesome-Pro"></a>Using Fontawesome-Pro</h3><p>If you have a Fontawesome 5 Pro license and want to use it instead Fontawesome Free version. Following this instructions.</p>
<ol>
<li>Open <a href="https://fontawesome.com/account" target="_blank" rel="noopener">Linked Accounts section</a> in Fontawesome’s user account page to grab npm TOKENID (login if necessary).</li>
<li><p>Create or append TOKENID into file .npmrc (file path same as package.json):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@fortawesome:registry=https://npm.fontawesome.com/TOKENID</span><br></pre></td></tr></table></figure>
</li>
<li><p>Install Fontawesome webfonts:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn add @fortawesome/fontawesome-pro</span><br><span class="line"><span class="comment"># or:</span></span><br><span class="line">$ npm install @fortawesome/fontawesome-pro</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create new App plugin:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar new plugin fontawesome-pro</span><br></pre></td></tr></table></figure>
</li>
<li><p>Edit <code>/quasar.conf.js</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">'fontawesome-pro'</span> <span class="comment">// Add app plugin</span></span><br><span class="line">],</span><br><span class="line">extras: [</span><br><span class="line">  <span class="comment">// 'fontawesome' // Disable free version!</span></span><br><span class="line">],</span><br><span class="line">framework: &#123;</span><br><span class="line">  <span class="comment">// if you want Quasar to use Fontawesome for its icons</span></span><br><span class="line">  iconSet: <span class="string">'fontawesome-pro'</span> <span class="comment">// requires Quasar v0.15.6+</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Edit <code>/src/plugins/fontawesome-pro.js</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// required</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'@fortawesome/fontawesome-pro/css/fontawesome.min.css'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'@fortawesome/fontawesome-pro/css/light.min.css'</span></span><br><span class="line"><span class="comment">// do you want these too?</span></span><br><span class="line"><span class="comment">// import '@fortawesome/fontawesome-pro/css/brands.min.css'</span></span><br><span class="line"><span class="comment">// import '@fortawesome/fontawesome-pro/css/solid.min.css'</span></span><br><span class="line"><span class="comment">// import '@fortawesome/fontawesome-pro/css/regular.min.css'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// Leave blank or make something cool.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>(Optional) Override default icons:</p>
</li>
</ol>
<p>Since the default <code>font-weight</code> for fontawesome-pro is <code>light</code> or <code>fal</code>, some icons used by the framework components may not be desirable. The best way to handle this is to override it in the plugin you created.</p>
<p>For instance, to override the <code>fal</code> version of the close icon for chips, do this:</p>
<p><em>First</em>, find the icon used for chip close in Quasar’s <code>quasar/icons/fontawesome-pro.js</code></p>
<p>(Alternatively, you can check inside the render function of the component you are overriding.)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">chip: &#123;</span><br><span class="line">  close: <span class="string">'fal fa-times-circle'</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><em>Then</em>, override it in your <code>/src/plugins/fontawesome-pro.js</code><br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'@fortawesome/fontawesome-pro/css/fontawesome.min.css'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'@fortawesome/fontawesome-pro/css/solid.min.css'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'@fortawesome/fontawesome-pro/css/light.min.css'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; Vue &#125;) =&gt; &#123;</span><br><span class="line">  Vue.prototype.$q.icon.chip.close = <span class="string">'fas fa-times-circle'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Let’s take a look at how we can use QIcon component. Do not forget to check above how to <a href="#Installing">Install Icon Sets</a>, otherwise they won’t show up!</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Material icons have no prefix --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"thumb_up"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Ionicons have "ion-", "ion-logo", "ion-md-" or "ion-ios-" as prefix --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"ion-heart"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Fontawesome icons have "fa[s|r|l|b] fa-" prefix --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"fas fa-id-card"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- MDI icons have "mdi-" prefix --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"mdi-account-card-details"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- IcoMoon icons have "icon-" prefix --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"icon-chrome"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  or if you prefer the non self-closing tag version</span></span><br><span class="line"><span class="comment">  which allows to add a QPopover or QTooltip:</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"thumb_up"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tooltip</span>&gt;</span>Some tooltip<span class="tag">&lt;/<span class="name">q-tooltip</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-icon</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>For “icon” properties on different Quasar components you won’t have the means to specify an icon for each platform, but you can achieve the same effect with:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-item-side</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:icon</span>=<span class="string">"$q.theme === 'mat' ? 'settings' : 'ion-ios-gear-outline'"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>name</code></td>
<td>String</td>
<td>The name of the icon to be used (for both Quasar themes).</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One color from the Quasar Color Palette.</td>
</tr>
<tr>
<td><code>size</code></td>
<td>String</td>
<td>Example: ‘12px’, ‘3.2rem’, ‘14pt’.</td>
</tr>
</tbody>
</table>
<h3 id="Size-amp-Colors"><a href="#Size-amp-Colors" class="headerlink" title="Size &amp; Colors"></a>Size &amp; Colors</h3><p>All icons are <strong>font icons</strong>. This means that you can change size by manipulating <code>font-size</code> CSS property. And also, they inherit the current CSS <code>color</code> used.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"mail"</span> <span class="attr">style</span>=<span class="string">"font-size: 25px"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color: #a2e2e3"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">&lt;!-- inheriting color #a2e2e3: --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"alarm"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Colors from the <a href="/components/color-palette.html">Quasar Color Palette</a> can be specified in two ways:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"mail"</span> <span class="attr">class</span>=<span class="string">"text-red"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- or by using `color` prop: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"alarm"</span> <span class="attr">color</span>=<span class="string">"red"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"alarm"</span> <span class="attr">color</span>=<span class="string">"green-2"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>There’s also a “size” property:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"wifi"</span> <span class="attr">size</span>=<span class="string">"2rem"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"delete"</span> <span class="attr">size</span>=<span class="string">"24px"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Cheatsheet"><a href="#Cheatsheet" class="headerlink" title="Cheatsheet"></a>Cheatsheet</h3><table>
<thead>
<tr>
<th>Name</th>
<th>Prefix</th>
<th>Examples</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>material-icons</td>
<td><em>None</em></td>
<td>thumb_up</td>
<td>Notice the underline character instead of dash or space</td>
</tr>
<tr>
<td>ionicons</td>
<td>ion-, ion-md-, ion-ios-, ion-logo-</td>
<td>ion-heart, ion-logo-npm, ion-md-airplane</td>
<td>Use QIcon instead of <code>&lt;ion-icon&gt;</code> component; Logo icons require ‘ion-logo-‘ prefix</td>
</tr>
<tr>
<td>fontawesome</td>
<td>fa[s,r,l,b] fa-</td>
<td>“fas fa-ambulance”</td>
<td>QIcon “name” property is same as “class” attribute value in Fontawesome docs examples (where they show <code>&lt;i&gt;</code> tags)</td>
</tr>
<tr>
<td>mdi</td>
<td>mdi-</td>
<td>mdi-alert-circle-outline</td>
<td>Notice the use of dash characters</td>
</tr>
</tbody>
</table>
<h3 id="More-Examples"><a href="#More-Examples" class="headerlink" title="More Examples"></a>More Examples</h3><p>With HTML native <code>style</code> attribute:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"thumb_up"</span> <span class="attr">style</span>=<span class="string">"font-size: 5rem;"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>With HTML native <code>class</code> attribute:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"thumb_up"</span> <span class="attr">class</span>=<span class="string">"big-icon"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>Note</strong><br>To create the necessary CSS class, you would need to define the class within your component’s style section as below. Watch for CSS class clashes though.</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;style lang=<span class="string">"stylus"</span>&gt;</span><br><span class="line">.big-<span class="attribute">icon</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">5rem</span></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>Adding a <code>click</code> event handle. Remember we want to capture a native DOM event and this is a Vue component, so we use the <a href="https://vuejs.org/v2/guide/components.html#Binding-Native-Events-to-Components" target="_blank" rel="noopener">‘.native’ modifier</a>:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-icon</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">"map"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">click.native</span>=<span class="string">"handle"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Infinite Scroll]]></title>
      <url>https://quasar-framework.org/components/infinite-scroll.html</url>
      <content type="html"><![CDATA[<p>When you want to progressively load new content as the user scrolls down your Page, use QInfiniteScroll component.</p>
<input type="hidden" data-fullpage-demo="scrolling/infinite-scroll">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QInfiniteScroll'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-infinite-scroll</span> <span class="attr">:handler</span>=<span class="string">"loadMore"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Content, in this case some &lt;p&gt; tags --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span></span><br><span class="line">    Lorem ipsum dolor sit amet...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    slot="message" for DOM element to display (in this example</span></span><br><span class="line"><span class="comment">    a dots spinner) when loading additional content</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-spinner-dots</span> <span class="attr">slot</span>=<span class="string">"message"</span> <span class="attr">:size</span>=<span class="string">"40"</span>&gt;</span><span class="tag">&lt;/<span class="name">q-spinner-dots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-infinite-scroll</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>IMPORTANT</strong><br>Infinite Scroll loads items in advance when less than one screen height is left to be seen. If the content you fetch has height less than the container’s height on screen then Infinite Scroll will continue loading more content. So make sure you load enough content.</p>
</blockquote>
<blockquote>
<p><strong>IMPORTANT</strong><br>This works best when placed as direct child of the Vue component rendering your Page. If you place it under an overflowed DOM element or component, don’t forget to set the <code>inline</code> prop.</p>
</blockquote>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Required</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>handler</code></td>
<td><em>Yes</em></td>
<td>Function</td>
<td>Method from VM to be called to load more content</td>
</tr>
<tr>
<td><code>inline</code></td>
<td></td>
<td><em>Empty</em></td>
<td>Use it when you place your infinite scroll within an overflowed DOM element</td>
</tr>
<tr>
<td><code>offset</code></td>
<td></td>
<td>Number</td>
<td>Offset (pixels) to bottom of Infinite Scroll container from which the component should start loading more content in advance. Default it’s one container height.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>loadMore()</code></td>
<td>Tells Infinite Scroll to load more content, regardless of the scroll position.</td>
</tr>
<tr>
<td><code>reset()</code></td>
<td>Resets calling index to 0.</td>
</tr>
<tr>
<td><code>stop()</code></td>
<td>Stops working, regardless of scroll position.</td>
</tr>
<tr>
<td><code>resume()</code></td>
<td>Starts working. Checks scroll position upon call and if trigger is hit, it loads more content.</td>
</tr>
<tr>
<td><code>poll()</code></td>
<td>Checks scroll position and loads more content if necessary.</td>
</tr>
</tbody>
</table>
<h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><p>The handler Function takes two parameters:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">loadMore: <span class="function"><span class="keyword">function</span>(<span class="params">index, done</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// index - called for nth time</span></span><br><span class="line">  <span class="comment">// done - Function to call when you made all necessary updates.</span></span><br><span class="line">  <span class="comment">//        DO NOT forget to call it otherwise your loading message</span></span><br><span class="line">  <span class="comment">//        will continue to be displayed. Has optional boolean</span></span><br><span class="line">  <span class="comment">//        parameter that invokes stop() when true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// make some Ajax call then call done()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>The <code>index</code> parameter can be used to make some sort of pagination on the content you load. It takes numeric values starting with 1 and incrementing with each call.</p>
<h2 id="Inline-Usage"><a href="#Inline-Usage" class="headerlink" title="Inline Usage"></a>Inline Usage</h2><p>Use it when you place your infinite scroll within an overflowed DOM element.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-infinite-scroll</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:handler</span>=<span class="string">"loadMore"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">inline</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">"height: 400px; overflow: auto;"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-infinite-scroll</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Controlling-Infinite-Scroll"><a href="#Controlling-Infinite-Scroll" class="headerlink" title="Controlling Infinite Scroll"></a>Controlling Infinite Scroll</h2><p>If for some reason you need to control the working state of Infinite Scroll component, use a Vue reference and call methods from above.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-infinite-scroll</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:handler</span>=<span class="string">"loadMore"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">ref</span>=<span class="string">"infiniteScroll"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$refs.infiniteScroll.stop()"</span>&gt;</span></span><br><span class="line">    Stop Loading More</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-infinite-scroll</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Overview]]></title>
      <url>https://quasar-framework.org/components/index.html</url>
      <content type="html"><![CDATA[<p>Quasar Apps are made of high-level building blocks called components. Components allow you to quickly construct an interface for your App. Quasar comes with a number of components, including modals, action sheets, collapsibles, cards, dialogs, FAB, lists and many more.</p>
<p>Quasar Components are written as Web Components, so they embed HTML, CSS and Javascript code that you can use by just including an HTML tag in your Page and Layout templates.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br>For Vue &amp; Quasar developers (beginners or not), read <a href="/components/introduction-for-beginners.html">Introduction for Beginners</a> first. It’s mandatory in order to understand how you can use Vue properties, methods and so on.</p>
</blockquote>
<p>Check out the live demos for each Quasar theme to see what each component looks like and to learn how to use each one. If you widen your browser window enough then you’ll see a live demo on the right side of each component page.</p>
<p>Live Component Demo:</p>
<ul>
<li><a href="http://quasar-framework.org/quasar-play/android/index.html#/showcase">Material Theme</a></li>
<li><a href="http://quasar-framework.org/quasar-play/apple/index.html#/showcase">iOS Theme</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Inner Loading]]></title>
      <url>https://quasar-framework.org/components/inner-loading.html</url>
      <content type="html"><![CDATA[<p>The QInnerLoading component allows you to add a progress animation within a component. Much like the <a href="loading.html">Loading feature</a>, it’s purpose is to offer visual confirmation to the user that some process is happening in the background, which takes an excessive amount of time. QInnerLoading will add an opaque overlay over the delayed element along with a <a href="/components/spinner.html">Spinner</a>.</p>
<input type="hidden" data-fullpage-demo="progress/inner-loading">

<blockquote>
<p><strong>Note</strong><br>In order for the spinner to be properly placed in the center of the element you want the loading display to show over, that element must have the <code>relative-position</code> CSS class declared.</p>
</blockquote>
<blockquote>
<p><strong>Note</strong><br>QInnerLoading must be the last element inside it’s parent so it can appear on top of the other content</p>
</blockquote>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [</span><br><span class="line">  <span class="string">'QInnerLoading'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//... if using custom spinner, add it too</span></span><br><span class="line">  <span class="comment">//whatever that is</span></span><br><span class="line">  <span class="string">'QSpinnerGears'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row justify-center"</span> <span class="attr">style</span>=<span class="string">"margin-top: 40px"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-card</span> <span class="attr">style</span>=<span class="string">"width: 288px; height: 262px;"</span> <span class="attr">color</span>=<span class="string">"grey-2"</span> <span class="attr">class</span>=<span class="string">"text-dark relative-position"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-card-title</span>&gt;</span></span><br><span class="line">      Lorem Ipsum</span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-card-title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-card-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-transition</span></span></span><br><span class="line"><span class="tag">        <span class="attr">appear</span></span></span><br><span class="line"><span class="tag">        <span class="attr">enter</span>=<span class="string">"fadeIn"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">leave</span>=<span class="string">"fadeOut"</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"showSimulatedReturnData"</span>&gt;</span></span><br><span class="line">          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent vel magna eu risus laoreet tristique. Nulla ut fermentum elit, nec consequat augue. Morbi et dolor nec metus tincidunt pellentesque. Nullam non semper ante. Fusce pellentesque sagittis felis quis porta. Aenean condimentum neque sed erat suscipit malesuada. Nulla eget rhoncus enim. Duis dictum interdum eros.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-card-main</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      Place QInnerLoading as the last child element.</span></span><br><span class="line"><span class="comment">      This is important for it to be displayed on top of the other content.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-inner-loading</span> <span class="attr">:visible</span>=<span class="string">"visible"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-spinner-gears</span> <span class="attr">size</span>=<span class="string">"50px"</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span><span class="tag">&lt;/<span class="name">q-spinner-gears</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-inner-loading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>View the source of the demo for the full example.</p>
<p>Use <code>v-show</code> or <code>v-if</code> and the Inner Loading component’s <code>:visible</code> prop to toggle between the animation and your content.</p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Darkens the color of the opaque overlay for darker designs</td>
</tr>
<tr>
<td><code>visible</code></td>
<td>Boolean</td>
<td>The loading effect becomes visible when true</td>
</tr>
<tr>
<td><code>size</code></td>
<td>Number, String</td>
<td>Changes the default size of the default spinner. The default is 42 pixels.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>Specify color of the default spinner.</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>Note</strong><br>If you add your own spinner, use the spinner’s own <code>size</code> and <code>color</code> prop to change the size and color.</p>
</blockquote>
<p>To change the spinner, you can add your own as a child of QInnerLoading component. The below code would add a <code>teal</code>-variation gear spinner with the size of 50 pixels.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-inner-loading</span> <span class="attr">:visible</span>=<span class="string">"visible"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-spinner-gears</span> <span class="attr">size</span>=<span class="string">"50px"</span> <span class="attr">color</span>=<span class="string">"teal-4"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-inner-loading</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>In most cases, you’ll probably want to add your own spinner, color and size. For more information on spinner control, please refer to the <a href="/components/spinner.html">Spinner section</a> of the docs.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Input (Textfield)]]></title>
      <url>https://quasar-framework.org/components/input-textfield.html</url>
      <content type="html"><![CDATA[<p>Quasar’s Input component is the basis for text (we’ll call it “Singe Line Input”) and textarea (we’ll call it “Multiple Line Input”) form input. It can be used for regular text input, passwords, email addresses, numbers, telephone numbers, urls and auto-growing text areas.</p>
<input type="hidden" data-fullpage-demo="forms/input">

<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QInput'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Single Line Input --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">stack-label</span>=<span class="string">"Stack Label"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">float-label</span>=<span class="string">"Float Label"</span> <span class="attr">placeholder</span>=<span class="string">"Gigi"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Multiple Line Input --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"area"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">"textarea"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">float-label</span>=<span class="string">"Textarea"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max-height</span>=<span class="string">"100"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rows</span>=<span class="string">"7"</span></span></span><br><span class="line"><span class="tag">/&gt;</span><span class="comment">&lt;!-- max-height refers to pixels --&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which should be bound to a String or Number (depending on <code>type</code> property used) in your scope.</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>type</code></td>
<td>String</td>
<td>Must be one of the following: <code>text</code> (default), <code>textarea</code>, <code>email</code>, <code>tel</code>, <code>number</code>, <code>password</code>, <code>url</code> and <code>search</code>. This is important as it determines the keyboard type popping up on mobile devices.</td>
</tr>
<tr>
<td><code>readonly</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, textfield is readonly and the user cannot change value.</td>
</tr>
<tr>
<td><code>clearable</code></td>
<td>Boolean</td>
<td>If used, the component offers the user an actionable icon to reset the current value to <code>clear-value</code> (which is by default an empty string). The icon appears only when the current value matches <code>clear-value</code>.</td>
</tr>
<tr>
<td><code>clear-value</code></td>
<td>String</td>
<td>The value to which to reset the field model to when using <code>clearable</code>. The default value is an empty string.</td>
</tr>
<tr>
<td><code>no-pass-toggle</code></td>
<td>Boolean</td>
<td>If type is ‘password’ and set to <code>true</code>, then password toggle is not shown.</td>
</tr>
<tr>
<td><code>initial-show-password</code></td>
<td>Boolean</td>
<td>If type is ‘password’ and set to <code>true</code>, then password is toggled to visible by default.</td>
</tr>
<tr>
<td><code>upper-case</code></td>
<td>Boolean</td>
<td>Transform input to upper case.</td>
</tr>
<tr>
<td><code>lower-case</code></td>
<td>Boolean</td>
<td>Transform input to lower case.</td>
</tr>
</tbody>
</table>
<p>When you set type to “number”, there are some additional properties that you can use:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>decimals</code></td>
<td>Number</td>
<td>Maximum number of decimals that should be displayed.</td>
</tr>
<tr>
<td><code>numeric-keyboard-toggle</code></td>
<td>Boolean</td>
<td>Some mobile keyboards do not allow to type the dot to compose a floating number, so this property adds an icon that when clicked/tapped it toggles the keyboard to/from an alphanumeric one.</td>
</tr>
</tbody>
</table>
<p>Also note you can use the native DOM attributes of an input: “min”, “max”, “step”.</p>
<p>When you set type to “textarea”, these is an additional property that you can use:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>max-height</code></td>
<td>Number</td>
<td>Number in pixels that determines the maximum height of textarea which auto-grows.</td>
</tr>
</tbody>
</table>
<p>There’s also the native DOM attribute of a textarea: ‘rows’.</p>
<p>Common input field properties:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>autofocus</code></td>
<td>Boolean</td>
<td>Focus input field after rendering component.</td>
</tr>
<tr>
<td><code>placeholder</code></td>
<td>String</td>
<td>A text to be shown on textfield, mainly to explain what should be entered.</td>
</tr>
<tr>
<td><code>loading</code></td>
<td>Boolean</td>
<td>Place the default spinner of the theme after textfield to highlight some process takes place in the background.</td>
</tr>
</tbody>
</table>
<p>Common input frame properties:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>prefix</code></td>
<td>String</td>
<td>A text that should be shown before the textfield.</td>
</tr>
<tr>
<td><code>suffix</code></td>
<td>String</td>
<td>A text that should be shown after the textfield.</td>
</tr>
<tr>
<td><code>float-label</code></td>
<td>String</td>
<td>A text label that will “float” up above the input field, once the input field gets focus.</td>
</tr>
<tr>
<td><code>stack-label</code></td>
<td>String</td>
<td>A text label that will be shown above the input field and is static.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>inverted</code></td>
<td>Boolean</td>
<td>Inverted mode. Color is applied to background instead.</td>
</tr>
<tr>
<td><code>inverted-light</code></td>
<td>Boolean</td>
<td>Inverted mode with a light color. Color is applied to background instead.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Is QInput rendered on a dark background?</td>
</tr>
<tr>
<td><code>align</code></td>
<td>String</td>
<td>One of ‘left’, ‘center’ or ‘right’ which determines the text align within textfield.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, textfield is disabled and the user cannot type anything.</td>
</tr>
<tr>
<td><code>hide-underline</code></td>
<td>Boolean</td>
<td>Hides the bottom border.</td>
</tr>
<tr>
<td><code>error</code></td>
<td>Boolean</td>
<td>If set to true, the input fields colors are changed to show there is an error.</td>
</tr>
<tr>
<td><code>warning</code></td>
<td>Boolean</td>
<td>Same as <code>error</code>, the input field color is changed to show there is a warning.</td>
</tr>
<tr>
<td><code>before</code></td>
<td>Array of Objects</td>
<td>Icon buttons on left side of textfield. Read below more details.</td>
</tr>
<tr>
<td><code>after</code></td>
<td>Array of Objects</td>
<td>Icon buttons on right side of textfield. Read below more details.</td>
</tr>
<tr>
<td><code>no-parent-field</code></td>
<td>Boolean</td>
<td>Avoid trying to connect to a parent QField.</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>IMPORTANT</strong><br>All DOM attributes that apply to a native <code>&lt;input&gt;</code> or <code>&lt;textarea&gt;</code> can be used. Example: <code>maxlength</code>, <code>rows</code>, <code>min</code>/<code>max</code>/<code>step</code>, <code>autocomplete</code> and so on.</p>
</blockquote>
<h3 id="Icon-buttons"><a href="#Icon-buttons" class="headerlink" title="Icon buttons"></a>Icon buttons</h3><p>This section refers to <code>before</code> and <code>after</code> properties which can add additional buttons as icons to the textfield. Here is the structure of the two properties:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// required icon</span></span><br><span class="line">  icon: <span class="built_in">String</span>,</span><br><span class="line">  <span class="comment">// required function to call when</span></span><br><span class="line">  <span class="comment">// icon is clicked/tapped</span></span><br><span class="line">  handler: <span class="built_in">Function</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Optional. Show icon button</span></span><br><span class="line">  <span class="comment">// if textfield model has a value</span></span><br><span class="line">  content: <span class="built_in">Boolean</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Optional. Show icon button</span></span><br><span class="line">  <span class="comment">// if condition is true</span></span><br><span class="line">  condition: <span class="built_in">Boolean</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Optional. Show icon button</span></span><br><span class="line">  <span class="comment">// if textfield is marked with error</span></span><br><span class="line">  error: <span class="built_in">Boolean</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Optional. Show icon button</span></span><br><span class="line">  <span class="comment">// if textfield is marked with warning</span></span><br><span class="line">  warning: <span class="built_in">Boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Examples:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Show an icon button (with 'warning' as icon)</span></span><br><span class="line"><span class="comment">  when there is an error on QInput (through "error" prop)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:error</span>=<span class="string">"error"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">"password"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:after</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">      icon: 'warning',</span></span></span><br><span class="line"><span class="tag"><span class="string">      error: true,</span></span></span><br><span class="line"><span class="tag"><span class="string">      handler () &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        // do something...</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">  ]"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Show an icon button (with 'arrow_forward' as icon)</span></span><br><span class="line"><span class="comment">  when the model has a non empty value</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:after</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">      icon: 'arrow_forward',</span></span></span><br><span class="line"><span class="tag"><span class="string">      content: true,</span></span></span><br><span class="line"><span class="tag"><span class="string">      handler () &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        // do something...</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">  ]"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Labeling"><a href="#Labeling" class="headerlink" title="Labeling"></a>Labeling</h3><p>QInput comes with two built-in labeling possibilities. You can use the <code>float-label</code> or the <code>stack-label</code> properties to add text for the labeling of the field. A <code>stack-label</code> is static in its position above the field, whereas the <code>float-label</code> is more dynamic. Check the examples to the right to see the difference.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">stack-label</span>=<span class="string">"Stack Label"</span> <span class="attr">placeholder</span>=<span class="string">"Add some text..."</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">float-label</span>=<span class="string">"Float Label"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>As shown above, you can also add a placeholder to help explain to the user what type of input should be entered.</p>
<h3 id="Password-Input"><a href="#Password-Input" class="headerlink" title="Password Input"></a>Password Input</h3><p>If you use the input type <code>password</code>, the component will hide the characters entered by the user, but it will also offer the user a clickable icon to toggle the input, to make the input legible.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">float-label</span>=<span class="string">"Password"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Number-Input"><a href="#Number-Input" class="headerlink" title="Number Input"></a>Number Input</h3><p>The below example shows a number input type.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"number"</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">float-label</span>=<span class="string">"Number"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Prefixes-and-Suffixes"><a href="#Prefixes-and-Suffixes" class="headerlink" title="Prefixes and Suffixes"></a>Prefixes and Suffixes</h3><p>You can add a text before or after the field as part of an input mask, for instance, for showing Euro or US Dollar currency.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Notice prefix property --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"number"</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">prefix</span>=<span class="string">"$US"</span> <span class="attr">stack-label</span>=<span class="string">"Number"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Notice suffix property --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"number"</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">suffix</span>=<span class="string">"€"</span> <span class="attr">stack-label</span>=<span class="string">"Number"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Notice suffix property --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">suffix</span>=<span class="string">"@gmail.com"</span> <span class="attr">stack-label</span>=<span class="string">"Type Google Email"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Error-State"><a href="#Error-State" class="headerlink" title="Error State"></a>Error State</h3><p>You can control the color to show a mistake in user input or some other systematic error. To do this set the <code>error</code> prop to true.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">:error</span>=<span class="string">"error"</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">float-label</span>=<span class="string">"Colored Black"</span> <span class="attr">color</span>=<span class="string">"black"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>If you’d like to show the user an explanatory text about the error condition, you can wrap the QInput in a QField component.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Notice error prop is now used on wrapper QField</span></span><br><span class="line"><span class="comment">  instead of on QInput now</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-field</span> <span class="attr">:error</span>=<span class="string">"error"</span> <span class="attr">error-label</span>=<span class="string">"Oh buggers! You made a boo boo."</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">float-label</span>=<span class="string">"Colored with Error"</span> <span class="attr">color</span>=<span class="string">"amber"</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Please refer to the <a href="/components/field.html">QField documentation</a> for more info about its usage.</p>
<h3 id="Loading-State"><a href="#Loading-State" class="headerlink" title="Loading State"></a>Loading State</h3><p>If, for some reason, the input requires some longer term background action or process, you can add a spinner to indicate progress by setting the <code>loading</code> prop to <code>true</code>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">:loading</span>=<span class="string">"loading"</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Add some text..."</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>clear()</code></td>
<td>Clear the model. Sets it to empty String <code>&#39;&#39;</code>.</td>
</tr>
<tr>
<td><code>togglePass()</code></td>
<td>Applies to type “password” only. Toggles between showing legible password or not.</td>
</tr>
<tr>
<td><code>focus()</code></td>
<td>Focused the textfield.</td>
</tr>
<tr>
<td><code>blur()</code></td>
<td>Makes textfield lose focus.</td>
</tr>
<tr>
<td><code>select()</code></td>
<td>Selects all textfield text and focuses.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@input(newVal)</code></td>
<td>Triggered on immediate model value change.</td>
</tr>
<tr>
<td><code>@change(newVal)</code></td>
<td>Triggered on lazy model value change.</td>
</tr>
<tr>
<td><code>@clear(clearVal)</code></td>
<td>Triggered when the model is cleared.</td>
</tr>
<tr>
<td><code>@focus</code></td>
<td>Triggered on focus.</td>
</tr>
<tr>
<td><code>@blur</code></td>
<td>Triggered a blur.</td>
</tr>
<tr>
<td><code>@keydown</code></td>
<td>Triggered by keydown event on textfield.</td>
</tr>
<tr>
<td><code>@keyup</code></td>
<td>Triggered by keyup event on textfield.</td>
</tr>
<tr>
<td><code>@click</code></td>
<td>Triggered by a native <code>click</code> event on textfield.</td>
</tr>
<tr>
<td><code>@paste</code></td>
<td>(v0.17.10+) Triggered by a paste event on the textfield.</td>
</tr>
</tbody>
</table>
<h2 id="Formatting"><a href="#Formatting" class="headerlink" title="Formatting"></a>Formatting</h2><p>It is possible to add formatting to a QInput in two ways. One is for the basic component. The other is with the QField component. Both methods offer “inverted” coloring.</p>
<h3 id="Additional-Vue-Properties"><a href="#Additional-Vue-Properties" class="headerlink" title="Additional Vue Properties"></a>Additional Vue Properties</h3><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>The color the QInput should have. The default is <code>primary</code>.</td>
</tr>
<tr>
<td><code>inverted</code></td>
<td>Boolean</td>
<td>Set to <code>true</code>, to color field’s background set by the <code>color</code> prop.</td>
</tr>
<tr>
<td><code>inverted-light</code></td>
<td>Boolean</td>
<td>Set to <code>true</code>, to color field’s background set by the <code>color</code> prop (when that color is light).</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Set to true, if the field is on a dark background. It will invert the text color to make it light.</td>
</tr>
<tr>
<td><code>align</code></td>
<td>Text</td>
<td>Controls the ‘right’, ‘center’ or ‘left’ alignment of the input. The default is ‘left’.</td>
</tr>
</tbody>
</table>
<h3 id="Basic-Formatting-Examples"><a href="#Basic-Formatting-Examples" class="headerlink" title="Basic Formatting Examples"></a>Basic Formatting Examples</h3><p>This will color the field black.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">float-label</span>=<span class="string">"Colored"</span> <span class="attr">color</span>=<span class="string">"black"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>This will show an inverted colored input field in amber. Here, the text is automatically inverted to a lighter color.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">inverted-light</span> <span class="attr">color</span>=<span class="string">"amber"</span> <span class="attr">stack-label</span>=<span class="string">"Amber Colored Background"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Alignment"><a href="#Alignment" class="headerlink" title="Alignment"></a>Alignment</h3><p>You can also align the input to the right, center or left. The default is left. The below example will show a field for Euro currency input.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Align textfield content to the right --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"number"</span> <span class="attr">align</span>=<span class="string">"right"</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">suffix</span>=<span class="string">"€"</span> <span class="attr">stack-label</span>=<span class="string">"Number"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Basic-Usage-with-QField"><a href="#Basic-Usage-with-QField" class="headerlink" title="Basic Usage with QField"></a>Basic Usage with QField</h3><p>It is also possible to further enhance a QInput by wrapping it in a <a href="/components/field.html">QField</a> component.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-grey-9"</span> <span class="attr">style</span>=<span class="string">"width: 500px; padding: 25px"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-field</span></span></span><br><span class="line"><span class="tag">    <span class="attr">icon</span>=<span class="string">"wifi"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">"Some Label"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:count</span>=<span class="string">"10"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">helper</span>=<span class="string">"Some helper"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:error</span>=<span class="string">"error"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">error-label</span>=<span class="string">"Some error"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">dark</span></span></span><br><span class="line"><span class="tag">      <span class="attr">color</span>=<span class="string">"yellow"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">float-label</span>=<span class="string">"Textfield"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The above usage of QField will show the input field within a dark grey background with an inverse white text. Notice the usage of the <code>dark</code> prop for QInput. This controls the inversion of the text color.</p>
<p>Please refer to the <a href="/components/field.html">QField documentation</a> for more info about its usage.</p>
<h2 id="Validations-with-Vuelidate"><a href="#Validations-with-Vuelidate" class="headerlink" title="Validations with Vuelidate"></a>Validations with Vuelidate</h2><p>Quasar’s recommendation for doing form components validations is  <a href="https://monterail.github.io/vuelidate/" target="_blank" rel="noopener">Vuelidate</a> as it fits great with the overall architecture. It’s simple, lightweight and <strong>model-based</strong>.</p>
<p>You need to have Vuelidate added to your project first. See <a href="/components/form-validation.html">here</a>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"email"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:error</span>=<span class="string">"$v.email.$error"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">"email"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">blur</span>=<span class="string">"$v.email.$touch"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; required, email &#125; <span class="keyword">from</span> <span class="string">'vuelidate/lib/validators'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      email: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  validations: &#123;</span></span><br><span class="line"><span class="undefined">    email: &#123; required, email &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>For more options like displaying an error label, a helper or character counter, wrap QInput with a QField. <a href="/components/field.html#Validations-with-Vuelidate">Here</a> is a more involved example.</p>
<h2 id="Directive-Modifiers-for-v-model"><a href="#Directive-Modifiers-for-v-model" class="headerlink" title="Directive Modifiers for v-model"></a>Directive Modifiers for <code>v-model</code></h2><p>Vue comes with standard modifiers on <code>v-model</code>, which can be useful in conjunction with QInput. They are <code>.lazy</code> and <code>.trim</code>.</p>
<h3 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a><code>.lazy</code></h3><p>Vue will soon supply the <code>.lazy</code> modifier for v-model on components too, but until then, you can use the longer equivalent form:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">change</span>=<span class="string">"val =&gt; &#123; model = val &#125;"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="trim"><a href="#trim" class="headerlink" title=".trim"></a><code>.trim</code></h3><p>If you want the user’s input to be trimmed automatically, you can add the <code>trim</code> modifier to your <code>v-model</code> managed inputs:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model.trim</span>=<span class="string">"msg"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Internationalization (I18n)]]></title>
      <url>https://quasar-framework.org/components/internationalization.html</url>
      <content type="html"><![CDATA[<p>Internationalization is a design process that ensures a product (a website or application) can be adapted to various languages and regions without requiring engineering changes to the source code. Think of internationalization as readiness for localization.</p>
<p>The recommended package for handling website/app is <a href="https://github.com/kazupon/vue-i18n" target="_blank" rel="noopener">vue-i18n</a>. This package should be added as an <a href="https://quasar-framework.org/guide/app-plugins.html">App Plugin</a>. See the <a href="https://quasar-framework.org/guide/app-plugins.html#vue-i18n">specific example for plugging in vue-i18n</a>.</p>
<p>It should be noted that what is described below is the internationalization of quasar-framework components only. If you need to internationalize your own components, read the documentation indicated above and configure the project by editing the files located in <code>&lt;project&gt;/src/i18n</code> (you may need to create this directory).</p>
<p>Quasar components have their own labels too. One option is to configure labels through the label properties on each instance of Quasar components like QTable or QDatetime. This is how you can customize the text to match the selected language. This however, also takes time and adds unnecessary complexity to your website/app. Instead, in many standard cases, you can use the Quasar I18n (applies to Quasar components only!) system, which has a number of standard label definitions translated for you, like “Cancel”, “Clear”, “Select”, “Update”, etc. No need to translate these again!!</p>
<blockquote>
<p>For a complete list of available languages and phrases, check <a href="https://github.com/quasarframework/quasar/tree/v0.17/i18n" target="_blank" rel="noopener">Quasar I18n on Github</a>.<br><strong>If your desired language is not on that list</strong>, then feel free to submit a PR to add it. It takes from 5 to 10 minutes at most. We kindly welcome any language!</p>
</blockquote>
<h2 id="Configuring-the-Default-Language"><a href="#Configuring-the-Default-Language" class="headerlink" title="Configuring the Default Language"></a>Configuring the Default Language</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  i18n: <span class="string">'de'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Dynamically-Changing-Language"><a href="#Dynamically-Changing-Language" class="headerlink" title="Dynamically Changing Language"></a>Dynamically Changing Language</h2><p>Example with a QSelect to dynamically change the Quasar components language:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stack-label</span>=<span class="string">"I18n"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:options</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; label: 'English (US)',         value: 'en-us' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; label: 'English (UK)',         value: 'en-uk' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; label: 'Romanian',             value: 'ro' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; label: 'Chinese (Simplified)', value: 'zh-hans' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; label: 'Italian',              value: 'it' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; label: 'Spanish',              value: 'es' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; label: 'French',               value: 'fr' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; label: 'German',               value: 'de' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; label: 'Russian',              value: 'ru' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      .......</span></span></span><br><span class="line"><span class="tag"><span class="string">    ]"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">"lang"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      lang: <span class="keyword">this</span>.$q.i18n.lang</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  watch: &#123;</span></span><br><span class="line"><span class="undefined">    lang (lang) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// dynamic import, so loading on demand only</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">import</span>(<span class="string">`quasar-framework/i18n/<span class="subst">$&#123;lang&#125;</span>`</span>).then(<span class="function"><span class="params">lang</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$q.i18n.set(lang.default)</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Using-Quasar-I18n-in-App-Space"><a href="#Using-Quasar-I18n-in-App-Space" class="headerlink" title="Using Quasar I18n in App Space"></a>Using Quasar I18n in App Space</h2><p>Although the Quasar I18n is designed only for Quasar components, you can still use it for your own website/app components too.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">"Close" label in current Quasar I18n language is:</span><br><span class="line">&#123;&#123; $q.i18n.label.close &#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Detecting-Locale"><a href="#Detecting-Locale" class="headerlink" title="Detecting Locale"></a>Detecting Locale</h2><p>There’s also a method to determine user locale which is supplied by Quasar out of the box:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// outside of a Vue file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for when you don't specify quasar.conf &gt; framework: 'all'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Quasar &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"><span class="comment">// OTHERWISE:</span></span><br><span class="line"><span class="keyword">import</span> Quasar <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line">Quasar.i18n.getLocale() <span class="comment">// returns a string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// inside of a Vue file</span></span><br><span class="line"><span class="keyword">this</span>.$q.i18n.getLocale() <span class="comment">// returns a string</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Setting-up-Translation-Blocks-in-your-SFCs"><a href="#Setting-up-Translation-Blocks-in-your-SFCs" class="headerlink" title="Setting up Translation Blocks in your SFCs"></a>Setting up Translation Blocks in your SFCs</h2><p>The following is an example recipe for using <strong>vue-i18n</strong> embedded <code>&lt;i18n&gt;</code> template components in your vue files with <strong>vue-i18n-loader</strong>, which you have to add in your <code>quasar.conf.js</code>. In this case the translations are stored in yaml format in the block.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// quasar.conf</span></span><br><span class="line">build: &#123;</span><br><span class="line">  <span class="comment">// OR use the equivalent chainWebpack()</span></span><br><span class="line">  <span class="comment">// with its own chain statements (CLI v0.16.2+)</span></span><br><span class="line">  extendWebpack (cfg) &#123;</span><br><span class="line">    cfg.module.rules.push(&#123;</span><br><span class="line">      resourceQuery: <span class="regexp">/blockType=i18n/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        &#123;<span class="attr">loader</span>: <span class="string">'@kazupon/vue-i18n-loader'</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">loader</span>: <span class="string">'yaml-loader'</span>&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="UPPERCASE"><a href="#UPPERCASE" class="headerlink" title="UPPERCASE"></a>UPPERCASE</h2><p>Many languages, such as Greek, German and Dutch have non-intuitive rules for uppercase display, and there is an edge case that you should be aware of:</p>
<p>QBtn component will use the CSS <code>text-transform: uppercase</code> rule to automatically turn its label into all-caps. According to the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform" target="_blank" rel="noopener">MDN webdocs</a>, “The language is defined by the lang HTML attribute or the xml:lang XML attribute.” Unfortunately, this has spotty implementation across browsers, and the 2017 ISO standard for the uppercase German eszett <code>ß</code> has not really entered the canon. At the moment you have two options:</p>
<ol>
<li>use the prop <code>no-caps</code> in your label and write the string as it should appear</li>
<li>use the prop <code>no-caps</code> in your label and rewrite the string with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase" target="_blank" rel="noopener">toLocaleUpperCase</a> by using the locale as detected by <code>this.$q.i18n.getLocale()</code></li>
</ol>
<h2 id="Handling-Quasar-UMD"><a href="#Handling-Quasar-UMD" class="headerlink" title="Handling Quasar UMD"></a>Handling Quasar UMD</h2><p>To add a Quasar language pack you need to include the language pack JS tag for your Quasar version and also tell Quasar to use it. Example:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- include this after Quasar JS tag --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/quasar-framework@latest/dist/umd/i18n.pt-br.umd.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  Quasar.i18n.set(Quasar.i18n.ptBr)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Check what tags you need to include in your HTML files by generating a sample with <code>$ vue init quasarframework/quasar-starter-kit-umd &lt;folder&gt;</code> and specifying a language code for Quasar I18n (other than default “en-us”).</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Integrating Layout with Router]]></title>
      <url>https://quasar-framework.org/components/integrating-layout-with-router.html</url>
      <content type="html"><![CDATA[<p>You can benefit from Vue Router’s capabilities while structuring your routes with a Quasar Layout. The information below is just a recommendation and not mandatory to follow. Quasar allows you full freedom. Take the lines below only as an example.</p>
<p><a href="/components/layout.html">Layout</a> is the component used to encapsulate pages, so that multiple pages will share the same header, left / right side and so on. However, you can also configure per page header/footer/left or right side, but they all must be children of QLayout component. In order to understand how this works, you need a little bit of reading on <a href="http://router.vuejs.org/en/essentials/nested-routes.html" target="_blank" rel="noopener">Vue Router nested routes</a>.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>To make it more clear, let’s take an example. We have one layout (‘user’) and two pages (‘user-feed’ and ‘user-profile’). We want to configure the website/app routes like this: <code>/user/feed</code> and <code>/user/profile</code>.</p>
<p>First, we create the layout and its pages:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar new layout user</span><br><span class="line"> app:new Generated layout: src/layouts/user.vue +0ms</span><br><span class="line"> app:new Make sure to reference it <span class="keyword">in</span> src/router/routes.js +2ms</span><br><span class="line"></span><br><span class="line">$ quasar new page user-feed user-profile</span><br><span class="line"> app:new Generated page: src/pages/user-feed.vue +0ms</span><br><span class="line"> app:new Make sure to reference it <span class="keyword">in</span> src/router/routes.js +2ms</span><br><span class="line"></span><br><span class="line"> app:new Generated page: src/pages/user-profile.vue +1ms</span><br><span class="line"> app:new Make sure to reference it <span class="keyword">in</span> src/router/routes.js +0ms</span><br></pre></td></tr></table></figure></p>
<p>The commands above create the following folder structure:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">src/</span><br><span class="line">├── layouts</span><br><span class="line">│   └── user.vue         <span class="comment"># our QLayout definition</span></span><br><span class="line">└── pages</span><br><span class="line">    ├── user-feed.vue    <span class="comment"># page for /user/feed route</span></span><br><span class="line">    └── user-profile.vue <span class="comment"># page for /user/profile route</span></span><br></pre></td></tr></table></figure></p>
<p>Our routes configuration (<code>/src/router/routes.js</code>) should look like this:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/user'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We point it to our component</span></span><br><span class="line">    <span class="comment">// where we defined our QLayout</span></span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'layouts/user'</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Now we define the sub-routes.</span></span><br><span class="line">    <span class="comment">// These are getting injected into</span></span><br><span class="line">    <span class="comment">// layout (from above) automatically</span></span><br><span class="line">    <span class="comment">// by using &lt;router-view&gt; placeholder</span></span><br><span class="line">    <span class="comment">// (need to specify it in layout)</span></span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'feed'</span>,</span><br><span class="line">        component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'pages/user-feed'</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'profile'</span>,</span><br><span class="line">        component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'pages/user-profile'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>Please notice a few things:</p>
<ul>
<li><p>We are using lazy loading of layouts and pages (<code>() =&gt; import(&lt;path&gt;)</code>). If your website/app is small, then you can skip the lazy loading benefits as they could add more overhead than what it’s worth:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UserLayout <span class="keyword">from</span> <span class="string">'layouts/user'</span></span><br><span class="line"><span class="keyword">import</span> UserFeed <span class="keyword">from</span> <span class="string">'pages/user-feed'</span></span><br><span class="line"><span class="keyword">import</span> UserProfile <span class="keyword">from</span> <span class="string">'pages/user-profile'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  path: <span class="string">'/user'</span>,</span><br><span class="line">  component: UserLayout,</span><br><span class="line">  children: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'feed'</span>, <span class="attr">component</span>: UserFeed &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'profile'</span>, <span class="attr">component</span>: UserProfile &#125;</span><br><span class="line">  ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>Quasar provides some out of the box Webpack aliases (‘layouts’ &amp; ‘pages’), which are used in the above examples.</p>
</li>
<li><p>Pages of a Layout are declared as children of it in the Vue Router configuration so that <code>&lt;router-view/&gt;</code> will know what page component to inject. Remember to always use this Vue component whenever your Layout has pages attached to it.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-layout</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">q-page-container</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      This is where your pages will get</span></span><br><span class="line"><span class="comment">      injected into your Layout</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-page-container</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>Read all <a href="http://router.vuejs.org/" target="_blank" rel="noopener">Vue Router</a> documentation to fully understand the example above and how to configure the router and its routes for your app.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Introduction for Beginners]]></title>
      <url>https://quasar-framework.org/components/introduction-for-beginners.html</url>
      <content type="html"><![CDATA[<p>Before you begin with Quasar, it is a good idea to get acquainted with ES6 and have a fairly good knowledge about how Vue works. (<a href="https://github.com/lukehoban/es6features" target="_blank" rel="noopener">quick overview of ES6</a> and <a href="http://es6-features.org/#Constants" target="_blank" rel="noopener">full description</a> – don’t worry, you don’t need to understand ALL of ES6). For devs experienced with reactive UIs, <a href="https://vuejs.org/v2/guide/" target="_blank" rel="noopener">the Vue documentation</a> itself takes half a day at most to read top-to-bottom and will help you understand how Quasar components can be used and configured.</p>
<p>If you are a total beginner to Vue and reactive UI libraries and want a good tutorial, we recommend you take a look at the <a href="https://www.udemy.com/vuejs-2-the-complete-guide/learn/v4/overview" target="_blank" rel="noopener">Udemy Course - Vue JS 2 - The Complete Guide</a>.</p>
<p>After reading the Vue documentation, let’s clear up some of the most frequently asked questions, like “How can I use Quasar components, Vue properties, methods and events”.</p>
<h2 id="Single-File-Vue-Components"><a href="#Single-File-Vue-Components" class="headerlink" title="Single File Vue Components"></a>Single File Vue Components</h2><p>You’ll be building your Quasar app using <code>*.vue</code> files which contain multiple sections: ‘template’ (HTML), ‘script’ (Javascript) and ‘style’ (CSS).</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- you define your Vue template here --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// This is where your Javascript goes</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// to define your Vue component, which</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// can be a Layout, a Page or your own</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// component used throughout the app.</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">//</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="comment">/* This is where your CSS goes */</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="CSS-preprocessors"><a href="#CSS-preprocessors" class="headerlink" title="CSS preprocessors"></a>CSS preprocessors</h3><p>For the <code>&lt;style&gt;</code> tag, you can also use whatever CSS preprocessor you want. <a href="http://stylus-lang.com/" target="_blank" rel="noopener">Stylus</a> is available out of the box. For SCSS/SASS or LESS, you’ll need to install their Webpack loaders (example: <code>yarn add --dev less-loader</code> or <code>npm install --save-dev less-loader</code>).</p>
<p>After installing the loader you need (remember Stylus is already installed for you), you can specify you want your chosen preprocessor to handle the CSS code you’re writing:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- notice lang="stylus" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"stylus"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.some-div</span></span></span><br><span class="line"><span class="undefined">  font-size 15px</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>In the above example, you would replace <code>stylus</code> with the preprocessor you’ve chosen.</p>
<h2 id="Using-Quasar-Directive"><a href="#Using-Quasar-Directive" class="headerlink" title="Using Quasar Directive"></a>Using Quasar Directive</h2><p>Quasar comes with a few custom <a href="https://vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="noopener">Vue Directives</a>. These directives can be applied on almost any DOM element or Component.</p>
<p>Example of a Quasar directive:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-ripple</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>Notice how Ripple is used in the HTML template as <code>v-ripple</code>. Vue directives are prefixed with <code>v-</code>.</p>
</blockquote>
<p>In order for you to use any of the directives that Quasar supplies, you first need to tell Quasar you want it embedded. Open <code>/quasar.conf.js</code> file and add the following reference:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  directives: [<span class="string">'Ripple'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Let’s take another example. We now also want TouchPan and TouchSwipe directives, so we add them too in <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  directives: [<span class="string">'Ripple'</span>, <span class="string">'TouchPan'</span>, <span class="string">'TouchSwipe'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Now we can write in your Vue files template:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-touch-pan</span>=<span class="string">"handler"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-touch-swipe</span>=<span class="string">"handler"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-ripple</span>&gt;</span>Click me. I got ripples.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Using-Quasar-Components"><a href="#Using-Quasar-Components" class="headerlink" title="Using Quasar Components"></a>Using Quasar Components</h2><p>Quasar components have names beginning with “Q” like “QBtn” or “QElementResizeObservable”. In order to use them, you need to add a reference to them in <code>/quasar.conf.js</code>.</p>
<p>Let’s take the following example with a QBtn and QIcon and then we’ll see how to embed these components in our app:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> @<span class="attr">click</span>=<span class="string">"doSomething"</span>&gt;</span>Do something<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"alarm"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>Notice how QBtn is used in the Vue HTML template as <code>&lt;q-btn&gt;</code>. If we’d import QElementResizeObservable, then we’d use it in template as <code>&lt;q-element-resize-observable&gt;</code>.</p>
</blockquote>
<p>Now on <code>/quasar.conf.js</code>, you would add:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QBtn'</span>, <span class="string">'QIcon'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Using-Quasar-Plugins"><a href="#Using-Quasar-Plugins" class="headerlink" title="Using Quasar Plugins"></a>Using Quasar Plugins</h2><p>Quasar Plugins are features that you can use both in your Vue files as well as outside of them, like Notify, ActionSheet, AppVisibility and so on.</p>
<p>In order to use them, you need to add a reference to them in <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  plugins: [<span class="string">'Notify'</span>, <span class="string">'ActionSheet'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Let’s take Notify as an example and see how we can then use it. In a Vue file, you’d write something like this:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">"$q.notify('My message')"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"Show a notification"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">"showNotification"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"Show another notification"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    showNotification () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$q.notify(<span class="string">'Some other message'</span>)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>Notice that in the template area we’re using <code>$q.&lt;plugin-name&gt;</code> and in our script we say <code>this.$q.&lt;plugin-name&gt;</code>.</p>
</blockquote>
<p>Now let’s see an example of Notify being used outside of a Vue file:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Notify &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">Notify.create(<span class="string">'My message'</span>)</span><br></pre></td></tr></table></figure></p>
<h3 id="Importing-All-Components-and-Directives-for-Quick-Test"><a href="#Importing-All-Components-and-Directives-for-Quick-Test" class="headerlink" title="Importing All Components and Directives for Quick Test"></a>Importing All Components and Directives for Quick Test</h3><p>Referencing all Quasar Components, Directives and Plugins can be tiresome when you just want to do a quick test. In this case, you can tell Quasar to import them all by editing <code>/quasar.conf.js</code> like this:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: <span class="string">'all'</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>IMPORTANT</strong><br>This <strong>will not</strong> take advantage of tree shaking, causing your bundle to become bloated with unnescesary/unused code. <strong>Not recommended for production</strong>. Use this only for quick testing purposes.</p>
</blockquote>
<h3 id="Self-Closing-Tags"><a href="#Self-Closing-Tags" class="headerlink" title="Self Closing Tags"></a>Self Closing Tags</h3><p>Some Quasar components do not need you to include HTML content inside of them. In this case, you can use them as self closing tags. One example with QIcon below:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"cloud"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>Self-closing means the above template is the equivalent to:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"cloud"</span>&gt;</span><span class="tag">&lt;/<span class="name">q-icon</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Both forms are valid and can be used. It works the same with regular DOM elements:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- equivalent to: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Some eslint-plugin-vue linting rules actually enforce using the self-closing syntax.</p>
<h2 id="Handling-Vue-Properties"><a href="#Handling-Vue-Properties" class="headerlink" title="Handling Vue Properties"></a>Handling Vue Properties</h2><p>You will notice throughout the documentation that Quasar components have a section called “Vue Properties”. These are often called <strong>Props</strong> in Vue documentation. Example:</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>infinite</code></td>
<td>Boolean</td>
<td>Infinite slides scrolling</td>
</tr>
<tr>
<td><code>size</code></td>
<td>String</td>
<td>Thickness of loading bar.</td>
</tr>
<tr>
<td><code>speed</code></td>
<td>Number</td>
<td>How fast should loading bar update its value (in milliseconds).</td>
</tr>
<tr>
<td><code>columns</code></td>
<td>Object</td>
<td>Object defining columns (see “Columns Definition” below).</td>
</tr>
<tr>
<td><code>offset</code></td>
<td>Array</td>
<td>Array with two numbers. Offset on horizontal and vertical (in pixels).</td>
</tr>
</tbody>
</table>
<p>Let’s take some examples with a bogus Quasar component (we will call it QBogus) that supports the properties above. We will discuss each of the types of Vue properties in the below sections.</p>
<h3 id="Boolean-Property"><a href="#Boolean-Property" class="headerlink" title="Boolean Property"></a>Boolean Property</h3><p>A boolean property means it only accepts a strictly Boolean value. The values will not be cast to Boolean, so you must ensure you are using a true Boolean.</p>
<p>If you are trying to control that property and change it dynamically at runtime, then bind it to a variable in your scope:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-bogus</span> <span class="attr">:infinite</span>=<span class="string">"myInfiniteVariable"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      myInfiniteVariable: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>If, on the other hand, you know this Boolean value is not going to change, you can use the shorthand version of the variable like a component attribute and just specify it. In other words, if you don’t bind the variable to a variable in the component’s scope as it will always be <code>true</code>:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;q-bogus infinite /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!--</span><br><span class="line">    the following is perfectly valid,</span><br><span class="line">    but it&apos;s a longer version</span><br><span class="line">  --&gt;</span><br><span class="line">  &lt;q-bogus :infinite=&quot;true&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="String-Property"><a href="#String-Property" class="headerlink" title="String Property"></a>String Property</h3><p>As you can imagine, Strings are required as a value for this type of property.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    direct assignment, no need for</span></span><br><span class="line"><span class="comment">    a variable in our scope</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-bogus</span> <span class="attr">size</span>=<span class="string">"24px"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    we can also bind it to a variable</span></span><br><span class="line"><span class="comment">    in our scope so we can dynamically</span></span><br><span class="line"><span class="comment">    change it</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-bogus</span> <span class="attr">:size</span>=<span class="string">"mySize"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// notice String as value</span></span></span><br><span class="line"><span class="javascript">      mySize: <span class="string">'16px'</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Number-Property"><a href="#Number-Property" class="headerlink" title="Number Property"></a>Number Property</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    Case 1. Direct assignment.</span></span><br><span class="line"><span class="comment">    Notice the colon (":") before property name.</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-bogus</span> <span class="attr">:speed</span>=<span class="string">"50"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Case 2. Assignment through a scope variable --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-bogus</span> <span class="attr">:speed</span>=<span class="string">"myNumber"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// notice Number as value</span></span></span><br><span class="line"><span class="undefined">      myNumber: 50</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Object-Property"><a href="#Object-Property" class="headerlink" title="Object Property"></a>Object Property</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Case 1. Direct assignment. --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-bogus</span> <span class="attr">:columns</span>=<span class="string">"&#123;key: 'value', anotherKey: 'another value'&#125;"</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- or a more elegant way for Case 1: --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-bogus</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:columns</span>=<span class="string">"&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">      key: 'value',</span></span></span><br><span class="line"><span class="tag"><span class="string">      anotherKey: 'another value'</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Case 2. Assignment through a scope variable --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-bogus</span> <span class="attr">:columns</span>=<span class="string">"myColumns"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">      myColumns: &#123;</span></span><br><span class="line"><span class="javascript">        key: <span class="string">'value'</span>,</span></span><br><span class="line"><span class="javascript">        anotherKey: <span class="string">'another value'</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Array-Property"><a href="#Array-Property" class="headerlink" title="Array Property"></a>Array Property</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Case 1. Direct assignment. --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-bogus</span> <span class="attr">:offset</span>=<span class="string">"[10, 20]"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Case 2. Assignment through a scope variable --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-bogus</span> <span class="attr">:offset</span>=<span class="string">"myOffset"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">      myOffset: [10, 20]</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Handling-Vue-Methods"><a href="#Handling-Vue-Methods" class="headerlink" title="Handling Vue Methods"></a>Handling Vue Methods</h2><p>You will notice throughout the documentation that some Quasar components have a section called “Vue Methods”. Example:</p>
<table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>next()</code></td>
<td>Goes to next slide.</td>
</tr>
<tr>
<td><code>previous(doneFn)</code></td>
<td>Goes to previous slide.</td>
</tr>
<tr>
<td><code>toggleFullscreen()</code></td>
<td>Toggles fullscreen mode.</td>
</tr>
</tbody>
</table>
<p>In order for you to access these methods, you will need to set a Vue reference on the component first. Here’s an example:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    Notice ref="myRef". We will use the name</span></span><br><span class="line"><span class="comment">    assigned to "ref" in the script part below</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-bogus</span> <span class="attr">ref</span>=<span class="string">"myRef"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// we can now access `this.$refs.myRef`</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// an example on the mounted() Vue component hook</span></span></span><br><span class="line"><span class="undefined">  mounted () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// calling "next()" method:</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.$refs.myRef.next()</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// calling before mount point might result in errors</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// as Vue hasn't yet prepared the Vue references</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Handling-Vue-Events"><a href="#Handling-Vue-Events" class="headerlink" title="Handling Vue Events"></a>Handling Vue Events</h2><p>You will notice throughout the documentation that some Quasar components have a section called “Vue Events”. <strong>Do not confuse</strong> these Vue events with the <a href="/components/global-event-bus.html">Global Event Bus</a> as these two have nothing in common.</p>
<p>Example of “Vue Events” section in docs:</p>
<table>
<thead>
<tr>
<th>Event Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@open</code></td>
<td>Triggered right after the Modal is opened.</td>
</tr>
<tr>
<td><code>@close</code></td>
<td>Triggered right after the Modal is closed.</td>
</tr>
</tbody>
</table>
<p>In order for you to catch these events, when they are triggered, you will need to add listeners for them on the component itself in the HTML template. Here’s an example:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-bogus</span> @<span class="attr">open</span>=<span class="string">"doSomething"</span> @<span class="attr">close</span>=<span class="string">"doSomethingElse"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    doSomething () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// this method has been called (in this case)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// because @open event was triggered by QBogus component</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    doSomethingElse () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// this method has been called (in this case)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// because @close event was triggered by QBogus component</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>There are times when you need to access native DOM events on a Quasar component too, like the native <code>@click</code>. Do not confuse native events with the Vue events emitted by the component. They are different things. Let’s take an example: let’s say we have a component (QBogus) that emits <code>@open</code> and <code>@close</code>, but doesn’t emit a <code>@click</code> event. <code>@click</code> being a native DOM event, we can still catch it with the <code>.native</code> modifier:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Notice "@click.native" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-bogus</span> @<span class="attr">click.native</span>=<span class="string">"myMethod"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS Animations]]></title>
      <url>https://quasar-framework.org/components/js-animations.html</url>
      <content type="html"><![CDATA[<p>You can create animations through Javascript (using RAF - <code>requestAnimationFrame()</code>) with Quasar.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; animate &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> id = animate.start(&#123;</span><br><span class="line">  name: <span class="string">'unique-animation-name'</span>, <span class="comment">// optional, if none is supplied a unique one is created and returned</span></span><br><span class="line">  <span class="keyword">from</span>: <span class="string">'0'</span>, <span class="comment">// current position</span></span><br><span class="line">  to: <span class="string">'100'</span>, <span class="comment">// final position</span></span><br><span class="line">  duration: <span class="number">300</span>, <span class="comment">// duration of the animation</span></span><br><span class="line">  done (finalPosition) &#123;...&#125;, <span class="comment">// function to call when animation is done</span></span><br><span class="line">  cancel (currentPosition) &#123;...&#125;, <span class="comment">// function to call when animation is aborted</span></span><br><span class="line">  apply (currentPosition) &#123;...&#125;, <span class="comment">// function called on each step so you can apply changes</span></span><br><span class="line">  easing (currentPosition) &#123; <span class="comment">// custom easing function, see below</span></span><br><span class="line">    <span class="comment">// ...return transformation of currentPosition...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// Starting an animation with same name will abort the previous one</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Stop an animation using its name</span></span><br><span class="line">animate.stop(<span class="string">'unique-animation-name'</span>)</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">animate.stop(id) <span class="comment">// id returned from above</span></span><br></pre></td></tr></table></figure>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; animate &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line">animate.start(&#123;</span><br><span class="line">  <span class="keyword">from</span>: <span class="number">6</span>,</span><br><span class="line">  to: <span class="number">158</span>,</span><br><span class="line">  apply (pos) &#123;</span><br><span class="line">    el.style.maxHeight = <span class="string">`<span class="subst">$&#123;pos&#125;</span>px`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  done () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`we're done!`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h2 id="Easing-Functions"><a href="#Easing-Functions" class="headerlink" title="Easing Functions"></a>Easing Functions</h2><p>Easing functions take the current percent progress of the animation (a float between 0 and 1) and return a position multiplier (0 being initial position and 1 being final position).</p>
<p>The following easing functions are included:</p>
<ul>
<li><code>ease[In|Out|InOut][Quad|Cubic|Quart|Quint|Circ]</code><ul>
<li>For example, <code>easeInCubic</code>. <code>Quad</code> through <code>Quint</code> get progressively more exaggerated. <code>Circ</code> is slightly different (the graph is a quarter circle), it accelerates much faster at the end.</li>
</ul>
</li>
<li><code>overshoot</code><ul>
<li>Shoots past the end position and returns slowly</li>
</ul>
</li>
</ul>
<p><a href="https://material.io/guidelines/motion/duration-easing.html#duration-easing-natural-easing-curves" target="_blank" rel="noopener">Material Design Curves</a>:</p>
<ul>
<li><code>standard</code><ul>
<li>Use for on-screen movement. Accelerates quickly, decelerates slowly</li>
</ul>
</li>
<li><code>decelerate</code><ul>
<li>Use for elements entering the screen. Flies in and slowly decelerates (<code>easeOutCubic</code>).</li>
</ul>
</li>
<li><code>accelerate</code><ul>
<li>Use for elements leaving the screen. Accelerates and then leaves at full velocity (<code>easeInCubic</code>).</li>
</ul>
</li>
<li><code>sharp</code><ul>
<li>Use for elements leaving the screen that may return (e.g. navigation bar). Accelerates and decelerates (<code>easeInOutQuad</code>)</li>
</ul>
</li>
</ul>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; animate, easing &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line">animate.start(&#123;</span><br><span class="line">  <span class="keyword">from</span>: <span class="number">0</span>,</span><br><span class="line">  to: <span class="number">100</span>,</span><br><span class="line">  easing: easing.standard</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>Or with the carousel:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-carousel</span> <span class="attr">:swipe-easing</span>=<span class="string">"overshoot"</span>&gt;</span></span><br><span class="line">    Slides...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-carousel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; easing, QCarousel &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="undefined">    QCarousel</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span></span><br><span class="line"><span class="undefined">    overshoot: easing.overshoot</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Knob]]></title>
      <url>https://quasar-framework.org/components/knob.html</url>
      <content type="html"><![CDATA[<p>Quasar Knob is another way of making the user select a Number value from a predefined range. With optional steps included. See demo.</p>
<input type="hidden" data-fullpage-demo="forms/knob">

<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QKnob'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-knob</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:min</span>=<span class="string">"min"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max</span>=<span class="string">"max"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- With custom placeholder --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-knob</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:min</span>=<span class="string">"min"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max</span>=<span class="string">"max"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:placeholder</span>=<span class="string">"'$ ' + model"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Disabled state --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-knob</span></span></span><br><span class="line"><span class="tag">  <span class="attr">disable</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:min</span>=<span class="string">"min"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max</span>=<span class="string">"max"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which should be a Number.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>size</code></td>
<td>String</td>
<td>CSS String determining the width and height of the Knob. Examples: “120px”, “12rem”.</td>
</tr>
<tr>
<td><code>step</code></td>
<td>Number</td>
<td>Number representing difference between two values that the model can take. Default: <code>1</code>.</td>
</tr>
<tr>
<td><code>decimals</code></td>
<td>Number</td>
<td>Number of decimals to represent the model with, if no placeholder / default slot is used.</td>
</tr>
<tr>
<td><code>min</code></td>
<td>Number</td>
<td>Minimum value that the model can take.</td>
</tr>
<tr>
<td><code>max</code></td>
<td>Number</td>
<td>Maximum value that the model can take.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>track-color</code></td>
<td>String</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>line-width</code></td>
<td>String</td>
<td>Line width of Knob. Default is ‘6px’.</td>
</tr>
<tr>
<td><code>readonly</code></td>
<td>Boolean</td>
<td>Sort of a “display” only mode. Model cannot be altered.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>When set to <code>true</code> the model cannot be altered.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@input(newVal)</code></td>
<td>Triggered immediately on model value change.</td>
</tr>
<tr>
<td><code>@change(newVal)</code></td>
<td>Triggered on lazy model value change.</td>
</tr>
<tr>
<td><code>@drag-value(val)</code></td>
<td>(v0.15.11+) Triggered while dragging (or clicking) on Knob.</td>
</tr>
</tbody>
</table>
<h2 id="More-Examples"><a href="#More-Examples" class="headerlink" title="More Examples"></a>More Examples</h2><h3 id="Lazy-Input"><a href="#Lazy-Input" class="headerlink" title="Lazy Input"></a>Lazy Input</h3><p>Vue will soon supply the <code>.lazy</code> modifier for v-model on components too, but until then, you can use the longer equivalent form:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-knob</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">change</span>=<span class="string">"val =&gt; &#123; model = val &#125;"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:min</span>=<span class="string">"min"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max</span>=<span class="string">"max"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>We can go a step further and display the current value while dragging:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- v0.15.11+ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-knob</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">change</span>=<span class="string">"val =&gt; &#123; model = val &#125;"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">drag-value</span>=<span class="string">"val =&gt; &#123; currentValue = val &#125;"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:min</span>=<span class="string">"min"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max</span>=<span class="string">"max"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  &#123;&#123; currentValue &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-knob</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Multi-colored-with-a-Euro-icon"><a href="#Multi-colored-with-a-Euro-icon" class="headerlink" title="Multi-colored with a Euro icon."></a>Multi-colored with a Euro icon.</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">q-knob</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">size</span>=<span class="string">"120px"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">"font-size: 1.5rem"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">track-color</span>=<span class="string">"yellow-3"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">line-width</span>=<span class="string">"5px"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:min</span>=<span class="string">"min"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max</span>=<span class="string">"max"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:step</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">class</span>=<span class="string">"on-left"</span> <span class="attr">name</span>=<span class="string">"euro_symbol"</span> /&gt;</span> &#123;&#123;model&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-knob</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Read-only-state-different-than-disabled-as-the-mouse-pointer-doesn’t-change"><a href="#Read-only-state-different-than-disabled-as-the-mouse-pointer-doesn’t-change" class="headerlink" title="Read-only state (different than disabled, as the mouse pointer doesn’t change)."></a>Read-only state (different than disabled, as the mouse pointer doesn’t change).</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-knob</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:min</span>=<span class="string">"min"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max</span>=<span class="string">"max"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">readonly</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">class</span>=<span class="string">"on-left"</span> <span class="attr">name</span>=<span class="string">"volume_up"</span> /&gt;</span> &#123;&#123;model&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-knob</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Using-a-QField-to-highlight-error-state"><a href="#Using-a-QField-to-highlight-error-state" class="headerlink" title="Using a QField to highlight error state."></a>Using a <a href="/components/field.html">QField</a> to highlight error state.</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-field</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"Knob"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">icon</span>=<span class="string">"cake"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">helper</span>=<span class="string">"Touch to change"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:error</span>=<span class="string">"knobHasError"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">error-label</span>=<span class="string">"Invalid value selected."</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-knob</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:min</span>=<span class="string">"min"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:max</span>=<span class="string">"max"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">class</span>=<span class="string">"on-left"</span> <span class="attr">name</span>=<span class="string">"volume_up"</span> /&gt;</span> &#123;&#123;model&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-knob</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Layout Header & Footer]]></title>
      <url>https://quasar-framework.org/components/layout-header-and-footer.html</url>
      <content type="html"><![CDATA[<p><a href="/components/layout.html">QLayout</a> allows you to configure your views as a 3x3 matrix, containing an optional Header and/or Footer. If you haven’t already, please read QLayout documentation page first.</p>
<input type="hidden" data-fullpage-demo="layout-demo/play-with-layout" data-source="../../layouts/layout-demo.vue">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [</span><br><span class="line">    <span class="string">'QLayoutHeader'</span>,</span><br><span class="line">    <span class="string">'QLayoutFooter'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-layout</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout-header</span> <span class="attr">v-model</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- header content --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout-header</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout-footer</span> <span class="attr">v-model</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- footer content --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout-footer</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="QLayoutHeader-QLayoutFooter-Vue-Properties"><a href="#QLayoutHeader-QLayoutFooter-Vue-Properties" class="headerlink" title="QLayoutHeader/QLayoutFooter Vue Properties"></a>QLayoutHeader/QLayoutFooter Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>reveal</code></td>
<td>Boolean</td>
<td>Scrolling hides header/footer.</td>
</tr>
<tr>
<td><code>reveal-offset</code></td>
<td>Number</td>
<td>(Default: 250) Scrolling distance in pixels that triggers the hide.</td>
</tr>
</tbody>
</table>
<h3 id="Reveal-Property"><a href="#Reveal-Property" class="headerlink" title="Reveal Property"></a>Reveal Property</h3><p>You’ll notice in playing with the QLayout view configuration that if you set the header to “hhh” (all small letters), the header will be set to a static position at the top of the page. This in turn means, the header will move off the screen as the user scrolls down the page. If the user then needs to use the navigation in the header, he/she must scroll completely up to top of the page to get to it and this is bad UX.</p>
<p>One way to help the user is to add a <a href="/components/back-to-top.html">back-to-top button</a> on the page.</p>
<p>Another way is to use the <code>reveal</code> prop.</p>
<p>The <code>reveal</code> prop overrides “H” in QLayout <code>view</code> prop, by fixing the header to the top of the screen. As the user scrolls down more than <code>reveal-offset</code> pixels, the header rolls up it’s own height above the top of the screen. As soon as the user scrolls back up (just 1 pixel), the header comes into view again immediately.</p>
<p>Same goes for QLayoutFooter.</p>
<h2 id="Hiding-Header-Footer-Completely"><a href="#Hiding-Header-Footer-Completely" class="headerlink" title="Hiding Header/Footer Completely"></a>Hiding Header/Footer Completely</h2><p>QLayoutHeader and QLayoutFooter support a Boolean v-model which determines if they take up space on screen or not. This does not interferes with the <code>reveal</code> property, which works only if the v-model is set to true.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout-header</span> <span class="attr">v-model</span>=<span class="string">"state"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout-header</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      state: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    toggleHeader () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.state = !<span class="keyword">this</span>.state</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="QLayoutHeader-QLayoutFooter-Vue-Events"><a href="#QLayoutHeader-QLayoutFooter-Vue-Events" class="headerlink" title="QLayoutHeader/QLayoutFooter Vue Events"></a>QLayoutHeader/QLayoutFooter Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@reveal(state)</code></td>
<td>Emitted when reveal state changes.</td>
</tr>
</tbody>
</table>
<h2 id="Handling-Quasar-Themes"><a href="#Handling-Quasar-Themes" class="headerlink" title="Handling Quasar Themes"></a>Handling Quasar Themes</h2><p>You can make some tweaks to distinguish between Material and iOS themes. You’ll notice in the demo that header and footer has different looks based on Quasar theme. Here’s an example how to do it below. Notice that in this example we also place navigational tabs in header (for Material) or footer (for iOS):</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- layout.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-layout-header</span> <span class="attr">reveal</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">:inverted</span>=<span class="string">"$q.theme === 'ios'"</span>&gt;</span></span><br><span class="line">    ....</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav-tabs</span> <span class="attr">v-if</span>=<span class="string">"$q.theme === 'mat'"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-layout-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-layout-footer</span> <span class="attr">reveal</span> <span class="attr">v-if</span>=<span class="string">"$q.theme === 'ios'"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav-tabs</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-layout-footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- nav-tabs.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-tabs</span> <span class="attr">:inverted</span>=<span class="string">"$q.theme === 'ios'"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-route-tab......</span></span></span><br><span class="line">&lt;/q-tabs&gt;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Jumbotron]]></title>
      <url>https://quasar-framework.org/components/jumbotron.html</url>
      <content type="html"><![CDATA[<p>Quasar Jumbotron is similar to the one introduced by Bootstrap. It’s a big box for calling extra attention to some special content or information.</p>
<p>Works great by using <a href="/components/typography.html">Quasar Typography</a> CSS classes.</p>
<input type="hidden" data-fullpage-demo="other-components/jumbotron">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QJumbotron'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>Basic:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-jumbotron</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-display-3"</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-subheading"</span>&gt;</span></span><br><span class="line">    This is a simple hero unit, a simple jumbotron-style component for calling extra</span><br><span class="line">    attention to featured content or information.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"q-hr q-my-lg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-title q-mb-md"</span>&gt;</span>Check out Quasar Framework components.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">class</span>=<span class="string">"q-py-sm q-px-xl"</span> <span class="attr">label</span>=<span class="string">"Learn more"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-jumbotron</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Coloring, with a dark background:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-jumbotron</span> <span class="attr">class</span>=<span class="string">"bg-primary"</span> <span class="attr">dark</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-display-3"</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-subheading"</span>&gt;</span></span><br><span class="line">    This is a simple hero unit, a simple jumbotron-style component for calling extra</span><br><span class="line">    attention to featured content or information.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"q-hr q-my-lg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-title q-mb-md"</span>&gt;</span>Check out Quasar Framework components.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"white"</span> <span class="attr">text-color</span>=<span class="string">"primary"</span> <span class="attr">class</span>=<span class="string">"q-py-sm q-px-xl"</span> <span class="attr">label</span>=<span class="string">"Learn more"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-jumbotron</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Using a CSS gradient for background:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-jumbotron</span> <span class="attr">gradient</span>=<span class="string">"circle, rgba(34,193,195,1) 0%, rgba(253,187,45,1) 100%"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-display-3"</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-subheading"</span>&gt;</span></span><br><span class="line">    This is a simple hero unit, a simple jumbotron-style component for calling extra</span><br><span class="line">    attention to featured content or information.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"q-hr q-my-lg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-title q-mb-md"</span>&gt;</span>Check out Quasar Framework components.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">class</span>=<span class="string">"q-py-sm q-px-xl"</span> <span class="attr">label</span>=<span class="string">"Learn more"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-jumbotron</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Using an image for background:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-jumbotron</span> <span class="attr">dark</span> <span class="attr">img-src</span>=<span class="string">"statics/mountains.jpg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-display-3"</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-subheading"</span>&gt;</span></span><br><span class="line">    This is a simple hero unit, a simple jumbotron-style component for calling extra</span><br><span class="line">    attention to featured content or information.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"q-hr q-my-lg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-title q-mb-md"</span>&gt;</span>Check out Quasar Framework components.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">class</span>=<span class="string">"q-py-sm q-px-xl"</span> <span class="attr">label</span>=<span class="string">"Learn more"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-jumbotron</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Are we displaying it on a dark background?</td>
</tr>
<tr>
<td><code>tag</code></td>
<td>String</td>
<td>HTML tag to use to render the component. Default: ‘div’</td>
</tr>
<tr>
<td><code>img-src</code></td>
<td>String</td>
<td>Background image URL to statics folder.</td>
</tr>
<tr>
<td><code>gradient</code></td>
<td>String</td>
<td>CSS gradient value</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Layout]]></title>
      <url>https://quasar-framework.org/components/layout.html</url>
      <content type="html"><![CDATA[<p>Layouts are the elements that wrap page content, like a navigational bar or drawer. Multiple pages can share the same Layout, so the code is reusable, which is one of their key points.</p>
<input type="hidden" data-fullpage-demo="layout-demo/play-with-layout" data-source="../../layouts/layout-demo.vue">

<p><strong>Quasar Layouts are NOT mandatory</strong>, but they do help you better structure your website/app. They have a number of features which offer you major benefits in simplifying your app’s layout design, right out of the box.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code> to embed the components (only add what you need from below):<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [</span><br><span class="line">    <span class="string">'QLayout'</span>,</span><br><span class="line">    <span class="string">'QPageContainer'</span>,</span><br><span class="line">    <span class="string">'QPage'</span>,</span><br><span class="line">    <span class="string">'QLayoutHeader'</span>,</span><br><span class="line">    <span class="string">'QLayoutFooter'</span>,</span><br><span class="line">    <span class="string">'QLayoutDrawer'</span>,</span><br><span class="line">    <span class="string">'QPageSticky'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Below is a scaffolding of a Layout so you can understand the structure. We’ll discuss about properties later<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- main wrapping component --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- optional --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout-header</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- content; any --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- optional --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout-drawer</span> <span class="attr">side</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- content; any --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout-drawer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- optional --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout-drawer</span> <span class="attr">side</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- content; any --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout-drawer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- REQUIRED --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-page-container</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      Here it's where Vue Router injects children</span></span><br><span class="line"><span class="comment">      Page components.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      &lt;router-view/&gt; tag below can be replaced by an</span></span><br><span class="line"><span class="comment">      actual page content should you wish to do so.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      First child of QPageContainer must be a QPage,</span></span><br><span class="line"><span class="comment">      so make sure that your layout route children components</span></span><br><span class="line"><span class="comment">      encapsulate a QPage.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-page-container</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- optional --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout-footer</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- content; any --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout-footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Below is another example of a Layout, which contains some useful elements:</p>
<ul>
<li>a <a href="/components/toolbar.html">QToolbar</a> (used for both header and footer, you can specify as many as you want)</li>
<li>a navigation with <a href="/components/tabs.html">QTabs</a></li>
<li>a left side drawer panel (which is shown alongside page content on wide screens)</li>
<li>and a right side drawer panel</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-layout</span> <span class="attr">view</span>=<span class="string">"hHr LpR lFf"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Header --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout-header</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- First row of header is a QToolbar --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- showLeft is a model attached to left side drawer below --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">        <span class="attr">flat</span> <span class="attr">round</span> <span class="attr">dense</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">"showLeft = !showLeft"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">icon</span>=<span class="string">"menu"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line">        Layout Header</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"subtitle"</span>&gt;</span>Optional subtitle<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- showRight is a model attached to right side drawer below --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">        <span class="attr">flat</span> <span class="attr">round</span> <span class="attr">dense</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">"showRight = !showRight"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">icon</span>=<span class="string">"menu"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Second row of header is a QTabs --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-tabs</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-route-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">icon</span>=<span class="string">"view_quilt"</span> <span class="attr">to</span>=<span class="string">"/test-layout/about"</span> <span class="attr">replace</span> <span class="attr">hide</span>=<span class="string">"icon"</span> <span class="attr">label</span>=<span class="string">"About"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-route-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">icon</span>=<span class="string">"view_day"</span> <span class="attr">to</span>=<span class="string">"/test-layout/toolbar"</span> <span class="attr">replace</span> <span class="attr">hide</span>=<span class="string">"icon"</span> <span class="attr">label</span>=<span class="string">"Toolbar"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-route-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">icon</span>=<span class="string">"view_day"</span> <span class="attr">to</span>=<span class="string">"/test-layout/tabs"</span> <span class="attr">replace</span> <span class="attr">label</span>=<span class="string">"Tabs"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-route-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">icon</span>=<span class="string">"input"</span> <span class="attr">to</span>=<span class="string">"/test-layout/drawer"</span> <span class="attr">replace</span> <span class="attr">label</span>=<span class="string">"Drawer"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-tabs</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Left Side Drawer --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout-drawer</span> <span class="attr">side</span>=<span class="string">"left"</span> <span class="attr">v-model</span>=<span class="string">"showLeft"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-list</span> <span class="attr">no-border</span> <span class="attr">link</span> <span class="attr">inset-separator</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Essential Links<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">to</span>=<span class="string">"/docs"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"school"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Docs"</span> <span class="attr">sublabel</span>=<span class="string">"quasar-framework.org"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">to</span>=<span class="string">"/forum"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"record_voice_over"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Forum"</span> <span class="attr">sublabel</span>=<span class="string">"forum.quasar-framework.org"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">to</span>=<span class="string">"/chat"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"chat"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Discord Chat Channel"</span> <span class="attr">sublabel</span>=<span class="string">"https://discord.gg/5TDhbDg"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">to</span>=<span class="string">"/twitter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"rss feed"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Twitter"</span> <span class="attr">sublabel</span>=<span class="string">"@quasarframework"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout-drawer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Right Side Panel --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout-drawer</span> <span class="attr">side</span>=<span class="string">"right"</span> <span class="attr">v-model</span>=<span class="string">"showRight"</span>&gt;</span></span><br><span class="line">    Right Side of Layout</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout-drawer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- sub-routes get injected here: --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-page-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-page-container</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Footer --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout-footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line">      Layout Footer</span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout-footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>You can also use <a href="/components/scroll-area.html">QScrollArea</a> for the left or right sides of the layout, if you want to control the scrollbar (but it’s not mandatory):<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- notice style tag --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-layout-drawer</span> <span class="attr">side</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-scroll-area</span> <span class="attr">class</span>=<span class="string">"fit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">to</span>=<span class="string">"/test-layout/toolbar"</span>&gt;</span>Toolbar<span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">to</span>=<span class="string">"/test-layout/tabs"</span>&gt;</span>Tabs<span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">to</span>=<span class="string">"/test-layout/drawer"</span>&gt;</span>Drawer<span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-scroll-area</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-layout-drawer</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Tips-to-Understanding-QLayout"><a href="#Tips-to-Understanding-QLayout" class="headerlink" title="Tips to Understanding QLayout"></a>Tips to Understanding QLayout</h2><blockquote>
<p><strong>Using margin CSS will break the layout</strong><br>QLayout depends on taking up the whole screen and so QPageContainer, QLayoutHeader, QLayoutFooter and QLayoutDrawer positions are managed by it (through <code>view</code> prop). You <strong>cannot</strong> use <em>CSS margins</em> as a style neither on QLayout itself nor on any of the components mentioned above. However use can safely use <em>CSS padding</em>.</p>
</blockquote>
<h3 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h3><p>If your layout uses Vue Router sub-routes (recommended), then it makes sense to use Vue’s <code>&lt;router-view /&gt;</code> component, which is just a placeholder where sub-routes are injected.</p>
<h3 id="Toolbar-Placement"><a href="#Toolbar-Placement" class="headerlink" title="Toolbar Placement"></a>Toolbar Placement</h3><p>A great place to use the <a href="/components/toolbar.html">Toolbars</a> component is within the QLayoutHeader and QLayoutFooter.<br>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-layout-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">color</span>=<span class="string">"green"</span>&gt;</span></span><br><span class="line">    ... toolbar content ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-layout-header</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Search-example"><a href="#Search-example" class="headerlink" title="Search example"></a>Search example</h3><p>Below is an example of placing a <a href="/components/search.html">Search</a> bar in the header:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-layout</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">&lt;!-- We place it on header --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout-header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-search</span> <span class="attr">inverted</span> <span class="attr">v-model</span>=<span class="string">"search"</span> <span class="attr">color</span>=<span class="string">"none"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout-header</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Fixed-Positioning-amp-FABs"><a href="#Fixed-Positioning-amp-FABs" class="headerlink" title="Fixed Positioning &amp; FABs"></a>Fixed Positioning &amp; FABs</h3><p>Also, read about the smart <a href="/components/page-sticky.html">Page Sticky</a> which helps you fix position DOM elements or components on a Layout page and learn how you can use it to also place a <a href="/components/floating-action-button.html">Floating Action Button</a>.</p>
<h2 id="QLayout-Vue-Properties"><a href="#QLayout-Vue-Properties" class="headerlink" title="QLayout Vue Properties"></a>QLayout Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>view</code></td>
<td>String</td>
<td>Configuration string which defines how different parts of the layout get displayed on screen.</td>
</tr>
</tbody>
</table>
<h3 id="Configuring-the-“view”-prop"><a href="#Configuring-the-“view”-prop" class="headerlink" title="Configuring the “view” prop"></a>Configuring the “view” prop</h3><p>Quasar introduces a unique and excellent layout concept, which allows you to easily structure layouts to work in certain ways, by simply changing a short string notation.</p>
<p>To explain how this works, imagine your Layout is a 3x3 matrix of containers. The first row of containers would be the header and the last row would be the footer. The first column of containers would be the “left” and last column would be the “right”. The center of the matrix, below the header and above the footer, would be the page or main content container.</p>
<p>Now think about this. This matrix of containers or “QLayout View” can be represented by a string. This string contains only 11 characters:</p>
<ul>
<li>3 defining the header row</li>
<li>then a space</li>
<li>3 defining the middle row</li>
<li>a space</li>
<li>then 3 defining the footer</li>
</ul>
<p>The picture below offers a visual representation of the QLayout View, to help you understand how to configure its 3x3 matrix.</p>
<p><img src="/images/layout-view-prop.svg" alt="Layout &quot;view&quot; prop" title="Layout &#39;view&#39; prop"></p>
<p>The letters shown above are also case sensitive. For example, using at least one “L” (uppercase character instead of lowercase) will make your layout left side (drawer) be in a fixed position. Same applies for “H” (header), “F” (footer) and finally “R” (right side / drawer).</p>
<p>For example, if you want your layout’s right side / drawer to be placed on the right of the header, page and footer, you’d use <code>hhr lpr ffr</code>. If you’d like to also make it fixed, just transform one <code>r</code> character to uppercase, like this: <code>hhR lpr ffr</code>, or <code>hhr lpR ffr</code> or <code>hhr lpr ffR</code>.</p>
<p>These settings are completely up to you to use as you’d like. You could even go wild with a setup like this: <code>Lhh lpR ffr</code>. Try it out! Make sure you also go to the desktop view, to see it work properly.</p>
<blockquote>
<p><strong>NOTE</strong><br>It is important that you specify all sections of a layout, even if you don’t use them. For example, even if you don’t use footer or right side drawer, specify them within your layout’s <code>view</code> prop.</p>
</blockquote>
<h2 id="QLayout-Vue-Events"><a href="#QLayout-Vue-Events" class="headerlink" title="QLayout Vue Events"></a>QLayout Vue Events</h2><table>
<thead>
<tr>
<th>Event Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@resize</code></td>
<td>Event emitted on window resize.</td>
</tr>
<tr>
<td><code>@scroll</code></td>
<td>Event emitted on page scroll.</td>
</tr>
<tr>
<td><code>@scrollHeight</code></td>
<td>Event emitted on page scroll height change.</td>
</tr>
</tbody>
</table>
<h2 id="Containerized-QLayout"><a href="#Containerized-QLayout" class="headerlink" title="Containerized QLayout"></a>Containerized QLayout</h2><p><em>v0.17.9+</em></p>
<blockquote>
<p><strong>WARNING</strong><br>Not supported in IE11.</p>
</blockquote>
<p>Please note that it <strong>requires a CSS height/width (or min-height/min-width) being set explicitly</strong>, otherwise it can’t work.</p>
<p>Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-layout</span> <span class="attr">view</span>=<span class="string">"LHh lpR fff"</span> <span class="attr">container</span> <span class="attr">style</span>=<span class="string">"height: 500px; width: 300px"</span> <span class="attr">class</span>=<span class="string">"shadow-2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout-header</span> <span class="attr">reveal</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> @<span class="attr">click</span>=<span class="string">"drawer = !drawer"</span> <span class="attr">round</span> <span class="attr">dense</span> <span class="attr">icon</span>=<span class="string">"menu"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-toolbar-title</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout-footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> @<span class="attr">click</span>=<span class="string">"drawer = !drawer"</span> <span class="attr">round</span> <span class="attr">dense</span> <span class="attr">icon</span>=<span class="string">"menu"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-toolbar-title</span>&gt;</span>Footer<span class="tag">&lt;/<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout-footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout-drawer</span> <span class="attr">v-model</span>=<span class="string">"drawer"</span> <span class="attr">:width</span>=<span class="string">"200"</span> <span class="attr">:breakpoint</span>=<span class="string">"300"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"n in 50"</span> <span class="attr">:key</span>=<span class="string">"n"</span>&gt;</span>Drawer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout-drawer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-page-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-page</span> <span class="attr">style</span>=<span class="string">"padding-top: 50px"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"n in 50"</span> <span class="attr">:key</span>=<span class="string">"n"</span>&gt;</span>My page<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-page</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-page-container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Example in a QModal:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-modal</span> <span class="attr">v-model</span>=<span class="string">"modal"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout</span> <span class="attr">view</span>=<span class="string">"LHh lpR fff"</span> <span class="attr">container</span> <span class="attr">style</span>=<span class="string">"min-height: 60vh; min-width: 60vw;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-layout-header</span> <span class="attr">reveal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> @<span class="attr">click</span>=<span class="string">"drawer2 = !drawer2"</span> <span class="attr">round</span> <span class="attr">dense</span> <span class="attr">icon</span>=<span class="string">"menu"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-toolbar-title</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> @<span class="attr">click</span>=<span class="string">"modal = false"</span> <span class="attr">round</span> <span class="attr">dense</span> <span class="attr">icon</span>=<span class="string">"close"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-layout-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-layout-footer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> @<span class="attr">click</span>=<span class="string">"drawer2 = !drawer2"</span> <span class="attr">round</span> <span class="attr">dense</span> <span class="attr">icon</span>=<span class="string">"menu"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-toolbar-title</span>&gt;</span>Footer<span class="tag">&lt;/<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-layout-footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-layout-drawer</span> <span class="attr">v-model</span>=<span class="string">"drawer2"</span> <span class="attr">:width</span>=<span class="string">"200"</span> <span class="attr">:breakpoint</span>=<span class="string">"900"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"n in 50"</span> <span class="attr">:key</span>=<span class="string">"n"</span>&gt;</span>Drawer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-layout-drawer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-page-container</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-page</span> <span class="attr">style</span>=<span class="string">"padding-top: 50px"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"n in 50"</span> <span class="attr">:key</span>=<span class="string">"n"</span>&gt;</span>My page<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-page-container</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-modal</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LoadingBar]]></title>
      <url>https://quasar-framework.org/components/loading-bar.html</url>
      <content type="html"><![CDATA[<p>The Quasar LoadingBar plugin offers an easy way to set up your app with a <a href="/components/ajax-bar.html">QAjaxBar</a> in case you don’t want to handle a QAjaxBar component yourself.</p>
<p>For a demo, please visit the QAjaxBar documentation page.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  plugins: [<span class="string">'LoadingBar'</span>],</span><br><span class="line"></span><br><span class="line">  config: &#123;</span><br><span class="line">    <span class="comment">// optional (v0.17+)</span></span><br><span class="line">    loadingBar: &#123;</span><br><span class="line">      <span class="comment">// QAjaxBar properties</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>QAjaxBar properties can be found <a href="/components/ajax-bar.html#Vue-Properties">here</a>.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Inside Vue components:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$q.loadingBar.start()</span><br><span class="line"><span class="keyword">this</span>.$q.loadingBar.stop()</span><br><span class="line"><span class="keyword">this</span>.$q.loadingBar.increment(value)</span><br></pre></td></tr></table></figure></p>
<p>Outside of Vue components:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; LoadingBar &#125; from &apos;quasar&apos;</span><br><span class="line"></span><br><span class="line">LoadingBar.start()</span><br><span class="line">LoadingBar.stop()</span><br><span class="line">LoadingBar.increment(value)</span><br></pre></td></tr></table></figure></p>
<h2 id="Setting-Up-Defaults"><a href="#Setting-Up-Defaults" class="headerlink" title="Setting Up Defaults"></a>Setting Up Defaults</h2><p><em>Quasar v0.17+</em></p>
<p>Should you wish to set up some defaults, rather than specifying them each time, you can do so by using quasar.conf &gt; framework &gt; config &gt; loadingBar: {…} or by calling <code>LoadingBar.setDefaults({...})</code> or <code>this.$q.loadingBar.setDefaults({...})</code>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Layout Drawer]]></title>
      <url>https://quasar-framework.org/components/layout-drawer.html</url>
      <content type="html"><![CDATA[<p><a href="/components/layout.html">QLayout</a> allows you to configure your views as a 3x3 matrix, containing an optional Header and/or Footer. If you haven’t already, please read QLayout documentation page first.</p>
<input type="hidden" data-fullpage-demo="layout-demo/play-with-layout" data-source="../../layouts/layout-demo.vue">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [</span><br><span class="line">    <span class="string">'QLayoutDrawer'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-layout</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout-drawer</span> <span class="attr">side</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- drawer content --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout-drawer</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="QLayoutDrawer-Vue-Properties"><a href="#QLayoutDrawer-Vue-Properties" class="headerlink" title="QLayoutDrawer Vue Properties"></a>QLayoutDrawer Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>side</code></td>
<td>String</td>
<td>One of ‘left’ or ‘right’, depending on the Drawer position on Layout.</td>
</tr>
<tr>
<td><code>overlay</code></td>
<td>Boolean</td>
<td>Overlay mode</td>
</tr>
<tr>
<td><code>breakpoint</code></td>
<td>Number</td>
<td>Breakpoint (in pixels, defining window width) at which point the Drawer will be placed directly over the layout and won’t act as a mobile drawer anymore. Default is 992 (up to “sm”, including).</td>
</tr>
<tr>
<td><code>behavior</code></td>
<td>String</td>
<td>One of ‘default’, ‘desktop’, ‘mobile’. The last two override the breakpoint and makes Drawer act only as on desktop or only as on mobile modes, regardless of window width.</td>
</tr>
<tr>
<td><code>no-hide-on-route-change</code></td>
<td>Boolean</td>
<td>(Quasar v0.15.7+) Disable hiding of Drawer during route changes.</td>
</tr>
<tr>
<td><code>no-swipe-open</code></td>
<td>Boolean</td>
<td>Disable ability to open Drawer by touch actions.</td>
</tr>
<tr>
<td><code>no-swipe-close</code></td>
<td>Boolean</td>
<td>Disable ability to close Drawer by touch actions. Useful if you have components in your Drawer which require touch actions. The backdrop will still work with touch actions.</td>
</tr>
<tr>
<td><code>content-style</code></td>
<td>Object</td>
<td>CSS Style in Object format for the Drawer container element.</td>
</tr>
<tr>
<td><code>content-class</code></td>
<td>String/Object/Array</td>
<td>CSS classes for the Drawer container element.</td>
</tr>
<tr>
<td><code>mini</code></td>
<td>Boolean</td>
<td>(v0.15.11+) If drawer is in mini mode or not.</td>
</tr>
<tr>
<td><code>mini-width</code></td>
<td>Number</td>
<td>(v0.17+) CSS unit for drawer width when in mini mode. Default: 60</td>
</tr>
<tr>
<td><code>width</code></td>
<td>Number</td>
<td>The width in pixels of the drawer (when not in mini mode). Default: 300</td>
</tr>
<tr>
<td><code>show-if-above</code></td>
<td>Boolean</td>
<td>(v0.17.11+) The initial state of the drawer when it gets rendered for first time, overriding the model (which might have been previously set to “false” by a user toggle).</td>
</tr>
</tbody>
</table>
<h2 id="QLayoutDrawer-Vue-Methods"><a href="#QLayoutDrawer-Vue-Methods" class="headerlink" title="QLayoutDrawer Vue Methods"></a>QLayoutDrawer Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@on-layout(Boolean)</code></td>
<td>String</td>
<td>(v0.17.9+) Emitted when Drawer toggles using space on Layout.</td>
</tr>
</tbody>
</table>
<h2 id="Styling-Examples"><a href="#Styling-Examples" class="headerlink" title="Styling Examples"></a>Styling Examples</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-layout-drawer</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content-class</span>=<span class="string">"bg-grey-3"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:content-style</span>=<span class="string">"&#123;padding: '20px'&#125;"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">side</span>=<span class="string">"left"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-layout-drawer</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The Vue Object notation for <code>content-style</code> is mandatory.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-layout-drawer</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:content-class</span>=<span class="string">"['bg-grey-3', 'q-pa-sm']"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">side</span>=<span class="string">"left"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-layout-drawer</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="The-Breakpoint"><a href="#The-Breakpoint" class="headerlink" title="The Breakpoint"></a>The Breakpoint</h2><p>If you’ve played with the layout in desktop mode, you might notice how the left and right sides / drawers magically hide, as you decrease the screen width. This is part of the smart responsiveness designed into Quasar’s layout component.</p>
<p>If you’d like to control how the left and right side / drawers work, you have a prop called <code>breakpoint</code> on each QLayoutDrawer. This value represents the minimum size of the screen in pixels, before the Drawer is forced to float above the Layout. This is a fantastic and important function in maximizing screen real estate for smaller devices.</p>
<p><strong>Tip</strong><br>Also take a look at the <code>behavior</code> property if you want the Drawer to act only as on a narrow screen or only as on a wide screen, effectively disable the breakpoint.</p>
<h2 id="Using-v-model"><a href="#Using-v-model" class="headerlink" title="Using v-model"></a>Using v-model</h2><p>There’s the possibility to use <code>v-model</code> to control the state of Drawer (opened/showing and closed/hidden).</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout-drawer</span> <span class="attr">v-model</span>=<span class="string">"drawer"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout-drawer</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">"drawer = !drawer"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">flat</span></span></span><br><span class="line"><span class="tag">    <span class="attr">round</span></span></span><br><span class="line"><span class="tag">    <span class="attr">dense</span></span></span><br><span class="line"><span class="tag">    <span class="attr">icon</span>=<span class="string">"menu"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// "false" means hidden</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// "true" means visible</span></span></span><br><span class="line"><span class="javascript">      drawer: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Please note that the model can instantly get changed upon Drawer being rendered if the breakpoint requires it.</p>
<h2 id="Mini-mode"><a href="#Mini-mode" class="headerlink" title="Mini mode"></a>Mini mode</h2><p><em>Requires Quasar v0.15.11+</em></p>
<p>Drawer can operate in two modes: ‘normal’ and ‘mini’, and you can switch between them by using the Boolean <code>mini</code> property on QLayoutDrawer. <strong>Please note that “mini” mode does not apply when in “mobile” behavior.</strong></p>
<h3 id="CSS-classes"><a href="#CSS-classes" class="headerlink" title="CSS classes"></a>CSS classes</h3><p>There are some CSS classes that will help you customize the drawer when dealing with “mini” mode. These are very useful especially when using the “click” trigger:</p>
<table>
<thead>
<tr>
<th>CSS Class</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>q-mini-drawer-hide</code></td>
<td>Hide when drawer is in “mini” mode.</td>
</tr>
<tr>
<td><code>q-mini-drawer-only</code></td>
<td>Show only when drawer is in “mini” mode.</td>
</tr>
</tbody>
</table>
<p>You can also write your own CSS classes based on the fact that QLayoutDrawer has <code>q-layout-drawer-normal</code> CSS class when in “normal” mode and <code>q-layout-drawer-mini</code> when in “mini” mode. Also, when drawer is in “mobile” behavior, it gets <code>q-layout-drawer-mobile</code> CSS class.</p>
<h3 id="Slots"><a href="#Slots" class="headerlink" title="Slots"></a>Slots</h3><p>By default, when in “mini” mode, Quasar CSS hides a few DOM elements to provide a neat narrow drawer. But there may certainly be use-cases where you need a deep tweak. You can use the “mini” Vue slot of QLayoutDrawer just for that. The content of this slot will replace your drawer’s default content when in “mini” mode.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout-drawer</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:mini</span>=<span class="string">"miniState"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- drawer content when not "mini" --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"mini"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- drawer content when in "mini" mode --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout-drawer</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      miniState: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Example-with-mouseover-mouseout-trigger"><a href="#Example-with-mouseover-mouseout-trigger" class="headerlink" title="Example with mouseover/mouseout trigger"></a>Example with mouseover/mouseout trigger</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout-drawer</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:mini</span>=<span class="string">"miniState"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">mouseover</span>=<span class="string">"miniState = false"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">mouseout</span>=<span class="string">"miniState = true"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- drawer content --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout-drawer</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      miniState: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Example-with-click-trigger"><a href="#Example-with-click-trigger" class="headerlink" title="Example with click trigger"></a>Example with click trigger</h3><p>When in “mini” mode, if user clicks on Drawer then we switch to normal mode.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout-drawer</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:mini</span>=<span class="string">"miniState"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click.capture</span>=<span class="string">"drawerClick"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- drawer content --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      we also need a way for user to be able to switch</span></span><br><span class="line"><span class="comment">      back to "mini" mode, so here's an example with a button</span></span><br><span class="line"><span class="comment">      which gets hidden when on "mini" mode:</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"q-mini-drawer-hide"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"Go to mini state"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">"miniState = true"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout-drawer</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      miniState: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    drawerClick (e) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// if in "mini" state and user</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// click on drawer, we switch it to "normal" mode</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="keyword">this</span>.miniState) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.miniState = <span class="literal">false</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// notice we have registered an event with capture flag;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// we need to stop further propagation as this click is</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// intended for switching drawer to "normal" mode only</span></span></span><br><span class="line"><span class="undefined">        e.stopPropagation()</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Layout Page]]></title>
      <url>https://quasar-framework.org/components/layout-page.html</url>
      <content type="html"><![CDATA[<p><a href="/components/layout.html">QLayout</a> must contain page content. If you haven’t already, please read QLayout documentation page first.</p>
<input type="hidden" data-fullpage-demo="layout-demo/play-with-layout" data-source="../../layouts/layout-demo.vue">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [</span><br><span class="line">    <span class="string">'QPageContainer'</span>,</span><br><span class="line">    <span class="string">'QPage'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>A QPage must be encapsulated by QPageContainer, which in turn must be a child of QLayout.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-layout</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">q-page-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-page</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- page content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-page</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-page-container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Usually, the QPageContainer is part of the Layout template (where it contains a <code>&lt;router-view /&gt;</code> child only), and its content goes into separate vue files under <code>/src/pages</code>. If you haven’t already, please read <a href="/components/integrating-layout-with-router.html">Integrating Layout with Router</a>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- vue file for Layout: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-layout</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">q-page-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-page-container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- vue file for a Page: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-page</span> <span class="attr">padding</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- page content --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-page</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="QPage-Vue-Properties"><a href="#QPage-Vue-Properties" class="headerlink" title="QPage Vue Properties"></a>QPage Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>padding</code></td>
<td>Boolean</td>
<td>Adds a default dynamic padding to the page.</td>
</tr>
<tr>
<td><code>style-fn</code></td>
<td>Function</td>
<td>Described below.</td>
</tr>
</tbody>
</table>
<h3 id="Style-fn"><a href="#Style-fn" class="headerlink" title="Style-fn"></a>Style-fn</h3><p>A QPage needs a QLayout, because QLayout controls all the offsets of a page, keeping account of the space that header/footer/drawer use, according to its <code>view</code> property configuration. By default, your QPage component will have a <code>min-height</code> CSS property set on it to ensure that the content fills the screen at all times, even when the content is just a few lines.</p>
<p>If you wish to tweak, or even remove this property, you can do so by using the <code>style-fn</code> property:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-page</span> <span class="attr">:style-fn</span>=<span class="string">"myTweak"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// ...</span></span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    myTweak (offset) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// "offset" is a Number (pixels) that refers to the total</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// height of header + footer that occupies on screen,</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// based on the QLayout "view" prop configuration</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// this is actually what the default style-fn does in Quasar</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123; <span class="attr">minHeight</span>: offset ? <span class="string">`calc(100vh - <span class="subst">$&#123;offset&#125;</span>px)`</span> : <span class="string">'100vh'</span> &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Loading]]></title>
      <url>https://quasar-framework.org/components/loading.html</url>
      <content type="html"><![CDATA[<p>Loading is a feature that you can use to display an overlay with a spinner on top of your App’s content to inform the user that a background operation is taking place. No need to add complex logic within your Pages for global background operations.</p>
<input type="hidden" data-fullpage-demo="progress/loading">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  plugins: [<span class="string">'Loading'</span>],</span><br><span class="line"></span><br><span class="line">  config: &#123;</span><br><span class="line">    <span class="comment">// optional (v0.17+)</span></span><br><span class="line">    loading: &#123;</span><br><span class="line">      <span class="comment">// Loading defaults</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Loading uses a delay (500ms) to display itself so that quick operations won’t make the screen flicker. This happens by showing and then quickly hiding the progress spinner without the user having a chance to see what happens. The delay before showing it eliminates confusion.</p>
<h3 id="Show-Loading"><a href="#Show-Loading" class="headerlink" title="Show Loading"></a>Show Loading</h3><p>Inside a Vue component:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$q.loading.show(&#123;</span><br><span class="line">  delay: 400 // ms</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>Outside of a Vue component:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Loading,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// optional!, for example below</span></span><br><span class="line">  <span class="comment">// with custom spinner</span></span><br><span class="line">  QSpinnerGears</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// default options</span></span><br><span class="line">Loading.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">// with a custom delay</span></span><br><span class="line">Loading.show(&#123;</span><br><span class="line">  delay: <span class="number">300</span> <span class="comment">// milliseconds</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// customizable (all props available)</span></span><br><span class="line">Loading.show(&#123;</span><br><span class="line">  spinner: QSpinnerGears,</span><br><span class="line">  message: <span class="string">'Some message'</span>,</span><br><span class="line">  messageColor: <span class="string">'blue'</span>,</span><br><span class="line">  spinnerSize: <span class="number">250</span>, <span class="comment">// in pixels</span></span><br><span class="line">  spinnerColor: <span class="string">'white'</span>,</span><br><span class="line">  customClass : <span class="string">'bg-primary'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h3 id="Hide-Loading"><a href="#Hide-Loading" class="headerlink" title="Hide Loading"></a>Hide Loading</h3><p>Inside a Vue component:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$q.loading.hide()</span><br></pre></td></tr></table></figure></p>
<p>Outside of a Vue component:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Loading &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line">Loading.hide()</span><br></pre></td></tr></table></figure></p>
<h3 id="Check-Status"><a href="#Check-Status" class="headerlink" title="Check Status"></a>Check Status</h3><p>Checking whether the Loading is active is easy.</p>
<p>Inside a Vue component:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$q.loading.isActive</span><br></pre></td></tr></table></figure></p>
<p>Outside of a Vue component:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Loading &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line">(<span class="built_in">Boolean</span>) Loading.isActive</span><br></pre></td></tr></table></figure></p>
<h2 id="Setting-Up-Defaults"><a href="#Setting-Up-Defaults" class="headerlink" title="Setting Up Defaults"></a>Setting Up Defaults</h2><p><em>Quasar v0.17+</em></p>
<p>Should you wish to set up some defaults, rather than specifying them each time, you can do so by using quasar.conf &gt; framework &gt; config &gt; loading: {…} or by calling <code>Loading.setDefaults({...})</code> or <code>this.$q.loading.setDefaults({...})</code>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Material Ripples]]></title>
      <url>https://quasar-framework.org/components/material-ripples.html</url>
      <content type="html"><![CDATA[<p>Material Ripple effect can easily be added to any DOM element (or component) through the <code>v-ripple</code> Quasar directive. Following these steps:</p>
<ol>
<li><p>Make sure your DOM element or component has CSS <code>position: relative</code> or Quasar CSS helper class <code>relative-position</code> attached to it.</p>
</li>
<li><p>Add <code>v-ripple</code> directive to it.</p>
</li>
</ol>
<p>The color of the ripples are determined by the text color (CSS ‘color’ prop) of the DOM element.</p>
<input type="hidden" data-fullpage-demo="style-and-identity/material-ripples">

<h2 id="Installing"><a href="#Installing" class="headerlink" title="Installing"></a>Installing</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  directives: [<span class="string">'Ripple'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"relative-position"</span> <span class="attr">v-ripple</span>&gt;</span></span><br><span class="line">  ....</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Trigger-only-for-one-Quasar-theme"><a href="#Trigger-only-for-one-Quasar-theme" class="headerlink" title="Trigger only for one Quasar theme"></a>Trigger only for one Quasar theme</h2><p>For this you need to specify <code>mat</code> or <code>ios</code> directive modifiers like this:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Only for Quasar Material theme --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-ripple.mat</span> <span class="attr">class</span>=<span class="string">"relative-position"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Only for Quasar iOS theme --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-ripple.ios</span> <span class="attr">class</span>=<span class="string">"relative-position"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Dynamic-Disable"><a href="#Dynamic-Disable" class="headerlink" title="Dynamic Disable"></a>Dynamic Disable</h2><p>If for some reason you have a scenario where the ripples need to be disabled, then you can assign a Boolean as value for the directive.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-ripple</span>=<span class="string">"rippleEnabled"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"relative-position"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-checkbox</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"rippleEnabled"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"Enable Ripples"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    .....</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      rippleEnabled: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>When your Vue scope variable <code>rippleEnabled</code> becomes Boolean <code>false</code> then the ripple will be disabled.<br>You can also combine this with the <code>mat</code> and <code>ios</code> modifiers.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Lists and List Items]]></title>
      <url>https://quasar-framework.org/components/lists-and-list-items.html</url>
      <content type="html"><![CDATA[<p>Quasar Lists and List Items are a group of components which can work together to present multiple line items vertically as a single continuous element. They are best suited for displaying similar data types as rows of information, such as a contact list, a playlist, or menu. Each row is called an Item. Items can also be used outside of a List.</p>
<input type="hidden" data-fullpage-demo="grouping/list/email" data-source="grouping/list">

<p>Lists can encapsulate Items or Item-like components, for example <a href="/components/collapsible.html">QCollapsible</a>.</p>
<p>List Items have following content areas:</p>
<ul>
<li><strong>left side</strong> and <strong>right side</strong> (usually equipped for supplemental actions represented by icons, avatars, images or letters, but not limited to only these)</li>
<li><strong>main content</strong> which usually is filled with a label (title) and sublabel (subtitle), form components, or anything else for that matter.</li>
</ul>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [</span><br><span class="line">    <span class="string">'QList'</span>,</span><br><span class="line">    <span class="string">'QListHeader'</span>,</span><br><span class="line">    <span class="string">'QItem'</span>,</span><br><span class="line">    <span class="string">'QItemMain'</span>,</span><br><span class="line">    <span class="string">'QItemSeparator'</span>,</span><br><span class="line">    <span class="string">'QItemSide'</span>,</span><br><span class="line">    <span class="string">'QItemTile'</span></span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if you use v-close-overlay:</span></span><br><span class="line">  directives: [<span class="string">'CloseOverlay'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>We’ll cover each component on its own section later on, but for now, take a look to get a glimpse of how to structure your templates when using Lists.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-list</span> <span class="attr">highlight</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Recent chats<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">avatar</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"statics/boy-avatar.png"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"John Doe"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">icon</span>=<span class="string">"chat_bubble"</span> <span class="attr">color</span>=<span class="string">"green"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">avatar</span>=<span class="string">"statics/linux-avatar.png"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Jim Doe"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"chat_bubble"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Previous chats<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">avatar</span>=<span class="string">"statics/guy-avatar.png"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Jack Doe"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Notice that QItemMain and QItemSide can contain QItemTiles, or for convenience, you can use their own properties to define the content.</p>
<p>Due to how Webpack works in creating the bundle for your App, in some cases you may need to use QItemTile, like for avatars or images. The reason is simple: if you use QItemSide <code>avatar</code> property, you must supply the path to the statics folder and cannot use the <code>assets</code> folder or relative paths. Instead, the latter two can be used with a QItemTile wrapping an <code>&lt;img&gt;</code> HTML tag. Look closely at image paths in the example above (<code>statics/guy-avatar.png</code> vs <code>~assets/boy-avatar.png</code>). Also read about <a href="/guide/app-handling-assets.html">App Handling Static Assets</a> to understand how Webpack includes assets into the bundle.</p>
<h2 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h2><p>Below is a list of Quasar components that you can use to define lists and list items:</p>
<ul>
<li>QList (encapsulating QItems and all other List related components)</li>
<li>QListHeader (header of a section in QList)</li>
<li>QItemSeparator (external Item separator/separator)</li>
<li>QItem (encapsulating everything an Item contains)</li>
<li>QItemSide (left or right side)</li>
<li>QItemMain (for main content of an Item)</li>
<li>QItemTile (for individual parts of QItemSide and QItemMain, like label, icon, avatar, image, …)</li>
</ul>
<p><img src="/images/q-list.svg" alt="Quasar List and List Items" title="Quasar List and List Items"></p>
<h3 id="QList"><a href="#QList" class="headerlink" title="QList"></a>QList</h3><p>QList encapsulates all other components mentioned. It’s not mandatory, but does help with maintaining a good design and can also define some properties that will be applied to all QItems (or QItem-like components) like multiline, separator, link, highlight and so on.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>striped</code></td>
<td>Boolean</td>
<td>Apply highlight to QItems intermittently, starting with second QItem.</td>
</tr>
<tr>
<td><code>striped-odd</code></td>
<td>Boolean</td>
<td>Apply highlight to QItems intermittently, starting with first QItem.</td>
</tr>
<tr>
<td><code>highlight</code></td>
<td>Boolean</td>
<td>Apply highlight to all QItems. This works only on desktop when user hovers QItems.</td>
</tr>
<tr>
<td><code>link</code></td>
<td>Boolean</td>
<td>Apply highlight and a pointer cursor to all QItems.</td>
</tr>
<tr>
<td><code>dense</code></td>
<td>Boolean</td>
<td>Make QItems dense.</td>
</tr>
<tr>
<td><code>sparse</code></td>
<td>Boolean</td>
<td>Make QItems sparse.</td>
</tr>
<tr>
<td><code>multiline</code></td>
<td>Boolean</td>
<td>Make QItems multiline.</td>
</tr>
<tr>
<td><code>separator</code></td>
<td>Boolean</td>
<td>Make QItems have a separator between them.</td>
</tr>
<tr>
<td><code>inset-separator</code></td>
<td>Boolean</td>
<td>Make QItems have an inset separator between them.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>When you component is rendered on a dark background</td>
</tr>
<tr>
<td><code>no-border</code></td>
<td>Boolean</td>
<td>Remove the default border around QList.</td>
</tr>
</tbody>
</table>
<h3 id="QListHeader"><a href="#QListHeader" class="headerlink" title="QListHeader"></a>QListHeader</h3><p>Within QList, you can display a section header / title.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>inset</code></td>
<td>Boolean</td>
<td>Place an inset separator.</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Folders<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- insert QItems... --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Files<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- insert QItems... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="QItemSeparator"><a href="#QItemSeparator" class="headerlink" title="QItemSeparator"></a>QItemSeparator</h3><p>If you want QItem external separators (there are internal ones too as you can see on QItem’s description later on this page), use the QItemSeparator component. It’s useful also to separate different sections of your QList, like for example, before a QListHeader.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>inset</code></td>
<td>Boolean</td>
<td>Place an inset separator.</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Folders<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- insert QItems... --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Files<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- insert QItems... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- and/or --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">...</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Inset separator example --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> <span class="attr">inset</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">...</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">...</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Files<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">...</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="QItem"><a href="#QItem" class="headerlink" title="QItem"></a>QItem</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>dense</code></td>
<td>Boolean</td>
<td>Make QItem dense (narrow paddings).</td>
</tr>
<tr>
<td><code>sparse</code></td>
<td>Boolean</td>
<td>Make QItem sparse (large paddings).</td>
</tr>
<tr>
<td><code>separator</code></td>
<td>Boolean</td>
<td>Make QItem have a separator between it and previous QItem.</td>
</tr>
<tr>
<td><code>inset-separator</code></td>
<td>Boolean</td>
<td>Make QItem have an inset separator between it and previous QItem.</td>
</tr>
<tr>
<td><code>multiline</code></td>
<td>Boolean</td>
<td>Make QItem multiline. Vertically aligns QItem sides to top. Useful for more than 2-3 lines QItem content.</td>
</tr>
<tr>
<td><code>highlight</code></td>
<td>Boolean</td>
<td>Apply highlight to QItem. Works only on desktop when user hovers it.</td>
</tr>
<tr>
<td><code>link</code></td>
<td>Boolean</td>
<td>Apply highlight and a pointer cursor to QItem.</td>
</tr>
<tr>
<td><code>tag</code></td>
<td>String</td>
<td>Default HTML tag used is ‘div’, but this can be any HTML tag if you need to. Read below for more information.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>When rendered on a dark background</td>
</tr>
</tbody>
</table>
<p>Also check the next section for more properties and to learn about how you can use your QItem as a Router Link.</p>
<h4 id="Using-QItem-as-a-Router-Link"><a href="#Using-QItem-as-a-Router-Link" class="headerlink" title="Using QItem as a Router Link"></a>Using QItem as a Router Link</h4><p>If you want your QItem to act the same as Vue’s <code>&lt;router-link&gt;</code>, then you can use these additional properties (which work exactly the same as <code>&lt;router-link&gt;</code>):</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>to</code></td>
<td>String / Object</td>
<td>Route to navigate to</td>
</tr>
<tr>
<td><code>exact</code></td>
<td>Boolean</td>
<td>Match the exact route specified (and not also its children) when adding <code>router-link-active</code> CSS class.</td>
</tr>
<tr>
<td><code>append</code></td>
<td>Boolean</td>
<td>Append route definition to current route when navigating.</td>
</tr>
<tr>
<td><code>replace</code></td>
<td>Boolean</td>
<td>Replaces current route with the new one instead of adding it to the window history queue.</td>
</tr>
</tbody>
</table>
<p>For more details on these properties, please refer to the <a href="http://router.vuejs.org/en/api/router-link.html" target="_blank" rel="noopener">Vue Router documentation</a>.</p>
<h4 id="Render-with-specific-HTML-tag"><a href="#Render-with-specific-HTML-tag" class="headerlink" title="Render with specific HTML tag"></a>Render with specific HTML tag</h4><p>Please refer to the example on how to use the <code>tag</code> property shown below. In this example, we take advantage of the <code>&lt;label&gt;</code> tag that browsers automatically connect to checkboxes (QCheckbox, QToggle) or radio inputs (QRadio). When a <code>&lt;label&gt;</code> is clicked/tapped, then the wrapped checkboxes toggle their state (check / uncheck) and wrapped radios are being selected.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  We want a click/tap on the whole QItem</span></span><br><span class="line"><span class="comment">  to toggle the checkbox, so we use tag="label"</span></span><br><span class="line"><span class="comment">  to make QItem render with &lt;label&gt; tag.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"checkboxModel"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Notifications<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Notify me about updates to apps or games that I downloaded<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="QItemSide"><a href="#QItemSide" class="headerlink" title="QItemSide"></a>QItemSide</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>Use a color from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>text-color</code></td>
<td>String</td>
<td>Override text color, one from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>inverted</code></td>
<td>Boolean</td>
<td>Invert colors.</td>
</tr>
<tr>
<td><code>right</code></td>
<td>Boolean</td>
<td>Applies necessary design tweaks for right side of QItem.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon to use. Either use an icon, image, avatar or letter.</td>
</tr>
<tr>
<td><code>image</code></td>
<td>String</td>
<td>URL to image to use (point to statics). Either use an icon, image, avatar or letter.</td>
</tr>
<tr>
<td><code>avatar</code></td>
<td>String</td>
<td>URL to avatar to use (point to statics). Either use an icon, image, avatar or letter.</td>
</tr>
<tr>
<td><code>letter</code></td>
<td>String</td>
<td>One character String to define a letter. Either use an icon, image, avatar or letter.</td>
</tr>
<tr>
<td><code>stamp</code></td>
<td>String</td>
<td>For right side only. One character String to define a letter. Either use an icon, image, avatar or letter.</td>
</tr>
<tr>
<td><code>tag</code></td>
<td>String</td>
<td>Default HTML tag that QItemTile gets rendered with is ‘div’, but this can be any HTML tag if you need to.</td>
</tr>
</tbody>
</table>
<p>Use the icon, image, avatar, letter or stamp properties or, for more control, insert QItemTiles instead. Use only one method or the other.</p>
<h3 id="QItemMain"><a href="#QItemMain" class="headerlink" title="QItemMain"></a>QItemMain</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>label</code></td>
<td>String</td>
<td>Label to use as title.</td>
</tr>
<tr>
<td><code>sublabel</code></td>
<td>String</td>
<td>Label to use as subtitle.</td>
</tr>
<tr>
<td><code>label-lines</code></td>
<td>String / Number</td>
<td>Number of lines the label can span to.</td>
</tr>
<tr>
<td><code>sublabel-lines</code></td>
<td>String / Number</td>
<td>Number of lines the sublabel can span to.</td>
</tr>
<tr>
<td><code>inset</code></td>
<td>Boolean</td>
<td>Useful when QItem has no left side, but you want to align your content as if it had a left side.</td>
</tr>
<tr>
<td><code>tag</code></td>
<td>String</td>
<td>Default HTML tag that QItemTile gets rendered with is ‘div’, but this can be any HTML tag if you need to.</td>
</tr>
</tbody>
</table>
<p>Use the label properties or, for more control, insert QItemTiles to define the label and sublabel. Use only one method or the other.</p>
<h3 id="QItemTile"><a href="#QItemTile" class="headerlink" title="QItemTile"></a>QItemTile</h3><p>QItemTile can be used for more control over the content of the left, right side or main content of QItem.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>Use a color from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>text-color</code></td>
<td>String</td>
<td>Override text color, one from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>inverted</code></td>
<td>Boolean</td>
<td>Invert colors.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon to use. Either use an icon, image, avatar or letter as props.</td>
</tr>
<tr>
<td><code>image</code></td>
<td>Boolean</td>
<td>Encapsulates an image. Its content must be an <code>&lt;img&gt;</code> with <code>src</code> attribute pointing to statics. Either use an icon, image, avatar or letter as props.</td>
</tr>
<tr>
<td><code>avatar</code></td>
<td>Boolean</td>
<td>Encapsulates an avatar image. Its content must be an <code>&lt;img&gt;</code> with <code>src</code> attribute pointing to statics. Either use an icon, image, avatar or letter as props.</td>
</tr>
<tr>
<td><code>letter</code></td>
<td>Boolean</td>
<td>Encapsulates the “letter” of QItem.</td>
</tr>
<tr>
<td><code>stamp</code></td>
<td>Boolean</td>
<td>Encapsulates the “stamp” of QItem.</td>
</tr>
<tr>
<td><code>tag</code></td>
<td>String</td>
<td>Default HTML tag that QItemTile gets rendered with is ‘div’, but this can be any HTML tag if you need to.</td>
</tr>
</tbody>
</table>
<p>There are more props available for QItemTile, but only use the following when QItemTile is wrapped with QItemMain:</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>label</code></td>
<td>Boolean</td>
<td>Encapsulates the label / title of QItem.</td>
</tr>
<tr>
<td><code>sublabel</code></td>
<td>Boolean</td>
<td>Encapsulates the sub-label / sub-title of QItem.</td>
</tr>
<tr>
<td><code>lines</code></td>
<td>String / Number</td>
<td>Number of lines the label/sublabel can span to. Ellipsis are used when overflowing. Use only in conjunction with <code>label</code> and <code>sublabel</code>.</td>
</tr>
</tbody>
</table>
<h2 id="Using-QCollapsible-with-QItems"><a href="#Using-QCollapsible-with-QItems" class="headerlink" title="Using QCollapsible with QItems"></a>Using QCollapsible with QItems</h2><p><a href="/components/collapsible.html">QCollapsible</a> is a QItem wrapper, so you can use them as (and along) QItems within a QList. Here are two examples:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Notice we use QCollapsibles and QItems</span></span><br><span class="line"><span class="comment">  as direct children of QList.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  We are basically building a menu.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-list</span> <span class="attr">separator</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- collapsible to hide sub-level menu entries --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">icon</span>=<span class="string">"inbox"</span> <span class="attr">label</span>=<span class="string">"Inbox"</span> <span class="attr">sublabel</span>=<span class="string">"Where your email is"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">link</span> <span class="attr">to</span>=<span class="string">"/inbox/1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"mail"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Email 1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">link</span> <span class="attr">to</span>=<span class="string">"/inbox/2"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"mail"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Email 2"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">icon</span>=<span class="string">"favorite"</span> <span class="attr">label</span>=<span class="string">"Favorites"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">link</span> <span class="attr">to</span>=<span class="string">"/inbox/favorites/1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"mail"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Favorite 1"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">to</span>=<span class="string">"/inbox/favorites/2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"mail"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Favorite 2"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">to</span>=<span class="string">"/inbox/3"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"mail"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Email 3"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- menu link --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">link</span> <span class="attr">to</span>=<span class="string">"/snoozed"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"schedule"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Snoozed<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- collapsible to hide sub-level menu entries --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">icon</span>=<span class="string">"send"</span> <span class="attr">label</span>=<span class="string">"Sent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">to</span>=<span class="string">"/sent/1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"mail"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Email 1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- menu link --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">link</span> <span class="attr">to</span>=<span class="string">"/trash"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"delete"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Trash<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="More-Examples"><a href="#More-Examples" class="headerlink" title="More Examples"></a>More Examples</h2><h3 id="Email-list"><a href="#Email-list" class="headerlink" title="Email list"></a>Email list</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-list</span> <span class="attr">highlight</span> <span class="attr">inset-separator</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">avatar</span>=<span class="string">"statics/boy-avatar.png"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Brunch this weekend? Brunch this weekend? Brunch this weekend?"</span> <span class="attr">label-lines</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">stamp</span>=<span class="string">"1 min"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">multiline</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">avatar</span>=<span class="string">"statics/boy-avatar.png"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"Brunch this weekend? Brunch this weekend? Brunch this weekend?"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label-lines</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">sublabel</span>=<span class="string">"John Doe John Doe John Doe John Doe John Doe John Doe John Doe John Doe John Doe"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">sublabel-lines</span>=<span class="string">"2"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">stamp</span>&gt;</span>1 week ago<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">multiline</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">avatar</span>=<span class="string">"statics/boy-avatar.png"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"Brunch this weekend? Brunch this weekend? Brunch this weekend?"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label-lines</span>=<span class="string">"2"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">sublabel</span>=<span class="string">"John Doe John Doe John Doe John Doe John Doe John Doe John Doe John Doe John Doe"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">stamp</span>=<span class="string">"10 min"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">multiline</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">avatar</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"statics/boy-avatar.png"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Brunch <span class="tag">&lt;<span class="name">span</span>&gt;</span>5<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span> <span class="attr">lines</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">        John Doe John Doe John Doe John Doe John Doe John Doe</span><br><span class="line">        John Doe John Doe John Doe John Doe John Doe John Doe</span><br><span class="line">        John Doe John Doe John Doe John Doe</span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">stamp</span>&gt;</span>10 min<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">icon</span>=<span class="string">"star"</span> <span class="attr">color</span>=<span class="string">"yellow"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">multiline</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">avatar</span>=<span class="string">"statics/boy-avatar.png"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span> <span class="attr">lines</span>=<span class="string">"1"</span>&gt;</span>Brunch this weekend? Yeah, this weekend. Really. This one.<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span> <span class="attr">lines</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>John Doe<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        -- I'll be in your neighborhood doing errands this</span><br><span class="line">        weekend. Do you want to grab brunch?</span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">stamp</span>&gt;</span>2 years<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">icon</span>=<span class="string">"mail"</span> <span class="attr">color</span>=<span class="string">"primary"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-list</span> <span class="attr">inset-separator</span> <span class="attr">class</span>=<span class="string">"q-mt-md"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">avatar</span>=<span class="string">"statics/boy-avatar.png"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Brunch this weekend?"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">round</span> <span class="attr">dense</span> <span class="attr">icon</span>=<span class="string">"more_vert"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-popover</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">q-list</span> <span class="attr">link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">v-close-overlay</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Reply"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">v-close-overlay</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Forward"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">v-close-overlay</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Delete"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">q-popover</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">avatar</span>=<span class="string">"statics/boy-avatar.png"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Brunch this weekend?"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">square</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">class</span>=<span class="string">"shadow-2"</span>&gt;</span>10k<span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">avatar</span>=<span class="string">"statics/boy-avatar.png"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Brunch this weekend?"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">stamp</span>&gt;</span>10 min ago<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text-amber"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">icon</span>=<span class="string">"star"</span> <span class="attr">v-for</span>=<span class="string">"n in 2"</span> <span class="attr">:key</span>=<span class="string">"n"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Chat-List"><a href="#Chat-List" class="headerlink" title="Chat List"></a>Chat List</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-list</span> <span class="attr">highlight</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Recent chats<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">avatar</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"statics/boy-avatar.png"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"John Doe"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">icon</span>=<span class="string">"chat_bubble"</span> <span class="attr">color</span>=<span class="string">"green"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">avatar</span>=<span class="string">"statics/linux-avatar.png"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Jim Doe"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"chat_bubble"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Previous chats<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">avatar</span>=<span class="string">"statics/guy-avatar.png"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Jack Doe"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>One more example:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-list</span> <span class="attr">inset-separator</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"voice_chat"</span> <span class="attr">color</span>=<span class="string">"secondary"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Voice Chat with Joe"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"voice_chat"</span> <span class="attr">color</span>=<span class="string">"secondary"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">inverted</span> <span class="attr">icon</span>=<span class="string">"voice_chat"</span> <span class="attr">color</span>=<span class="string">"secondary"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Voice Chat with Joe"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">inverted</span> <span class="attr">icon</span>=<span class="string">"voice_chat"</span> <span class="attr">color</span>=<span class="string">"secondary"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">inverted</span> <span class="attr">icon</span>=<span class="string">"voice_chat"</span> <span class="attr">color</span>=<span class="string">"amber"</span> <span class="attr">text-color</span>=<span class="string">"black"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Voice Chat with Joe"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">inverted</span> <span class="attr">icon</span>=<span class="string">"voice_chat"</span> <span class="attr">color</span>=<span class="string">"amber"</span> <span class="attr">text-color</span>=<span class="string">"black"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">letter</span>=<span class="string">"J"</span> <span class="attr">color</span>=<span class="string">"secondary"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"John Doe"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">letter</span>=<span class="string">"J"</span> <span class="attr">color</span>=<span class="string">"secondary"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">inverted</span> <span class="attr">letter</span>=<span class="string">"J"</span> <span class="attr">color</span>=<span class="string">"secondary"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"John Doe"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">inverted</span> <span class="attr">letter</span>=<span class="string">"J"</span> <span class="attr">color</span>=<span class="string">"secondary"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">inverted</span> <span class="attr">letter</span>=<span class="string">"J"</span> <span class="attr">color</span>=<span class="string">"amber"</span> <span class="attr">text-color</span>=<span class="string">"black"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"John Doe"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">inverted</span> <span class="attr">letter</span>=<span class="string">"J"</span> <span class="attr">color</span>=<span class="string">"amber"</span> <span class="attr">text-color</span>=<span class="string">"black"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Folders-and-Files"><a href="#Folders-and-Files" class="headerlink" title="Folders and Files"></a>Folders and Files</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list-header</span> <span class="attr">inset</span>&gt;</span>Folders<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"folder"</span> <span class="attr">inverted</span> <span class="attr">color</span>=<span class="string">"primary"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Photos<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>February 22, 2016<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"info"</span> <span class="attr">color</span>=<span class="string">"green"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> <span class="attr">inset</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list-header</span> <span class="attr">inset</span>&gt;</span>Files<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"assignment"</span> <span class="attr">inverted</span> <span class="attr">color</span>=<span class="string">"grey-6"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Expenses spreadsheet<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>March 2nd, 2016<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"info"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Settings-Embedding-Form-Components"><a href="#Settings-Embedding-Form-Components" class="headerlink" title="Settings (Embedding Form Components)"></a>Settings (Embedding Form Components)</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-list</span> <span class="attr">link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>User controls<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Content filtering<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Set the content filtering level to restrict apps that can be downloaded<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Require password for purchase or use password to restrict purchase<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>General<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"checked_one"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Notifications<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Notify me about updates to apps or games that I downloaded<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"checked_two"</span> <span class="attr">color</span>=<span class="string">"secondary"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Sound<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Auto-update apps at anytime. Data charges may apply<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"checked_three"</span> <span class="attr">color</span>=<span class="string">"red"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Auto-add widgets<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Automatically add home screen widgets<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-list</span> <span class="attr">class</span>=<span class="string">"q-mt-md"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Radios<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">link</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-radio</span> <span class="attr">v-model</span>=<span class="string">"option"</span> <span class="attr">val</span>=<span class="string">"opt1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Option 1"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">link</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-radio</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">v-model</span>=<span class="string">"option"</span> <span class="attr">val</span>=<span class="string">"opt2"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Option 2<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Allows notifications<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">link</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-radio</span> <span class="attr">color</span>=<span class="string">"amber"</span> <span class="attr">v-model</span>=<span class="string">"option"</span> <span class="attr">val</span>=<span class="string">"opt3"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Option 3<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span> <span class="attr">lines</span>=<span class="string">"3"</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Toggles<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">link</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Events and reminders"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked_one"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">link</span> <span class="attr">tag</span>=<span class="string">"label"</span> <span class="attr">multiline</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Events and reminders<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Lorem ipsum<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked_two"</span> <span class="attr">color</span>=<span class="string">"secondary"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">link</span> <span class="attr">tag</span>=<span class="string">"label"</span> <span class="attr">multiline</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Events and reminders<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span> <span class="attr">lines</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">        Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed</span><br><span class="line">        do eiusmod tempor incididunt ut labore et dolore magna aliqua.</span><br><span class="line">        Ut enim ad minim veniam, quis nostrud exercitation ullamco</span><br><span class="line">        laboris nisi ut aliquip ex ea commodo consequat. Duis aute</span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked_three"</span> <span class="attr">color</span>=<span class="string">"amber"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Selects<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"supervisor_account"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-select</span> <span class="attr">hide-underline</span> <span class="attr">class</span>=<span class="string">"q-ma-none full-width"</span> <span class="attr">v-model</span>=<span class="string">"select"</span> <span class="attr">:options</span>=<span class="string">"selectOptions"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"supervisor_account"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-select</span> <span class="attr">hide-underline</span> <span class="attr">class</span>=<span class="string">"q-ma-none full-width"</span> <span class="attr">multiple</span> <span class="attr">toggle</span> <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span> <span class="attr">:options</span>=<span class="string">"selectOptions"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Ranges<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"volume_down"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-slider</span> <span class="attr">v-model</span>=<span class="string">"range"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"50"</span> <span class="attr">label</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"volume_up"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"volume_down"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-slider</span> <span class="attr">v-model</span>=<span class="string">"range"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"50"</span> <span class="attr">label</span> <span class="attr">color</span>=<span class="string">"amber"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"volume_up"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"monetization_on"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-range</span> <span class="attr">v-model</span>=<span class="string">"doubleRange"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"50"</span> <span class="attr">label</span> <span class="attr">color</span>=<span class="string">"secondary"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Movies-List"><a href="#Movies-List" class="headerlink" title="Movies List"></a>Movies List</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Documentaries<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">image</span>=<span class="string">"statics/mountains.jpg"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Mountains Documentary"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"movie"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">image</span>=<span class="string">"statics/quasar-logo.png"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Quasar<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Empower your development skills<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"movie"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Movies<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">multiline</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">image</span>=<span class="string">"statics/parallax1.jpg"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Must-see places<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span> <span class="attr">lines</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">        The world in which we live is full of wonderful places that most of us do not know</span><br><span class="line">        they really exist. Here you can see some of those breathtaking places  around the world.</span><br><span class="line">        Enjoy!</span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"movie"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">multiline</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">image</span>=<span class="string">"statics/parallax2.jpg"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Building a Bridge<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span> <span class="attr">lines</span>=<span class="string">"5"</span>&gt;</span></span><br><span class="line">        A bridge is one of those things that are often taken for granted until you don’t have one,</span><br><span class="line">        especially if you live on a rural property and there’s a creek between your house and the</span><br><span class="line">        county road. John Doe had plans to build a new bridge along with building a new house on</span><br><span class="line">        his property, but plans for the bridge were made top priority when a wayward truck carried</span><br><span class="line">        too much weight over the old bridge and it collapsed.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"movie"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Phonebook-List"><a href="#Phonebook-List" class="headerlink" title="Phonebook List"></a>Phonebook List</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"phone"</span> <span class="attr">color</span>=<span class="string">"primary"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>(650) 555 - 1234<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Mobile<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"chat_bubble"</span> <span class="attr">color</span>=<span class="string">"green"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">inset</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>(650) 555 - 2345<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Office<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"chat_bubble"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">inset</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>(650) 555 - 3456<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"chat_bubble"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> <span class="attr">inset</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"mail"</span> <span class="attr">color</span>=<span class="string">"primary"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>john@doe.com<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Personal<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">inset</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>john.doe@some-company.com<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Office<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Modal]]></title>
      <url>https://quasar-framework.org/components/modal.html</url>
      <content type="html"><![CDATA[<p>The Quasar Modal component is a UI overlay, which offers extended screen space to allow the user to get more work done. Modals are used for such things as login or signup dialogs, for message composition windows or extended option selections, like offering a list of users to be friends with.</p>
<input type="hidden" data-fullpage-demo="popups/modal">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QModal'</span>],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// optional if you want to use</span></span><br><span class="line">  <span class="comment">// directive `v-close-overlay`</span></span><br><span class="line">  directives: [<span class="string">'CloseOverlay'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Below you’ll find the code for a very basic modal:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-modal</span> <span class="attr">v-model</span>=<span class="string">"opened"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Basic Modal<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">      <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">"opened = false"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"Close"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-modal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      opened: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Modals are responsive to the width of the window (see demo on a desktop and resize browser window). Sometimes you need to always have a Modal maximized or minimized regardless of window width, so to do this, Quasar offers the <code>minimized</code> and <code>maximized</code> props:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-modal</span> <span class="attr">maximized</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-modal</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>minimized</code></td>
<td>Boolean</td>
<td>Always minimized regardless of screen width.</td>
</tr>
<tr>
<td><code>maximized</code></td>
<td>Boolean</td>
<td>Always maximized regardless of screen width.</td>
</tr>
<tr>
<td><code>no-route-dismiss</code></td>
<td>Boolean</td>
<td>By default, when route changes, the modal gets closed. This prop inhibits the behavior.</td>
</tr>
<tr>
<td><code>no-esc-dismiss</code></td>
<td>Boolean</td>
<td>Disable Modal dismissal by hitting Escape key.</td>
</tr>
<tr>
<td><code>no-backdrop-dismiss</code></td>
<td>Boolean</td>
<td>Disable Modal dismissal by clicking/tapping on backdrop.</td>
</tr>
<tr>
<td><code>content-css</code></td>
<td>Object/Array/String</td>
<td>Applies CSS style to Modal container. Use Object or Array of Object when also specifying <code>position</code> prop.</td>
</tr>
<tr>
<td><code>content-classes</code></td>
<td>Object/Array/String</td>
<td>Classes to apply to Modal inner content.</td>
</tr>
<tr>
<td><code>position</code></td>
<td>String</td>
<td>Stick Modal to one of the screen edges (<code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code>).</td>
</tr>
<tr>
<td><code>position-classes</code></td>
<td>String</td>
<td>Space delimited CSS classes that overwrite the default ‘items-center justify-center’ classes. Gets overridden by <code>position</code> if present.</td>
</tr>
<tr>
<td><code>transition</code></td>
<td>String</td>
<td>Vue transition to use. Quasar comes with a <code>q-modal</code> transition out of the box. But you can write your own Vue transitions using CSS and use them.</td>
</tr>
<tr>
<td><code>enter-class</code></td>
<td>String</td>
<td>enter transition class name</td>
</tr>
<tr>
<td><code>leave-class</code></td>
<td>String</td>
<td>leave transition class name</td>
</tr>
<tr>
<td><code>no-refocus</code></td>
<td>Boolean</td>
<td>(v0.17+) By default, when closing the Modal, the previous focused element gets focused again. When property is set to <code>true</code> it disables this behaviour.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>show</code></td>
<td>Open Modal. Takes one optional Function parameter to trigger after Modal is opened.</td>
</tr>
<tr>
<td><code>hide</code></td>
<td>Close Modal. Takes one optional Function parameter to trigger after Modal is closed.</td>
</tr>
<tr>
<td><code>toggle</code></td>
<td>Toggle open/close Modal state. Takes one optional Function parameter to trigger after Modal is toggled.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Event Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@show</code></td>
<td>Triggered right after Modal is opened.</td>
</tr>
<tr>
<td><code>@hide</code></td>
<td>Triggered right after Modal is closed.</td>
</tr>
<tr>
<td><code>@escape-key</code></td>
<td>Triggered if the Modal is dismissed with the Escape key on desktops.</td>
</tr>
</tbody>
</table>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><h3 id="Styling-Modal"><a href="#Styling-Modal" class="headerlink" title="Styling Modal"></a>Styling Modal</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-modal</span> <span class="attr">content-css</span>=<span class="string">"padding: 50px"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-modal</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Sticking-Modal-to-an-Edge"><a href="#Sticking-Modal-to-an-Edge" class="headerlink" title="Sticking Modal to an Edge"></a>Sticking Modal to an Edge</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-modal</span> <span class="attr">position</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-modal</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Modal-with-Layout"><a href="#Modal-with-Layout" class="headerlink" title="Modal with Layout"></a>Modal with Layout</h3><p>When making layout inside a modal, Quasar has a special component called <strong>QModalLayout</strong> (described in next section), which takes care of any needed structure.</p>
<blockquote>
<p>Do <strong>NOT</strong> use QLayout inside a QModal. Instead, use the simplified QModalLayout.</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-modal</span> <span class="attr">v-model</span>=<span class="string">"opened"</span> <span class="attr">:content-css</span>=<span class="string">"&#123;minWidth: '80vw', minHeight: '80vh'&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-modal-layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">        <span class="attr">flat</span></span></span><br><span class="line"><span class="tag">        <span class="attr">round</span></span></span><br><span class="line"><span class="tag">        <span class="attr">dense</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-close-overlay</span></span></span><br><span class="line"><span class="tag">        <span class="attr">icon</span>=<span class="string">"keyboard_arrow_left"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line">        Header</span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-search</span> <span class="attr">inverted</span> <span class="attr">v-model</span>=<span class="string">"search"</span> <span class="attr">color</span>=<span class="string">"none"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">slot</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line">        Footer</span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layout-padding"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Modal<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">        <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-close-overlay</span></span></span><br><span class="line"><span class="tag">        <span class="attr">label</span>=<span class="string">"Close"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a Modal presenting a Layout.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-modal-layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-modal</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="QModalLayout"><a href="#QModalLayout" class="headerlink" title="QModalLayout"></a>QModalLayout</h2><p>QModalLayout has two slots (<code>header</code> and <code>footer</code>) and the following properties which can be either String, Object or Array:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>header-style</code></td>
<td>String/Object/Array</td>
<td>Style applied to header.</td>
</tr>
<tr>
<td><code>header-class</code></td>
<td>String/Object/Array</td>
<td>CSS classes applied to header.</td>
</tr>
<tr>
<td><code>content-style</code></td>
<td>String/Object/Array</td>
<td>Style applied to content (between header and footer).</td>
</tr>
<tr>
<td><code>content-class</code></td>
<td>String/Object/Array</td>
<td>CSS classes applied to content (between header and footer).</td>
</tr>
<tr>
<td><code>footer-style</code></td>
<td>String/Object/Array</td>
<td>Style applied to footer.</td>
</tr>
<tr>
<td><code>footer-class</code></td>
<td>String/Object/Array</td>
<td>CSS classes applied to footer.</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-modal</span> <span class="attr">.....</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-modal-layout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">header-style</span>=<span class="string">"min-height: 100px"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">content-class</span>=<span class="string">"&#123;'bg-primary': isPrimary, 'some-class': someBoolean&#125;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">footer-class</span>=<span class="string">"bg-primary some-class"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">footer-style</span>=<span class="string">"&#123;fontSize: '24px', fontWeight: 'bold'&#125;"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      inject header and/or footer slots here</span></span><br><span class="line"><span class="comment">      examples:</span></span><br><span class="line"><span class="comment">          1. &lt;div slot="header"&gt;...&lt;/div&gt;</span></span><br><span class="line"><span class="comment">          2. &lt;q-toolbar slot="header"&gt;...&lt;/q-toolbar&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      all other elements not using header or footer slot</span></span><br><span class="line"><span class="comment">      is considered content</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    ....</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-modal-layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-modal</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[QNoSsr]]></title>
      <url>https://quasar-framework.org/components/no-ssr.html</url>
      <content type="html"><![CDATA[<p>This component makes sense only if you are creating a SSR website/app.</p>
<p>It avoids rendering its content on the server and leaves that for client only. Useful when you got code that is not isomorphic and can only run on the client side, in a browser.</p>
<p>Alternatively, you can also use it to render content only on server-side and it automatically removes it if it ends up running on a client browser.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QNoSsr'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>Basic:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-no-ssr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>This won't be rendered on server<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-no-ssr</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Multiple client nodes:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-no-ssr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>This won't be rendered on server.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>This won't either.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-no-ssr</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Multiple client nodes with tag prop:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-no-ssr</span> <span class="attr">tag</span>=<span class="string">"blockquote"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>This won't be rendered on server.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>This won't either.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-no-ssr</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Placeholder property:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-no-ssr</span> <span class="attr">placeholder</span>=<span class="string">"Rendered on server"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>This won't be rendered on server<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-no-ssr</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Placeholder slot:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-no-ssr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>This won't be rendered on server<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"placeholder"</span>&gt;</span>Rendered on server<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-no-ssr</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Multiple placeholder slot:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-no-ssr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>This won't be rendered on server<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"placeholder"</span>&gt;</span>Rendered on server (1/2)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"placeholder"</span>&gt;</span>Rendered on server (2/2)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-no-ssr</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Only placeholder slot:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-no-ssr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"placeholder"</span>&gt;</span>Rendered on server<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-no-ssr</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>tag</code></td>
<td>String</td>
<td>HTML tag to use to render the component. Default: ‘div’</td>
</tr>
<tr>
<td><code>placeholder</code></td>
<td>String</td>
<td>String to display on server, before the client takeover.</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Notify]]></title>
      <url>https://quasar-framework.org/components/notify.html</url>
      <content type="html"><![CDATA[<p>Notify is a Quasar plugin that can display animated QAlerts (floating above everything in your pages) to users in the form of a notification. They are useful for alerting the user of an event and can even engage the user through actions.</p>
<input type="hidden" data-fullpage-demo="popups/notify">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  plugins: [<span class="string">'Notify'</span>],</span><br><span class="line"></span><br><span class="line">  config: &#123;</span><br><span class="line">    <span class="comment">// optional (v0.17+)</span></span><br><span class="line">    notify: &#123;</span><br><span class="line">      <span class="comment">// Notify defaults</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// outside of a Vue file</span></span><br><span class="line"><span class="keyword">import</span> &#123; Notify &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line">Notify.create(<span class="string">'Danger, Will Robinson! Danger!'</span>)</span><br><span class="line"><span class="comment">// or with a config object:</span></span><br><span class="line">Notify.create(&#123;</span><br><span class="line">  message: <span class="string">'Danger, Will Robinson! Danger!'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// inside of a Vue file</span></span><br><span class="line"><span class="keyword">this</span>.$q.notify(<span class="string">'Message'</span>)</span><br><span class="line"><span class="comment">// or with a config object:</span></span><br><span class="line"><span class="keyword">this</span>.$q.notify(&#123;...&#125;)</span><br></pre></td></tr></table></figure>
<p>You can see this notification at the bottom of the demo page screen. Please notice the defaults:</p>
<ol>
<li>The notification is red.</li>
<li>It has a timeout of 5000ms.</li>
<li>It appears floating at the bottom of the screen.</li>
<li>The animation is determined by the position of the notification on screen.</li>
</ol>
<h3 id="Config-Object"><a href="#Config-Object" class="headerlink" title="Config Object"></a>Config Object</h3><p>Let’s go deeper and analyze the different optional properties available for a notification.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$q.notify(&#123;</span><br><span class="line">  <span class="comment">// only required parameter is the message:</span></span><br><span class="line">  message: <span class="string">`A text with your nofification's awesome message`</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * All parameters below are optional:</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  timeout: <span class="number">3000</span>, <span class="comment">// in milliseconds; 0 means no timeout</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// "type" adds a color and icon,</span></span><br><span class="line">  <span class="comment">// so you don't need to specify them.</span></span><br><span class="line">  <span class="comment">// Available values: 'positive', 'negative', 'warning', 'info'</span></span><br><span class="line">  type: <span class="string">'positive'</span>,</span><br><span class="line"></span><br><span class="line">  color: <span class="string">'positive'</span>,</span><br><span class="line">  textColor: <span class="string">'black'</span>, <span class="comment">// if default 'white' doesn't fit</span></span><br><span class="line"></span><br><span class="line">  icon: <span class="string">'wifi'</span>,</span><br><span class="line">  <span class="comment">// or</span></span><br><span class="line">  avatar: <span class="string">'statics/boy-avatar.png'</span>,</span><br><span class="line"></span><br><span class="line">  detail: <span class="string">'Optional detail message.'</span>,</span><br><span class="line">  position: <span class="string">'top-right'</span>, <span class="comment">// 'top', 'left', 'bottom-left' etc.</span></span><br><span class="line"></span><br><span class="line">  closeBtn: <span class="literal">true</span>, <span class="comment">// or string as button message e.g. 'dismiss'</span></span><br><span class="line"></span><br><span class="line">  actions: [</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Snooze'</span>,</span><br><span class="line">      icon: <span class="string">'timer'</span>, <span class="comment">// optional</span></span><br><span class="line">      noDismiss: <span class="literal">true</span>, <span class="comment">// optional, v0.15.11+</span></span><br><span class="line">      handler: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'acting'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Dismiss'</span>,</span><br><span class="line">      handler: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'dismissed'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  onDismiss () &#123; <span class="comment">// v0.15.11+</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note</strong><br>If you define any actions, the notification will automatically be dismissed when the user picks it.</p>
</blockquote>
<h2 id="Setting-Up-Defaults"><a href="#Setting-Up-Defaults" class="headerlink" title="Setting Up Defaults"></a>Setting Up Defaults</h2><p><em>Quasar v0.17+</em></p>
<p>Should you wish to set up some defaults, rather than specifying them each time, you can do so by using quasar.conf &gt; framework &gt; config &gt; notify: {…} or by calling <code>Notify.setDefaults({...})</code> or <code>this.$q.notify.setDefaults({...})</code>.</p>
<h2 id="Programmatically-Closing-Alert"><a href="#Programmatically-Closing-Alert" class="headerlink" title="Programmatically Closing Alert"></a>Programmatically Closing Alert</h2><p>Notifications are meant to be dismissed only by the user, however for exceptional cases you can do it programmatically. Especially useful when you set indefinite timeout (0).</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dismiss = <span class="keyword">this</span>.$q.notify(&#123;...&#125;)</span><br><span class="line">...</span><br><span class="line">dismiss()</span><br></pre></td></tr></table></figure>
<h2 id="Types-of-Notifications"><a href="#Types-of-Notifications" class="headerlink" title="Types of Notifications"></a>Types of Notifications</h2><p>Quasar offers the possibility to create out of the box notifications for different types of success or failure messages. The Notify types have specific icons and colors.</p>
<p>The types of Notify we are talking about are: <code>positive</code> (for success), <code>negative</code> (for errors), <code>warning</code> and <code>info</code>. Here’s how to create them:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$q.notify(&#123;</span><br><span class="line">  type: <span class="string">'positive'</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Meta Plugin]]></title>
      <url>https://quasar-framework.org/components/meta-plugin.html</url>
      <content type="html"><![CDATA[<p><strong>Better SEO for your website!</strong> The Meta plugin can dynamically change page title, manage <code>&lt;meta&gt;</code> tags, manage <html> &amp; <body> DOM element attributes, add/remove/change <code>&lt;style&gt;</code> and <code>&lt;script&gt;</code> tags in the head of your document (useful for CDN stylesheets or for json-ld markup, for example), or manage <code>&lt;noscript&gt;</code> tags.</body></html></p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// quasar.conf.js</span></span><br><span class="line">framework: &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  plugins: [<span class="string">'Meta'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>What the Meta plugin does is that it enables the use of a special property in your Vue components called <code>meta</code>. Take a look at the example below, with almost all of its features:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// some .vue file</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  meta: &#123;</span><br><span class="line">    <span class="comment">// sets document title</span></span><br><span class="line">    title: <span class="string">'Index Page'</span>,</span><br><span class="line">    <span class="comment">// optional; sets final title as "Index Page - My Website", useful for multiple level meta</span></span><br><span class="line">    titleTemplate: <span class="function"><span class="params">title</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;title&#125;</span> - My Website`</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// meta tags</span></span><br><span class="line">    meta: &#123;</span><br><span class="line">      description: &#123; <span class="attr">name</span>: <span class="string">'description'</span>, <span class="attr">content</span>: <span class="string">'Page 1'</span> &#125;,</span><br><span class="line">      keywords: &#123; <span class="attr">name</span>: <span class="string">'keywords'</span>, <span class="attr">content</span>: <span class="string">'Quasar website'</span> &#125;,</span><br><span class="line">      equiv: &#123; <span class="string">'http-equiv'</span>: <span class="string">'Content-Type'</span> content: <span class="string">'text/html; charset=UTF-8'</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CSS tags</span></span><br><span class="line">    link: &#123;</span><br><span class="line">      material: &#123; <span class="attr">rel</span>: <span class="string">'stylesheet'</span>, <span class="attr">href</span>: <span class="string">'https://fonts.googleapis.com/icon?family=Material+Icons'</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// JS tags</span></span><br><span class="line">    script: &#123;</span><br><span class="line">      ldJson: &#123;</span><br><span class="line">        type: <span class="string">'application/ld+json'</span>,</span><br><span class="line">        innerHTML: <span class="string">`&#123; "@context": "http://schema.org" &#125;`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &lt;html&gt; attributes</span></span><br><span class="line">    htmlAttr: &#123;</span><br><span class="line">      <span class="string">'xmlns:cc'</span>: <span class="string">'http://creativecommons.org/ns#'</span> <span class="comment">// generates &lt;html xmlns:cc="http://creativecommons.org/ns#"&gt;,</span></span><br><span class="line">      empty: <span class="literal">undefined</span> <span class="comment">// generates &lt;html empty&gt;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &lt;body&gt; attributes</span></span><br><span class="line">    bodyAttr: &#123;</span><br><span class="line">      <span class="string">'action-scope'</span>: <span class="string">'xyz'</span>, <span class="comment">// generates &lt;body action-scope="xyz"&gt;</span></span><br><span class="line">      empty: <span class="literal">undefined</span> <span class="comment">// generates &lt;body empty&gt;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &lt;noscript&gt; tags</span></span><br><span class="line">    noscript: &#123;</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'This is content for browsers with no JS (or disabled JS)'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="How-It-Works"><a href="#How-It-Works" class="headerlink" title="How It Works"></a>How It Works</h2><p>Metas are computed from .vue files in the order they are activated by Vue Router (let’s call this a chain for further explanations). Example: App.vue &gt; SomeLayout.vue &gt; IndexPage.vue &gt; …?</p>
<p>When a component that contains the <code>meta</code> property gets rendered or destroyed, it is added/removed to/from the chain and metas are updated accordingly.</p>
<p>Notice that all properties (except for title and titleTemplate) are Objects; you can override meta props defined in previous Vue components in the chain by using the same keys again. Example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// first loaded Vue component</span></span><br><span class="line">meta: &#123;</span><br><span class="line">  meta: &#123;</span><br><span class="line">    myKey: &#123; <span class="attr">name</span>: <span class="string">'description'</span>, <span class="attr">content</span>: <span class="string">'My Website'</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a subsequent Vue component in the chain;</span></span><br><span class="line"><span class="comment">// this will override the first definition on "myKey"</span></span><br><span class="line">meta: &#123;</span><br><span class="line">  meta: &#123;</span><br><span class="line">    myKey: &#123; <span class="attr">name</span>: <span class="string">'description'</span>, <span class="attr">content</span>: <span class="string">'Page 1'</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Just make sure not to duplicate content that already exists in <code>/src/index.template.html</code>. If you want to use the Meta plugin, the recommended way is to remove the same tags from the html template. But on use-cases where you know a tag will never change and you always want it rendered, then it’s better to have it only on the html template instead.</p>
</blockquote>
<p>In the examples above, you noticed all of the meta props are “static”. But they can be dynamic instead, should you wish. This is how you can bind to the Vue scope with them. Think of them as a Vue computed property.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// some .vue file</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      title: <span class="string">'Some title'</span> <span class="comment">// we define the "title" prop</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// NOTICE meta is a function here, which is the way</span></span><br><span class="line">  <span class="comment">// for you to reference properties from the Vue component's scope</span></span><br><span class="line">  meta () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// this accesses the "title" property in your Vue "data";</span></span><br><span class="line">      <span class="comment">// whenever "title" prop changes, your meta will automatically update</span></span><br><span class="line">      title: <span class="keyword">this</span>.title</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    setAnotherTitle () &#123;</span><br><span class="line">      <span class="keyword">this</span>.title = <span class="string">'Another title'</span> <span class="comment">// will automatically trigger a Meta update due to the binding</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Other CSS Helper Classes]]></title>
      <url>https://quasar-framework.org/components/other-helper-classes.html</url>
      <content type="html"><![CDATA[<p>There are a lot of CSS classes that you can use while writing your Vue templates. Very handy to ease the complexity of your VueModels and templates.</p>
<p>The list below is not complete. Also check the other CSS documentation pages like Typography, Visibility, Shadows, Positioning.</p>
<h2 id="Mouse-Related"><a href="#Mouse-Related" class="headerlink" title="Mouse Related"></a>Mouse Related</h2><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>non-selectable</code></td>
<td>User won’t be able to select DOM node along with its text</td>
</tr>
<tr>
<td><code>scroll</code></td>
<td>Applies CSS tweaks to make scroll work at its best on ALL platforms</td>
</tr>
<tr>
<td><code>no-scroll</code></td>
<td>Hides scrollbars on the DOM node</td>
</tr>
<tr>
<td><code>no-pointer-events</code></td>
<td>DOM element does not become a target of mouse events - clicks, hover and so on</td>
</tr>
<tr>
<td><code>all-pointer-events</code></td>
<td>The opposite of <code>no-pointer-events</code></td>
</tr>
<tr>
<td><code>cursor-pointer</code></td>
<td>Change mouse pointer on DOM element to look as if on a clickable link</td>
</tr>
</tbody>
</table>
<h2 id="Size-Related"><a href="#Size-Related" class="headerlink" title="Size Related"></a>Size Related</h2><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>fit</code></td>
<td>Width and Height is set to 100%</td>
</tr>
<tr>
<td><code>full-height</code></td>
<td>Height is set to 100%</td>
</tr>
<tr>
<td><code>full-width</code></td>
<td>Width is set to 100%</td>
</tr>
<tr>
<td><code>window-height</code></td>
<td>Height is set to 100vh with top and bottom margins 0</td>
</tr>
<tr>
<td><code>window-width</code></td>
<td>Width is set to 100vw with left and right margins 0</td>
</tr>
<tr>
<td><code>block</code></td>
<td>Sets <code>display</code> property set to <code>block</code></td>
</tr>
</tbody>
</table>
<h2 id="Orientation-Related"><a href="#Orientation-Related" class="headerlink" title="Orientation Related"></a>Orientation Related</h2><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>rotate-45</code></td>
<td>Rotate by 45 degrees</td>
</tr>
<tr>
<td><code>rotate-90</code></td>
<td>Rotate by 90 degrees</td>
</tr>
<tr>
<td><code>rotate-135</code></td>
<td>Rotate by 135 degrees</td>
</tr>
<tr>
<td><code>rotate-180</code></td>
<td>Rotate by 180 degrees</td>
</tr>
<tr>
<td><code>rotate-205</code></td>
<td>Rotate by 205 degrees</td>
</tr>
<tr>
<td><code>rotate-270</code></td>
<td>Rotate by 270 degrees</td>
</tr>
<tr>
<td><code>rotate-315</code></td>
<td>Rotate by 315 degrees</td>
</tr>
<tr>
<td><code>flip-horizontal</code></td>
<td>Flip DOM element horizontally</td>
</tr>
<tr>
<td><code>flip-vertical</code></td>
<td>Flip DOM element vertically</td>
</tr>
</tbody>
</table>
<h2 id="Border-Related"><a href="#Border-Related" class="headerlink" title="Border Related"></a>Border Related</h2><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>no-border</code></td>
<td>Removes any border</td>
</tr>
<tr>
<td><code>round-borders</code></td>
<td>Applies a generic border radius based on theme</td>
</tr>
</tbody>
</table>
<h2 id="Groups"><a href="#Groups" class="headerlink" title="Groups"></a>Groups</h2><p>There are two special CSS class named <code>group</code> and <code>generic-margin</code>.</p>
<p><code>group</code> applies a small margin to all children DOM elements, while <code>generic-margin</code> applies same margin to the respective DOM element (this varies with each theme).</p>
<p>The recommended way to go is by using <a href="/components/flex-css.html#Using-Gutters">CSS Flex Gutter</a> though.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Other Utils]]></title>
      <url>https://quasar-framework.org/components/other-utils.html</url>
      <content type="html"><![CDATA[<h2 id="Open-External-URL"><a href="#Open-External-URL" class="headerlink" title="Open External URL"></a>Open External URL</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; openURL &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line">openURL(<span class="string">'http://...'</span>)</span><br></pre></td></tr></table></figure>
<p>It will take care of the quirks involved when running under Cordova or on a browser, including notifying the user he/she has to acknowledge opening popups.</p>
<h2 id="Debounce-Function"><a href="#Debounce-Function" class="headerlink" title="Debounce Function"></a>Debounce Function</h2><p>If your App uses JavaScript to accomplish taxing tasks, a debounce function is essential to ensuring a given task doesn’t fire so often that it bricks browser performance. Debouncing a function limits the rate at which the function can fire.</p>
<p>Debouncing enforces that a function not be called again until a certain amount of time has passed without it being called. As in “execute this function only if 100 milliseconds have passed without it being called.”</p>
<p>A quick example: you have a resize listener on the window which does some element dimension calculations and (possibly) repositions a few elements. That isn’t a heavy task in itself but being repeatedly fired after numerous resizes will really slow your App down. So why not limit the rate at which the function can fire?</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Returns a function, that, as long as it continues to be invoked, will not</span></span><br><span class="line"><span class="comment">// be triggered. The function will be called after it stops being called for</span></span><br><span class="line"><span class="comment">// N milliseconds. If `immediate` is passed, trigger the function on the</span></span><br><span class="line"><span class="comment">// leading edge, instead of the trailing.</span></span><br><span class="line"><span class="keyword">import</span> &#123; debounce &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line">(Debounced <span class="built_in">Function</span>) debounce(<span class="built_in">Function</span> fn, <span class="built_in">Number</span> milliseconds_to_wait, <span class="built_in">Boolean</span> immediate)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example:</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(</span><br><span class="line">  <span class="string">'resize'</span>,</span><br><span class="line">  debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    .... things to <span class="keyword">do</span> ...</span><br><span class="line">  &#125;, <span class="number">300</span> <span class="comment">/*ms to wait*/</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>There’s also a <code>frameDebounce</code> available which delays calling your function until next browser frame is scheduled to run (read about <code>requestAnimationFrame</code>).</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; frameDebounce &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line">(Debounced <span class="built_in">Function</span>) frameDebounce(<span class="built_in">Function</span> fn)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example:</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(</span><br><span class="line">  <span class="string">'resize'</span>,</span><br><span class="line">  frameDebounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    .... things to <span class="keyword">do</span> ...</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="Throttle-Function"><a href="#Throttle-Function" class="headerlink" title="Throttle Function"></a>Throttle Function</h2><p>Throttling enforces a maximum number of times a function can be called over time. As in “execute this function at most once every X milliseconds.”</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; throttle &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line">(Throttled <span class="built_in">Function</span>) throttle(<span class="built_in">Function</span> fn, <span class="built_in">Number</span> limit_in_milliseconds)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example:</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(</span><br><span class="line">  <span class="string">'resize'</span>,</span><br><span class="line">  throttle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    .... things to <span class="keyword">do</span> ...</span><br><span class="line">  &#125;, <span class="number">300</span> <span class="comment">/* execute at most once every 0.3s */</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="Deep-Copy-Objects"><a href="#Deep-Copy-Objects" class="headerlink" title="(Deep) Copy Objects"></a>(Deep) Copy Objects</h2><p>A basic respawn of <code>jQuery.extend()</code>. Takes same parameters:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; extend &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newObject = extend([<span class="built_in">Boolean</span> deepCopy], targetObj, obj, ...)</span><br></pre></td></tr></table></figure></p>
<p>Watch out for methods within objects.</p>
<h2 id="Generate-UID"><a href="#Generate-UID" class="headerlink" title="Generate UID"></a>Generate UID</h2><p>Generate unique identifiers:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; uid &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> uid = uid()</span><br><span class="line"><span class="comment">// Example: 501e7ae1-7e6f-b923-3e84-4e946bff31a8</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Handling-event-on-a-DOM-event-handler"><a href="#Handling-event-on-a-DOM-event-handler" class="headerlink" title="Handling event on a DOM event handler"></a>Handling event on a DOM event handler</h2><p>It’s cross-browser.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; event &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line">node.addEventListener(<span class="string">'click'</span>, evt =&gt; &#123;</span><br><span class="line">  <span class="comment">// left clicked?</span></span><br><span class="line">  (<span class="built_in">Boolean</span>) event.leftClick(evt)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// middle clicked?</span></span><br><span class="line">  (<span class="built_in">Boolean</span>) event.middleClick(evt)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// right clicked?</span></span><br><span class="line">  (<span class="built_in">Boolean</span>) event.rightClick(evt)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// key in number format</span></span><br><span class="line">  (<span class="built_in">Number</span>) event.getEventKey(evt)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Mouse wheel distance (in pixels)</span></span><br><span class="line">  (<span class="built_in">Object</span> &#123;x, y&#125;) event.getMouseWheelDistance(evt)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// position on viewport</span></span><br><span class="line">  <span class="comment">// works both for mouse and touch events!</span></span><br><span class="line">  (<span class="built_in">Object</span> &#123;top, left&#125;) event.position(evt)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// get target DOM Element on which mouse or touch</span></span><br><span class="line">  <span class="comment">// event has fired upon</span></span><br><span class="line">  (DOM Element) event.targetElement(evt)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// call stopPropagation and preventDefault</span></span><br><span class="line">  event.stopAndPrevent(evt)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><p>Filter out an array of Objects based on a certain field:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; filter &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = [&#123;<span class="attr">fee</span>: <span class="number">5</span>, <span class="attr">desc</span>: <span class="string">'Bla bla'</span>&#125;, &#123;<span class="attr">fee</span>: <span class="number">10</span>, <span class="attr">desc</span>: <span class="string">'Bla bla'</span>&#125;, &#123;<span class="attr">fee</span>: <span class="number">1</span>, <span class="attr">desc</span>: <span class="string">'Bla bla'</span>&#125;]</span><br><span class="line"><span class="built_in">console</span>.log(filter(<span class="string">'5'</span>, &#123;<span class="attr">field</span>: <span class="string">'fee'</span>, <span class="attr">list</span>: data&#125;))</span><br><span class="line"><span class="comment">// [&#123;fee: 5, desc: 'Bla bla'&#125;]</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Parallax]]></title>
      <url>https://quasar-framework.org/components/parallax.html</url>
      <content type="html"><![CDATA[<p>Parallax scrolling is a technique in computer graphics and web design, where background images move by the camera slower than foreground images, creating an illusion of depth in a 2D scene and adding to the immersion.</p>
<p>Quasar provides an out of the box Vue Component you can use. It takes care of a lot of quirks, including image size which can actually be smaller than the window width/height.</p>
<p>Starting with Quasar v0.17.9+, you can also use videos as background content.</p>
<input type="hidden" data-fullpage-demo="media/parallax">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QParallax'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Specifying image with <code>src</code> property. Notice we are referencing an image from <code>statics</code> folder.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-parallax</span> <span class="attr">src</span>=<span class="string">"statics/mountains.jpg"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    The rest of DOM elements get displayed on</span></span><br><span class="line"><span class="comment">    top of the Parallax image after it's loaded</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Parallax<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-parallax</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Specifying an image through <code>media</code> slot. This way you can have more control on the image and also reference it from <code>assets</code> folder which is handled directly by Webpack.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-parallax</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">slot</span>=<span class="string">"media"</span> <span class="attr">src</span>=<span class="string">"assets/parallax2.jpg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Slot<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-parallax</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Specifying a video with <code>media</code> slot. This way you can have more control on the video tag and also reference it from <code>assets</code> folder which is handled directly by Webpack.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-parallax</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">video</span> <span class="attr">slot</span>=<span class="string">"media"</span> <span class="attr">poster</span>=<span class="string">"http://www.markhillard.com/sandbox/media/polina.jpg"</span> <span class="attr">autoplay</span> <span class="attr">loop</span> <span class="attr">muted</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">type</span>=<span class="string">"video/webm"</span> <span class="attr">src</span>=<span class="string">"http://www.markhillard.com/sandbox/media/polina.webm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span> <span class="attr">src</span>=<span class="string">"http://www.markhillard.com/sandbox/media/polina.mp4"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Video<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-parallax</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>Warning</strong><br>On some iOS platforms there may be problems regarding the autoplay feature of the native <code>&lt;video&gt;</code> tag. <a href="https://webkit.org/blog/6784/new-video-policies-for-ios/" target="_blank" rel="noopener">Reference</a>. QParallax and Quasar are not interfering in any way with the client browser’s ability/restrictions on the <code>&lt;video&gt;</code> tag.</p>
</blockquote>
<p>As you noticed in the examples above, you can display some content on top of the Parallax image/video (in the example above an <code>&lt;h1&gt;</code> tag).</p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Param Attributes</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>src</code></td>
<td>String</td>
<td>(Optional) Source for the image.</td>
</tr>
<tr>
<td><code>height</code></td>
<td>Number</td>
<td>Height of Parallax in pixels. Default value is 500.</td>
</tr>
<tr>
<td><code>speed</code></td>
<td>Number</td>
<td>Float between 0 and 1.</td>
</tr>
</tbody>
</table>
<p>Another example:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- VueModel contains data property "imageURL" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-parallax</span> <span class="attr">:src</span>=<span class="string">"imageURL"</span> <span class="attr">:height</span>=<span class="string">"300"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Parallax<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-parallax</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Page Sticky]]></title>
      <url>https://quasar-framework.org/components/page-sticky.html</url>
      <content type="html"><![CDATA[<p>The PageSticky component helps in placing DOM elements / components wrapped by it into a static position within the content area of your Layout, no matter where the user scrolls. A good example of this would be a “Back to top” button, which would first appear at the bottom of the screen, once the user scrolls down to a certain level on the screen.</p>
<p>The great advantage of this is that the elements wrapped by this component will never overlap the layout header, footer or left/right sides, even if those are not configured to be fixed. In the latter case, the position will be offsetted so that the overlap won’t occur.<br>Try it out with a non fixed footer for example. When user reaches bottom of screen and footer comes into view, the component will shift up so it won’t overlap with the footer.</p>
<input type="hidden" data-fullpage-demo="layout-demo/page-sticky" data-source="../layout-demo/page-sticky.vue">

<blockquote>
<p><strong>Important!</strong><br>In order for QPageSticky to work, it must be placed within a QLayout component</p>
</blockquote>
<blockquote>
<p><strong>Note</strong><br>QPageSticky must be the last child element within it’s parent, so it can display on top of other content</p>
</blockquote>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QPageSticky'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-layout</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    Place QPageSticky as the last child element of your page.</span></span><br><span class="line"><span class="comment">    This is important for it to be displayed on top of the other page content.</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-page-sticky</span> <span class="attr">position</span>=<span class="string">"top-right"</span> <span class="attr">:offset</span>=<span class="string">"[18, 18]"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">round</span> <span class="attr">color</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"alert"</span> <span class="attr">icon</span>=<span class="string">"alarm"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-page-sticky</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The above would position a circular button at the top right corner of the content area of a layout. It would also pad the button with 18 pixels from the top and right edges of the layout.</p>
<h3 id="Expand-mode"><a href="#Expand-mode" class="headerlink" title="Expand mode"></a>Expand mode</h3><blockquote>
<p>Needs Quasar v0.15.4+<br>Beware that you need to manually set the according padding to your QPage element so that your sticky elements won’t overlap page content.</p>
</blockquote>
<p>By default, QPageSticky shrinks to the size of its content. In case you want to place something like a QToolbar (works with any element/component) in a QPageSticky with position set to “top” (works for top/right/bottom/left), you can use the <code>expand</code> Boolean property:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Example of a toolbar placed at top of the page --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-page-sticky</span> <span class="attr">expand</span> <span class="attr">position</span>=<span class="string">"top"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">round</span> <span class="attr">dense</span> <span class="attr">icon</span>=<span class="string">"menu"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-toolbar-title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-page-sticky</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Example of placing something on the right side of the page --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-page-sticky</span> <span class="attr">expand</span> <span class="attr">position</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fit bg-tertiary"</span>&gt;</span></span><br><span class="line">    ....content...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-page-sticky</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>Tip</strong>: For left/right positions you can use the Quasar <a href="/components/flex-css.html">Flex CSS</a> classes to center content.</p>
<h3 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>position</code></td>
<td>String</td>
<td>Check below for valid values.</td>
</tr>
<tr>
<td><code>expand</code></td>
<td>Boolean</td>
<td>(v0.15.4+) Expand mode. Overrides default “shrinking” mode where Page Sticky shrinks to the size of content.</td>
</tr>
<tr>
<td><code>offset</code></td>
<td>Array (2 integers)</td>
<td>Optional. The offset of the content, relative to the corner. First is offset on X axis, then on Y axis.<br>Example: <code>[0, 18]</code> (offset 0 on X axis and 18px on Y axis).</td>
</tr>
</tbody>
</table>
<p>Valid values for “position” property: <code>top-right</code>, <code>top-left</code>, <code>bottom-right</code>, <code>bottom-left</code>, <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Popup Edit]]></title>
      <url>https://quasar-framework.org/components/popup-edit.html</url>
      <content type="html"><![CDATA[<p>QPopupEdit is a component that can be used to edit a value “in place”, like for example a cell in a QTable. By default, a cell is displayed as a String, then if you are using QPopupEdit and user clicks/taps on the table cell, a popup will open where user will be able to edit the value using a textfield.</p>
<p>This component injects a QPopover into its parent DOM element and enables the behavior described above, so it can be used anywhere, not only in QTable.</p>
<input type="hidden" data-fullpage-demo="popups/popup-edit">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p><em>Quasar v0.17.10+</em></p>
<p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QPopupEdit'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Below is an example with a QTable. Please note that we are using the “body” scoped slot. <strong>QPopupEdit won’t work with cell scoped slots.</strong><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-table</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:data</span>=<span class="string">"data"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:columns</span>=<span class="string">"columns"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:filter</span>=<span class="string">"filter"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:title</span>=<span class="string">"title"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">row-key</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tr</span> <span class="attr">slot</span>=<span class="string">"body"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"desc"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      &#123;&#123; props.row.name &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">q-popup-edit</span> <span class="attr">v-model</span>=<span class="string">"props.row.name"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-field</span> <span class="attr">count</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"props.row.name"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-popup-edit</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"calories"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      &#123;&#123; props.row.calories &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">q-popup-edit</span> <span class="attr">v-model</span>=<span class="string">"props.row.calories"</span> <span class="attr">title</span>=<span class="string">"Update calories"</span> <span class="attr">buttons</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model</span>=<span class="string">"props.row.calories"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-popup-edit</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"fat"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span>&#123;&#123; props.row.fat &#125;&#125;<span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"carbs"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span>&#123;&#123; props.row.carbs &#125;&#125;<span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"protein"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span>&#123;&#123; props.row.protein &#125;&#125;<span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"sodium"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span>&#123;&#123; props.row.sodium &#125;&#125;<span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"calcium"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span>&#123;&#123; props.row.calcium &#125;&#125;<span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-td</span> <span class="attr">key</span>=<span class="string">"iron"</span> <span class="attr">:props</span>=<span class="string">"props"</span>&gt;</span>&#123;&#123; props.row.iron &#125;&#125;<span class="tag">&lt;/<span class="name">q-td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-table</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which should be bound to a String or Number (depending on <code>type</code> property used) in your scope.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>title</code></td>
<td>String</td>
<td>(Optional) Title to display</td>
</tr>
<tr>
<td><code>buttons</code></td>
<td>Boolean</td>
<td>(Optional) Show Set &amp; Cancel buttons</td>
</tr>
<tr>
<td><code>label-set</code></td>
<td>String</td>
<td>Override label for “Set” button</td>
</tr>
<tr>
<td><code>label-cancel</code></td>
<td>String</td>
<td>Override label for “Cancel” button</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a> to apply for inner input and buttons</td>
</tr>
<tr>
<td><code>validate(val)</code></td>
<td>Function</td>
<td>Function to determine if input is correct, and in such case the value is saved, otherwise the edit is cancelled</td>
</tr>
<tr>
<td><code>persistent</code></td>
<td>Boolean</td>
<td>Do not close popup if clicking outside of it</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>Disable popup</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@show</code></td>
<td>Triggered after opening popup.</td>
</tr>
<tr>
<td><code>@hide</code></td>
<td>Triggered after closing popup.</td>
</tr>
<tr>
<td><code>@save(val, initialValue)</code></td>
<td>Edit is successful and the value gets saved</td>
</tr>
<tr>
<td><code>@cancel(val, initialValue)</code></td>
<td>Edit has been cancelled and the value gets reverted to its original form</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Platform Detection]]></title>
      <url>https://quasar-framework.org/components/platform-detection.html</url>
      <content type="html"><![CDATA[<p>Helpers are built-in to detect the Platform (and its capabilities) in which the code is running:</p>
<input type="hidden" data-fullpage-demo="misc/platform-detection">

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// For usage inside a Vue component JS:</span></span><br><span class="line"><span class="keyword">this</span>.$q.platform.is.mobile</span><br><span class="line"></span><br><span class="line"><span class="comment">// or usage inside a Vue component template:</span></span><br><span class="line">$q.platform.is.cordova</span><br><span class="line"></span><br><span class="line"><span class="comment">// Only for usage outside a Vue component you need to import it:</span></span><br><span class="line"><span class="keyword">import</span> &#123; Platform &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>Platform.is.mobile</td>
<td>boolean</td>
<td>Is the code running on a mobile device?</td>
</tr>
<tr>
<td>Platform.is.cordova</td>
<td>boolean</td>
<td>Is the code running within Cordova?</td>
</tr>
<tr>
<td>Platform.is.electron</td>
<td>boolean</td>
<td>Is the code running within Electron?</td>
</tr>
<tr>
<td>Platform.is.desktop</td>
<td>boolean</td>
<td>Is the code running on a desktop browser?</td>
</tr>
<tr>
<td>Platform.is.chromeExt</td>
<td>boolean</td>
<td>Is the code running is a Chrome extension environment?</td>
</tr>
<tr>
<td>Platform.has.touch</td>
<td>boolean</td>
<td>Is the code running on a touch capable screen?</td>
</tr>
<tr>
<td>Platform.within.iframe</td>
<td>boolean</td>
<td>Is the App running within an IFRAME?</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>NOTE</strong><br>Running on mobile means you can have this code running on a mobile device (phone or tablet) but with a browser, not within a Cordova wrapper.</p>
</blockquote>
<p>Other <strong>Platform.is</strong> specific properties:<br><code>android</code>, <code>blackberry</code>, <code>cros</code>, <code>ios</code>, <code>ipad</code>, <code>iphone</code>, <code>ipod</code>, <code>kindle</code>, <code>linux</code>, <code>mac</code>, <code>playbook</code>, <code>silk</code>, <code>chrome</code>, <code>opera</code>, <code>safari</code>, <code>win</code> (Windows), <code>winphone</code> (Windows Phone) and more…</p>
<p>Example when running Chrome on a Linux desktop machine:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Describing Platform.is</span></span><br><span class="line">&#123;</span><br><span class="line">  chrome: <span class="literal">true</span>,</span><br><span class="line">  desktop: <span class="literal">true</span>,</span><br><span class="line">  linux: <span class="literal">true</span>,</span><br><span class="line">  name: <span class="string">"chrome"</span>,</span><br><span class="line">  platform: <span class="string">"linux"</span>,</span><br><span class="line">  version: <span class="string">"47.0.2526.80"</span>,</span><br><span class="line">  versionNumber: <span class="number">47</span>,</span><br><span class="line">  webkit: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>Let’s say we want to render different components or DOM elements, based on the platform that the code is running under. We want to show something on desktop and something else on mobile. We would proceed like this:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"$q.platform.is.desktop"</span>&gt;</span></span><br><span class="line">  I'm only rendered on desktop!</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"$q.platform.is.mobile"</span>&gt;</span></span><br><span class="line">  I'm only rendered on mobile!</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"$q.platform.is.electron"</span>&gt;</span></span><br><span class="line">  I'm only rendered on Electron!</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>NOTE</strong><br>Based on your needs, you might want to also check <a href="/components/visibility.html#Platform-Related">Design Helpers &gt; Visibility</a> page to see how you can achieve the same effect using CSS alone. This latter method will render your DOM elements or components regardless of platform though, so choose wisely on how you want to handle the performance of your app.</p>
</blockquote>
<h2 id="Note-about-SSR"><a href="#Note-about-SSR" class="headerlink" title="Note about SSR"></a>Note about SSR</h2><p>When building for SSR, use only the <code>$q.platform</code> form. If you need to use the <code>import { Platform } from &#39;quasar&#39;</code> (when on server-side), then you’ll need to do it like this:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Platform &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you need access to `ssrContext`</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">ssrContext</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> platform = process.env.SERVER</span><br><span class="line">    ? Platform.parseSSR(ssrContext)</span><br><span class="line">    : Platform <span class="comment">// otherwise we're on client</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// platform is equivalent to the global import as in non-SSR builds</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The <code>ssrContext</code> is available in App Plugins or preFetch feature where it is supplied as parameter.</p>
<p>The reason for all this is that in a client-only app, every user will be using a fresh instance of the app in their browser. For server-side rendering we want the same: each request should have a fresh, isolated app instance so that there is no cross-request state pollution. So Platform needs to be bound to each request separately.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Option Group]]></title>
      <url>https://quasar-framework.org/components/option-group.html</url>
      <content type="html"><![CDATA[<p>The Quasar Option Group component is a helper component, which allows you to better control the grouping of binary (as in on or off, true or false, 1 or 0) form input components like checkboxes, radios or toggles. A good usage for this component is for offering the user a set of options or settings to turn on and off, and thus the name of the component.</p>
<input type="hidden" data-fullpage-demo="forms/option-group">

<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QOptionGroup'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Example on a group of checkboxes:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-option-group</span></span></span><br><span class="line"><span class="tag">    <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"checkbox"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">"group"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:options</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; label: 'Option 1', value: 'op1' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; label: 'Option 2', value: 'op2' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; label: 'Option 3', value: 'op3' &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    ]"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// `v-model` binded to `group`,</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// which must be an array for checkboxes and toggles</span></span></span><br><span class="line"><span class="javascript">      group: [<span class="string">'opt1'</span>]</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Example on a group of radios:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-option-group</span></span></span><br><span class="line"><span class="tag">    <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"radio"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">"group"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:options</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; label: 'Option 1', value: 'op1' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; label: 'Option 2', value: 'op2' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; label: 'Option 3', value: 'op3' &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    ]"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// `v-model` binded to `group`,</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// which must be a String when using radios</span></span></span><br><span class="line"><span class="javascript">      group: <span class="string">'opt1'</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code>, which is required. For “radio” type it must be a String, otherwise (“checkbox” or “toggle” type) your scope variable that you bind to <code>v-model</code> must be an Array.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>type</code></td>
<td>String</td>
<td>The type of input component to be used. The default is <code>radio</code>. The other choices are <code>checkbox</code> and <code>toggle</code>.</td>
</tr>
<tr>
<td><code>options</code></td>
<td>Array</td>
<td>An array of objects with <code>value</code> and <code>label</code> properties. The binary components will be created according to this array.</td>
</tr>
<tr>
<td><code>left-label</code></td>
<td>Boolean</td>
<td>When set to <code>true</code>, the labels will be put on the left side.</td>
</tr>
<tr>
<td><code>inline</code></td>
<td>Boolean</td>
<td>Adjusts the display of the binary components fill out the row, instead of being stacked vertically.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>Color from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>keep-color</code></td>
<td>Boolean</td>
<td>Keep color when not selected/truthy too.</td>
</tr>
<tr>
<td><code>readonly</code></td>
<td>Boolean</td>
<td>Set to <code>true</code>, to make the binary components read-only.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>When set to <code>true</code>, the binary components are not selectable thus cannot change your <code>v-model</code>.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Set to <code>true</code> when background is dark.</td>
</tr>
<tr>
<td><code>no-parent-field</code></td>
<td>Boolean</td>
<td>Avoid trying to connect to a parent QField.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@input</code></td>
<td>Triggered immediately when model changes.</td>
</tr>
<tr>
<td><code>@change</code></td>
<td>Fired when the component model changes.</td>
</tr>
<tr>
<td><code>@focus</code></td>
<td>Fired when the component gets focus.</td>
</tr>
<tr>
<td><code>@blur</code></td>
<td>Fired when the component loses focus.</td>
</tr>
</tbody>
</table>
<h3 id="Lazy-Input"><a href="#Lazy-Input" class="headerlink" title="Lazy Input"></a>Lazy Input</h3><p>Vue will soon supply the <code>.lazy</code> modifier for v-model on components too, but until then, you can use the longer equivalent form:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-option-group</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">"radio"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">change</span>=<span class="string">"val =&gt; &#123; model = val &#125;"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:options</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#123; label: 'Option 1', value: 'op1' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#123; label: 'Option 2', value: 'op2' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#123; label: 'Option 3', value: 'op3' &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">  ]"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Other-Examples"><a href="#Other-Examples" class="headerlink" title="Other Examples"></a>Other Examples</h2><p>A group of radios with different colors.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-option-group</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">"radio"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"group"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:options</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#123; label: 'Option 1', value: 'op1' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#123; label: 'Option 2', value: 'op2', color: 'secondary' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#123; label: 'Option 3', value: 'op3', color: 'amber' &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">  ]"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>And a group of toggles, but not stacked vertically when possible. We add <code>inline</code> Boolean property.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-option-group</span></span></span><br><span class="line"><span class="tag">  <span class="attr">inline</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">"toggle"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"group"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:options</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#123; label: 'Option 1', value: 'op1' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#123; label: 'Option 2', value: 'op2' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#123; label: 'Option 3', value: 'op3' &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">  ]"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<p>You would normally also add this component inside a <a href="/components/field.html">QField</a> component as shown below.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-field</span></span></span><br><span class="line"><span class="tag">  <span class="attr">icon</span>=<span class="string">"cloud"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">helper</span>=<span class="string">"Choose your option"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"Pick something"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:error</span>=<span class="string">"hasError"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">error-label</span>=<span class="string">"Select at least one option"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-option-group</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"radio"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">"group"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:options</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; label: 'Option 1', value: 'op1' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; label: 'Option 2', value: 'op2' &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; label: 'Option 3', value: 'op3' &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    ]"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Popover]]></title>
      <url>https://quasar-framework.org/components/popover.html</url>
      <content type="html"><![CDATA[<p>QPopover should be used when you want a menu (or any content) to be displayed on a popup as a result of user clicking/tapping on a DOM element / component.</p>
<input type="hidden" data-fullpage-demo="popups/popover">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QPopover'</span>],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// optional if you want to use</span></span><br><span class="line">  <span class="comment">// directive `v-close-overlay`</span></span><br><span class="line">  directives: [<span class="string">'CloseOverlay'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>In the example below we use a Button (as a target) and when clicking/tapping on it Quasar will display a List.</p>
<p>You can replace the QBtn and the List with any DOM elements or components you like.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  The target button (can be anything else)</span></span><br><span class="line"><span class="comment">  must be direct parent of QPopover on the</span></span><br><span class="line"><span class="comment">  DOM hierarchy.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">label</span>=<span class="string">"Email"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Direct child of target --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-popover</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      The DOM element(s) that make up the popup,</span></span><br><span class="line"><span class="comment">      in this case a list:</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-list</span> <span class="attr">separator</span> <span class="attr">link</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- notice `v-close-overlay` which closes popover --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">v-close-overlay</span> @<span class="attr">click.native</span>=<span class="string">"doSomething"</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-popover</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The idea is to place QPopover inside your DOM element / component that you want to be the trigger as <strong>direct child</strong>. Don’t worry about QPopover content inheriting CSS from the container as the QPopover will be injected as a direct child of <code>&lt;body&gt;</code>.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br>When on a browser, hitting the &lt;ESCAPE&gt; key also closes the QPopover.</p>
</blockquote>
<h2 id="Toggle-through-v-model"><a href="#Toggle-through-v-model" class="headerlink" title="Toggle through v-model"></a>Toggle through v-model</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"showing = true"</span> <span class="attr">label</span>=<span class="string">"Show"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"showing = false"</span> <span class="attr">label</span>=<span class="string">"Hide"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">      <span class="tag">&lt;<span class="name">q-popover</span> <span class="attr">v-model</span>=<span class="string">"showing"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-popover</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      showing: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>anchor</code></td>
<td>Object</td>
<td>String of form <code>bottom left</code> (vertical horizontal)</td>
</tr>
<tr>
<td><code>anchor-click</code></td>
<td>Boolean</td>
<td>Disable triggering the Popover by clicking/tapping on the parent element.</td>
</tr>
<tr>
<td><code>no-focus</code></td>
<td>Boolean</td>
<td>(v0.17+) By default, for accessibility purposes, Popover focuses its content when it will be displayed. For use-cases when you need to keep focus on your current element, set this to <code>true</code>.</td>
</tr>
<tr>
<td><code>no-refocus</code></td>
<td>Boolean</td>
<td>(v0.17+) By default, for accessibility purposes, Popover refocuses the previously active element. Set to <code>true</code> to disable this behaviour.</td>
</tr>
<tr>
<td><code>self</code></td>
<td>Object</td>
<td>String of form <code>top left</code> (vertical horizontal)</td>
</tr>
<tr>
<td><code>max-height</code></td>
<td>String</td>
<td>Optional maximum height of Popover content. Example: <code>500px</code></td>
</tr>
<tr>
<td><code>touch-position</code></td>
<td>Boolean</td>
<td>Open Popover from the position where user clicked/tapped on anchor, and keep the same relative position on scroll.</td>
</tr>
<tr>
<td><code>fit</code></td>
<td>Boolean</td>
<td>Popover has <code>min-width</code> set as same as the <code>width</code> of the container.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>When set to <code>true</code>, Popover won’t be triggered.</td>
</tr>
<tr>
<td><code>offset</code></td>
<td>Array of 2 Numbers</td>
<td>Offset on horizontal and vertical (in pixels). Example: <code>[18, 18]</code>.</td>
</tr>
<tr>
<td><code>cover</code></td>
<td>Boolean</td>
<td>(v0.17.10+) Popover will cover its parent element.</td>
</tr>
<tr>
<td><code>persistent</code></td>
<td>Boolean</td>
<td>(v0.17.10+) Popover will not be closed if clicking/tapping outside of it, like it happens by default.</td>
</tr>
<tr>
<td><code>keep-on-screen</code></td>
<td>Boolean</td>
<td>(v0.17.13+) Popover will not be closed if the parent element gets out of screen.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>show</code></td>
<td>Open Popover. Takes one optional Function parameter to trigger after Popover is opened.</td>
</tr>
<tr>
<td><code>hide</code></td>
<td>Close Popover. Takes one optional Function parameter to trigger after Popover is closed.</td>
</tr>
<tr>
<td><code>toggle</code></td>
<td>Toggle open/close Popover state. Takes one optional Function parameter to trigger after Popover is toggled.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@show</code></td>
<td>Triggered after opening Popover.</td>
</tr>
<tr>
<td><code>@hide</code></td>
<td>Triggered after closing Popover.</td>
</tr>
</tbody>
</table>
<h2 id="Handling-Popover-Dismissal"><a href="#Handling-Popover-Dismissal" class="headerlink" title="Handling Popover Dismissal"></a>Handling Popover Dismissal</h2><p>By default, clicking/tapping outside the QPopover content will close it. But if you’d like elements from the QPopover content to close it, then use the <code>v-close-overlay</code> Quasar directive.</p>
<h2 id="Handling-Positioning"><a href="#Handling-Positioning" class="headerlink" title="Handling Positioning"></a>Handling Positioning</h2><p>Position of the QPopover can be customized. It keeps account of the optional <code>anchor</code> and <code>self</code> Vue properties. See the demo and play with them.</p>
<p>The final position of the QPopover popup is calculated so that it will be displayed on the available screen real estate, switching to right-side and/or top-side when necessary.</p>
<p>If you would like the QPopover to appear from the touch/click point triggering the QPopover open, then use the Boolean <code>touch-position</code> Vue property:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-popover</span> <span class="attr">touch-position</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-popover</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>The demo has <code>touch-position</code> specified for the big image on the center of the page.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS Positioning Classes]]></title>
      <url>https://quasar-framework.org/components/positioning.html</url>
      <content type="html"><![CDATA[<p>There are CSS classes supplied by Quasar to help you position a DOM element easily:</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>fullscreen</code></td>
<td>Fix position covering all window real-estate</td>
</tr>
<tr>
<td><code>fixed</code></td>
<td>Set <code>position</code> to <code>fixed</code> without specifying <code>top</code>, <code>left</code>, <code>right</code> or <code>bottom</code> properties</td>
</tr>
<tr>
<td><code>fixed-center</code></td>
<td>Set position to <code>fixed</code> but in the middle of window.</td>
</tr>
<tr>
<td><code>absolute</code></td>
<td>Set <code>position</code> to <code>absolute</code> without specifying <code>top</code>, <code>left</code>, <code>right</code> or <code>bottom</code> properties</td>
</tr>
<tr>
<td><code>absolute-center</code></td>
<td>Set position to <code>absolute</code> but in the middle of the container (container needs relative position).</td>
</tr>
<tr>
<td><code>fixed-top</code>, <code>absolute-top</code></td>
<td>Fixed or absolute position to top of screen</td>
</tr>
<tr>
<td><code>fixed-right</code>, <code>absolute-right</code></td>
<td>Fixed or absolute position to the right edge of screen</td>
</tr>
<tr>
<td><code>fixed-bottom</code>, <code>absolute-bottom</code></td>
<td>Fixed or absolute position to bottom of screen</td>
</tr>
<tr>
<td><code>fixed-left</code>, <code>absolute-left</code></td>
<td>Fixed or absolute position to the left edge of screen</td>
</tr>
<tr>
<td><code>fixed-top-left</code>, <code>absolute-top-left</code></td>
<td>Fixed or absolute position to top left of screen</td>
</tr>
<tr>
<td><code>fixed-top-right</code>, <code>absolute-top-right</code></td>
<td>Fixed or absolute position to top right of screen</td>
</tr>
<tr>
<td><code>fixed-bottom-left</code>, <code>absolute-bottom-left</code></td>
<td>Fixed or absolute position to bottom left of screen</td>
</tr>
<tr>
<td><code>fixed-bottom-right</code>, <code>absolute-bottom-right</code></td>
<td>Fixed or absolute position to bottom right of screen</td>
</tr>
<tr>
<td><code>relative-position</code></td>
<td>Set position to <code>relative</code></td>
</tr>
</tbody>
</table>
<h2 id="Alignment"><a href="#Alignment" class="headerlink" title="Alignment"></a>Alignment</h2><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>float-left</code></td>
<td>Float to the left</td>
</tr>
<tr>
<td><code>float-right</code></td>
<td>Float to the right</td>
</tr>
<tr>
<td><code>on-left</code></td>
<td>Sets a small margin to the right; commonly used for icon elements with other siblings</td>
</tr>
<tr>
<td><code>on-right</code></td>
<td>Sets a small margin to the left; commonly used for icon elements with other siblings</td>
</tr>
</tbody>
</table>
<p>Vertical alignment:</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>vertical-top</code></td>
<td>Set CSS vertical alignment to <code>top</code></td>
</tr>
<tr>
<td><code>vertical-middle</code></td>
<td>Set CSS vertical alignment to <code>middle</code></td>
</tr>
<tr>
<td><code>vertical-bottom</code></td>
<td>Set CSS vertical alignment to <code>bottom</code></td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Progress Bar (QProgress)]]></title>
      <url>https://quasar-framework.org/components/progress-bar.html</url>
      <content type="html"><![CDATA[<p>A Progress bar is used to show a process is being worked on, so the user isn’t staring at a static page, even though the system is working in the background. It is a good visual indicator (i.e. good UX) for the user, when waiting for longer term operations to be accomplished.</p>
<input type="hidden" data-fullpage-demo="progress/progress">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QProgress'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-usage"><a href="#Basic-usage" class="headerlink" title="Basic usage"></a>Basic usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">:percentage</span>=<span class="string">"progressModel"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- with buffering; 4px height looks best --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-progress</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:percentage</span>=<span class="string">"progressBuffer"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:buffer</span>=<span class="string">"buffer"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">"height: 4px"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>percentage</code></td>
<td>Number</td>
<td>Progress (in percentage).</td>
</tr>
<tr>
<td><code>buffer</code></td>
<td>Number</td>
<td>Buffer (in percentage).</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>The Quasar CSS color value the bar should be.</td>
</tr>
<tr>
<td><code>stripe</code></td>
<td>Boolen</td>
<td>If set to <code>true</code>, the progress bar will be striped.</td>
</tr>
<tr>
<td><code>animate</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the progress bar will be animated.</td>
</tr>
<tr>
<td><code>indeterminate</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the state is indeterminate, meaning it is unknown when the progress will stop.</td>
</tr>
<tr>
<td><code>height</code></td>
<td>String</td>
<td>CSS unit for height of QProgress.</td>
</tr>
</tbody>
</table>
<p>Percentage and buffer, being percentage values, must be between 0 and 100, and <code>percentage</code> + <code>buffer</code> must be lower or equal to 100. If <code>percentage</code> is outside this interval the component will parse it and make it be within the interval.</p>
<p>For color, use one from the <a href="/components/color-palette.html">Quasar Color Palette</a>.</p>
<p>Examples:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">:percentage</span>=<span class="string">"progress"</span> <span class="attr">color</span>=<span class="string">"teal-4"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">:percentage</span>=<span class="string">"progress"</span> <span class="attr">color</span>=<span class="string">"positive"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">:percentage</span>=<span class="string">"progress"</span> <span class="attr">color</span>=<span class="string">"info"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">:percentage</span>=<span class="string">"progress"</span> <span class="attr">color</span>=<span class="string">"warning"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>For stripes, just add the <code>stripe</code> prop.</p>
<p>Examples:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">:percentage</span>=<span class="string">"progress"</span> <span class="attr">color</span>=<span class="string">"positive"</span> <span class="attr">stripe</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">:percentage</span>=<span class="string">"progress"</span> <span class="attr">color</span>=<span class="string">"info"</span> <span class="attr">stripe</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">:percentage</span>=<span class="string">"progress"</span> <span class="attr">color</span>=<span class="string">"warning"</span> <span class="attr">stripe</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>For buffering, use the buffer prop.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">:percentage</span>=<span class="string">"progress"</span> <span class="attr">color</span>=<span class="string">"positive"</span> <span class="attr">stripe</span> <span class="attr">:buffer</span>=<span class="string">"buffer"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">:percentage</span>=<span class="string">"progress"</span> <span class="attr">color</span>=<span class="string">"info"</span> <span class="attr">stripe</span> <span class="attr">:buffer</span>=<span class="string">"buffer"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">:percentage</span>=<span class="string">"progress"</span> <span class="attr">color</span>=<span class="string">"warning"</span> <span class="attr">stripe</span> <span class="attr">:buffer</span>=<span class="string">"buffer"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>If you cannot calculate the progress in percent, use the indeterminate prop.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">indeterminate</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">indeterminate</span> <span class="attr">color</span>=<span class="string">"positive"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">indeterminate</span> <span class="attr">color</span>=<span class="string">"warning"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">indeterminate</span> <span class="attr">color</span>=<span class="string">"negative"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>If you’d like to set a specific height of the progress bar, add inline styling to the component:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-progress</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:percentage</span>=<span class="string">"progress"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">stripe</span></span></span><br><span class="line"><span class="tag">  <span class="attr">animate</span></span></span><br><span class="line"><span class="tag">  <span class="attr">height</span>=<span class="string">"45px"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Pull Down to Refresh]]></title>
      <url>https://quasar-framework.org/components/pull-to-refresh.html</url>
      <content type="html"><![CDATA[<p>When you want to allow the user to refresh the content or retrieve the newest content.</p>
<input type="hidden" data-fullpage-demo="navigation/pull-to-refresh">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QPullToRefresh'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Use QPullToRefresh component as direct child of your page component, to encapsulate all its content. Refer to the source of the demo for a more detailed example.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-pull-to-refresh</span> <span class="attr">:handler</span>=<span class="string">"refresher"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Content, whatever you like --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></span><br><span class="line">    Lorem ipsum dolor sit amet...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-pull-to-refresh</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>IMPORTANT</strong><br>Do not wrap <code>&lt;q-pull-to-refresh&gt;</code> by a <code>&lt;div class=&quot;layout-padding&quot;&gt;</code>. If you must, place that <code>&lt;div&gt;</code> as direct child of <code>&lt;q-pull-to-refresh&gt;</code>.</p>
</blockquote>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Default Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>handler</code></td>
<td>Function</td>
<td></td>
<td><strong>Required</strong> Method from VM to be called to load more content</td>
</tr>
<tr>
<td><code>distance</code></td>
<td>Number</td>
<td>35</td>
<td>Minimum threshold distance in pixels to determine if releasing will determine a refresh</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>(v0.17+) One from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>pull-message</code></td>
<td>String</td>
<td>‘Pull down to refresh’</td>
<td>Message to display before hitting the threshold above</td>
</tr>
<tr>
<td><code>release-message</code></td>
<td>String</td>
<td>‘Release to refresh’</td>
<td>Message to display after hitting the threshold above and before releasing</td>
</tr>
<tr>
<td><code>refresh-message</code></td>
<td>String</td>
<td>‘Refreshing…’</td>
<td>Message to display when refreshing content</td>
</tr>
<tr>
<td><code>refresh-icon</code></td>
<td>String</td>
<td>‘refresh’</td>
<td>Icon to display when refreshing the content, besides the text above</td>
</tr>
<tr>
<td><code>inline</code></td>
<td>Boolean</td>
<td>false</td>
<td>If the component is not direct child of QPage, set this to “true”.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>false</td>
<td>When set to <code>true</code> it disables its functionality. If no value is provided (empty attribute), then it’s considered as set to <code>true</code>.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@trigger</code></td>
<td>Triggers a refresh, calling your handler.</td>
</tr>
</tbody>
</table>
<h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><p>The handler Function (specified as DOM element property) takes one parameter:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    refresher (done) &#123;</span><br><span class="line">      <span class="comment">// done - Function to call when you made all necessary updates.</span></span><br><span class="line">      <span class="comment">//        DO NOT forget to call it otherwise the refresh message</span></span><br><span class="line">      <span class="comment">//        will continue to be displayed</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// make some Ajax call then call done()</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Range]]></title>
      <url>https://quasar-framework.org/components/range.html</url>
      <content type="html"><![CDATA[<p>The Quasar Range component is a great way to offer the user the selection of a sub-range of values between a minimum and maximum value, with optional steps to select those values. An example use case for the Range component would be to offer a price range selection.</p>
<input type="hidden" data-fullpage-demo="forms/range">

<p>Also check out its “sibling”, the <a href="/components/slider.html">Slider</a> component.<br>Remember you can use QRange wrapped by a <a href="/components/field.html">QField</a> too.</p>
<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QRange'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Notice we are using an object for the selection, which holds values for both the lower value of the selected range - <code>rangeValues.min</code> and the higher value - <code>rangeValues.max</code>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-range</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">"rangeValues"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:min</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:max</span>=<span class="string">"10"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:step</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// our model here</span></span></span><br><span class="line"><span class="undefined">      rangeValues: &#123;</span></span><br><span class="line"><span class="undefined">        min: 2,</span></span><br><span class="line"><span class="undefined">        max: 4</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Example with <code>step</code>, <code>label</code> and <code>snap</code>:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-range</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"rangeValues"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:min</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max</span>=<span class="string">"10"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:step</span>=<span class="string">"2"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span></span></span><br><span class="line"><span class="tag">  <span class="attr">snap</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which should be binded to an Object in your scope with “min” and “max” properties.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>min</code></td>
<td>Number</td>
<td>(<strong>Required</strong>) Minimum value for beginning of interval.</td>
</tr>
<tr>
<td><code>max</code></td>
<td>Number</td>
<td>(<strong>Required</strong>) Maximum value for end of interval.</td>
</tr>
<tr>
<td><code>label</code></td>
<td>Boolean</td>
<td>Popup a label when user clicks/taps on the Range.</td>
</tr>
<tr>
<td><code>label-always</code></td>
<td>Boolean</td>
<td>Always display the label.</td>
</tr>
<tr>
<td><code>left-label-value</code></td>
<td>String</td>
<td>Override default left label value.</td>
</tr>
<tr>
<td><code>right-label-value</code></td>
<td>String</td>
<td>Override default right label value.</td>
</tr>
<tr>
<td><code>left-label-color</code></td>
<td>String</td>
<td>Color from <a href="/components/color-palette.html">Quasar Palette</a> for left label background.</td>
</tr>
<tr>
<td><code>right-label-color</code></td>
<td>String</td>
<td>Color from <a href="/components/color-palette.html">Quasar Palette</a> for right label background.</td>
</tr>
<tr>
<td><code>fill-handle-always</code></td>
<td>Boolean</td>
<td>Fill handle even if at minimum value.</td>
</tr>
<tr>
<td><code>step</code></td>
<td>Number</td>
<td>Specify step amount between valid values.</td>
</tr>
<tr>
<td><code>decimals</code></td>
<td>Number</td>
<td>Specify maximum number of decimals.</td>
</tr>
<tr>
<td><code>snap</code></td>
<td>Boolean</td>
<td>Range handler will snap on values, rather than walking freely; good to use along <code>step</code>; also displays step markers on the Range.</td>
</tr>
<tr>
<td><code>markers</code></td>
<td>Boolean</td>
<td>Display markers on background, one for each possible value for the model.</td>
</tr>
<tr>
<td><code>square</code></td>
<td>Boolean</td>
<td>When <code>true</code>. the slider buttons are square instead of round.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One of <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>error</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the range is turned red.</td>
</tr>
<tr>
<td><code>warning</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the slider is turned yellowish.</td>
</tr>
<tr>
<td><code>readonly</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the user cannot change model value.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the user cannot change model value.</td>
</tr>
<tr>
<td><code>drag-range</code></td>
<td>Boolean</td>
<td>User can also drag the range (while maintaining interval in this case).</td>
</tr>
<tr>
<td><code>drag-only-range</code></td>
<td>Boolean</td>
<td>When <code>true</code>, the user can only drag a predetermined range. Range limit values cannot be changed independently.</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>IMPORTANT</strong><br>Make sure you choose the <code>min</code>, <code>max</code> and <code>step</code> values correctly. <code>step</code> must be a divisor of <code>max - min</code>, of <code>v-model.min</code> and of <code>v-model.max</code>, otherwise the component won’t work right. This is because all valid steps must be able to hold an equal position within the <code>min</code>-<code>max</code> values.</p>
</blockquote>
<h3 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h3><p>Use one of the Quasar colors from the <a href="/components/color-palette.html">Color Palette</a>, like <code>primary</code>, <code>secondary</code>, <code>orange-9</code>, <code>teal-4</code> within the <code>color</code> prop:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-range</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"teal"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"rangeValues"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:min</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max</span>=<span class="string">"50"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Lazy-Input"><a href="#Lazy-Input" class="headerlink" title="Lazy Input"></a>Lazy Input</h3><p>Vue will soon supply the <code>.lazy</code> modifier for v-model on components too, but until then, you can use the longer equivalent form:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-range</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">change</span>=<span class="string">"val =&gt; &#123; model = val &#125;"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"20"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Draging-the-Range"><a href="#Draging-the-Range" class="headerlink" title="Draging the Range"></a>Draging the Range</h3><p>Use the <code>drag-range</code> or <code>drag-only-range</code> props, to allow the user to move the selected range or only a predetermined range as a whole.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-range</span> <span class="attr">drag-range</span> <span class="attr">v-model</span>=<span class="string">"rangeValues"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"100"</span> <span class="attr">label</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-range</span> <span class="attr">drag-only-range</span> <span class="attr">v-model</span>=<span class="string">"rangeValues"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"100"</span> <span class="attr">label</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Adding-Markers"><a href="#Adding-Markers" class="headerlink" title="Adding Markers"></a>Adding Markers</h3><p>Use the <code>markers</code> prop, to show the steps available for the range selection.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-range</span> <span class="attr">markers</span> <span class="attr">v-model</span>=<span class="string">"rangeValues"</span> <span class="attr">:min</span>=<span class="string">"-6"</span> <span class="attr">:max</span>=<span class="string">"10"</span> <span class="attr">:step</span>=<span class="string">"2"</span> <span class="attr">label</span> <span class="attr">snap</span>  /&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Overriding-Labels"><a href="#Overriding-Labels" class="headerlink" title="Overriding Labels"></a>Overriding Labels</h3><p>In the example below we add a “px” suffix to labels.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-range</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:min</span>=<span class="string">"-20"</span> <span class="attr">:max</span>=<span class="string">"20"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:left-label-value</span>=<span class="string">"`$&#123;model.min&#125;px`"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:right-label-value</span>=<span class="string">"`$&#123;model.max&#125;px`"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@input(newVal)</code></td>
<td>Triggered immediately on model value change.</td>
</tr>
<tr>
<td><code>@change(newVal)</code></td>
<td>Triggered on lazy model value change.</td>
</tr>
</tbody>
</table>
<h2 id="Usage-Inside-of-a-List"><a href="#Usage-Inside-of-a-List" class="headerlink" title="Usage Inside of a List"></a>Usage Inside of a List</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"local_atm"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-range</span> <span class="attr">v-model</span>=<span class="string">"standalone"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"50"</span> <span class="attr">label</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"euro symbol"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-range</span> <span class="attr">v-model</span>=<span class="string">"standalone"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"50"</span> <span class="attr">label</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Screen Plugin]]></title>
      <url>https://quasar-framework.org/components/screen-plugin.html</url>
      <content type="html"><![CDATA[<p>The Quasar Screen plugin allows you to have a dynamic and responsive UI when dealing with your Javascript code. When possible, it is recommended to use the responsive CSS classes instead, for performance reasons.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// quasar.conf.js</span></span><br><span class="line"></span><br><span class="line">framework: &#123;</span><br><span class="line">  plugins: [<span class="string">'Screen'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Notice <code>$q.screen</code> below. This is just a simple usage example.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-list</span> <span class="attr">:dense</span>=<span class="string">"$q.screen.lt.md"</span> <span class="attr">:sparse</span>=<span class="string">"$q.screen.gt.lg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"John Doe"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Jim Doe"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// script part of a Vue component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    buttonColor () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$q.screen.lt.md</span><br><span class="line">        ? <span class="string">'primary'</span></span><br><span class="line">        : <span class="string">'secondary'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We can also use Screen plugin outside of a Vue component:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Screen &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Screen.gt.md</span></span><br><span class="line"><span class="comment">// Screen.md</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>There are a few methods that can be used to tweak how Screen plugin works:</p>
<table>
<thead>
<tr>
<th>Method</th>
<th>Description</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr>
<td>setSizes(Object)</td>
<td>Change window breakpoints; does NOT also changes CSS breakpoints.</td>
<td>setSizes({ lg: 1024, xl: 2000 })</td>
</tr>
<tr>
<td>setDebounce(Number)</td>
<td>Change the default 100ms debounce to some other value.</td>
<td>setDebounce(500) // 500ms</td>
</tr>
</tbody>
</table>
<p>Examples:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// inside a Vue component:</span><br><span class="line">this.$q.screen.setSizes(&#123; sm: 300, md: 500, lg: 1000, xl: 2000 &#125;)</span><br><span class="line"></span><br><span class="line">// outside of a Vue component:</span><br><span class="line">import &#123; Screen &#125; from &apos;quasar&apos;</span><br><span class="line">Screen.setSizes(&#123; sm: 300, md: 500, lg: 1000, xl: 2000 &#125;)</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Radio]]></title>
      <url>https://quasar-framework.org/components/radio.html</url>
      <content type="html"><![CDATA[<p>The Quasar Radio component is another basic element for user input. You can use this to supply a way for the user to pick an option from multiple choices.</p>
<input type="hidden" data-fullpage-demo="forms/radio">

<p>Please also refer to the <a href="/components/option-group.html">Option Group documentation</a> on other possibilities for creating groups of Toggles.</p>
<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QRadio'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Three choices for the user --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-radio</span> <span class="attr">v-model</span>=<span class="string">"option"</span> <span class="attr">val</span>=<span class="string">"opt1"</span> <span class="attr">label</span>=<span class="string">"Option 1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-radio</span> <span class="attr">v-model</span>=<span class="string">"option"</span> <span class="attr">val</span>=<span class="string">"opt2"</span> <span class="attr">label</span>=<span class="string">"Option 2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-radio</span> <span class="attr">v-model</span>=<span class="string">"option"</span> <span class="attr">val</span>=<span class="string">"opt3"</span> <span class="attr">label</span>=<span class="string">"Option 3"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which you should bind to a String in your scope. Choosing one option (clicking/tapping on a radio) makes your <code>v-model</code> change to Radio’s <code>val</code>.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>val</code></td>
<td>Object</td>
<td>Used to modify the v-model of the Radio.</td>
</tr>
<tr>
<td><code>label</code></td>
<td>String</td>
<td>The text label for the Radio.</td>
</tr>
<tr>
<td><code>left-label</code></td>
<td>Boolean</td>
<td>Set to <code>true</code>, if the label should be placed to the left of the radio.</td>
</tr>
<tr>
<td><code>checked-icon</code></td>
<td>String</td>
<td>The icon to use, when the radio is checked. Default is a simple radio icon.</td>
</tr>
<tr>
<td><code>unchecked-icon</code></td>
<td>String</td>
<td>The icon to use, when the radio is not checked. Default is simple unchecked radio icon.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>Color from <a href="/components/color-palette.html">Quasar Color Palette</a> of the Radio.</td>
</tr>
<tr>
<td><code>keep-color</code></td>
<td>Boolean</td>
<td>Keep color when not selected.</td>
</tr>
<tr>
<td><code>readonly</code></td>
<td>Boolean</td>
<td>Set to <code>true</code>, to make the radio read-only.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>Set to <code>true</code>, to disable the radio.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Set to <code>true</code> when background is dark.</td>
</tr>
<tr>
<td><code>no-focus</code></td>
<td>Boolean</td>
<td>(v0.17+) Disable accessibility for this component so that it can’t receive focus.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@input</code></td>
<td>Triggered when Radio gets selected.</td>
</tr>
<tr>
<td><code>@blur</code></td>
<td>Triggered, when Radio loses focus.</td>
</tr>
<tr>
<td><code>@focus</code></td>
<td>Triggered, when Radio gains focus.</td>
</tr>
</tbody>
</table>
<h2 id="More-Examples"><a href="#More-Examples" class="headerlink" title="More Examples"></a>More Examples</h2><p>There are a number of props, which are available to help you quickly format a Radio. An interesting feature of Radio is the ripple effect that user sees when clicking/tapping on it to change its state.</p>
<h3 id="Specific-State-Icons"><a href="#Specific-State-Icons" class="headerlink" title="Specific State Icons"></a>Specific State Icons</h3><p>Instead of the default radio icon, you can also use the <code>checked-icon</code> and <code>unchecked-icon</code> props to display a different icon.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-radio</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"option"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">val</span>=<span class="string">"opt1"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">unchecked-icon</span>=<span class="string">"visibility_off"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">checked-icon</span>=<span class="string">"visibility"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"Show only Area 1"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-radio</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"option"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">val</span>=<span class="string">"opt2"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">unchecked-icon</span>=<span class="string">"visibility_off"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">checked-icon</span>=<span class="string">"visibility"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"Show only Area 2"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-radio</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"option"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">val</span>=<span class="string">"opt3"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">unchecked-icon</span>=<span class="string">"visibility_off"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">checked-icon</span>=<span class="string">"visibility"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"Show only Area 3"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h3><p>Use the <code>color</code> prop to control the Radio color.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Default color, which is "primary" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-radio</span> <span class="attr">v-model</span>=<span class="string">"option"</span> <span class="attr">val</span>=<span class="string">"opt2"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Teal --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-radio</span> <span class="attr">v-model</span>=<span class="string">"option"</span> <span class="attr">val</span>=<span class="string">"opt3"</span> <span class="attr">color</span>=<span class="string">"teal"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Orange-7 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-radio</span> <span class="attr">v-model</span>=<span class="string">"option"</span> <span class="attr">val</span>=<span class="string">"opt4"</span> <span class="attr">color</span>=<span class="string">"orange-7"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Label-Position"><a href="#Label-Position" class="headerlink" title="Label Position"></a>Label Position</h3><p>Use the <code>left-label</code> prop, to move the label to the left of the radio.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-radio</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"option"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">val</span>=<span class="string">"opt2"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">left-label</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"Option 2"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Usage-Inside-of-a-List"><a href="#Usage-Inside-of-a-List" class="headerlink" title="Usage Inside of a List"></a>Usage Inside of a List</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-list</span> <span class="attr">link</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    Rendering a &lt;label&gt; tag (notice tag="label")</span></span><br><span class="line"><span class="comment">    so the whole QItem will respond to clicks to</span></span><br><span class="line"><span class="comment">    change Toggle state.</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-radio</span> <span class="attr">v-model</span>=<span class="string">"option"</span> <span class="attr">val</span>=<span class="string">"opt1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Option 1<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-radio</span> <span class="attr">v-model</span>=<span class="string">"option"</span> <span class="attr">val</span>=<span class="string">"opt2"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Option 2<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Allows notifications<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-radio</span> <span class="attr">v-model</span>=<span class="string">"option"</span> <span class="attr">val</span>=<span class="string">"opt3"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Option 3<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span></span><br><span class="line">        Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod</span><br><span class="line">        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,</span><br><span class="line">        quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo</span><br><span class="line">        consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse</span><br><span class="line">        cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat</span><br><span class="line">        non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Rating]]></title>
      <url>https://quasar-framework.org/components/rating.html</url>
      <content type="html"><![CDATA[<p>Quasar Rating is a Component which allows users to rate items, usually known as “Star Rating”.</p>
<input type="hidden" data-fullpage-demo="forms/rating">

<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QRating'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-rating</span> <span class="attr">v-model</span>=<span class="string">"ratingModel"</span> <span class="attr">:max</span>=<span class="string">"3"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Disabled State --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-rating</span></span></span><br><span class="line"><span class="tag">  <span class="attr">disable</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"ratingModel"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max</span>=<span class="string">"3"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which should be binded to a Number in your scope.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>max</code></td>
<td>Number</td>
<td>Number of icons to display.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon to use as grade. Default value: <code>grade</code>.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One of <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>size</code></td>
<td>String</td>
<td>CSS size String. Examples: ‘12px’, ‘2rem’.</td>
</tr>
<tr>
<td><code>readonly</code></td>
<td>Boolean</td>
<td>Display as readonly.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>When set to <code>true</code> user can not change model value and Rating is faded.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>set(value)</code></td>
<td>Parses and sets that value.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@input(newVal)</code></td>
<td>Triggered on model value change.</td>
</tr>
<tr>
<td><code>@change(newVal)</code></td>
<td>Triggered on model value change.</td>
</tr>
</tbody>
</table>
<h2 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h2><p>Use one of the Quasar colors from the <a href="/components/color-palette.html">Color Palette</a>, like <code>primary</code>, <code>secondary</code>, <code>orange-7</code>, <code>teal-2</code> as color property:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-rating</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"orange"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"ratingModel"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RTL Support]]></title>
      <url>https://quasar-framework.org/components/rtl-support.html</url>
      <content type="html"><![CDATA[<p>RTL is referring to “right to left” UI for languages that need it. <strong>You need Quasar v0.15.5+.</strong></p>
<h2 id="Enabling-RTL-support"><a href="#Enabling-RTL-support" class="headerlink" title="Enabling RTL support"></a>Enabling RTL support</h2><p>To enable it, you need to edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">build: &#123;</span><br><span class="line">  rtl: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="How-it-works"><a href="#How-it-works" class="headerlink" title="How it works"></a>How it works</h2><p>RTL is tightly coupled to <a href="/components/internationalization.html">Quasar I18n</a>. <strong>When Quasar is set to use an RTL language</strong> (language pack has “rtl” prop set to “true”) and <strong>RTL support is enabled</strong> (check step above for quasar.conf.js), then the UI will dynamically transform Quasar &amp; your website/app code for RTL.</p>
<p>Let’s discuss about each of these two requirements:</p>
<ol>
<li><p><em>Quasar needs to be set to use an RTL language</em><br>See <a href="/components/internationalization.html">Internationalization</a> on how you can set a language. You can set a language as default or dynamically set one.</p>
</li>
<li><p><em>RTL support needs to be enabled</em><br>You need to set “rtl” to “true” under quasar.conf.js &gt; “build”. What this does is it compiles CSS for both your website/app code and for Quasar components and add corresponding RTL CSS rules automatically. Your CSS bundle will slightly increase in size due to the addition of these CSS rules.</p>
</li>
</ol>
<h2 id="Things-to-keep-in-mind"><a href="#Things-to-keep-in-mind" class="headerlink" title="Things to keep in mind"></a>Things to keep in mind</h2><ul>
<li>Both RTL and non-RTL Quasar language packs will work together and dynamically switch to/from RTL. So only choosing an RTL Quasar language pack will trigger the RTL UI for you. You don’t need separate builds of your app (one for non-RTL and one for RTL-only). The RTL is dynamical.</li>
<li>You can dynamically detect if you are on RTL mode by taking a look at Boolean <code>this.$q.i18n.rtl</code>. More info on <a href="http://localhost:4000/components/vue-prototype-injections.html" target="_blank" rel="noopener">Vue Prototype Injections</a>.</li>
<li><p>You need to be careful when writing your own CSS. Like mentioned above, Quasar will automatically add RTL rules based on your CSS code. So writing:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.my-class</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>…will add this rule for RTL:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[dir=rtl]</span> <span class="selector-class">.my-class</span> &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Any CSS rule that refers to “left” or “right” is automatically triggering an equivalent RTL CSS rule to be added.</p>
</li>
</ul>
<h3 id="Marking-CSS-rules-as-exceptions"><a href="#Marking-CSS-rules-as-exceptions" class="headerlink" title="Marking CSS rules as exceptions"></a>Marking CSS rules as exceptions</h3><p>If you need an exception so your CSS code will not add a corresponding RTL rule, then add this comment:<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.my-class</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">10px</span> <span class="comment">/* rtl:ignore */</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Now both RTL and non-RTL UI mode will have <code>margin-left</code> prop.</p>
<p>Sometimes you’ll need to make exceptions for whole DOM elements / components. In this case, add <code>dir=&quot;ltr&quot;</code> or <code>dir=&quot;rtl&quot;</code> HTML attribute to the outermost DOM element / component template:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">dir</span>=<span class="string">"ltr"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    this DIV and all its content will use RTL mode</span></span><br><span class="line"><span class="comment">    regardless of Quasar language pack RTL settings</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Or, if you need your RTL UI to use left-to-right (ltr) mode for a DOM element / component:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">dir</span>=<span class="string">"ltr"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    this DIV and all its content will use non-RTL mode</span></span><br><span class="line"><span class="comment">    regardless of Quasar language pack RTL settings</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Handling-Quasar-UMD"><a href="#Handling-Quasar-UMD" class="headerlink" title="Handling Quasar UMD"></a>Handling Quasar UMD</h2><p>To enable RTL UIs in UMD you need to include the RTL equivalent CSS tag for your Quasar version and also pack in a Quasar RTL language pack (like Hebrew or Farsi). Example:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/quasar-framework@latest/dist/umd/quasar.mat.rtl.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      we also need an RTL Quasar language pack; let's take Hebrew as example;</span></span><br><span class="line"><span class="comment">      include this after Quasar JS tag</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/quasar-framework@latest/dist/umd/i18n.he.umd.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      Quasar.i18n.set(Quasar.i18n.he)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Check what tags you need to include in your HTML files by generating a sample with <code>$ vue init quasarframework/quasar-starter-kit-umd &lt;folder&gt;</code> and answering with “Yes” to the RTL question and specifying an RTL language for Quasar I18n.<br>Also notice the <code>&lt;html dir=&quot;rtl&quot;&gt;</code> tag at the beginning of the generated html file – you’ll need that too.</p>
<blockquote>
<p><strong>Caveat</strong><br>Quasar CLI automatically adds equivalent RTL CSS rules for your website/app code, but this is not the case for UMD where Quasar CLI is not being used. You’ll have to manage writing the RTL equivalent of your website/app CSS code by yourself. It’s only Quasar components that will have this handled automatically.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Pagination]]></title>
      <url>https://quasar-framework.org/components/pagination.html</url>
      <content type="html"><![CDATA[<p>The Quasar Pagination component is available for whenever a pagination system is required. It offers the user a simple UI to help you in moving between pages/items.</p>
<p>There are two modes in which QPagination operates: with buttons only or with an inputbox. The latter mode allows the user to go to a specific page by clicking/tapping on the inputbox, typing the page number then hitting Enter key and if the new page number is within valid limits, the model will be changed accordingly.</p>
<input type="hidden" data-fullpage-demo="navigation/pagination">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QPagination'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-pagination</span> <span class="attr">v-model</span>=<span class="string">"page"</span> <span class="attr">:max</span>=<span class="string">"17"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code>.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>min</code></td>
<td>Number</td>
<td>Number of the first page; Default: <code>1</code></td>
</tr>
<tr>
<td><code>max</code></td>
<td>Number</td>
<td>(<strong>Required</strong>) Number of last page</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a></td>
</tr>
<tr>
<td><code>text-color</code></td>
<td>String</td>
<td>Text color of current selection button, one from <a href="/components/color-palette.html">Quasar Color Palette</a></td>
</tr>
<tr>
<td><code>size</code></td>
<td>String</td>
<td>Button size (check “size” prop from Buttons)</td>
</tr>
<tr>
<td><code>input</code></td>
<td>Boolean</td>
<td>Use inputbox mode instead of buttons</td>
</tr>
<tr>
<td><code>boundary-links</code></td>
<td>Boolean</td>
<td>Show boundary button links</td>
</tr>
<tr>
<td><code>boundary-numbers</code></td>
<td>Boolean</td>
<td>Show boundary number buttons</td>
</tr>
<tr>
<td><code>direction-links</code></td>
<td>Boolean</td>
<td>Show direction buttons</td>
</tr>
<tr>
<td><code>ellipses</code></td>
<td>Boolean</td>
<td>Show ellipses when pages available &gt; “max-pages” prop.</td>
</tr>
<tr>
<td><code>max-pages</code></td>
<td>Number</td>
<td>Maximum number of page links to display at a time.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If no value is provided (empty attribute), then it’s considered as set to <code>true</code>.</td>
</tr>
</tbody>
</table>
<p>If you’d like to set the minimum starting page or the max number of pages, you can do so, as in the example below.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-pagination</span> <span class="attr">v-model</span>=<span class="string">"page"</span> <span class="attr">:min</span>=<span class="string">"minPages"</span> <span class="attr">:max</span>=<span class="string">"maxPages"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">      page: 4,</span></span><br><span class="line"><span class="undefined">      minPages: 4,</span></span><br><span class="line"><span class="undefined">      maxPages: 27</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>This will cause the pagination to initially render to page 4 and not allow the user to go below page 4.</p>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@input(newVal)</code></td>
<td>Triggered immediately on model value change.</td>
</tr>
<tr>
<td><code>@change(newVal)</code></td>
<td>Triggered on lazy model value change.</td>
</tr>
</tbody>
</table>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><h3 id="With-buttons"><a href="#With-buttons" class="headerlink" title="With buttons"></a>With buttons</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-pagination</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"page"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:min</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max</span>=<span class="string">"6"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="With-inputbox"><a href="#With-inputbox" class="headerlink" title="With inputbox"></a>With inputbox</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-pagination</span></span></span><br><span class="line"><span class="tag">  <span class="attr">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"page"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:min</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max</span>=<span class="string">"6"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="With-maximum-number-of-links-amp-custom-color"><a href="#With-maximum-number-of-links-amp-custom-color" class="headerlink" title="With maximum number of links &amp; custom color"></a>With maximum number of links &amp; custom color</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-pagination</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"page2"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:min</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max</span>=<span class="string">"15"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max-pages</span>=<span class="string">"6"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="With-no-ellipses"><a href="#With-no-ellipses" class="headerlink" title="With no ellipses"></a>With no ellipses</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-pagination</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"page2"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"amber"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">text-color</span>=<span class="string">"black"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:min</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max</span>=<span class="string">"15"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max-pages</span>=<span class="string">"6"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:ellipses</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="With-boundary-links"><a href="#With-boundary-links" class="headerlink" title="With boundary links"></a>With boundary links</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-pagination</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"page2"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"purple"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:min</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max</span>=<span class="string">"15"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max-pages</span>=<span class="string">"6"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">boundary-links</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="With-direction-links"><a href="#With-direction-links" class="headerlink" title="With direction links"></a>With direction links</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-pagination</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"page2"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"teal"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:min</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max</span>=<span class="string">"15"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max-pages</span>=<span class="string">"6"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">direction-links</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="With-custom-interval"><a href="#With-custom-interval" class="headerlink" title="With custom interval"></a>With custom interval</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-pagination</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"page3"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:min</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max</span>=<span class="string">"10"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Mix-and-match"><a href="#Mix-and-match" class="headerlink" title="Mix and match"></a>Mix and match</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-pagination</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"page4"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"tertiary"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:min</span>=<span class="string">"7"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max</span>=<span class="string">"18"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max-pages</span>=<span class="string">"8"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">boundary-links</span></span></span><br><span class="line"><span class="tag">  <span class="attr">direction-links</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Scroll Area]]></title>
      <url>https://quasar-framework.org/components/scroll-area.html</url>
      <content type="html"><![CDATA[<p>Quasar offers a neat way of customizing the scrollbars with the help of QScrollArea component which can encapsulate your content. Think of it as a DOM element which has <code>overflow: auto</code>, but with your own custom styled scrollbar instead of browser’s default one and a few nice features on top.</p>
<input type="hidden" data-fullpage-demo="scrolling/scroll-area">

<p>This is especially useful for desktop as scrollbars are hidden on a mobile device. When on a mobile device, QScrollArea simply wraps the content in a <code>&lt;div&gt;</code> configured for default browser scrolling.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QScrollArea'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>QScrollArea supports scrolling by user dragging the custom scrollbars or by using the mousewheel. If on a desktop that has a touch screen then scrolling will work with touch actions too.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  In this example we set a height to force</span></span><br><span class="line"><span class="comment">  custom scrollbars to appear</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-scroll-area</span> <span class="attr">style</span>=<span class="string">"width: 400px; height: 100px;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"n in 10"</span>&gt;</span></span><br><span class="line">    Lorem ipsum dolor sit amet, consectetur adipisicing</span><br><span class="line">    elit, sed do eiusmod tempor incididunt ut labore et</span><br><span class="line">    dolore magna aliqua.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-scroll-area</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>thumb-style</code></td>
<td>Object with CSS properties and values for styling the thumb of custom scrollbar.</td>
</tr>
<tr>
<td><code>content-style</code></td>
<td>Object with CSS properties and values for styling the container of QScrollArea.</td>
</tr>
<tr>
<td><code>content-active-style</code></td>
<td>Object with CSS properties and values for styling the container of QScrollArea when scroll area becomes active (is mouse hovered).</td>
</tr>
<tr>
<td><code>delay</code></td>
<td>Number (in milliseconds, default is 1000) defining a delay before custom scrollbars become visible after mouse is hovering the container.</td>
</tr>
</tbody>
</table>
<h2 id="Custom-Scrollbar-Example"><a href="#Custom-Scrollbar-Example" class="headerlink" title="Custom Scrollbar Example"></a>Custom Scrollbar Example</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Custom scrollbar thumb with a delay of</span></span><br><span class="line"><span class="comment">  1.5 seconds before appearing after hovering</span></span><br><span class="line"><span class="comment">  the mouse over the scrollable content</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-scroll-area</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">"height: 200px"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:thumb-style</span>=<span class="string">"&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">    right: '4px',</span></span></span><br><span class="line"><span class="tag"><span class="string">    borderRadius: '5px',</span></span></span><br><span class="line"><span class="tag"><span class="string">    background: 'red',</span></span></span><br><span class="line"><span class="tag"><span class="string">    width: '10px',</span></span></span><br><span class="line"><span class="tag"><span class="string">    opacity: 1</span></span></span><br><span class="line"><span class="tag"><span class="string">  &#125;"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:delay</span>=<span class="string">"1500"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  ...Scrollable.Content...</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-scroll-area</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>setScrollPosition(offset[, duration])</code></td>
<td>Set scroll position to an offset. If a duration (in milliseconds) is specified then the scroll is animated.</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Directive "v-scroll"]]></title>
      <url>https://quasar-framework.org/components/scroll-directive.html</url>
      <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/vue-scroll" target="_blank" rel="noopener">This is a Vue directive</a> which takes one parameter (a Function) and fires when user scrolls the page containing that DOM node.</p>
<p>One alternative to using this directive is to place a <a href="/components/scroll-observable.html">QScrollObservable</a> component on your page.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  directives: [<span class="string">'Scroll'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Template for VueModel below --&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-scroll</span>=<span class="string">"scrolled"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// VueModel for template above</span></span><br><span class="line">&#123;</span><br><span class="line">  ...,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...,</span><br><span class="line">    scrolled (position) &#123;</span><br><span class="line">      <span class="comment">// when this method is invoked then it means user</span></span><br><span class="line">      <span class="comment">// has scrolled the page to `position`</span></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="comment">// `position` is an Integer designating the current</span></span><br><span class="line">      <span class="comment">// scroll position in pixels.</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>IMPORTANT</strong><br>Please note that by default the method called is not debounced. For that you have to do it yourself, by wrapping your method with Quasar’s debouncer (as an example) like in example below.<br><br>As per the example below, you need to use <code>function (position) {}</code> or <code>position =&gt; {}.bind(this)</code> to be able to access the Vue component inside the debounce function.<br><br>Read more about <code>debouncing</code> <a href="/components/other-utils.html#Debounce-Function">here</a>.</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; debounce &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ...,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...,</span><br><span class="line">    scrolled: debounce(<span class="function"><span class="keyword">function</span> (<span class="params">position</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// when this method is invoked then it means user</span></span><br><span class="line">      <span class="comment">// has scrolled the Page to `position`</span></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="comment">// `position` is an Integer designating the current</span></span><br><span class="line">      <span class="comment">// scroll position in pixels.</span></span><br><span class="line">    &#125;, <span class="number">200</span>) <span class="comment">// debounce for 200ms</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>NOTE</strong><br>There is one more scrolling-related directive available called “Scroll Fire” described on its own documentation page. Read more <a href="/components/scroll-fire.html">here</a>.</p>
</blockquote>
<h2 id="Determining-Scrolling-Container"><a href="#Determining-Scrolling-Container" class="headerlink" title="Determining Scrolling Container"></a>Determining Scrolling Container</h2><p>Please read <a href="/components/scroll-observable.html#Determining-Scrolling-Container">here</a> about how Quasar determines the container to attach scrolling events to.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Scroll Observable]]></title>
      <url>https://quasar-framework.org/components/scroll-observable.html</url>
      <content type="html"><![CDATA[<p>QScrollObservable is a Quasar component that emits a <code>scroll</code> event whenever the user scrolls the page or overflowed container with <code>.scroll</code> CSS class applied to it.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QScrollObservable'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">q-scroll-observable</span> @<span class="attr">scroll</span>=<span class="string">"userHasScrolled"</span> /&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  ...,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    ...,</span></span><br><span class="line"><span class="undefined">    userHasScrolled (scroll) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(scroll)</span></span><br><span class="line"><span class="javascript">      <span class="comment">// &#123;</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//   position: 56, // pixels from top</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//   direction: 'down', // 'down' or 'up'</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//   directionChanged: false, // has direction changed since this handler was called?</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//   inflexionPosition: 56 // last scroll position where user changed scroll direction</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>debounce</code></td>
<td>Number</td>
<td>(v0.17+) Emitting the event with a custom debounce. “0” means no debounce.</td>
</tr>
</tbody>
</table>
<h2 id="Determining-Scrolling-Container"><a href="#Determining-Scrolling-Container" class="headerlink" title="Determining Scrolling Container"></a>Determining Scrolling Container</h2><p>All components or directives in Quasar have a simple algorithm to determine the container that supports the scroll: it searches for a parent DOM element which has the <code>scroll</code> Quasar CSS Helper class attached to it. If none is found, then it considers that the scrolling takes place on the document itself.</p>
<p>Components like <a href="/components/scroll-area.html">QScrollArea</a>, for example, respect this design and have the <code>scroll</code> class embedded into it, so that QScrollObservable (or any other scrolling component or directive) can succesfully detect it and attach the necessary event handlers to it.</p>
<p>Please note that simply attaching <code>scroll</code> CSS class to a DOM element or on a Vue component will have no effect if the respective element is not overflowed (example, with: CSS <code>overflow: hidden</code> and a height smaller than its inner content height).</p>
<p>Example of good container:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Quasar CSS helper 'overflow-hidden' is</span></span><br><span class="line"><span class="comment">  equivalent to style="overflow: hidden"</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"scroll overflow-hidden"</span> <span class="attr">style</span>=<span class="string">"height: 100px"</span>&gt;</span></span><br><span class="line">  ...content expanding over the 100px height from container...</span><br><span class="line">  <span class="tag">&lt;<span class="name">q-scroll-observable</span> @<span class="attr">scroll</span>=<span class="string">"scrollHandler"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- example with `v-scroll` directive --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-scroll</span>=<span class="string">"scrollHandler"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>One more example with QScrollArea:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-scroll-area</span> <span class="attr">style</span>=<span class="string">"width: 400px; height: 500px;"</span> <span class="attr">class</span>=<span class="string">"bg-yellow"</span>&gt;</span></span><br><span class="line">  ...content expanding over the 500px height from container...</span><br><span class="line">  <span class="tag">&lt;<span class="name">q-scroll-observable</span> @<span class="attr">scroll</span>=<span class="string">"scrollHandler"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-scroll-area</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Layout-Scrolling"><a href="#Layout-Scrolling" class="headerlink" title="Layout Scrolling"></a>Layout Scrolling</h2><p>When scrolling on a Layout with a Page, rather than injecting a QScrollObservable (and by so doing registering additional scroll events) you can take advantage of <a href="/components/layout.html">QLayout</a>´s <code>@scroll</code> event directly on your component defining the Layout.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-layout</span> @<span class="attr">scroll</span>=<span class="string">"scrollHandler"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Scroll Fire]]></title>
      <url>https://quasar-framework.org/components/scroll-fire.html</url>
      <content type="html"><![CDATA[<p>“Scroll Fire” is a feature that enables a method to be called (once and only once) when user scrolls current page and the DOM element (or component) that it is applied to comes into the viewport.</p>
<input type="hidden" data-fullpage-demo="scrolling/scroll-fire">

<p>For ease of use, its implementation is through a Vue Directive called <code>v-scroll-fire</code>.</p>
<blockquote>
<p><strong>NOTE</strong><br>There is also a <code>v-scroll</code> directive which fires whenever user scrolls the page, available to read <a href="/components/scroll-directive.html">here</a>..</p>
</blockquote>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  directives: [<span class="string">'ScrollFire'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Template for VueModel below --&gt;</span></span><br><span class="line">....</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-scroll-fire</span>=<span class="string">"bounceImage"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// VueModel for template above</span></span><br><span class="line">&#123;</span><br><span class="line">  ...,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    bounceImage (element) &#123;</span><br><span class="line">      <span class="comment">// in this example, when the `&lt;div&gt;` comes into view,</span></span><br><span class="line">      <span class="comment">// we bounce it for 2 seconds</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// we add helper `nimate-bounce` Quasar CSS class</span></span><br><span class="line">      element.classList.add(<span class="string">'animate-bounce'</span>)</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// we make sure the node is still in DOM</span></span><br><span class="line">        <span class="comment">// (user hasn't navigated away from the Vue component</span></span><br><span class="line">        <span class="comment">// rendering our `&lt;div&gt;`)</span></span><br><span class="line">        <span class="comment">// so we don't generate an error</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.body.contains(element)) &#123;</span><br><span class="line">          <span class="comment">// then remove the helper class to</span></span><br><span class="line">          <span class="comment">// stop bouncing</span></span><br><span class="line">          element.classList.remove(<span class="string">'animate-bounce'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>IMPORTANT</strong><br>For performance purposes, the scroll listener function injected is by default debounced by 50ms. Read more about <code>debouncing</code> <a href="/components/other-utils.html#Debounce-Function">here</a>.</p>
</blockquote>
<h2 id="Determining-Scrolling-Container"><a href="#Determining-Scrolling-Container" class="headerlink" title="Determining Scrolling Container"></a>Determining Scrolling Container</h2><p>Please read <a href="/components/scroll-observable.html#Determining-Scrolling-Container">here</a> about how Quasar determines the container to attach scrolling events to.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Search (Textfield)]]></title>
      <url>https://quasar-framework.org/components/search.html</url>
      <content type="html"><![CDATA[<p>The Search component offers the user an input field with additional features for searching purposes. For autocomplete functionality, also refer to <a href="/components/autocomplete.html">QAutocomplete</a> documentation.</p>
<input type="hidden" data-fullpage-demo="forms/search">

<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QSearch'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-search</span> <span class="attr">v-model</span>=<span class="string">"search"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which you should bind to a String or Number (depending on <code>type</code> property used) in your scope.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon to use.</td>
</tr>
<tr>
<td><code>no-icon</code></td>
<td>Boolean</td>
<td>Hide the icon</td>
</tr>
<tr>
<td><code>type</code></td>
<td>String</td>
<td>Must be one of the following: <code>text</code> (default), <code>email</code>, <code>tel</code>, <code>number</code> and <code>url</code>. This is important as it determines the keyboard type popping up on mobile devices.</td>
</tr>
<tr>
<td><code>debounce</code></td>
<td>Number</td>
<td>Number of ms to debounce input. Default is 300.</td>
</tr>
<tr>
<td><code>readonly</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, textfield is readonly and the user cannot change value.</td>
</tr>
<tr>
<td><code>clearable</code></td>
<td>Boolean</td>
<td>If used, the component offers the user an actionable icon to reset the current value to <code>clear-value</code> (which is by default an empty string). The icon appears only when the current value matches <code>clear-value</code>.</td>
</tr>
<tr>
<td><code>clear-value</code></td>
<td>String</td>
<td>The value to which to reset the field model to when using <code>clearable</code>. The default value is an empty string.</td>
</tr>
</tbody>
</table>
<p>A more involved example:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-search</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"searchModel"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:debounce</span>=<span class="string">"600"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">placeholder</span>=<span class="string">"Hotels"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">icon</span>=<span class="string">"local_hotel"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">float-label</span>=<span class="string">"What is your hotel?"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Common input field properties:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>autofocus</code></td>
<td>Boolean</td>
<td>Focus input field after rendering component.</td>
</tr>
<tr>
<td><code>placeholder</code></td>
<td>String</td>
<td>A text to be shown on textfield, mainly to explain what should be entered.</td>
</tr>
<tr>
<td><code>upper-case</code></td>
<td>Boolean</td>
<td>Transform input to upper case.</td>
</tr>
<tr>
<td><code>lower-case</code></td>
<td>Boolean</td>
<td>Transform input to lower case.</td>
</tr>
</tbody>
</table>
<p>Also note you can use the native DOM attributes of an input: “name”, “maxlength”, “autocomplete” and so on.</p>
<p>Common input frame properties:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>prefix</code></td>
<td>String</td>
<td>A text that should be shown before the textfield.</td>
</tr>
<tr>
<td><code>suffix</code></td>
<td>String</td>
<td>A text that should be shown after the textfield.</td>
</tr>
<tr>
<td><code>float-label</code></td>
<td>String</td>
<td>A text label that will “float” up above the input field, once the input field gets focus.</td>
</tr>
<tr>
<td><code>stack-label</code></td>
<td>String</td>
<td>A text label that will be shown above the input field and is static.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>inverted</code></td>
<td>Boolean</td>
<td>Inverted mode. Color is applied to background instead.</td>
</tr>
<tr>
<td><code>inverted-light</code></td>
<td>Boolean</td>
<td>Inverted mode with a light color. Color is applied to background instead.</td>
</tr>
<tr>
<td><code>hide-underline</code></td>
<td>Boolean</td>
<td>Hides the bottom border.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Is QSearch rendered on a dark background?</td>
</tr>
<tr>
<td><code>align</code></td>
<td>String</td>
<td>One of ‘left’, ‘center’ or ‘right’ which determines the text align within textfield.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, textfield is disabled and the user cannot type anything.</td>
</tr>
<tr>
<td><code>warning</code></td>
<td>Boolean</td>
<td>If set to true, the input fields colors are changed to show there is a warning.</td>
</tr>
<tr>
<td><code>error</code></td>
<td>Boolean</td>
<td>If set to true, the input fields colors are changed to show there is an error.</td>
</tr>
<tr>
<td><code>before</code></td>
<td>Array of Objects</td>
<td>Icon buttons on left side of input frame. Read below more details.</td>
</tr>
<tr>
<td><code>after</code></td>
<td>Array of Objects</td>
<td>Icon buttons on right side of input frame. Read below more details.</td>
</tr>
<tr>
<td><code>no-parent-field</code></td>
<td>Boolean</td>
<td>Avoid trying to connect to a parent QField.</td>
</tr>
</tbody>
</table>
<h3 id="Icon-buttons"><a href="#Icon-buttons" class="headerlink" title="Icon buttons"></a>Icon buttons</h3><p>This section refers to <code>before</code> and <code>after</code> properties which can add additional buttons such as icons to the textfield. Here is the structure of the two properties:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// required icon</span></span><br><span class="line">  icon: <span class="built_in">String</span>,</span><br><span class="line">  <span class="comment">// required function to call when</span></span><br><span class="line">  <span class="comment">// icon is clicked/tapped</span></span><br><span class="line">  handler: <span class="built_in">Function</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Optional. Show icon button</span></span><br><span class="line">  <span class="comment">// if model has a value</span></span><br><span class="line">  content: <span class="built_in">Boolean</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Optional. Show icon button</span></span><br><span class="line">  <span class="comment">// if textfield is marked with error</span></span><br><span class="line">  error: <span class="built_in">Boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Examples:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Show an icon button (with 'warning' as icon)</span></span><br><span class="line"><span class="comment">  when there is an error on QInput (through "error" prop)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-search</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:after</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">      icon: 'warning',</span></span></span><br><span class="line"><span class="tag"><span class="string">      error: true,</span></span></span><br><span class="line"><span class="tag"><span class="string">      handler () &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        // do something...</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">  ]"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Show an icon button (with 'attach_file' as icon)</span></span><br><span class="line"><span class="comment">  when the model has a non empty value</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-search</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:after</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">      icon: 'attach_file',</span></span></span><br><span class="line"><span class="tag"><span class="string">      content: true,</span></span></span><br><span class="line"><span class="tag"><span class="string">      handler () &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        // do something...</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">  ]"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Lazy-Input"><a href="#Lazy-Input" class="headerlink" title="Lazy Input"></a>Lazy Input</h3><p>Vue will soon supply the <code>.lazy</code> modifier for v-model on components too, but until then, you can use the longer equivalent form:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-search</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">change</span>=<span class="string">"val =&gt; &#123; model = val &#125;"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>clear()</code></td>
<td>Resets the model to an empty string.</td>
</tr>
<tr>
<td><code>clearAndFocus()</code></td>
<td>Resets the model to an empty string and gives the input focus.</td>
</tr>
<tr>
<td><code>focus()</code></td>
<td>Focused the textfield.</td>
</tr>
<tr>
<td><code>blur()</code></td>
<td>Makes textfield lose focus.</td>
</tr>
<tr>
<td><code>select()</code></td>
<td>Selects all textfield text and focuses.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@input(newVal)</code></td>
<td>Triggered immediately on model value change.</td>
</tr>
<tr>
<td><code>@change(newVal)</code></td>
<td>Triggered on lazy model value change.</td>
</tr>
<tr>
<td><code>@clear(clearVal)</code></td>
<td>Triggered when the model is cleared.</td>
</tr>
<tr>
<td><code>@focus</code></td>
<td>Triggered on focus.</td>
</tr>
<tr>
<td><code>@blur</code></td>
<td>Triggered a blur.</td>
</tr>
<tr>
<td><code>@keydown</code></td>
<td>Triggered by keydown event on textfield.</td>
</tr>
<tr>
<td><code>@keyup</code></td>
<td>Triggered by keyup event on textfield.</td>
</tr>
<tr>
<td><code>@click</code></td>
<td>Triggered by a native <code>click</code> event on textfield.</td>
</tr>
<tr>
<td><code>@paste</code></td>
<td>(v0.17.10+) Triggered by a paste event on the textfield.</td>
</tr>
</tbody>
</table>
<h3 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h3><p>Use the <code>color</code> prop with one of the Quasar colors from the <a href="/components/color-palette.html">Color Palette</a>, like <code>primary</code>, <code>secondary</code>, <code>orange-7</code>, <code>teal-2</code>:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-search</span> <span class="attr">color</span>=<span class="string">"orange"</span> <span class="attr">v-model</span>=<span class="string">"search"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>Use the <code>inverted</code> prop, to change the background of the input to the color.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-search</span> <span class="attr">inverted</span> <span class="attr">color</span>=<span class="string">"orange"</span> <span class="attr">v-model</span>=<span class="string">"search"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Error-State"><a href="#Error-State" class="headerlink" title="Error State"></a>Error State</h3><p>Use the <code>error</code> prop to show there has been an error. This will turn the component color to red.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-search</span> <span class="attr">error</span> <span class="attr">v-model</span>=<span class="string">"search"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-search</span> <span class="attr">:error</span>=<span class="string">"hasError"</span> <span class="attr">inverted</span> <span class="attr">v-model</span>=<span class="string">"search"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Disable"><a href="#Disable" class="headerlink" title="Disable"></a>Disable</h3><p>Use the <code>disable</code> prop to stop user input.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-search</span> <span class="attr">disable</span> <span class="attr">v-model</span>=<span class="string">"search"</span> <span class="attr">color</span>=<span class="string">"primary"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Usage-with-Layout"><a href="#Usage-with-Layout" class="headerlink" title="Usage with Layout"></a>Usage with Layout</h2><p>If you’d like to set search within a QToolbar on QLayout:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-layout</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    Notice we set a color for QToolbar and</span></span><br><span class="line"><span class="comment">    QSearch has "inverted" and color="none" specified.</span></span><br><span class="line"><span class="comment">    This makes QSearch use background color set by QToolbar.</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">slot</span>=<span class="string">"header"</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-search</span> <span class="attr">inverted</span> <span class="attr">color</span>=<span class="string">"none"</span> <span class="attr">v-model</span>=<span class="string">"search"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Formatting"><a href="#Formatting" class="headerlink" title="Formatting"></a>Formatting</h2><p>It is possible to add formatting to a QSearch in two ways. One is for the basic component. The other is with the QField component. Both methods offer “inverted” coloring.</p>
<h3 id="Additional-Vue-Properties"><a href="#Additional-Vue-Properties" class="headerlink" title="Additional Vue Properties"></a>Additional Vue Properties</h3><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>The color the QInput should have. The default is <code>primary</code>.</td>
</tr>
<tr>
<td><code>inverted</code></td>
<td>Boolean</td>
<td>Set to <code>true</code>, to color field’s background set by the <code>color</code> prop.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Set to true, if the field is on a dark background. It will invert the text color to make it light.</td>
</tr>
<tr>
<td><code>align</code></td>
<td>Text</td>
<td>Controls the ‘right’, ‘center’ or ‘left’ alignment of the input. The default is ‘left’.</td>
</tr>
</tbody>
</table>
<h3 id="Basic-Formatting-Examples"><a href="#Basic-Formatting-Examples" class="headerlink" title="Basic Formatting Examples"></a>Basic Formatting Examples</h3><p>This will color the field black.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-search</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">float-label</span>=<span class="string">"Colored"</span> <span class="attr">color</span>=<span class="string">"black"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>This will show an inverted colored input field in amber. Here, the text is automatically inverted to a lighter color.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-search</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">inverted</span> <span class="attr">color</span>=<span class="string">"amber"</span> <span class="attr">stack-label</span>=<span class="string">"Amber Colored Background"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Alignment"><a href="#Alignment" class="headerlink" title="Alignment"></a>Alignment</h3><p>You can also align the input to the right, center or left. The default is left. The example below will show a field for Euro currency input.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Align textfield content to the right --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-search</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">align</span>=<span class="string">"right"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Basic-Usage-with-QField"><a href="#Basic-Usage-with-QField" class="headerlink" title="Basic Usage with QField"></a>Basic Usage with QField</h3><p>It is also possible to further enhance a QInput by wrapping it in a <a href="/components/field.html">QField</a> component.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-grey-9"</span> <span class="attr">style</span>=<span class="string">"width: 500px; padding: 25px"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-field</span></span></span><br><span class="line"><span class="tag">    <span class="attr">icon</span>=<span class="string">"wifi"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">"Some Label"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:count</span>=<span class="string">"10"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">helper</span>=<span class="string">"Some helper"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:error</span>=<span class="string">"error"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">error-label</span>=<span class="string">"Some error"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-search</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">dark</span></span></span><br><span class="line"><span class="tag">      <span class="attr">inverted</span></span></span><br><span class="line"><span class="tag">      <span class="attr">color</span>=<span class="string">"black"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">float-label</span>=<span class="string">"Textfield"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The above usage of QField will show the input field within a dark grey background and an inverse white text. Notice the usage of the <code>dark</code> prop for QInput. This controls the inversion of the text color.</p>
<p>Please refer to the <a href="/components/field.html">QField documentation</a> for more info about its usage.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Scrolling Utils]]></title>
      <url>https://quasar-framework.org/components/scrolling-utils.html</url>
      <content type="html"><![CDATA[<h2 id="Determine-Scrolling-Container"><a href="#Determine-Scrolling-Container" class="headerlink" title="Determine Scrolling Container"></a>Determine Scrolling Container</h2><p>Might be worthwhile to read how this is done <a href="/components/scroll-observable.html#Determining-Scrolling-Container">here</a><br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; scroll &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"><span class="keyword">const</span> &#123; getScrollTarget &#125; = scroll</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get parent DomNode that handles page scrolling</span></span><br><span class="line"><span class="comment">// Usually this is element with classname ".layout-view" or "window"</span></span><br><span class="line">(DOM Element) getScrollTarget(DomElement)</span><br></pre></td></tr></table></figure></p>
<h2 id="Get-Set-Scroll-Position"><a href="#Get-Set-Scroll-Position" class="headerlink" title="Get/Set Scroll Position"></a>Get/Set Scroll Position</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; scroll &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"><span class="keyword">const</span> &#123; getScrollPosition, setScrollPosition &#125; = scroll</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get scroll position of a element or page. Use it in conjunction with `getScrollTarget()`</span></span><br><span class="line">(<span class="built_in">Number</span> pixels) getScrollPosition(scrollTargetDomElement)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Setting scroll position of an element or page:</span></span><br><span class="line">setScrollPosition (scrollTargetElement, offset[, duration])</span><br><span class="line"><span class="comment">// if "duration" is specified then it will animate the scrolling</span></span><br></pre></td></tr></table></figure>
<h3 id="Scrolling-to-an-element"><a href="#Scrolling-to-an-element" class="headerlink" title="Scrolling to an element"></a>Scrolling to an element</h3><p>A full example using the scroll utils to scroll to an element:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; scroll &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"><span class="keyword">const</span> &#123; getScrollTarget, setScrollPosition &#125; = scroll</span><br><span class="line"><span class="comment">// takes an element object</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scrollToElement</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> target = getScrollTarget(el)</span><br><span class="line">  <span class="keyword">let</span> offset = el.offsetTop</span><br><span class="line">  <span class="keyword">let</span> duration = <span class="number">1000</span></span><br><span class="line">  setScrollPosition(target, offset, duration)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Determine-Scroll-Height"><a href="#Determine-Scroll-Height" class="headerlink" title="Determine Scroll Height"></a>Determine Scroll Height</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; scroll &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"><span class="keyword">const</span> &#123; getScrollHeight &#125; = scroll</span><br><span class="line"></span><br><span class="line"><span class="comment">// get scrolling container inner height</span></span><br><span class="line">(<span class="built_in">Number</span>) getScrollHeight(scrollTargetDomElement)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( getScrollHeight(el) )</span><br><span class="line"><span class="comment">// 824 (it's in pixels always)</span></span><br></pre></td></tr></table></figure>
<h2 id="Determining-Scrollbar-Width"><a href="#Determining-Scrollbar-Width" class="headerlink" title="Determining Scrollbar Width"></a>Determining Scrollbar Width</h2><p>Computes the width of scrollbar in pixels.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; scroll &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"><span class="keyword">const</span> &#123; getScrollbarWidth &#125; = scroll</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getScrollbarWidth()) <span class="comment">// 16 (it's in pixels)</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Slide Transition]]></title>
      <url>https://quasar-framework.org/components/slide-transition.html</url>
      <content type="html"><![CDATA[<p>QSlideTransitions slides the DOM element (or component) up or down, based on its visibility: works alongside <code>v-show</code> and <code>v-if</code> on a single element, similar to Vue’s Transition component with the only difference being that it’s not a group transition too (it only applies to one DOM element or component).</p>
<input type="hidden" data-fullpage-demo="animation/slide-transition">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QSlideTransition'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-slide-transition</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-show</span>=<span class="string">"visible"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">"~assets/quasar.jpg"</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-slide-transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span> @<span class="attr">click</span>=<span class="string">"toggleVisibility"</span>&gt;</span></span><br><span class="line">      Toggle</span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  ...,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="undefined">    ...,</span></span><br><span class="line"><span class="javascript">    visible: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    ...,</span></span><br><span class="line"><span class="undefined">    toggleVisibility () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.visible = !<span class="keyword">this</span>.visible</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>You can also trigger the animation when rendering the component for first time (on appearance) too, by specifying the <code>appear</code> Boolean prop:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-slide-transition</span> <span class="attr">appear</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-slide-transition</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>(v0.15.13+) You can also use <code>@show</code> and <code>@hide</code> Vue events if you want to trigger something after animation is over.</p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>appear</code></td>
<td>Boolean</td>
<td>Apply animation when first rendered too.</td>
</tr>
<tr>
<td><code>duration</code></td>
<td>Number</td>
<td>(v0.17.13+) Animation duration in milliseconds. Default: 300</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Select]]></title>
      <url>https://quasar-framework.org/components/select.html</url>
      <content type="html"><![CDATA[<p>Select component has two types of selection: single selection (using Radios or Lists) or multiple selection (using Checkboxes or Toggles). This component opens up a Popover for the selection list and action. A filter can also be used for longer lists.</p>
<input type="hidden" data-fullpage-demo="forms/select">

<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QSelect'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Single Selection using Radios --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"select"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">float-label</span>=<span class="string">"Is Quasar Awesome?"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">radio</span></span></span><br><span class="line"><span class="tag">     <span class="attr">:options</span>=<span class="string">"selectOptions"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Single Selection as a simple List --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"select"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:options</span>=<span class="string">"selectOptions"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Multiple Selection using Checkboxes by default --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">      <span class="attr">multiple</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:options</span>=<span class="string">"selectOptions"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Multiple Selection using Toggles --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">      <span class="attr">multiple</span></span></span><br><span class="line"><span class="tag">      <span class="attr">toggle</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:options</span>=<span class="string">"selectOptions"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">change</span>=<span class="string">"inputChange"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Advanced Select List Object Example--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"select"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:options</span>=<span class="string">"selectAdvancedListOptions"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">      selectOptions: [</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          label: <span class="string">'Google'</span>,</span></span><br><span class="line"><span class="javascript">          value: <span class="string">'goog'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          label: <span class="string">'Facebook'</span>,</span></span><br><span class="line"><span class="javascript">          value: <span class="string">'fb'</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      ],</span></span><br><span class="line"><span class="undefined">      selectAdvancedListOptions: [</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          label: <span class="string">'Google'</span>,</span></span><br><span class="line"><span class="javascript">          icon: <span class="string">'search'</span>,</span></span><br><span class="line"><span class="javascript">          value: <span class="string">'goog'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          label: <span class="string">'Facebook'</span>,</span></span><br><span class="line"><span class="javascript">          inset: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">          sublabel: <span class="string">'Enables communication'</span>,</span></span><br><span class="line"><span class="javascript">          value: <span class="string">'fb'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          label: <span class="string">'Oracle'</span>,</span></span><br><span class="line"><span class="javascript">          sublabel: <span class="string">'Some Java for today?'</span>,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">          icon: <span class="string">'mail'</span>,</span></span><br><span class="line"><span class="javascript">          leftColor: <span class="string">'secondary'</span>, <span class="comment">// color for left side, whatever it is (icon, letter, ...)</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">          rightIcon: <span class="string">'alarm'</span>,</span></span><br><span class="line"><span class="javascript">          rightColor: <span class="string">'negative'</span>, <span class="comment">// color for right side, whatever it is (icon, letter, ...)</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">          value: <span class="string">'ora'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          label: <span class="string">'Apple Inc.'</span>,</span></span><br><span class="line"><span class="javascript">          inset: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">          stamp: <span class="string">'10 min'</span>,</span></span><br><span class="line"><span class="javascript">          value: <span class="string">'appl'</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      ]</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>IMPORTANT</strong><br><strong>Starting with Quasar v0.17.10+, please make sure the labels are sanitized, otherwise your app might be a target for XSS attacks.</strong></p>
</blockquote>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which should be the String for single selection and Array for multiple selection.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>options</code></td>
<td>Array</td>
<td>(<strong>Required</strong>) A list of objects to present as the selection’s options. See below for the data format for the array.</td>
</tr>
<tr>
<td><code>multiple</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, multiple selections will be allowed.</td>
</tr>
<tr>
<td><code>radio</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the selection will be through radios. For single selection only.</td>
</tr>
<tr>
<td><code>toggle</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the selection options will offer a toggle to select them.</td>
</tr>
<tr>
<td><code>chips</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the selections will appear as chips (instead of comma separated strings) on the input frame (works for multiple selection only).</td>
</tr>
<tr>
<td><code>chips-color</code></td>
<td>String</td>
<td>Override default children chips text color.</td>
</tr>
<tr>
<td><code>chips-bg-color</code></td>
<td>String</td>
<td>Override default children chips background color.</td>
</tr>
<tr>
<td><code>readonly</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, select is readonly and the user cannot change model.</td>
</tr>
<tr>
<td><code>filter</code></td>
<td>Boolean/Function(terms,obj)</td>
<td>If set to <code>true</code> or supplying a filter function, the selections will offer an input to filter the selection options.</td>
</tr>
<tr>
<td><code>autofocus-filter</code></td>
<td>Boolean</td>
<td>Auto-focus on the filter input field (if available) when opening selection.</td>
</tr>
<tr>
<td><code>filter-placeholder</code></td>
<td>String</td>
<td>A text to show in the filter input field. Default is “Filter”.</td>
</tr>
<tr>
<td><code>separator</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the selection options will be separated by a line.</td>
</tr>
<tr>
<td><code>display-value</code></td>
<td>String</td>
<td>Overrides text displayed in input frame. See “Working with Display Value” section below.</td>
</tr>
<tr>
<td><code>placeholder</code></td>
<td>String</td>
<td>Placeholder text.</td>
</tr>
<tr>
<td><code>clearable</code></td>
<td>Boolean</td>
<td>If used, the component offers the user an actionable icon to reset the current value to <code>clear-value</code> (which is by default <code>null</code> for single selection and <code>[]</code> for multiple selection). The icon appears only when the current value matches <code>clear-value</code>.</td>
</tr>
<tr>
<td><code>clear-value</code></td>
<td>String</td>
<td>The value to which to reset the field model to when using <code>clearable</code>. The default value is <code>null</code> for single selection and <code>[]</code> for a multiple selection.</td>
</tr>
<tr>
<td><code>no-icon</code></td>
<td>Boolean</td>
<td>Use no icon on left side</td>
</tr>
<tr>
<td><code>popup-max-height</code></td>
<td>String</td>
<td>(v0.17.13+) Maximum height of popup described in CSS units.</td>
</tr>
<tr>
<td><code>popup-cover</code></td>
<td>Boolean</td>
<td>(v0.17.19+) Popup should cover the QSelect when opened. Default: true</td>
</tr>
</tbody>
</table>
<p>Common input frame properties:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>prefix</code></td>
<td>String</td>
<td>A text that should be shown before the textfield.</td>
</tr>
<tr>
<td><code>suffix</code></td>
<td>String</td>
<td>A text that should be shown after the textfield.</td>
</tr>
<tr>
<td><code>float-label</code></td>
<td>String</td>
<td>A text label that will “float” up above the input field, once the input field gets focus.</td>
</tr>
<tr>
<td><code>stack-label</code></td>
<td>String</td>
<td>A text label that will be shown above the input field and is static.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>inverted</code></td>
<td>Boolean</td>
<td>Inverted mode. Color is applied to background instead.</td>
</tr>
<tr>
<td><code>inverted-light</code></td>
<td>Boolean</td>
<td>Inverted mode with a light color. Color is applied to background instead.</td>
</tr>
<tr>
<td><code>hide-underline</code></td>
<td>Boolean</td>
<td>Hides the bottom border.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Is it rendered on a dark background?</td>
</tr>
<tr>
<td><code>align</code></td>
<td>String</td>
<td>One of ‘left’, ‘center’ or ‘right’ which determines the text align within the textfield.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the field is disabled and the user cannot select anything.</td>
</tr>
<tr>
<td><code>warning</code></td>
<td>Boolean</td>
<td>If set to true, the component colors are changed to show there is a warning.</td>
</tr>
<tr>
<td><code>error</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the input field’s colors are changed to show there is an error.</td>
</tr>
<tr>
<td><code>before</code></td>
<td>Array of Objects</td>
<td>Icon buttons positioned on the left side of field.</td>
</tr>
<tr>
<td><code>after</code></td>
<td>Array of Objects</td>
<td>Icon buttons on the right side of the field.</td>
</tr>
<tr>
<td><code>no-parent-field</code></td>
<td>Boolean</td>
<td>Avoid trying to connect to a parent QField.</td>
</tr>
</tbody>
</table>
<h3 id="Icon-buttons"><a href="#Icon-buttons" class="headerlink" title="Icon buttons"></a>Icon buttons</h3><p>This section refers to <code>before</code> and <code>after</code> properties which can add additional buttons as icons to the textfield. Here is the structure of the two properties:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// required icon</span></span><br><span class="line">  icon: <span class="built_in">String</span>,</span><br><span class="line">  <span class="comment">// required function to call when</span></span><br><span class="line">  <span class="comment">// icon is clicked/tapped</span></span><br><span class="line">  handler: <span class="built_in">Function</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Optional. Show icon button</span></span><br><span class="line">  <span class="comment">// if model has a value</span></span><br><span class="line">  content: <span class="built_in">Boolean</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Optional. Show icon button</span></span><br><span class="line">  <span class="comment">// if textfield is marked with error</span></span><br><span class="line">  error: <span class="built_in">Boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Examples:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Show an icon button (with 'warning' as icon)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"selection"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:options</span>=<span class="string">"selectListOptions"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:after</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">      icon: 'warning',</span></span></span><br><span class="line"><span class="tag"><span class="string">      handler () &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        // do something...</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">  ]"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Show an icon button (with 'arrow_forward' as icon)</span></span><br><span class="line"><span class="comment">  when the model has a non empty value (like something has</span></span><br><span class="line"><span class="comment">  been selected).</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"selection"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:options</span>=<span class="string">"selectListOptions"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:after</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">      icon: 'arrow_forward',</span></span></span><br><span class="line"><span class="tag"><span class="string">      content: true,</span></span></span><br><span class="line"><span class="tag"><span class="string">      handler () &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        // do something...</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">  ]"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Selection-Types"><a href="#Selection-Types" class="headerlink" title="Selection Types"></a>Selection Types</h3><p>You have a number of possible selection types to choose from. They are straight text with optional icons and stamp values, radios, checkboxes, and toggles. Text is default for single selections and checkboxes are default for multiple selections.</p>
<p>Use the <code>radio</code> prop for single selections. These checkboxes are inserted where the icons would be, so you cannot have icons and checkboxes for multiple selections. If you still want icons with your multiple selections, use the <code>toggle</code> prop. This would, however, replace the stamp option.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Radios for single selections --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">  <span class="attr">radio</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"select"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">float-label</span>=<span class="string">"Gogu"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:options</span>=<span class="string">"selectListOptions"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Toggles for Multiple Selection --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">  <span class="attr">toggle</span></span></span><br><span class="line"><span class="tag">  <span class="attr">multiple</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">:options</span>=<span class="string">"selectListOptions"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="The-Options-Array-Format"><a href="#The-Options-Array-Format" class="headerlink" title="The Options Array Format"></a>The Options Array Format</h3><p>Below are examples of the array of options you must use to create the selection options:</p>
<p>Select options object:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">selectOptions: [</span><br><span class="line">  &#123;</span><br><span class="line">    label: <span class="string">'Google'</span>,</span><br><span class="line">    value: <span class="string">'goog'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    label: <span class="string">'Facebook'</span>,</span><br><span class="line">    value: <span class="string">'fb'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>More advanced select list object example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">selectListOptions: [</span><br><span class="line">  &#123;</span><br><span class="line">    label: <span class="string">'Google'</span>,</span><br><span class="line">    icon: <span class="string">'search'</span>,</span><br><span class="line">    value: <span class="string">'goog'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    label: <span class="string">'Facebook'</span>,</span><br><span class="line">    inset: <span class="literal">true</span>,</span><br><span class="line">    sublabel: <span class="string">'Enables communication'</span>,</span><br><span class="line">    value: <span class="string">'fb'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    label: <span class="string">'Oracle'</span>,</span><br><span class="line">    sublabel: <span class="string">'Some Java for today?'</span>,</span><br><span class="line"></span><br><span class="line">    icon: <span class="string">'mail'</span>,</span><br><span class="line">    leftColor: <span class="string">'secondary'</span>, <span class="comment">// color for left side, whatever it is (icon, letter, ...)</span></span><br><span class="line"></span><br><span class="line">    rightIcon: <span class="string">'alarm'</span>,</span><br><span class="line">    rightColor: <span class="string">'negative'</span>, <span class="comment">// color for right side, whatever it is (icon, letter, ...)</span></span><br><span class="line"></span><br><span class="line">    value: <span class="string">'ora'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    label: <span class="string">'Apple Inc.'</span>,</span><br><span class="line">    inset: <span class="literal">true</span>,</span><br><span class="line">    stamp: <span class="string">'10 min'</span>,</span><br><span class="line">    value: <span class="string">'appl'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note</strong><br>Set “inset” to <code>true</code>, instead of an icon, so the label text is properly aligned with the other options that use icons or avatars.</p>
</blockquote>
<p>Use an Object for each option like above (notice that it uses some properties from <a href="/components/lists-and-list-items.html">List and List Items</a> components, like “label”, “sublabel”, “stamp”, “icon”, “rightIcon” and so on. Here is the full list of properties that can be used for each option:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>leftColor</code></td>
<td>String</td>
<td>Color for left side from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon on the left to use.</td>
</tr>
<tr>
<td><code>avatar</code></td>
<td>String</td>
<td>URL pointing to statics for an avatar.</td>
</tr>
<tr>
<td><code>letter</code></td>
<td>String</td>
<td>One character String.</td>
</tr>
<tr>
<td><code>leftInverted</code></td>
<td>Boolean</td>
<td>Invert mode, but only for icon and letter.</td>
</tr>
<tr>
<td><code>leftTextColor</code></td>
<td>String</td>
<td>Override default “white” text-color when using an icon or letter only.</td>
</tr>
<tr>
<td><code>image</code></td>
<td>String</td>
<td>URL pointing to statics for an image.</td>
</tr>
<tr>
<td><code>label</code></td>
<td>String</td>
<td>Main label of the selection.</td>
</tr>
<tr>
<td><code>sublabel</code></td>
<td>String</td>
<td>Sub-label of the selection.</td>
</tr>
<tr>
<td><code>labelLines</code></td>
<td>String/Number</td>
<td>Number of lines that label can expand to.</td>
</tr>
<tr>
<td><code>sublabelLines</code></td>
<td>String/Number</td>
<td>Number of lines that the sublabel can expand to.</td>
</tr>
<tr>
<td><code>inset</code></td>
<td>Boolean</td>
<td>Inset Label if no left-side is specified (no icon, avatar, letter or image).</td>
</tr>
<tr>
<td><code>rightColor</code></td>
<td>String</td>
<td>Color for right side from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>rightIcon</code></td>
<td>String</td>
<td>Icon on the right to use.</td>
</tr>
<tr>
<td><code>rightAvatar</code></td>
<td>String</td>
<td>URL pointing to statics for an avatar on right side.</td>
</tr>
<tr>
<td><code>rightLetter</code></td>
<td>String</td>
<td>One character String for right side.</td>
</tr>
<tr>
<td><code>rightImage</code></td>
<td>String</td>
<td>URL pointing to statics for an image on right side.</td>
</tr>
<tr>
<td><code>rightInverted</code></td>
<td>Boolean</td>
<td>Invert mode, but only for icon and letter.</td>
</tr>
<tr>
<td><code>rightTextColor</code></td>
<td>String</td>
<td>Override default “white” text-color when using an icon or letter only.</td>
</tr>
<tr>
<td><code>stamp</code></td>
<td>String</td>
<td>Stamp to use for right side. Example: ‘10 min ago’.</td>
</tr>
<tr>
<td><code>className</code></td>
<td>String</td>
<td>Class to be added to options to enable custom styling</td>
</tr>
</tbody>
</table>
<h3 id="Working-with-Display-Value"><a href="#Working-with-Display-Value" class="headerlink" title="Working with Display Value"></a>Working with Display Value</h3><p>If for some reason you want to have total control over the text in the input frame (replacing the comma delimited option strings), then use <code>display-value</code> property:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:display-value</span>=<span class="string">"`$&#123; multipleSelect.length &#125; item$&#123; multipleSelect.length !== 1 ? 's' : '' &#125; selected`"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">multiple</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">float-label</span>=<span class="string">"Select a company"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:options</span>=<span class="string">"selectLongListOptions"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<p>For a more elegant solution (and more efficient too), use a computed property:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Notice "display-value" is binded to "text" variable --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:display-value</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">multiple</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">float-label</span>=<span class="string">"Select a company"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:options</span>=<span class="string">"selectLongListOptions"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      multipleSelect: <span class="comment">/* value */</span>,</span></span><br><span class="line"><span class="javascript">      selectOptions: <span class="comment">/* options */</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  computed: &#123;</span></span><br><span class="line"><span class="undefined">    text () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// in this example we want to show how many items are selected,</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// so we need to check model (multipleSelect) length</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.multipleSelect.length&#125;</span> item<span class="subst">$&#123;<span class="keyword">this</span>.multipleSelect.length &gt; <span class="number">1</span> ? <span class="string">'s'</span> : <span class="string">''</span>&#125;</span> selected`</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Lazy-Input"><a href="#Lazy-Input" class="headerlink" title="Lazy Input"></a>Lazy Input</h3><p>Vue will soon supply the <code>.lazy</code> modifier for v-model on components too, but until then, you can use the longer equivalent form:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">change</span>=<span class="string">"val =&gt; &#123; model = val &#125;"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:options</span>=<span class="string">"selectOptions"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>show()</code></td>
<td>Opens the Popover</td>
</tr>
<tr>
<td><code>hide()</code></td>
<td>Closes the Popover</td>
</tr>
<tr>
<td><code>clear()</code></td>
<td>Resets the model to an empty string.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@input(newVal)</code></td>
<td>Triggered immediately on model value change.</td>
</tr>
<tr>
<td><code>@change(newVal)</code></td>
<td>Triggered on lazy model value change.</td>
</tr>
<tr>
<td><code>@clear(clearVal)</code></td>
<td>Triggered when the model is cleared.</td>
</tr>
<tr>
<td><code>@focus</code></td>
<td>Triggered when the field gets focus.</td>
</tr>
<tr>
<td><code>@blur</code></td>
<td>Triggered when the field loses focus.</td>
</tr>
</tbody>
</table>
<h2 id="More-Examples"><a href="#More-Examples" class="headerlink" title="More Examples"></a>More Examples</h2><h3 id="Error-State"><a href="#Error-State" class="headerlink" title="Error State"></a>Error State</h3><p>Use the <code>error</code> prop, to change the color of the component to red:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">  <span class="attr">error</span></span></span><br><span class="line"><span class="tag">  <span class="attr">multiple</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:options</span>=<span class="string">"selectOptions"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Disable"><a href="#Disable" class="headerlink" title="Disable"></a>Disable</h3><p>Use the <code>disable</code> prop, to stop access to the field.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Disabled state --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">  <span class="attr">disable</span></span></span><br><span class="line"><span class="tag">  <span class="attr">float-label</span>=<span class="string">"Disabled Select"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">multiple</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:options</span>=<span class="string">"selectOptions"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Labeling"><a href="#Labeling" class="headerlink" title="Labeling"></a>Labeling</h3><p>As with any input, you have two options for labels. Stack and Floating. Unless you wrap it with a QField which has its own label.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Floating Label --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">  <span class="attr">float-label</span>=<span class="string">"This Label Floats"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">multiple</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:options</span>=<span class="string">"selectOptions"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Stack Label --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">  <span class="attr">static-label</span>=<span class="string">"Company"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">multiple</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:options</span>=<span class="string">"selectOptions"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h3><p>Use the <code>color</code>, <code>inverted</code> and <code>frame-color</code> props to control the coloring of the component.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Color --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"amber"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"select"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:options</span>=<span class="string">"selectListOptions"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Inverted Color --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">  <span class="attr">inverted</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"select"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:options</span>=<span class="string">"selectListOptions"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  With custom colors for Chips.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"amber"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">chips-color</span>=<span class="string">"yellow"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">chips-bg-color</span>=<span class="string">"black"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">inverted-light</span></span></span><br><span class="line"><span class="tag">  <span class="attr">multiple</span></span></span><br><span class="line"><span class="tag">  <span class="attr">chips</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:options</span>=<span class="string">"selectListOptions"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">float-label</span>=<span class="string">"Some label"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>Note</strong><br>The optional <code>frame-color</code> prop is useful when using chips as selected values, so the chips stand out from the background color.</p>
</blockquote>
<h3 id="Usage-Inside-of-a-List"><a href="#Usage-Inside-of-a-List" class="headerlink" title="Usage Inside of a List"></a>Usage Inside of a List</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Single Selection<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"supervisor_account"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"no-margin"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">"select"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:options</span>=<span class="string">"selectOptions"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Multiple Selection<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"supervisor_account"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">        <span class="attr">multiple</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"no-margin"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:options</span>=<span class="string">"selectOptions"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spinners]]></title>
      <url>https://quasar-framework.org/components/spinner.html</url>
      <content type="html"><![CDATA[<p>A Spinner is used to show the user a timely process is currently taking place. It is an important UX feature, which gives the user the feeling the system is continuing to work for longer term activities, like grabbing data from the server or some heavy calculations.</p>
<input type="hidden" data-fullpage-demo="progress/spinner">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [</span><br><span class="line">    <span class="string">'QSpinner'</span>,</span><br><span class="line">    <span class="string">'QSpinnerAudio'</span>,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Default platform spinner--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-spinner</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Spinner with options --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-spinner</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">:size</span>=<span class="string">"30"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-spinner</span> <span class="attr">color</span>=<span class="string">"teal-4"</span> <span class="attr">size</span>=<span class="string">"40px"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Alternatively, you can set CSS colo prop on</span></span><br><span class="line"><span class="comment">  a container or directly with `style` attribute on spinner</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-spinner</span> <span class="attr">style</span>=<span class="string">"color: #e2aa6f"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>size</code></td>
<td>Number / String</td>
<td>Number (defining the size in pixels) or String (CSS size with unit).</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>CSS color from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
</tbody>
</table>
<p>You can change the spinner’s size without a loss of quality, because SVGs are used.</p>
<h2 id="Using-Specific-Spinners"><a href="#Using-Specific-Spinners" class="headerlink" title="Using Specific Spinners"></a>Using Specific Spinners</h2><p>If you’d like to use a different spinner than the default, use a specific spinner component, which inherits the <a href="#Vue-Properties">same props as specified above</a>.</p>
<p>The following specific spinners components are available. The name of these components is <code>q-spinner-*name*</code>, where <code>name</code> is one of ‘audio’, ‘ball’, ‘bars’, ‘circles’, ‘comment’, ‘cube’, ‘dots’, ‘grid’, ‘hearts’, ‘ios’, ‘mat’, ‘oval’, ‘puff’, ‘rings’, ‘tail’, ‘facebook’, ‘gears’, ‘hourglass’, ‘infinity’, ‘pie’, ‘radio’.</p>
<p>Example:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Specific spinner icon --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-spinner-audio</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Specific spinner icon with options --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-spinner-audio</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">:size</span>=<span class="string">"30"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note</strong><br>Having to use an extra component to identify specific spinners might seem like extra work, however, the goal is to be able to remove all other spinner components in your final build, in order to keep the overall package size of your application down to a minimum.</p>
</blockquote>
<p>The spinners are used in components such as the <a href="/components/inner-loading.html">QInnerLoading</a> and <a href="/components/button.html">QBtn</a> components or within the <a href="/components/loading.html">Loading</a> feature, just to name a few examples.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Slider]]></title>
      <url>https://quasar-framework.org/components/slider.html</url>
      <content type="html"><![CDATA[<p>Quasar Slider is a great way to make the user specify a number value between a minimum and maximum value, with optional steps between valid values. The slider also has a focus indicator (highlighted slider button), which allows for keyboard adjustments of the slider. </p>
<input type="hidden" data-fullpage-demo="forms/slider">

<p>Also check its “sibling”, the <a href="/components/range.html">Range</a> component.<br>Remember you can use QSlider wrapped by a <a href="/components/field.html">QField</a> too.</p>
<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QSlider'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-slider</span> <span class="attr">v-model</span>=<span class="string">"selectedValue"</span> <span class="attr">:min</span>=<span class="string">"1"</span> <span class="attr">:max</span>=<span class="string">"7"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>Example with <code>step</code>, <code>label</code> and <code>snap</code>:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-slider</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"selectedValue"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:min</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max</span>=<span class="string">"10"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:step</span>=<span class="string">"2"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span></span></span><br><span class="line"><span class="tag">  <span class="attr">snap</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Example with square slider button:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-slider</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"selectedValue"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:min</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max</span>=<span class="string">"10"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">square</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which should be binded to a Number in your scope.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>min</code></td>
<td>Number</td>
<td>Minimum value of the model. Default is 1.</td>
</tr>
<tr>
<td><code>max</code></td>
<td>Number</td>
<td>Maximum value of the model. Default is 5.</td>
</tr>
<tr>
<td><code>label</code></td>
<td>Boolean</td>
<td>Popup a label when user clicks/taps on the Range and moves it.</td>
</tr>
<tr>
<td><code>label-always</code></td>
<td>Boolean</td>
<td>Always display the label.</td>
</tr>
<tr>
<td><code>label-value</code></td>
<td>String</td>
<td>Override default label value.</td>
</tr>
<tr>
<td><code>fill-handle-always</code></td>
<td>Boolean</td>
<td>Fill handle even if at minimum value.</td>
</tr>
<tr>
<td><code>step</code></td>
<td>Number</td>
<td>Specify step amount between valid values.</td>
</tr>
<tr>
<td><code>decimals</code></td>
<td>Number</td>
<td>Specify maximum number of decimals.</td>
</tr>
<tr>
<td><code>snap</code></td>
<td>Boolean</td>
<td>Range handler will snap on values, rather than sliding freely; good to use along <code>step</code>; also displays step markers on the Range.</td>
</tr>
<tr>
<td><code>markers</code></td>
<td>Boolean</td>
<td>Display markers on background, one for each possible value for the model.</td>
</tr>
<tr>
<td><code>square</code></td>
<td>Boolean</td>
<td>When <code>true</code>. the slider button is square instead of round.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One of <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>error</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the slider is turned red.</td>
</tr>
<tr>
<td><code>warning</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the slider is turned yellowish.</td>
</tr>
<tr>
<td><code>readonly</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the user cannot change model value.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the user cannot change model value.</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>IMPORTANT</strong><br>Make sure you choose the <code>min</code>, <code>max</code> and <code>step</code> value correctly. <code>step</code> must be a divisor of <code>max - min</code>, otherwise the component won’t work right. This is because all valid steps must be able to hold an equal position within the <code>min</code> and <code>max</code> values.</p>
</blockquote>
<h3 id="Overriding-Label"><a href="#Overriding-Label" class="headerlink" title="Overriding Label"></a>Overriding Label</h3><p>In the example below we add a “px” suffix to the label.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-slider</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label-always</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:min</span>=<span class="string">"-20"</span> <span class="attr">:max</span>=<span class="string">"20"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:label-value</span>=<span class="string">"`$&#123;model&#125;px`"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Lazy-Input"><a href="#Lazy-Input" class="headerlink" title="Lazy Input"></a>Lazy Input</h3><p>Vue will soon supply the <code>.lazy</code> modifier for v-model on components too, but until then, you can use the longer equivalent form:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-slider</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">change</span>=<span class="string">"val =&gt; &#123; model = val &#125;"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"20"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h3><p>Use one of the Quasar colors from the Color Palette with the <code>color</code> prop, like <code>primary</code>, <code>secondary</code>, <code>orange-8</code>, <code>teal-4</code>:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-slider</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"orange"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"standalone"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:min</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:max</span>=<span class="string">"50"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@input(newVal)</code></td>
<td>Triggered immediately on model value change.</td>
</tr>
<tr>
<td><code>@change(newVal)</code></td>
<td>Triggered on lazy model value change.</td>
</tr>
</tbody>
</table>
<h2 id="Usage-Inside-of-a-List"><a href="#Usage-Inside-of-a-List" class="headerlink" title="Usage Inside of a List"></a>Usage Inside of a List</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"volume_up"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-slider</span> <span class="attr">v-model</span>=<span class="string">"standalone"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"50"</span> <span class="attr">label</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"brightness_medium"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-slider</span> <span class="attr">v-model</span>=<span class="string">"standalone"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"50"</span> <span class="attr">label</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"mic"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-slider</span> <span class="attr">v-model</span>=<span class="string">"standalone"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"50"</span> <span class="attr">label</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS Shadows (Elevation)]]></title>
      <url>https://quasar-framework.org/components/shadows.html</url>
      <content type="html"><![CDATA[<p>Simple yet effective way to add shadows to create a depth/elevation effect.<br>The shadows are in accordance to Material Design specifications (24 levels of depth).</p>
<p>Don’t forget to check the demo.</p>
<input type="hidden" data-fullpage-demo="css-helpers/shadows">

<table>
<thead>
<tr>
<th>CSS Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>no-shadow</code></td>
<td>Remove any shadow</td>
</tr>
<tr>
<td><code>inset-shadow</code></td>
<td>Set an inset shadow</td>
</tr>
<tr>
<td><code>shadow-1</code></td>
<td>Set a depth of 1</td>
</tr>
<tr>
<td><code>shadow-2</code></td>
<td>Set a depth of 2</td>
</tr>
<tr>
<td><code>shadow-N</code></td>
<td>Where <code>N</code> is an integer from 1 to 24.</td>
</tr>
<tr>
<td><code>shadow-transition</code></td>
<td>Apply a CSS transition on the shadow; best use in conjunction with <code>hoverable</code> classes</td>
</tr>
</tbody>
</table>
<p>Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shadow-1"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>The shadows above point towards the bottom of the element. If you want them to point towards the top of the element, add <code>up</code> before the number:</p>
<table>
<thead>
<tr>
<th>CSS Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>shadow-up-1</code></td>
<td>Set a depth of 1</td>
</tr>
<tr>
<td><code>shadow-up-2</code></td>
<td>Set a depth of 2</td>
</tr>
<tr>
<td><code>shadow-up-N</code></td>
<td>Where <code>N</code> is an integer from 1 to 24.</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS Spacing Classes]]></title>
      <url>https://quasar-framework.org/components/spacing.html</url>
      <content type="html"><![CDATA[<p>There are CSS classes supplied by Quasar to help you with spacing for DOM elements or components.</p>
<h2 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">q-[p|m][t|r|b|l|a|x|y]-[none|auto|xs|sm|md|lg|xl]</span><br><span class="line">    T       D                   S</span><br><span class="line"></span><br><span class="line">T - type</span><br><span class="line">  - values: p (padding), m (margin)</span><br><span class="line"></span><br><span class="line">D - direction</span><br><span class="line">  - values:</span><br><span class="line">      t (top), r (right), b (bottom), l (left),</span><br><span class="line">      a (all), x (both left &amp; right), y (both top &amp; bottom)</span><br><span class="line"></span><br><span class="line">S - size</span><br><span class="line">  - values:</span><br><span class="line">      none,</span><br><span class="line">      auto (just for margin),</span><br><span class="line">      xs (extra small),</span><br><span class="line">      sm (small),</span><br><span class="line">      md (medium),</span><br><span class="line">      lg (large),</span><br><span class="line">      xl (extra large)</span><br><span class="line"></span><br><span class="line">q-my-form - applies the default vertical margins for form controls, according to material specification.</span><br></pre></td></tr></table></figure>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- small padding in all directions --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-pa-sm"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- medium margin to top, small margin to right --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-card</span> <span class="attr">class</span>=<span class="string">"q-mt-md q-mr-sm"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Flex-Addons"><a href="#Flex-Addons" class="headerlink" title="Flex Addons"></a>Flex Addons</h2><p><em>v0.17.6+</em></p>
<p>When enabled (through <code>quasar.conf &gt; framework &gt; cssAddon: true</code>) it provides breakpoint aware versions for all spacing related CSS classes.</p>
<blockquote>
<p>Note that there will be a noticeable bump in CSS footprint when enabling it. So only do it if you really need it.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.q-(p|m)(t|r|b|l|a|x|y)-&lt;bp&gt;-(none|auto|xs|sm|md|lg|xl)</span><br><span class="line">.q-my-&lt;bp&gt;-form</span><br></pre></td></tr></table></figure>
<p>Examples: <code>q-pa-xs q-pa-sm-sm q-px-md-lg q-py-md-md</code></p>
<p>See more details about the <a href="/components/flex-css.html#Flex-Addons">Flex Addons</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Stepper]]></title>
      <url>https://quasar-framework.org/components/stepper.html</url>
      <content type="html"><![CDATA[<p>Quasar Stepper conveys progress through numbered steps. Steppers display progress through a sequence of logical and numbered steps. They may also be used for navigation. It’s usually useful when the user has to follow steps to complete a process, like in a <a href="https://en.wikipedia.org/wiki/Wizard_(software)" target="_blank" rel="noopener">wizard</a>.</p>
<input type="hidden" data-fullpage-demo="grouping/stepper">

<p>The stepper component is built from three different child components:</p>
<ul>
<li><strong>QStepper</strong> - main Stepper encapsulating component</li>
<li><strong>QStep</strong> - individual steps</li>
<li><strong>QStepperNavigation</strong> - helper for encapsulating Stepper navigation buttons (within QStep or globally for the stepper as direct child of QStepper)</li>
</ul>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [</span><br><span class="line">    <span class="string">'QStepper'</span>,</span><br><span class="line">    <span class="string">'QStep'</span>,</span><br><span class="line">    <span class="string">'QStepperNavigation'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Here’s a small example showcasing a very basic Stepper to understand how components fit together.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-stepper</span> <span class="attr">ref</span>=<span class="string">"stepper"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Step: --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-step</span> <span class="attr">default</span> <span class="attr">title</span>=<span class="string">"First Step"</span> <span class="attr">subtitle</span>=<span class="string">"Here we go"</span>&gt;</span></span><br><span class="line">    ...Step content, components, ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Step: --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-step</span> <span class="attr">title</span>=<span class="string">"Step 2"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Step: --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-step</span> <span class="attr">title</span>=<span class="string">"Step 3"</span> <span class="attr">subtitle</span>=<span class="string">"Review and submit"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    Optional.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    "Globally" available Stepper navigation which means</span></span><br><span class="line"><span class="comment">    that it will be visible regardless of the current step.</span></span><br><span class="line"><span class="comment">    If we'd put QStepperNavigation under a QStep then we'd</span></span><br><span class="line"><span class="comment">    be using it for that step only.</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-stepper-navigation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">      <span class="attr">flat</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">"$refs.stepper.previous()"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"Back"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">"$refs.stepper.next()"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"Next"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-stepper-navigation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-stepper</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>A more involved example. This one doesn’t uses QStepperNavigation as direct child of QStepper because each step has navigation configured. Notice the additional attributes on each component below. They will be detailed in next sections.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-stepper</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">ref</span>=<span class="string">"stepper"</span> <span class="attr">alternative-labels</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-step</span> <span class="attr">default</span> <span class="attr">name</span>=<span class="string">"first"</span> <span class="attr">title</span>=<span class="string">"Ad style"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"n in 10"</span>&gt;</span>Step 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Navigation for this step at the end of QStep--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-stepper-navigation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"secondary"</span> @<span class="attr">click</span>=<span class="string">"$refs.stepper.next()"</span> <span class="attr">label</span>=<span class="string">"Continue"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-stepper-navigation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-step</span> <span class="attr">error</span> <span class="attr">name</span>=<span class="string">"second"</span> <span class="attr">title</span>=<span class="string">"Custom channels"</span> <span class="attr">subtitle</span>=<span class="string">"Alert message"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"n in 10"</span>&gt;</span>Step 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-stepper-navigation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"secondary"</span> @<span class="attr">click</span>=<span class="string">"$refs.stepper.next()"</span> <span class="attr">label</span>=<span class="string">"Next"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">flat</span> @<span class="attr">click</span>=<span class="string">"$refs.stepper.previous()"</span> <span class="attr">label</span>=<span class="string">"Back"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-stepper-navigation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-step</span> <span class="attr">name</span>=<span class="string">"third"</span> <span class="attr">title</span>=<span class="string">"Get code"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"n in 3"</span>&gt;</span>Step 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-stepper-navigation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"secondary"</span> @<span class="attr">click</span>=<span class="string">"$refs.stepper.next()"</span> <span class="attr">label</span>=<span class="string">"Next"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">flat</span> @<span class="attr">click</span>=<span class="string">"$refs.stepper.previous()"</span> <span class="attr">label</span>=<span class="string">"Back"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-stepper-navigation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-step</span> <span class="attr">name</span>=<span class="string">"fifth"</span> <span class="attr">disable</span> <span class="attr">title</span>=<span class="string">"Disabled"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"n in 3"</span>&gt;</span>Step 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-stepper-navigation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"secondary"</span> @<span class="attr">click</span>=<span class="string">"$refs.stepper.next()"</span> <span class="attr">label</span>=<span class="string">"Next"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">flat</span> @<span class="attr">click</span>=<span class="string">"$refs.stepper.previous()"</span> <span class="attr">label</span>=<span class="string">"Back"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-stepper-navigation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-step</span> <span class="attr">name</span>=<span class="string">"fourth"</span> <span class="attr">title</span>=<span class="string">"Review and Finalize"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"n in 3"</span>&gt;</span>Step 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-stepper-navigation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"secondary"</span> @<span class="attr">click</span>=<span class="string">"$refs.stepper.next()"</span> <span class="attr">label</span>=<span class="string">"Next"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">flat</span> @<span class="attr">click</span>=<span class="string">"$refs.stepper.previous()"</span> <span class="attr">label</span>=<span class="string">"Back"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-stepper-navigation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-stepper</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="QStepper-Parent"><a href="#QStepper-Parent" class="headerlink" title="QStepper (Parent)"></a>QStepper (Parent)</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>Main color of Stepper, from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>vertical</code></td>
<td>Boolean</td>
<td>Set Stepper as vertical instead of default horizontal.</td>
</tr>
<tr>
<td><code>alternative-labels</code></td>
<td>Boolean</td>
<td>Use alternative labels (applies only to horizontal Stepper).</td>
</tr>
<tr>
<td><code>contractable</code></td>
<td>Boolean</td>
<td>Labels are hidden on narrow windows.</td>
</tr>
<tr>
<td><code>no-header-navigation</code></td>
<td>Boolean</td>
<td>(Quasar v0.15.7+) Disable ability to navigate to previous steps through header.</td>
</tr>
<tr>
<td><code>done-icon</code></td>
<td>String, Boolean</td>
<td>Used to change the display of the Step icon, when the step is finished. Default is the “check” icon.</td>
</tr>
<tr>
<td><code>active-icon</code></td>
<td>String, Boolean</td>
<td>Used to change the icon, when a Step is selected. Default is the “edit” icon.</td>
</tr>
<tr>
<td><code>error-icon</code></td>
<td>String / Boolean</td>
<td>Used to change the icon, when there is an error in a Step. Default is the “warning” icon.</td>
</tr>
</tbody>
</table>
<p>You can also control the current step by using <code>v-model</code> on QStep. More details in next section.</p>
<table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>goToStep(String)</code></td>
<td>Moves the user to the given Step, defined by Step’s “name” property.</td>
</tr>
<tr>
<td><code>next()</code></td>
<td>Stepper goes to the next step.</td>
</tr>
<tr>
<td><code>previous()</code></td>
<td>Stepper goes to the previous step.</td>
</tr>
<tr>
<td><code>reset()</code></td>
<td>Returns the stepper back to the first step.</td>
</tr>
</tbody>
</table>
<p>Component events:</p>
<table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@step</code></td>
<td>Emitted when navigating to another step.</td>
</tr>
</tbody>
</table>
<h3 id="Using-v-model"><a href="#Using-v-model" class="headerlink" title="Using v-model"></a>Using <code>v-model</code></h3><p>Each QStep has a <code>name</code> prop (which is optional). Use this prop along with <code>v-model</code> to control the current step.</p>
<p>The example below shows how you can use <code>v-model</code> alone to control navigation. Notice the <code>@click</code> events. If you dynamically insert/remove Steps it’s better to use a Vue reference on QStepper and call <code>next()</code> or <code>previous()</code> methods since these methods are not binded to specific Step names.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-stepper</span> <span class="attr">v-model</span>=<span class="string">"currentStep"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-step</span> <span class="attr">name</span>=<span class="string">"first"</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">      <span class="tag">&lt;<span class="name">q-stepper-navigation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">          <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">click</span>=<span class="string">"currentStep = 'second'"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">label</span>=<span class="string">"Go to Step 2"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-stepper-navigation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-step</span> <span class="attr">name</span>=<span class="string">"second"</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">      <span class="tag">&lt;<span class="name">q-stepper-navigation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">          <span class="attr">color</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">click</span>=<span class="string">"currentStep = 'first'"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">label</span>=<span class="string">"Go Back"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-stepper-navigation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-stepper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// we initialize it with first step's name</span></span></span><br><span class="line"><span class="javascript">      currentStep: <span class="string">'first'</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="QStep-Child"><a href="#QStep-Child" class="headerlink" title="QStep (Child)"></a>QStep (Child)</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>name</code></td>
<td>Number, String</td>
<td>Step name, used by QStepper’s <code>v-model</code> or <code>goToStep()</code> method.</td>
</tr>
<tr>
<td><code>default</code></td>
<td>Boolean</td>
<td>(Optional) Use it on only one Step. Becomes default selected one.</td>
</tr>
<tr>
<td><code>error</code></td>
<td>Boolean</td>
<td>Mark Step as having an error.</td>
</tr>
<tr>
<td><code>default</code></td>
<td>Boolean</td>
<td>Use on only one Step to make it be the active one by default. Previous steps will be marked as <code>done</code>. Useful when refreshing page.</td>
</tr>
<tr>
<td><code>title</code></td>
<td>String</td>
<td>Step title.</td>
</tr>
<tr>
<td><code>subtitle</code></td>
<td>String</td>
<td>Step’s additional information along the title.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Step’s icon when Step isn’t finished yet. If no <code>active-icon</code> is specified, then this icon will be used when Step is currently active too.</td>
</tr>
<tr>
<td><code>active-icon</code></td>
<td>String</td>
<td>The icon used for the Step when it’s currently active. Defaults to <code>icon</code> prop value when <code>active-icon</code> isn’t specified.</td>
</tr>
<tr>
<td><code>done-icon</code></td>
<td>String</td>
<td>The icon to use for Step when it’s finished.</td>
</tr>
<tr>
<td><code>error-icon</code></td>
<td>String</td>
<td>The icon to use for Step when it’s marked as having an error.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>Step is disabled.</td>
</tr>
<tr>
<td><code>order</code></td>
<td>Number / String</td>
<td>If you add/remove Steps dynamically, it’s good to use this prop to specify the order in which Steps should be displayed.</td>
</tr>
</tbody>
</table>
<p>Methods for this component:</p>
<table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>select()</code></td>
<td>Stepper selects this step as current one.</td>
</tr>
</tbody>
</table>
<h2 id="QStepperNavigation-Child-of-QStepper-or-QStep"><a href="#QStepperNavigation-Child-of-QStepper-or-QStep" class="headerlink" title="QStepperNavigation (Child of QStepper or QStep)"></a>QStepperNavigation (Child of QStepper or QStep)</h2><p>This component allows you to place buttons within QStepper or QStep to navigate through the steps. It is up to you to add whatever <a href="/components/button.html">buttons</a> you require.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-stepper</span> <span class="attr">ref</span>=<span class="string">"myStepper"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">q-stepper-navigation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">      <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">"$refs.myStepper.next()"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"Next"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">      <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">"$refs.myStepper.previous()"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"Back"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-stepper-navigation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-stepper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="More-Examples"><a href="#More-Examples" class="headerlink" title="More Examples"></a>More Examples</h2><h3 id="Vertical-Stepper"><a href="#Vertical-Stepper" class="headerlink" title="Vertical Stepper"></a>Vertical Stepper</h3><p>It is also possible to build a stepper, which presents itself in a vertical fashion. To do this, simply use <code>vertical</code> property on QStepper:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-stepper</span> <span class="attr">vertical</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-step</span>&gt;</span>..<span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-step</span>&gt;</span>..<span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-stepper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>When using a vertical Stepper, it doesn’t really make sense to use a “global” QStepper navigation. Instead, use navigation within each QStep.</p>
<h3 id="Displaying-Progress"><a href="#Displaying-Progress" class="headerlink" title="Displaying Progress"></a>Displaying Progress</h3><p>A common case is where you need to take an asynchronouse action (like an Ajax call) before going to next step. Make use of <a href="/components/inner-loading.html">QInnerLoading</a> component for this:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-stepper</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Steps... --&gt;</span></span><br><span class="line">  ........</span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    Create a Boolean scope variable (here it's "inProgress")</span></span><br><span class="line"><span class="comment">    and binded to "visible" prop.</span></span><br><span class="line"><span class="comment">    Then toggle it whenever you need to display</span></span><br><span class="line"><span class="comment">    that the Stepper has a background process going.</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-inner-loading</span> <span class="attr">:visible</span>=<span class="string">"inProgress"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-stepper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Specific-Steps-Order"><a href="#Specific-Steps-Order" class="headerlink" title="Specific Steps Order"></a>Specific Steps Order</h3><p>If you dynamically add/remove Steps, then you need to specify the <code>order</code> property (for ALL QSteps) so that the Stepper will know the actual order of Steps. By using <code>v-if</code> or <code>v-for</code> directives, Vue &amp; Quasar can’t ensure Steps will be registered in the order they are placed in DOM.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br>Just make sure that when you use <code>order</code> you apply it to <strong>all</strong> QSteps and don’t leave out any step without it. Either use <code>order</code> for all QSteps or don’t use it at all.</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-stepper</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Will come as second step --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-step</span> <span class="attr">:order</span>=<span class="string">"2"</span>&gt;</span>..<span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Will come as first step --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-step</span> <span class="attr">:order</span>=<span class="string">"1"</span>&gt;</span>..<span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Will come as third step --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-step</span> <span class="attr">:order</span>=<span class="string">"3"</span>&gt;</span>..<span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-stepper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The <code>order</code> property applied to all QStep doesn’t has to be strictly growing consecutively. Setting <code>order</code> as <code>10</code>, <code>100</code> and <code>52</code> will work too.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Stylus Variables]]></title>
      <url>https://quasar-framework.org/components/stylus-variables.html</url>
      <content type="html"><![CDATA[<p>Quasar CSS is a blank slate that you can easily customize and modify to fit your brand, while still following the standards of each platform. The best apps in the app stores are fully customized and Quasar makes it easy to do the same with your App.</p>
<p>Quasar is built on top of Stylus, which allows it to set some default styles for your App but makes it extremely easy for you to change the defaults in your App code.</p>
<p>Customizing a theme means overriding Stylus variables which can hold colors, sizes, border types and so on. To understand how and where to make use of the full list of variables below, read <a href="/guide/quasar-theming.html">Guide &gt; Theming</a>.</p>
<h2 id="Variables-List"><a href="#Variables-List" class="headerlink" title="Variables List"></a>Variables List</h2><!-- DO NOT WRITE ANYTHING BELOW THIS LINE -->
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tabs]]></title>
      <url>https://quasar-framework.org/components/tabs.html</url>
      <content type="html"><![CDATA[<p>Quasar Tabs are a way of displaying more information using less window real estate.<br>One common use case for this component is in Layout’s header/footer in a QToolbar. Please refer to <a href="/components/layout.html">Layouts</a> and <a href="/components/toolbar.html">Toolbar</a> for references.</p>
<input type="hidden" data-fullpage-demo="navigation/tabs/basic-tabs" data-source="navigation/tabs">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [</span><br><span class="line">    <span class="string">'QTabs'</span>,</span><br><span class="line">    <span class="string">'QTab'</span>,</span><br><span class="line">    <span class="string">'QTabPane'</span>,</span><br><span class="line">    <span class="string">'QRouteTab'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Below is a basic example of the Tabs component using many of its features.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-tabs</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Tabs - notice slot="title" --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tab</span> <span class="attr">default</span> <span class="attr">count</span>=<span class="string">"5"</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">name</span>=<span class="string">"tab-1"</span> <span class="attr">icon</span>=<span class="string">"message"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tab</span> <span class="attr">disable</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">name</span>=<span class="string">"tab-2"</span> <span class="attr">icon</span>=<span class="string">"fingerprint"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tab</span> <span class="attr">alert</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">name</span>=<span class="string">"tab-3"</span> <span class="attr">icon</span>=<span class="string">"account_box"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">name</span>=<span class="string">"tab-4"</span> <span class="attr">icon</span>=<span class="string">"accessibility"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">name</span>=<span class="string">"tab-5"</span> <span class="attr">icon</span>=<span class="string">"build"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Targets --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tab-pane</span> <span class="attr">name</span>=<span class="string">"tab-1"</span>&gt;</span>Tab One<span class="tag">&lt;/<span class="name">q-tab-pane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tab-pane</span> <span class="attr">name</span>=<span class="string">"tab-2"</span>&gt;</span>Tab Two<span class="tag">&lt;/<span class="name">q-tab-pane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tab-pane</span> <span class="attr">name</span>=<span class="string">"tab-3"</span>&gt;</span>Tab Three<span class="tag">&lt;/<span class="name">q-tab-pane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tab-pane</span> <span class="attr">name</span>=<span class="string">"tab-4"</span>&gt;</span>Tab Four<span class="tag">&lt;/<span class="name">q-tab-pane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tab-pane</span> <span class="attr">name</span>=<span class="string">"tab-5"</span>&gt;</span>Tab Five<span class="tag">&lt;/<span class="name">q-tab-pane</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-tabs</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The above example is using QTabPane component as the content container (or target container) for the tabs. There is also the ability to use Vue Router for each tab instead of targeting a QTabPane. Also, QTabPanes are optional and you can use <code>v-model</code> on QTabs. We’ll cover those features later.</p>
<blockquote>
<p>The <code>name</code> prop on QTab and QTabPane links the tab to the targets (panes).</p>
</blockquote>
<p>As you can see from the example, we have a main Tab container with (QTabs) and singular Tabs themselves with (QTab). Let’s look at the Tabs container first:</p>
<h2 id="QTabs-Container-Component"><a href="#QTabs-Container-Component" class="headerlink" title="QTabs (Container Component)"></a>QTabs (Container Component)</h2><p>Use the QTabs component to wrap your Tabs.</p>
<h3 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>animated</code></td>
<td>Boolean</td>
<td>(v0.17.10+) Animate panes when switching from one to another.</td>
</tr>
<tr>
<td><code>swipeable</code></td>
<td>Boolean</td>
<td>(v0.17.10+) Enables user to swipe on tab pane to switch to adjacent tabs.</td>
</tr>
<tr>
<td><code>align</code></td>
<td>String</td>
<td>The type of the alignment for the tabs within the tabs container. The allowed values are <code>left</code> (default), <code>center</code>, <code>right</code> or <code>justify</code>.</td>
</tr>
<tr>
<td><code>position</code></td>
<td>String</td>
<td>The screen position of the tabs. The allowed values are <code>top</code> or <code>bottom</code>.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>A Quasar standard CSS color.</td>
</tr>
<tr>
<td><code>text-color</code></td>
<td>String</td>
<td>(v0.15.7+) One from Quasar Palette to override color of text</td>
</tr>
<tr>
<td><code>inverted</code></td>
<td>Boolean</td>
<td>Set to true, to invert the tab color.</td>
</tr>
<tr>
<td><code>two-lines</code></td>
<td>Boolean</td>
<td>Set to true, should a tab’s label wrap to a second line.</td>
</tr>
<tr>
<td><code>no-pane-border</code></td>
<td>Boolean</td>
<td>Avoid drawing a border around QTabPanes.</td>
</tr>
<tr>
<td><code>glossy</code></td>
<td>Boolean</td>
<td>Apply a glossy effect</td>
</tr>
<tr>
<td><code>panes-container-class</code></td>
<td>String</td>
<td>Custom classes for tab panes container.</td>
</tr>
<tr>
<td><code>underline-color</code></td>
<td>String</td>
<td>(v0.17.11+) One from Quasar Palette to override color of the underline.</td>
</tr>
</tbody>
</table>
<p>There is support for <code>v-model</code> (which is optional). In this case, you need a Vue variable in your scope which will contain the name of the current selected tab (through <code>name</code> prop on QTab). Changing the value will also make QTabs select the according QTab.</p>
<h4 id="Basic-usage-with-v-model"><a href="#Basic-usage-with-v-model" class="headerlink" title="Basic usage with v-model:"></a>Basic usage with <code>v-model</code>:</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-tabs</span> <span class="attr">v-model</span>=<span class="string">"selectedTab"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">name</span>=<span class="string">"tab-1"</span> <span class="attr">icon</span>=<span class="string">"message"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">name</span>=<span class="string">"tab-2"</span> <span class="attr">icon</span>=<span class="string">"fingerprint"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">name</span>=<span class="string">"tab-3"</span> <span class="attr">icon</span>=<span class="string">"account_box"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      ...optional `QTabPane`s...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-tabs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span> @<span class="attr">click</span>=<span class="string">"selectThirdTab"</span>&gt;</span>Select Third Tab<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; QTabs, QTab, QBtn &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="undefined">    QTabs,</span></span><br><span class="line"><span class="undefined">    QTab,</span></span><br><span class="line"><span class="undefined">    QBtn</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// initializing for second tab to be selected by default</span></span></span><br><span class="line"><span class="javascript">      selectedTab: <span class="string">'tab-2'</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    selectThirdTab () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// we select third tab which has `name` set to 'tab-3'</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.selectedTab = <span class="string">'tab-3'</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h3><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>selectTab(name)</code></td>
<td>Set the active Tab using its name.</td>
</tr>
<tr>
<td><code>previous()</code></td>
<td>(v0.17.10+) Switch to Tab on the left of current active one.</td>
</tr>
<tr>
<td><code>next()</code></td>
<td>(v0.17.10+) Switch to Tab on the right of current active one.</td>
</tr>
<tr>
<td><code>go(offset)</code></td>
<td>(v0.17.10+) Switch to Tab + offset as current active one. <code>next()</code> is alias to <code>go(1)</code> and <code>previous()</code> is alias to <code>go(-1)</code>.</td>
</tr>
</tbody>
</table>
<h3 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h3><table>
<thead>
<tr>
<th>Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@select</code></td>
<td>Triggered when selected Tab changes.</td>
</tr>
</tbody>
</table>
<h3 id="Overflow-Behavior"><a href="#Overflow-Behavior" class="headerlink" title="Overflow Behavior"></a>Overflow Behavior</h3><p>On a desktop, if the Tabs cannot be displayed completely, the user will be offered a scroll action in the form of an opaque gradient fill. When hovered over, it turns to an arrow button. The user can press continually on the button, and the unseen Tabs will scroll by.</p>
<p>If the user is on a device with a small screen (like a phone) and all Tabs can fit on the screen, they will be automatically justify aligned and share the complete screen width. If the Tabs do not fit, then the user will also see the arrow to indicate the user can swipe through the Tabs.</p>
<h2 id="QTab-Child-Component"><a href="#QTab-Child-Component" class="headerlink" title="QTab (Child Component)"></a>QTab (Child Component)</h2><p>QTab component is used to define a title for your Tab. Can be linked to a QTabPane through <code>name</code> prop.<br>If you want to use Vue Router with a Tab (clicking on a Tab triggers a route change in your app), then please refer to QRouteTab component in next section.</p>
<blockquote>
<p><strong>IMPORTANT</strong>. Do not forget to specify <code>slot=&quot;title&quot;</code> on QTab.</p>
</blockquote>
<h3 id="Vue-Properties-1"><a href="#Vue-Properties-1" class="headerlink" title="Vue Properties"></a>Vue Properties</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>default</code></td>
<td>Boolean</td>
<td>Set to <code>true</code> on the tab which you want to be selected by default.</td>
</tr>
<tr>
<td><code>label</code></td>
<td>String</td>
<td>Label to use for the tab.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon to use for the tab.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If disabled, the user won’t be able to select the tab.</td>
</tr>
<tr>
<td><code>hidden</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, it hides the tab.</td>
</tr>
<tr>
<td><code>hide</code></td>
<td>String</td>
<td>Possible values: <code>icon</code> or <code>label</code>. On narrow screens one of the two will be hidden.</td>
</tr>
<tr>
<td><code>name</code></td>
<td>String</td>
<td>The id of the tab. Default is a uid added by Quasar.</td>
</tr>
<tr>
<td><code>alert</code></td>
<td>Boolean</td>
<td>When <code>true</code>, the tab has a red dot, which is meant to get the user’s attention.</td>
</tr>
<tr>
<td><code>count</code></td>
<td>Number, String</td>
<td>A number to indicate there is a list of unread or unseen items in the tab’s content.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>The color of the tab’s icon or text, should it be different than the default.</td>
</tr>
<tr>
<td><code>tabindex</code></td>
<td>Number</td>
<td>Accessibility; Native HTML “tabindex” attribute value for Tab.</td>
</tr>
</tbody>
</table>
<h3 id="Vue-Methods-1"><a href="#Vue-Methods-1" class="headerlink" title="Vue Methods"></a>Vue Methods</h3><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>select()</code></td>
<td>Make this Tab the selected one.</td>
</tr>
</tbody>
</table>
<h3 id="Vue-Events-1"><a href="#Vue-Events-1" class="headerlink" title="Vue Events"></a>Vue Events</h3><table>
<thead>
<tr>
<th>Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@select</code></td>
<td>Triggered when QTab gets selected.</td>
</tr>
<tr>
<td><code>@click</code></td>
<td>Triggered when user clicks/taps on Tab.</td>
</tr>
</tbody>
</table>
<h2 id="Usage-with-“v-model”"><a href="#Usage-with-“v-model”" class="headerlink" title="Usage with “v-model”"></a>Usage with “v-model”</h2><p>Best way to programmatically switch between Tabs is by using a <code>v-model</code>. Here’s another example, a little bit more complex which includes a QSelect to explain the effects of using a <code>v-model</code>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">"radio"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"tabsModel"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:options</span>=<span class="string">"tabsOptions"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">q-select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-tabs</span> <span class="attr">v-model</span>=<span class="string">"tabsModel"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tab</span> <span class="attr">name</span>=<span class="string">"xtab-1"</span> <span class="attr">icon</span>=<span class="string">"message"</span> <span class="attr">slot</span>=<span class="string">"title"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tab</span> <span class="attr">name</span>=<span class="string">"xtab-2"</span> <span class="attr">icon</span>=<span class="string">"account_box"</span> <span class="attr">slot</span>=<span class="string">"title"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tab</span> <span class="attr">name</span>=<span class="string">"xtab-3"</span> <span class="attr">icon</span>=<span class="string">"mail"</span> <span class="attr">slot</span>=<span class="string">"title"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tab-pane</span> <span class="attr">name</span>=<span class="string">"xtab-1"</span>&gt;</span>Tab One<span class="tag">&lt;/<span class="name">q-tab-pane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tab-pane</span> <span class="attr">name</span>=<span class="string">"xtab-2"</span>&gt;</span>Tab Two<span class="tag">&lt;/<span class="name">q-tab-pane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tab-pane</span> <span class="attr">name</span>=<span class="string">"xtab-3"</span>&gt;</span>Tab Three<span class="tag">&lt;/<span class="name">q-tab-pane</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-tabs</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Data for template above</span></span><br><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    tabsModel: <span class="string">'xtab-2'</span>,</span><br><span class="line">    tabsOptions: [</span><br><span class="line">      &#123;<span class="attr">label</span>: <span class="string">'Tab 1'</span>, <span class="attr">value</span>: <span class="string">'xtab-1'</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">label</span>: <span class="string">'Tab 2'</span>, <span class="attr">value</span>: <span class="string">'xtab-2'</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">label</span>: <span class="string">'Tab 3'</span>, <span class="attr">value</span>: <span class="string">'xtab-3'</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Note</strong><br>When the tabs are initially rendered, the value stored in the v-model used by your component, as with <code>tabsModel</code> above, will also indicate to the user a selected tab. If you aren’t using v-model, you can set the initially active tab with the <code>default</code> prop.</p>
<h2 id="QTabPane-Child-Component"><a href="#QTabPane-Child-Component" class="headerlink" title="QTabPane (Child Component)"></a>QTabPane (Child Component)</h2><p>The Tabs Pane component is useful, when the content of each tab is relatively small or simple. If you have complex content, you’ll propably want to use the Tabs Router Component below.</p>
<h3 id="Vue-Properties-2"><a href="#Vue-Properties-2" class="headerlink" title="Vue Properties"></a>Vue Properties</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>name</code></td>
<td>String</td>
<td><strong>Required</strong> The name of the tab and also the target id.</td>
</tr>
<tr>
<td><code>keep-alive</code></td>
<td>Boolean</td>
<td>Keeps components alive even if current selected Tab changes.</td>
</tr>
</tbody>
</table>
<blockquote>
<p>In order to show the proper content for each tab in each pane, the names of the tabs and panes should match.</p>
</blockquote>
<h2 id="QRouteTab-Child-Component"><a href="#QRouteTab-Child-Component" class="headerlink" title="QRouteTab (Child Component)"></a>QRouteTab (Child Component)</h2><p>The Tabs Router component is just like the QTab component and shares the same properties, however it also has Vue Router properties bound to it. These allow the triggering of your specific routing.</p>
<h3 id="Additional-Vue-Router-Properties"><a href="#Additional-Vue-Router-Properties" class="headerlink" title="Additional Vue Router Properties."></a>Additional Vue Router Properties.</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>to</code></td>
<td>String, Object</td>
<td>The literal path or vue-router object the tab should route to.</td>
</tr>
<tr>
<td><code>exact</code></td>
<td>Boolean</td>
<td>If true, the router will be forced into “exact match mode”</td>
</tr>
<tr>
<td><code>append</code></td>
<td>Boolean</td>
<td>If true, the to path will be appended to the current path.</td>
</tr>
<tr>
<td><code>replace</code></td>
<td>Boolean</td>
<td>If true, there will be no history of the used route.</td>
</tr>
</tbody>
</table>
<p>Please refer to <a href="http://router.vuejs.org/en/api/router-link.html" target="_blank" rel="noopener">Vue-Router Link</a> documentation to get a feeling how to use these props.</p>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Tabs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-tabs</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-route-tab</span></span></span><br><span class="line"><span class="tag">    <span class="attr">icon</span>=<span class="string">"mail"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">to</span>=<span class="string">"/mails"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">exact</span></span></span><br><span class="line"><span class="tag">    <span class="attr">slot</span>=<span class="string">"title"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-route-tab</span></span></span><br><span class="line"><span class="tag">    <span class="attr">icon</span>=<span class="string">"alarm"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">to</span>=<span class="string">"/alarms"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">exact</span></span></span><br><span class="line"><span class="tag">    <span class="attr">slot</span>=<span class="string">"title"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-tabs</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Your Tabs will be auto-selected when user navigates to the specified routes.</p>
<blockquote>
<p><strong>DO NOT</strong> use <code>v-model</code> or <code>selectTab()</code> method on QTabs if using QRouteTab.</p>
</blockquote>
<h2 id="Tabs-in-a-Layout"><a href="#Tabs-in-a-Layout" class="headerlink" title="Tabs in a Layout"></a>Tabs in a Layout</h2><p>You will, in most cases, want to use tabs within a layout component. Below is an example of how this would be done.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-layout</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout-header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-tabs</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-route-tab</span></span></span><br><span class="line"><span class="tag">        <span class="attr">icon</span>=<span class="string">"mail"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">to</span>=<span class="string">"/mails"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">exact</span></span></span><br><span class="line"><span class="tag">        <span class="attr">slot</span>=<span class="string">"title"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-route-tab</span></span></span><br><span class="line"><span class="tag">        <span class="attr">icon</span>=<span class="string">"alarm"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">to</span>=<span class="string">"/alarms"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">exact</span></span></span><br><span class="line"><span class="tag">        <span class="attr">slot</span>=<span class="string">"title"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-tabs</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout-header</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Please refer to the following documentation for more information: <a href="/components/layout.html">Quasar Layout Component</a></p>
<h2 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h2><p>Use one of the Quasar colors from the Color Palette, like “primary”, “secondary”, “orange”, “teal” or variants (“teal-4”, “orange-10”) for <code>color</code>/<code>text-color</code> properties:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Applied to all tabs: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-tabs</span> <span class="attr">color</span>=<span class="string">"orange"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-tabs</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Applied only to a specific tab.</span></span><br><span class="line"><span class="comment">  In this case you can color Tabs differently:</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">color</span>=<span class="string">"orange"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>You can also invert the colors (see demo for example) by adding the Boolean <code>inverted</code> prop (works only on QTabs and NOT on QTab or QRouteTab):</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- default color, on `inverted` color mode --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-tabs</span> <span class="attr">color</span>=<span class="string">"orange"</span> <span class="attr">inverted</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-tabs</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Example of transparent background with green text color (v0.15.7+):<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-tabs</span> <span class="attr">color</span>=<span class="string">"transparent"</span> <span class="attr">text-color</span>=<span class="string">"green"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-tabs</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Example of light color with custom text color (v0.15.7+):<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-tabs</span> <span class="attr">color</span>=<span class="string">"amber"</span> <span class="attr">text-color</span>=<span class="string">"dark"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-tabs</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Alignment-of-Tabs-in-the-Header"><a href="#Alignment-of-Tabs-in-the-Header" class="headerlink" title="Alignment of Tabs in the Header"></a>Alignment of Tabs in the Header</h2><p>By default, on large width windows the Tabs are aligned to the left. If you wish to maintain a justify alignment (filling all available space on the width), then add <code>justify</code> to the align prop:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-tabs</span> <span class="attr">align</span>=<span class="string">"justify"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-tabs</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>To align center or to the right, use <code>align=&quot;center&quot;</code> or <code>align=&quot;right&quot;</code>.</p>
<h2 id="Full-height-of-Tabs-in-the-Header"><a href="#Full-height-of-Tabs-in-the-Header" class="headerlink" title="Full height of Tabs in the Header"></a>Full height of Tabs in the Header</h2><p>By adding the class <code>q-py-none</code> to the <code>q-toolbar</code>, the tabs will take the full height:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-layout-header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">class</span>=<span class="string">"q-py-none"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"Logo"</span> <span class="attr">src</span>=<span class="string">"~assets/your-logo.png"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-tabs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">q-route-tab</span> <span class="attr">:to</span>=<span class="string">"&#123;name:'home'&#125;"</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">label</span>=<span class="string">"Home"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">q-route-tab</span> <span class="attr">:to</span>=<span class="string">"&#123;name:'user'&#125;"</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">label</span>=<span class="string">"User"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">q-tabs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-layout-header</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Timeline]]></title>
      <url>https://quasar-framework.org/components/timeline.html</url>
      <content type="html"><![CDATA[<p>A Timeline is a display of a list of events in chronological order. It is typically a graphic design showing a long bar labelled with dates alongside itself and usually events. Timelines can use any time scale, depending on the subject and data.</p>
<p>QTimeline has 3 media breakpoints (if <code>responsive</code> property is used). View on a desktop and click the “View Desktop” link on the right side, then resize the browser window to see the media breakpoints in action.</p>
<input type="hidden" data-fullpage-demo="other-components/timeline">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [</span><br><span class="line">    <span class="string">'QTimeline'</span>,</span><br><span class="line">    <span class="string">'QTimelineEntry'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-timeline</span> <span class="attr">responsive</span> <span class="attr">color</span>=<span class="string">"secondary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-timeline-entry</span> <span class="attr">heading</span>&gt;</span></span><br><span class="line">    Timeline Subject</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-timeline-entry</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-timeline-entry</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">"Event Title"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">subtitle</span>=<span class="string">"February 22, 1986"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">side</span>=<span class="string">"left"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      Lorem ipsum dolor sit amet.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-timeline-entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-timeline</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Customize-Entries-Titles-via-slots"><a href="#Customize-Entries-Titles-via-slots" class="headerlink" title="Customize Entries Titles via slots"></a>Customize Entries Titles via slots</h2><p><em>Quasar v0.17.18+</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-timeline</span> <span class="attr">responsive</span> <span class="attr">color</span>=<span class="string">"secondary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-timeline-entry</span></span></span><br><span class="line"><span class="tag">    <span class="attr">subtitle</span>=<span class="string">"April 22, 1991"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">side</span>=<span class="string">"left"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      Lorem ipsum dolor sit amet.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      Use the class q-timeline-title to stick to original styling when using slots</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">class</span>=<span class="string">"q-timeline-title"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"account_balance"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>Event<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">em</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      Use the class q-timeline-subtitle to stick to original styling when using slots</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span> <span class="attr">slot</span>=<span class="string">"subtitle"</span> <span class="attr">class</span>=<span class="string">"q-timeline-subtitle"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"warning"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>April 22,<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">em</span>&gt;</span>1991<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-timeline-entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-timeline</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="QTimeline-Parent-Vue-Properties"><a href="#QTimeline-Parent-Vue-Properties" class="headerlink" title="QTimeline (Parent) Vue Properties"></a>QTimeline (Parent) Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>responsive</code></td>
<td>Boolean</td>
<td>(v0.17.7+) Enable responsive mode</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>Color of the timeline element</td>
</tr>
<tr>
<td><code>no-hover</code></td>
<td>Boolean</td>
<td>Don’t apply any hover effects</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>When rendering on a dark background.</td>
</tr>
</tbody>
</table>
<h2 id="QTimelineEntry-Child-Vue-Properties"><a href="#QTimelineEntry-Child-Vue-Properties" class="headerlink" title="QTimelineEntry (Child) Vue Properties"></a>QTimelineEntry (Child) Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>heading</code></td>
<td>Boolean</td>
<td>Display a timeline subject which helps group timeline entries into separate chunks.</td>
</tr>
<tr>
<td><code>tag</code></td>
<td>String</td>
<td>HTML tag to use to render the timeline entry DOM element.</td>
</tr>
<tr>
<td><code>side</code></td>
<td>String</td>
<td>On wider windows, you can choose on which side to display this entry (<code>left</code> or <code>right</code>). Default is on the right side.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon to use.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>Color to use for this entry.</td>
</tr>
<tr>
<td><code>title</code></td>
<td>String</td>
<td>Title of the entry.</td>
</tr>
<tr>
<td><code>subtitle</code></td>
<td>String</td>
<td>Addition to title of the entry.</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Toggle]]></title>
      <url>https://quasar-framework.org/components/toggle.html</url>
      <content type="html"><![CDATA[<p>The Quasar Toggle component is another basic element for user input. You can use this for turning settings, features or true/ false inputs on and off.</p>
<input type="hidden" data-fullpage-demo="forms/toggle">

<p>Please also refer to the <a href="/components/option-group.html">Option Group documentation</a> on other possibilities for creating groups of Toggles.</p>
<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QToggle'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">label</span>=<span class="string">"Toggle Label"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- With no label --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- With a specific color --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">color</span>=<span class="string">"teal-8"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- With icon --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">icon</span>=<span class="string">"alarm"</span> <span class="attr">label</span>=<span class="string">"Toggle Label"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Disabled state --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">disable</span> <span class="attr">label</span>=<span class="string">"Toggle Label"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>Check “Vue Properties” for even more options.</p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which you should bind to a Boolean or Array in your scope.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>val</code></td>
<td>Object</td>
<td>Used to modify the v-model of the Toggle when using an Array as <code>v-model</code>.</td>
</tr>
<tr>
<td><code>true-value</code></td>
<td>Any</td>
<td>Gets into “true” state when model has this value.</td>
</tr>
<tr>
<td><code>false-value</code></td>
<td>Any</td>
<td>Gets into “false” state when model has this value.</td>
</tr>
<tr>
<td><code>label</code></td>
<td>String</td>
<td>The text label for the Toggle.</td>
</tr>
<tr>
<td><code>left-label</code></td>
<td>Boolean</td>
<td>Set to <code>true</code>, if the label should be placed to the left of the Toggle.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Optional icon to use. Overriden by <code>checked-icon</code> and <code>unchecked-icon</code> if the latter are used.</td>
</tr>
<tr>
<td><code>checked-icon</code></td>
<td>String</td>
<td>The icon to use, when the Toggle is checked.</td>
</tr>
<tr>
<td><code>unchecked-icon</code></td>
<td>String</td>
<td>The icon to use, when the Toggle is not checked.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>Color from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>keep-color</code></td>
<td>Boolean</td>
<td>Keep color when not truthy too.</td>
</tr>
<tr>
<td><code>readonly</code></td>
<td>Boolean</td>
<td>Set to <code>true</code>, to make the toggle read-only.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>Set to <code>true</code>, to disable the toggle.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Set to <code>true</code> when background is dark.</td>
</tr>
<tr>
<td><code>no-focus</code></td>
<td>Boolean</td>
<td>(v0.17+) Disable accessibility for this component so that it can’t receive focus.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@input(newVal)</code></td>
<td>Triggered immediately on model value change.</td>
</tr>
<tr>
<td><code>@change(newVal)</code></td>
<td>Triggered on lazy model value change.</td>
</tr>
<tr>
<td><code>@blur</code></td>
<td>Triggered, when Toggle loses focus.</td>
</tr>
<tr>
<td><code>@focus</code></td>
<td>Triggered, when Toggle gains focus.</td>
</tr>
</tbody>
</table>
<h2 id="Array-as-Model"><a href="#Array-as-Model" class="headerlink" title="Array as Model"></a>Array as Model</h2><p>If you have a number of toggles for a selection, use can also use an Array as the model object and the <code>val</code> prop for the inserted value into the Array.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"selection"</span> <span class="attr">val</span>=<span class="string">"one"</span> <span class="attr">label</span>=<span class="string">"One"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"selection"</span> <span class="attr">val</span>=<span class="string">"two"</span> <span class="attr">label</span>=<span class="string">"Two"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"selection"</span> <span class="attr">val</span>=<span class="string">"three"</span> <span class="attr">label</span>=<span class="string">"Three"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      selection: [<span class="string">'two'</span>]</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Ticking all toggles will make <code>selection</code> scope variable to be <code>[&#39;one&#39;, &#39;two&#39;, &#39;three&#39;]</code>. Unticking all toggles will result in <code>selection</code> being an empty array <code>[]</code>.</p>
<h2 id="More-Examples"><a href="#More-Examples" class="headerlink" title="More Examples"></a>More Examples</h2><p>There are a number of props, which are available to help quickly format a Toggle. An interesting feature of Toggle is the ripple effect that user sees when clicking/tapping on it to change its state.</p>
<h3 id="Custom-Model-Values"><a href="#Custom-Model-Values" class="headerlink" title="Custom Model Values"></a>Custom Model Values</h3><p>Instead of the default <code>true/false</code> values, you can use custom ones:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-toggle</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"customModel"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"Do you agree with the terms &amp; conditions?"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">true-value</span>=<span class="string">"yes"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">false-value</span>=<span class="string">"no"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Specific-State-Icons"><a href="#Specific-State-Icons" class="headerlink" title="Specific State Icons"></a>Specific State Icons</h3><p>For a more informational Toggle, you can also use the <code>checked-icon</code> and <code>unchecked-icon</code> props to display an inset icon in the toggle.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-toggle</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"checked"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">unchecked-icon</span>=<span class="string">"visibility_off"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">checked-icon</span>=<span class="string">"visibility"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"Toggle Label"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<p>Specifying <code>checked-icon</code> and <code>unchecked-icon</code> overrides <code>icon</code> property if you’ve also used it.</p>
<h3 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h3><p>Use the <code>color</code> prop to control the toggle’s color.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">color</span>=<span class="string">"orange"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">color</span>=<span class="string">"teal"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">color</span>=<span class="string">"dark"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Label-Position"><a href="#Label-Position" class="headerlink" title="Label Position"></a>Label Position</h3><p>Use the <code>left-label</code> prop, to move the label to the left of Toggle.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-toggle</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"checked"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">left-label</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"Checkbox Label"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Usage-Inside-of-a-List"><a href="#Usage-Inside-of-a-List" class="headerlink" title="Usage Inside of a List"></a>Usage Inside of a List</h3><p>In the following example we use the right side of QItems to insert Toggle, but it works anywhere.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-list</span> <span class="attr">link</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    Rendering a &lt;label&gt; tag (notice tag="label")</span></span><br><span class="line"><span class="comment">    so the whole QItem will respond to clicks to</span></span><br><span class="line"><span class="comment">    change Toggle state.</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Events and reminders<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span> <span class="attr">multiline</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Events and reminders<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Lorem ipsum<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">class</span>=<span class="string">"purple"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span> <span class="attr">multiline</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Events and reminders<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">class</span>=<span class="string">"red"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Toolbar]]></title>
      <url>https://quasar-framework.org/components/toolbar.html</url>
      <content type="html"><![CDATA[<p>A Quasar Layout can have headers and/or footers (also called “marginals”) and this is a great place to use Toolbars, but note that you can also place Toolbars anywhere else you want. One QToolbar will represent a row in your marginals, usually used for navigation buttons and a title (but not limited to only this).</p>
<input type="hidden" data-fullpage-demo="navigation/toolbar">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [</span><br><span class="line">    <span class="string">'QToolbar'</span>,</span><br><span class="line">    <span class="string">'QToolbarTitle'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    For Toolbar title, we use</span></span><br><span class="line"><span class="comment">    QToolbarTitle component</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line">    Title</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    In a Toolbar, buttons are best</span></span><br><span class="line"><span class="comment">    configured as "flat, round, dense" and with an icon,</span></span><br><span class="line"><span class="comment">    but any button will do</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">round</span> <span class="attr">dense</span> <span class="attr">icon</span>=<span class="string">"mail"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- A color "inverted" Toolbar --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">inverted</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- A color "inverted" Toolbar with custom text color --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">color</span>=<span class="string">"amber"</span> <span class="attr">text-color</span>=<span class="string">"dark"</span> <span class="attr">inverted</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- A Toolbar with a title and subtitle --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">inverted</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line">    Title</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"subtitle"</span>&gt;</span></span><br><span class="line">      Subtitle</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- A Toolbar with light color and overriden text color --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">color</span>=<span class="string">"amber"</span> <span class="attr">text-color</span>=<span class="string">"black"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- A Toolbar with transparent background and green text color --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">color</span>=<span class="string">"transparent"</span> <span class="attr">text-color</span>=<span class="string">"green"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Example on using a Toolbar on Layout header:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-layout</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">q-layout-header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">color</span>=<span class="string">"secondary"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        Toggles QLayout left side</span></span><br><span class="line"><span class="comment">        (Assuming the Drawer has a model bound to "leftSide")</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">        <span class="attr">flat</span> <span class="attr">round</span> <span class="attr">dense</span></span></span><br><span class="line"><span class="tag">        <span class="attr">icon</span>=<span class="string">"menu"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">"leftSide = !leftSide"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line">        Title</span><br><span class="line">      <span class="tag">&lt;/<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">round</span> <span class="attr">dense</span> <span class="attr">icon</span>=<span class="string">"mail"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">round</span> <span class="attr">dense</span> <span class="attr">icon</span>=<span class="string">"alarm"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-layout-header</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="QToolbar-Vue-Props"><a href="#QToolbar-Vue-Props" class="headerlink" title="QToolbar Vue Props"></a>QToolbar Vue Props</h2><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>A color from <a href="/components/color-palette.html">Quasar Color Palette</a></td>
</tr>
<tr>
<td><code>text-color</code></td>
<td>String</td>
<td>One from Quasar Palette to override color of text</td>
</tr>
<tr>
<td><code>inverted</code></td>
<td>Boolean</td>
<td>Invert color: background becomes “white” while text has <code>color</code></td>
</tr>
<tr>
<td><code>glossy</code></td>
<td>Boolean</td>
<td>Apply a glossy effect</td>
</tr>
<tr>
<td><code>shrink</code></td>
<td>Boolean</td>
<td>Check <a href="#Shrink">Shrink section</a></td>
</tr>
</tbody>
</table>
<h2 id="QToolbarTitle"><a href="#QToolbarTitle" class="headerlink" title="QToolbarTitle"></a>QToolbarTitle</h2><p>QToolbarTitle is a component used to wrap the “title” of your Toolbar. It spreads horizontally to the full real estate space it can get. If not enough space to cover the full extent of the content then ending ellipsis are used.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- A Toolbar with a title and subtitle --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">inverted</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line">    Title</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"subtitle"</span>&gt;</span></span><br><span class="line">      Subtitle</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-toolbar-title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Shrink"><a href="#Shrink" class="headerlink" title="Shrink"></a>Shrink</h3><p>By default, QToolbarTitle is set to grow to the available space. However, you can change that with the <code>shrink</code> Boolean prop:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;q-toolbar-title shrink&gt;</span><br><span class="line">  Title</span><br><span class="line">&lt;/q-toolbar-title&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tooltip]]></title>
      <url>https://quasar-framework.org/components/tooltip.html</url>
      <content type="html"><![CDATA[<p>QTooltip should be used when you want to offer the user more information about a certain area in your App. When hovering the mouse over the target element (or quickly tapping on mobile platforms), the Tooltip will appear.</p>
<p><input type="hidden" data-fullpage-demo="popups/tooltip"></p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QTooltip'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>In the example below we use a QBtn (as a target) and when hovering over it, Quasar will display some text.</p>
<p>You can replace QBtn and the QPopover content with any DOM elements or components you like.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  The target button (can be anything else)</span></span><br><span class="line"><span class="comment">  must be direct parent of QTooltip on the</span></span><br><span class="line"><span class="comment">  DOM hierarchy.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">label</span>=<span class="string">"Email"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Direct child of target --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tooltip</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      The DOM element(s) that make up the tooltip,</span></span><br><span class="line"><span class="comment">      in this case a simple text:</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    Some text as content of Tooltip</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-tooltip</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The idea is to place QTooltip inside your DOM element / component (as <strong>direct child in DOM hierarchy</strong>), when you want it to be the trigger for the QTooltip. Don’t worry about QTooltip content inheriting CSS from the container. This won’t occur, since QTooltip will be injected as a direct child of <code>&lt;body&gt;</code>.</p>
<h2 id="Toggle-through-v-model"><a href="#Toggle-through-v-model" class="headerlink" title="Toggle through v-model"></a>Toggle through v-model</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"showing = true"</span> <span class="attr">label</span>=<span class="string">"Show"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"showing = false"</span> <span class="attr">label</span>=<span class="string">"Hide"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">      <span class="tag">&lt;<span class="name">q-tooltip</span> <span class="attr">v-model</span>=<span class="string">"showing"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-tooltip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      showing: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>anchor</code></td>
<td>Object</td>
<td>String of form <code>bottom left</code> (vertical horizontal).</td>
</tr>
<tr>
<td><code>self</code></td>
<td>Object</td>
<td>String of form <code>top left</code> (vertical horizontal).</td>
</tr>
<tr>
<td><code>offset</code></td>
<td>Array of 2 Numbers</td>
<td>Offset on horizontal and vertical (in pixels). Example: <code>[18, 18]</code>.</td>
</tr>
<tr>
<td><code>max-height</code></td>
<td>String</td>
<td>Optional maximum height of Tooltip content. Example: <code>500px</code></td>
</tr>
<tr>
<td><code>delay</code></td>
<td>Number</td>
<td>Set the delay, when tooltip should appear.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>When set to <code>true</code>, Tooltip won’t be triggered.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>show()</code></td>
<td>Open Tooltip.</td>
</tr>
<tr>
<td><code>hide()</code></td>
<td>Close Tooltip.</td>
</tr>
<tr>
<td><code>toggle()</code></td>
<td>Toggle open/close state.</td>
</tr>
</tbody>
</table>
<h2 id="Handling-Positioning"><a href="#Handling-Positioning" class="headerlink" title="Handling Positioning"></a>Handling Positioning</h2><p>The position of QTooltip can be customized. It keeps account of the <code>anchor</code> and <code>self</code> optional Vue properties. Check out the demo and play with them.</p>
<p>The final position of QTooltip popup is calculated so that it will be displayed on the available screen real estate, switching to the right-side and/or top-side when necessary.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Touch/Mouse Hold Action]]></title>
      <url>https://quasar-framework.org/components/touch-hold.html</url>
      <content type="html"><![CDATA[<p>Quasar offers full-featured Vue directives that can totally replace libraries like Hammerjs: <code>v-touch-pan</code>, <code>v-touch-swipe</code> and <code>v-touch-hold</code>.</p>
<blockquote>
<p><strong>These directives also work with mouse events, not only touch events</strong>, so you are able to build cool functionality for your App on desktops too.</p>
</blockquote>
<p>We will be describing <code>v-touch-hold</code> on the lines below.</p>
<input type="hidden" data-fullpage-demo="touch-directives/touch-hold">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  directives: [<span class="string">'TouchHold'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-touch-hold</span>=<span class="string">"handler"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>“<code>handler</code>“ is a Function which receives an Object as parameter.<br>Please note that the default “hold” duration is 600ms. This means that your <code>handler</code> function will run after 600ms.</p>
<h2 id="Handler-Parameter"><a href="#Handler-Parameter" class="headerlink" title="Handler Parameter"></a>Handler Parameter</h2><p>The <code>handler</code> function/method is called by the directive when user taps/clicks and holds on the DOM element and it receives the following parameter:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  evt, <span class="comment">// JS Native Event</span></span><br><span class="line">  position: <span class="comment">// &#123;x, y&#125; offset on screen</span></span><br><span class="line">  duration <span class="comment">// Number in ms</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// example:</span></span><br><span class="line">handler (obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(obj.position) <span class="comment">// &#123;x: 22, y: 451&#125;</span></span><br><span class="line">  <span class="built_in">console</span>.log(obj.duration) <span class="comment">// 600</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Modifiers"><a href="#Modifiers" class="headerlink" title="Modifiers"></a>Modifiers</h2><table>
<thead>
<tr>
<th>Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>noMouse</code></td>
<td>Avoid capturing mouse events too.</td>
</tr>
<tr>
<td><code>stop</code></td>
<td>Stop event propagation once holding has been detected.</td>
</tr>
<tr>
<td><code>prevent</code></td>
<td>Prevent default browser behavior of the event once holding has been detected.</td>
</tr>
</tbody>
</table>
<h3 id="Avoid-Capturing-Mouse-Events"><a href="#Avoid-Capturing-Mouse-Events" class="headerlink" title="Avoid Capturing Mouse Events"></a>Avoid Capturing Mouse Events</h3><p>When you don’t want to capture mouse actions too, use the <code>noMouse</code> modifier:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  directive won't be triggered by mouse actions;</span></span><br><span class="line"><span class="comment">  it's exclusively triggered by touch actions now:</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-touch-hold.noMouse</span>=<span class="string">"userHasHold"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Preventing-Scroll-on-touch-capable-devices"><a href="#Preventing-Scroll-on-touch-capable-devices" class="headerlink" title="Preventing Scroll (on touch capable devices)"></a>Preventing Scroll (on touch capable devices)</h3><p>By default, the directive does not block page scrolling. If you want to prevent scrolling, then use the <code>prevent</code> modifier.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-touch-hold.prevent</span>=<span class="string">"userHasHold"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Custom-Duration"><a href="#Custom-Duration" class="headerlink" title="Custom Duration"></a>Custom Duration</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-touch-hold:1000</span>=<span class="string">"userHasHold"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Panning Touch/Mouse Action]]></title>
      <url>https://quasar-framework.org/components/touch-pan.html</url>
      <content type="html"><![CDATA[<p>Quasar offers full-featured Vue directives that can totally replace libraries like Hammerjs: <code>v-touch-pan</code>, <code>v-touch-swipe</code> and <code>v-touch-hold</code>.</p>
<blockquote>
<p><strong>These directives also work with mouse events, not only touch events</strong>, so you are able to build cool functionality for your App on desktops too.</p>
</blockquote>
<p>We will be describing <code>v-touch-pan</code> on the lines below.</p>
<input type="hidden" data-fullpage-demo="touch-directives/touch-pan">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  directives: [<span class="string">'TouchPan'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-touch-pan</span>=<span class="string">"handler"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">// "handler" is a Function which receives an Object as parameter</span><br></pre></td></tr></table></figure>
<h2 id="Handler-Parameter"><a href="#Handler-Parameter" class="headerlink" title="Handler Parameter"></a>Handler Parameter</h2><p>The <code>handler</code> function/method will be called by the directive when a <code>pan</code> touch (or with mouse) action is taking place (any change in touch position triggers a call) on the DOM element and it receives the following parameter:<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  evt,       <span class="comment">// JS Native Event</span></span><br><span class="line">  position,  <span class="comment">// &#123;top, left&#125; Position in pixels</span></span><br><span class="line">             <span class="comment">// where the user's finger is currently at</span></span><br><span class="line">  direction, <span class="comment">// "left", "right", "up" or "down"</span></span><br><span class="line">  duration,  <span class="comment">// Number in ms since "pan" started</span></span><br><span class="line">  distance,  <span class="comment">// &#123;x, y&#125; Distance in pixels covered by panning</span></span><br><span class="line">             <span class="comment">// on horizontal and vertical</span></span><br><span class="line">  delta,     <span class="comment">// &#123;x, y&#125; Distance in pixels since last called handler</span></span><br><span class="line">  isFirst,   <span class="comment">// Boolean; Has panning just been started?</span></span><br><span class="line">  isFinal    <span class="comment">// Boolean; Is panning over?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// example:</span></span><br><span class="line">handler (obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(obj.direction) <span class="comment">// "right"</span></span><br><span class="line">  <span class="built_in">console</span>.log(obj.duration) <span class="comment">// 78</span></span><br><span class="line">  <span class="built_in">console</span>.log(obj.distance.x) <span class="comment">// 273</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Modifiers"><a href="#Modifiers" class="headerlink" title="Modifiers"></a>Modifiers</h2><table>
<thead>
<tr>
<th>Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>horizontal</code></td>
<td>Capture only horizontal panning.</td>
</tr>
<tr>
<td><code>vertical</code></td>
<td>Capture only vertical panning.</td>
</tr>
<tr>
<td><code>noMouse</code></td>
<td>Avoid capturing mouse events too.</td>
</tr>
<tr>
<td><code>stop</code></td>
<td>Stop event propagation once panning has been detected.</td>
</tr>
<tr>
<td><code>prevent</code></td>
<td>Prevent default browser behavior of the event once panning has been detected.</td>
</tr>
<tr>
<td><code>mightPrevent</code></td>
<td>If not using <code>prevent</code> prop, but you might call <code>event.preventDefault()</code>, specify this modifier otherwise you’ll get console warnings.</td>
</tr>
</tbody>
</table>
<p>Use <code>horizontal</code> or <code>vertical</code> when you only want to capture horizontal or vertical swipes.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-touch-pan.horizontal</span>=<span class="string">"userHasPanned"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Avoid-Capturing-Mouse-Events"><a href="#Avoid-Capturing-Mouse-Events" class="headerlink" title="Avoid Capturing Mouse Events"></a>Avoid Capturing Mouse Events</h3><p>When you don’t want to capture mouse actions too, use the <code>noMouse</code> modifier:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  directive won't be triggered by mouse actions;</span></span><br><span class="line"><span class="comment">  it's exclusively triggered by touch actions now:</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-touch-pan.noMouse</span>=<span class="string">"userHasPanned"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Preventing-Scroll-on-touch-capable-devices"><a href="#Preventing-Scroll-on-touch-capable-devices" class="headerlink" title="Preventing Scroll (on touch capable devices)"></a>Preventing Scroll (on touch capable devices)</h3><p>By default, the directive does not block page scrolling. If you want to prevent scrolling, then use the <code>prevent</code> modifier.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-touch-pan.prevent</span>=<span class="string">"userHasPanned"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Swipe Touch/Mouse Action]]></title>
      <url>https://quasar-framework.org/components/touch-swipe.html</url>
      <content type="html"><![CDATA[<p>Quasar offers full-featured Vue directives that can totally replace libraries like Hammerjs: <code>v-touch-pan</code>, <code>v-touch-swipe</code> and <code>v-touch-hold</code>.</p>
<blockquote>
<p><strong>These directives also work with mouse events, not only touch events</strong>, so you are able to build cool functionality for your App on desktops too.</p>
</blockquote>
<p>We will be describing <code>v-touch-swipe</code> on the lines below.</p>
<input type="hidden" data-fullpage-demo="touch-directives/touch-swipe">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  directives: [<span class="string">'TouchSwipe'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-touch-swipe</span>=<span class="string">"handler"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">// "handler" is a Function which receives an Object as parameter</span><br></pre></td></tr></table></figure>
<h2 id="Handler-Parameter"><a href="#Handler-Parameter" class="headerlink" title="Handler Parameter"></a>Handler Parameter</h2><p>The <code>handler</code> function/method is called by the directive when a <code>swipe</code> touch action took place on the DOM element and it receives the following parameter:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  evt, <span class="comment">// JS Native Event</span></span><br><span class="line">  direction, <span class="comment">// "left", "right", "up" or "down"</span></span><br><span class="line">  duration, <span class="comment">// Number in ms</span></span><br><span class="line">  distance <span class="comment">// &#123;x, y&#125; Distance in pixels covered by swipe on horizontal and vertical</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// example:</span></span><br><span class="line">handler (obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(obj.direction) <span class="comment">// "right"</span></span><br><span class="line">  <span class="built_in">console</span>.log(obj.duration) <span class="comment">// 78</span></span><br><span class="line">  <span class="built_in">console</span>.log(obj.distance.x) <span class="comment">// 273</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Modifiers"><a href="#Modifiers" class="headerlink" title="Modifiers"></a>Modifiers</h2><table>
<thead>
<tr>
<th>Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>horizontal</code></td>
<td>Capture only horizontal swipe.</td>
</tr>
<tr>
<td><code>vertical</code></td>
<td>Capture only vertical swipe.</td>
</tr>
<tr>
<td><code>up</code>, <code>right</code>, <code>down</code>, <code>left</code></td>
<td>Capture swipe on the respective direction.</td>
</tr>
<tr>
<td><code>noMouse</code></td>
<td>Avoid capturing mouse events too.</td>
</tr>
</tbody>
</table>
<p>Use <code>horizontal</code> or <code>vertical</code> when you only want to capture horizontal or vertical swipes, or specify which directions are of interest:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-touch-swipe.horizontal</span>=<span class="string">"userHasSwiped"</span>&gt;</span></span><br><span class="line">  Capturing only horizontal swipes.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-touch-swipe.up.right</span>=<span class="string">"userHasSwiped"</span>&gt;</span></span><br><span class="line">  Capturing only swipes to "up" or "right".</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Avoid-Capturing-Mouse-Events"><a href="#Avoid-Capturing-Mouse-Events" class="headerlink" title="Avoid Capturing Mouse Events"></a>Avoid Capturing Mouse Events</h3><p>When you don’t want to capture mouse actions too, use the <code>noMouse</code> modifier:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  directive won't be triggered by mouse actions;</span></span><br><span class="line"><span class="comment">  it's exclusively triggered by touch actions now:</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-touch-swipe.noMouse</span>=<span class="string">"userHasSwiped"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS Transitions]]></title>
      <url>https://quasar-framework.org/components/transition.html</url>
      <content type="html"><![CDATA[<p>CSS Transitions can be handled by the <a href="https://vuejs.org/v2/guide/transitions.html" target="_blank" rel="noopener">Vue Transition Component</a>. The transitions are used for entering (appearing) or leaving (disappearing) animations.</p>
<p>However, Quasar can supply a big list of ready to use CSS animations. The animation effects are borrowed from <a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">Animate.css</a>. So there are 12 general, 32 entering (In) and 32 leaving (Out) animation types currently available for you to use out of the box. Check the list either on Animate.css website or on the demo available for this page.</p>
<input type="hidden" data-fullpage-demo="animation/transition">

<blockquote>
<p>Please refer to <a href="https://vuejs.org/v2/guide/transitions.html" target="_blank" rel="noopener">Vue Documentation Website</a> for learning on how to use the Vue supplied <code>&lt;transition&gt;</code> component.</p>
</blockquote>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// embedding all animations</span></span><br><span class="line">animations: <span class="string">'all'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// or embedding only specific animations</span></span><br><span class="line">animations: [</span><br><span class="line">  <span class="string">'bounceInLeft'</span>,</span><br><span class="line">  <span class="string">'bounceOutRight'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>If you are building a website, you can also skip configuring quasar.conf.js and use a CDN link which points to Animate.css like this (following is just an example, Google for latest link). Remember this will require an Internet connection for your user, as opposed to bundling from within quasar.conf.js.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.template.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- CDN example for Animate.css --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">    <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.5.2/animate.min.css"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Notice the string “animated” in front of the actual animation name.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Example with wrapping only one DOM element / component --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">  <span class="attr">appear</span></span></span><br><span class="line"><span class="tag">  <span class="attr">enter-active-class</span>=<span class="string">"animated fadeIn"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">leave-active-class</span>=<span class="string">"animated fadeOut"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Wrapping only one DOM element, defined by QBtn --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">    <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">icon</span>=<span class="string">"mail"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">"Email"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Wrapping-Multiple-Elements"><a href="#Wrapping-Multiple-Elements" class="headerlink" title="Wrapping Multiple Elements"></a>Wrapping Multiple Elements</h3><p>You can also group components or DOM elements in a transition so that the same effects are applied to all of them simultaneously.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Example with wrapping multiple DOM elements / components --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition-group</span></span></span><br><span class="line"><span class="tag">  <span class="attr">appear</span></span></span><br><span class="line"><span class="tag">  <span class="attr">enter-active-class</span>=<span class="string">"animated fadeIn"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">leave-active-class</span>=<span class="string">"animated fadeOut"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- We wrap a "p" tag and a QBtn --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">     Lorum Ipsum</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">    <span class="attr">key</span>=<span class="string">"email-button"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">icon</span>=<span class="string">"mail"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">"Email"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Please note some things in the above example:</p>
<ol>
<li>Note <code>&lt;transition-group&gt;</code> instead of <code>&lt;transition&gt;</code>.</li>
<li>The components and DOM elements must be keyed, like <code>key=&quot;text&quot;</code> or <code>key=&quot;email-button&quot;</code> in the example above.</li>
<li>Both examples above have the Boolean property <code>appear</code> specified, which makes the entering animation kick in right after component(s) have been rendered. This property is optional.</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Typography]]></title>
      <url>https://quasar-framework.org/components/typography.html</url>
      <content type="html"><![CDATA[<p>See how headings, blockquotes, definitions lists and more are displayed in the demo. At the end of this page you can read about CSS helper classes.</p>
<input type="hidden" data-fullpage-demo="style-and-identity/typography">

<h3 id="Headings"><a href="#Headings" class="headerlink" title="Headings"></a>Headings</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Light 112sp<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- or: --&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-display-4"</span>&gt;</span>Light 112sp<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Regular 56sp<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- or: --&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-display-3"</span>&gt;</span>Regular 56sp<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Regular 45sp<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- or: --&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-display-2"</span>&gt;</span>Regular 45sp<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>Regular 34sp<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- or: --&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-display-1"</span>&gt;</span>Regular 34sp<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>Regular 24sp<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- or: --&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-headline"</span>&gt;</span>Regular 24sp<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>Medium 20sp<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- or: --&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-title"</span>&gt;</span>Medium 20sp<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-subheading"</span>&gt;</span>Regular 16sp<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-body-2"</span>&gt;</span>Medium 14sp<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-body-1"</span>&gt;</span>Regular 14sp<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-caption"</span>&gt;</span>Regular 12sp<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Weights"><a href="#Weights" class="headerlink" title="Weights"></a>Weights</h3><table>
<thead>
<tr>
<th>Class Name</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>text-weight-thin</code></td>
</tr>
<tr>
<td><code>text-weight-light</code></td>
</tr>
<tr>
<td><code>text-weight-regular</code></td>
</tr>
<tr>
<td><code>text-weight-medium</code></td>
</tr>
<tr>
<td><code>text-weight-bold</code></td>
</tr>
<tr>
<td><code>text-weight-bolder</code></td>
</tr>
</tbody>
</table>
<h3 id="Text-Types"><a href="#Text-Types" class="headerlink" title="Text Types"></a>Text Types</h3><p>You can display text in a variety of ways.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Small and Big text --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">big</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">big</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- sub and sup --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>Subtext<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span>Supertext<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Bold or italic --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-bold"</span>&gt;</span>Bold text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- or: --&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Bold text<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-italic"</span>&gt;</span>Italic text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- or: --&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>Italic text<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Quotes --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"quote"</span>&gt;</span></span><br><span class="line">  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"quote text-right"</span>&gt;</span></span><br><span class="line">  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Blockquotes --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">small</span>&gt;</span>Someone famous for <span class="tag">&lt;<span class="name">cite</span> <span class="attr">title</span>=<span class="string">"Quasar Framework"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">cite</span>&gt;</span><span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">small</span>&gt;</span>Someone famous for <span class="tag">&lt;<span class="name">cite</span> <span class="attr">title</span>=<span class="string">"Quasar Framework"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">cite</span>&gt;</span><span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Definition Lists --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Description lists<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>A description list is perfect for defining terms.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Euismod<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Vestibulum id ligula porta felis euismod semper eget lacinia odio sem nec elit.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Description lists<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>A description list is perfect for defining terms.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Euismod<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Vestibulum id ligula porta felis euismod semper eget lacinia odio sem nec elit.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="CSS-Helper-Classes"><a href="#CSS-Helper-Classes" class="headerlink" title="CSS Helper Classes"></a>CSS Helper Classes</h3><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>text-right</code></td>
<td>Align text to the right</td>
</tr>
<tr>
<td><code>text-left</code></td>
<td>Align text to the left</td>
</tr>
<tr>
<td><code>text-center</code></td>
<td>Align text to the center</td>
</tr>
<tr>
<td><code>text-justify</code></td>
<td>Text will be justified</td>
</tr>
<tr>
<td><code>text-truncate</code></td>
<td>Applies all CSS tweaks to truncate text when container is too small</td>
</tr>
<tr>
<td><code>text-bold</code></td>
<td>Text will be in bold</td>
</tr>
<tr>
<td><code>text-italic</code></td>
<td>Text will be in italic</td>
</tr>
<tr>
<td><code>text-no-wrap</code></td>
<td>Non wrapable text (applies <code>white-space: nowrap</code>)</td>
</tr>
<tr>
<td><code>uppercase</code></td>
<td>Transform text to uppercase</td>
</tr>
<tr>
<td><code>lowercase</code></td>
<td>Transform text to lowercase</td>
</tr>
<tr>
<td><code>capitalize</code></td>
<td>Capitalize first letter of the text</td>
</tr>
<tr>
<td><code>round-borders</code></td>
<td>Every Quasar Theme has a generic border radius. This radius is applied to the DOM node</td>
</tr>
<tr>
<td><code>block</code></td>
<td><code>display</code> property set to <code>block</code></td>
</tr>
<tr>
<td><code>no-margin</code></td>
<td>Margins are set to 0</td>
</tr>
<tr>
<td><code>no-padding</code></td>
<td>Padding is set to 0</td>
</tr>
<tr>
<td><code>no-outline</code></td>
<td>Outline is set to 0</td>
</tr>
</tbody>
</table>
<h3 id="Default-MD-Font"><a href="#Default-MD-Font" class="headerlink" title="Default MD Font"></a>Default MD Font</h3><p>The default font embedded in Quasar App <em>when built with Material Design Theme</em> is Roboto. But it is not required. You can use whatever font(s) you like.</p>
<p>Roboto comes with 5 different font weights you can use: 100, 300, 400, 500, 700. Below is an image from Google’s Roboto Specimen document displaying the different font weights:</p>
<div style="max-width: 550px"><br><img src="/images/roboto.png" alt="Roboto Font" title="Roboto Font"><br></div>

<p>This is where Roboto font comes embedded by default, if you are looking to remove it:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file: /quasar.conf.js</span></span><br><span class="line">extras: [</span><br><span class="line">  ctx.theme.mat ? <span class="string">'roboto-font'</span> : <span class="literal">null</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>Notice that the font is only included when developing/building with Material Theme.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Video Embedding]]></title>
      <url>https://quasar-framework.org/components/video-embedding.html</url>
      <content type="html"><![CDATA[<p>Embedding a video like Youtube is easy. It also resizes to fit the container by default.</p>
<input type="hidden" data-fullpage-demo="media/video">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QVideo'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Using-QVideo"><a href="#Using-QVideo" class="headerlink" title="Using QVideo"></a>Using QVideo</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-video</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">"https://www.youtube.com/embed/k3_tw44QsZQ?rel=0"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">"width: 853px; height: 480px"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<p>Or, if you prefer the “raw” version for more control:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-video"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">"853"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">height</span>=<span class="string">"480"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">"https://www.youtube.com/embed/k3_tw44QsZQ?rel=0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">frameborder</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">allowfullscreen</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tree]]></title>
      <url>https://quasar-framework.org/components/tree.html</url>
      <content type="html"><![CDATA[<p>Quasar Tree represents a highly configurable component that displays hierarchical data, such as a table of contents in a tree structure.</p>
<input type="hidden" data-fullpage-demo="grouping/tree">

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QTree'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>This is the simplest Tree that you can write:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tree</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:nodes</span>=<span class="string">"simple"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">node-key</span>=<span class="string">"label"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span></span><br><span class="line"><span class="undefined">    simple: [</span></span><br><span class="line"><span class="undefined">      &#123;</span></span><br><span class="line"><span class="javascript">        label: <span class="string">'Satisfied customers'</span>,</span></span><br><span class="line"><span class="undefined">        children: [</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            label: <span class="string">'Good food'</span>,</span></span><br><span class="line"><span class="undefined">            children: [</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Quality ingredients'</span> &#125;,</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Good recipe'</span> &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            label: <span class="string">'Good service (disabled node)'</span>,</span></span><br><span class="line"><span class="javascript">            disabled: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">            children: [</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Prompt attention'</span> &#125;,</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Professional waiter'</span> &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            label: <span class="string">'Pleasant surroundings'</span>,</span></span><br><span class="line"><span class="undefined">            children: [</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Happy atmosphere'</span> &#125;,</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Good table presentation'</span> &#125;,</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Pleasing decor'</span> &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        ]</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    ]</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Notice that nodes must have a unique key defined by a property of each key. In the example above, labels are unique so we’re using <code>label</code> prop to define these keys. However, you can add any property to the nodes (like ‘id’ or anything you want) and then use that property (like <code>node-key=&quot;id&quot;</code>).</p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>nodes</code></td>
<td>Array</td>
<td>Vue model for the Tree</td>
</tr>
<tr>
<td><code>node-key</code></td>
<td>String</td>
<td>Property of node to use as unique key.</td>
</tr>
<tr>
<td><code>label-key</code></td>
<td>String</td>
<td>(v0.17.11+) Property of node to use as label.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>Color of the connector lines.</td>
</tr>
<tr>
<td><code>control-color</code></td>
<td>String</td>
<td>Color of checkboxes.</td>
</tr>
<tr>
<td><code>text-color</code></td>
<td>String</td>
<td>Color of text.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>When rendering on a dark background.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Connector icon for each node.</td>
</tr>
<tr>
<td><code>selected</code></td>
<td>Any</td>
<td><strong>Use .sync</strong>. The unique key value of the selected node.</td>
</tr>
<tr>
<td><code>tick-strategy</code></td>
<td>String</td>
<td>One of ‘leaf’, ‘leaf-filtered’, ‘strict’, ‘none’.</td>
</tr>
<tr>
<td><code>ticked</code></td>
<td>Array</td>
<td><strong>Use .sync</strong>. Node unique keys of ticked nodes.</td>
</tr>
<tr>
<td><code>expanded</code></td>
<td>Array</td>
<td><strong>Use .sync</strong>. Node unique keys of expanded nodes.</td>
</tr>
<tr>
<td><code>default-expand-all</code></td>
<td>Boolean</td>
<td>Expan all nodes on first render.</td>
</tr>
<tr>
<td><code>accordion</code></td>
<td>Boolean</td>
<td>Expanding a node closes its siblings.</td>
</tr>
<tr>
<td><code>filter</code></td>
<td>String</td>
<td>String to be used when filtering nodes.</td>
</tr>
<tr>
<td><code>filter-method</code></td>
<td>Function</td>
<td>Custom filtering method.</td>
</tr>
<tr>
<td><code>no-nodes-label</code></td>
<td>String</td>
<td>Override default i18n of message when no nodes are available.</td>
</tr>
<tr>
<td><code>no-results-label</code></td>
<td>String</td>
<td>Override default i18n of message when no nodes are available after filtering.</td>
</tr>
<tr>
<td><code>duration</code></td>
<td>Number</td>
<td>(v0.17.13+) Toggle animation duration in milliseconds. Default: 300</td>
</tr>
</tbody>
</table>
<h3 id="Nodes-model-structure"><a href="#Nodes-model-structure" class="headerlink" title="Nodes model structure"></a>Nodes model structure</h3><p>The following describes a node’s properties that are taken into account by QTree’s v-model.</p>
<table>
<thead>
<tr>
<th>Node Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>label</code></td>
<td>String</td>
<td>Node’s label</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Node’s icon</td>
</tr>
<tr>
<td><code>iconColor</code></td>
<td>String</td>
<td>(v0.17.9+) Node’s icon color. One from Quasar Color Palette.</td>
</tr>
<tr>
<td><code>img</code></td>
<td>String</td>
<td>Node’s image. Use statics folder. Example: ‘statics/mountains.png’</td>
</tr>
<tr>
<td><code>avatar</code></td>
<td>String</td>
<td>Node’s avatar. Use statics folder. Example: ‘statics/boy-avatar.png’</td>
</tr>
<tr>
<td><code>children</code></td>
<td>Array</td>
<td>Array of nodes as children.</td>
</tr>
<tr>
<td><code>disabled</code></td>
<td>Boolean</td>
<td>Is node disabled?</td>
</tr>
<tr>
<td><code>expandable</code></td>
<td>Boolean</td>
<td>Is node expandable?</td>
</tr>
<tr>
<td><code>tickable</code></td>
<td>Boolean</td>
<td>When using a tick strategy, each node shows a checkbox. Should a node’s checkbox be disabled?</td>
</tr>
<tr>
<td><code>noTick</code></td>
<td>Boolean</td>
<td>When using a tick strategy, should node display a checkbox?</td>
</tr>
<tr>
<td><code>tickStrategy</code></td>
<td>String</td>
<td>Override global tick strategy for this node only. One of ‘leaf’, ‘leaf-filtered’, ‘strict’, ‘none’.</td>
</tr>
<tr>
<td><code>lazy</code></td>
<td>Boolean</td>
<td>Should children be lazy loaded? In this case also don’t specify ‘children’ prop.</td>
</tr>
<tr>
<td><code>header</code></td>
<td>String</td>
<td>Node header scoped slot name, without the required ‘header-‘ prefix. Example: ‘story’ refers to ‘header-story’ scoped slot.</td>
</tr>
<tr>
<td><code>body</code></td>
<td>String</td>
<td>Node body scoped slot name, without the required ‘body-‘ prefix. Example: ‘story’ refers to ‘body-story’ scoped slot.</td>
</tr>
</tbody>
</table>
<h3 id="Selection-vs-Ticking-Expansion"><a href="#Selection-vs-Ticking-Expansion" class="headerlink" title="Selection vs Ticking, Expansion"></a>Selection vs Ticking, Expansion</h3><ul>
<li>Selection (through QTree <code>selected</code> prop) refers to the currently selected node (gets highlighted with different background).</li>
<li>Ticking (through QTree <code>ticked</code> prop) refers to the checkbox associated with each node.</li>
<li>Expansion (through QTree <code>expanded</code> prop) refers to the nodes that are expanded.</li>
</ul>
<p>All properties above require the <code>.sync</code> modifier in order for them to work correctly. Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DO NOT forget about adding ".sync" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-tree</span> <span class="attr">selected.sync</span>=<span class="string">"selection"</span> <span class="attr">...</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="Tick-Strategy"><a href="#Tick-Strategy" class="headerlink" title="Tick Strategy"></a>Tick Strategy</h3><p>There are three ticking strategy: ‘leaf’, ‘leaf-filtered’, ‘strict’ with an additional (and default) ‘none’ which disables ticking.</p>
<table>
<thead>
<tr>
<th>Strategy</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>leaf</code></td>
<td>Ticked nodes are only the leaves. Ticking a node influences the parent’s ticked state too (parent becomes partially ticked or ticked), as well as its children (all tickable children become ticked).</td>
</tr>
<tr>
<td><code>leaf-filtered</code></td>
<td>Same concept as <code>leaf</code>, only that this strategy applies only to filtered nodes (the nodes that remain visible after filtering).</td>
</tr>
<tr>
<td><code>strict</code></td>
<td>Ticked nodes are independent of parent or children tick state.</td>
</tr>
</tbody>
</table>
<p>You can apply a global tick strategy for a QTree and locally change the ticking strategy for a certain node by specifying the <code>tickStrategy</code> in the <code>nodes</code> model.</p>
<h3 id="Custom-Filter-Method"><a href="#Custom-Filter-Method" class="headerlink" title="Custom Filter Method"></a>Custom Filter Method</h3><p>You can customize the filtering method by specifying the <code>filter-method</code> prop. The method below is actually the default filtering strategy:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tree</span> <span class="attr">:filter-method</span>=<span class="string">"myFilterMethod"</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    myFilterMethod (node, filter) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> filt = filter.toLowerCase()</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> node.label &amp;&amp; node.label.toLowerCase().indexOf(filt) &gt; <span class="number">-1</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>getNodeByKey(key)</code></td>
<td>Get a node by specifying its unique key.</td>
</tr>
<tr>
<td><code>collapseAll()</code></td>
<td>Collapses all nodes. Useful if not using a synched <code>expanded</code> bind, otherwise just set <code>expanded</code> to an empty array.</td>
</tr>
<tr>
<td><code>expandAll()</code></td>
<td>Expands all nodes. Useful if not using a synched <code>expanded</code> bind.</td>
</tr>
<tr>
<td><code>isTicked(key)</code></td>
<td>Returns a boolean specifying if node with key is ticked.</td>
</tr>
<tr>
<td><code>isExpanded(key)</code></td>
<td>Returns a boolean specifying if node with key is expanded.</td>
</tr>
<tr>
<td><code>getTickedNodes()</code></td>
<td>Returns an array with keys of nodes that are ticked. Useful if not using a synched <code>ticked</code> bind.</td>
</tr>
<tr>
<td><code>getExpandedNodes()</code></td>
<td>Returns an array with keys of nodes that are expanded. Useful if not using a synched <code>expanded</code> bind.</td>
</tr>
</tbody>
</table>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><h3 id="Node-icon-avatar-image-controlling-expansion-and-colored"><a href="#Node-icon-avatar-image-controlling-expansion-and-colored" class="headerlink" title="Node icon/avatar/image, controlling expansion and colored"></a>Node icon/avatar/image, controlling expansion and colored</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">      <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">"togglePropsGoodServiceExpand"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"Toggle 'Good service' expansion"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-tree</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:nodes</span>=<span class="string">"props"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:expanded.sync</span>=<span class="string">"propsExpanded"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">color</span>=<span class="string">"red"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">node-key</span>=<span class="string">"label"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span></span><br><span class="line"><span class="javascript">    propsExpanded: [<span class="string">'Satisfied customers'</span>, <span class="string">'Pleasant surroundings'</span>],</span></span><br><span class="line"><span class="undefined">    props: [</span></span><br><span class="line"><span class="undefined">      &#123;</span></span><br><span class="line"><span class="javascript">        label: <span class="string">'Satisfied customers'</span>,</span></span><br><span class="line"><span class="javascript">        avatar: <span class="string">'statics/boy-avatar.png'</span>,</span></span><br><span class="line"><span class="undefined">        children: [</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            label: <span class="string">'Good food'</span>,</span></span><br><span class="line"><span class="javascript">            icon: <span class="string">'restaurant_menu'</span>,</span></span><br><span class="line"><span class="undefined">            children: [</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Quality ingredients'</span> &#125;,</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Good recipe'</span> &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            label: <span class="string">'Good service'</span>,</span></span><br><span class="line"><span class="javascript">            icon: <span class="string">'room_service'</span>,</span></span><br><span class="line"><span class="undefined">            children: [</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Prompt attention'</span> &#125;,</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Professional waiter'</span> &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            label: <span class="string">'Pleasant surroundings'</span>,</span></span><br><span class="line"><span class="javascript">            icon: <span class="string">'photo'</span>,</span></span><br><span class="line"><span class="undefined">            children: [</span></span><br><span class="line"><span class="undefined">              &#123;</span></span><br><span class="line"><span class="javascript">                label: <span class="string">'Happy atmosphere'</span>,</span></span><br><span class="line"><span class="javascript">                img: <span class="string">'statics/parallax1.jpg'</span></span></span><br><span class="line"><span class="undefined">              &#125;,</span></span><br><span class="line"><span class="undefined">              &#123;</span></span><br><span class="line"><span class="javascript">                label: <span class="string">'Good table presentation'</span>,</span></span><br><span class="line"><span class="javascript">                img: <span class="string">'statics/parallax2.jpg'</span></span></span><br><span class="line"><span class="undefined">              &#125;,</span></span><br><span class="line"><span class="undefined">              &#123;</span></span><br><span class="line"><span class="javascript">                label: <span class="string">'Pleasing decor'</span>,</span></span><br><span class="line"><span class="javascript">                img: <span class="string">'statics/mountains.jpg'</span></span></span><br><span class="line"><span class="undefined">              &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        ]</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    ]</span></span><br><span class="line"><span class="undefined">  &#125;),</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    togglePropsGoodServiceExpand () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> index = <span class="keyword">this</span>.propsExpanded.indexOf(<span class="string">'Good service'</span>)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (index &gt; <span class="number">-1</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.propsExpanded.splice(index, <span class="number">1</span>)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.propsExpanded.push(<span class="string">'Good service'</span>)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Customizing-nodes-header-and-body-slots"><a href="#Customizing-nodes-header-and-body-slots" class="headerlink" title="Customizing nodes (header and body slots)"></a>Customizing nodes (header and body slots)</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tree</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:nodes</span>=<span class="string">"customize"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">node-key</span>=<span class="string">"label"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">default-expand-all</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"header-root"</span> <span class="attr">slot-scope</span>=<span class="string">"prop"</span> <span class="attr">class</span>=<span class="string">"row items-center"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"~assets/quasar-logo.svg"</span> <span class="attr">class</span>=<span class="string">"avatar q-mr-sm"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;&#123; prop.node.label &#125;&#125; <span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">color</span>=<span class="string">"orange"</span> <span class="attr">small</span>&gt;</span>New!<span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"header-generic"</span> <span class="attr">slot-scope</span>=<span class="string">"prop"</span> <span class="attr">class</span>=<span class="string">"row items-center"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">:name</span>=<span class="string">"prop.node.icon || 'star'"</span> <span class="attr">color</span>=<span class="string">"orange"</span> <span class="attr">size</span>=<span class="string">"28px"</span> <span class="attr">class</span>=<span class="string">"q-mr-sm"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-weight-bold text-primary"</span>&gt;</span>&#123;&#123; prop.node.label &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"body-story"</span> <span class="attr">slot-scope</span>=<span class="string">"prop"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text-weight-thin"</span>&gt;</span>The story is:<span class="tag">&lt;/<span class="name">span</span>&gt;</span> &#123;&#123; prop.node.story &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"body-toggle"</span> <span class="attr">slot-scope</span>=<span class="string">"prop"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span>&#123;&#123; prop.node.caption &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"prop.node.enabled"</span> <span class="attr">label</span>=<span class="string">"I agree to the terms and conditions"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-tree</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span></span><br><span class="line"><span class="undefined">    customize: [</span></span><br><span class="line"><span class="undefined">      &#123;</span></span><br><span class="line"><span class="javascript">        label: <span class="string">'Satisfied customers'</span>,</span></span><br><span class="line"><span class="javascript">        header: <span class="string">'root'</span>,</span></span><br><span class="line"><span class="undefined">        children: [</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            label: <span class="string">'Good food'</span>,</span></span><br><span class="line"><span class="javascript">            icon: <span class="string">'restaurant_menu'</span>,</span></span><br><span class="line"><span class="javascript">            header: <span class="string">'generic'</span>,</span></span><br><span class="line"><span class="undefined">            children: [</span></span><br><span class="line"><span class="undefined">              &#123;</span></span><br><span class="line"><span class="javascript">                label: <span class="string">'Quality ingredients'</span>,</span></span><br><span class="line"><span class="javascript">                header: <span class="string">'generic'</span>,</span></span><br><span class="line"><span class="javascript">                body: <span class="string">'story'</span>,</span></span><br><span class="line"><span class="javascript">                story: <span class="string">'Lorem ipsum dolor sit amet.'</span></span></span><br><span class="line"><span class="undefined">              &#125;,</span></span><br><span class="line"><span class="undefined">              &#123;</span></span><br><span class="line"><span class="javascript">                label: <span class="string">'Good recipe'</span>,</span></span><br><span class="line"><span class="javascript">                body: <span class="string">'story'</span>,</span></span><br><span class="line"><span class="javascript">                story: <span class="string">'A Congressman works with his equally conniving wife to exact revenge on the people who betrayed him.'</span></span></span><br><span class="line"><span class="undefined">              &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            label: <span class="string">'Good service'</span>,</span></span><br><span class="line"><span class="javascript">            header: <span class="string">'generic'</span>,</span></span><br><span class="line"><span class="javascript">            body: <span class="string">'toggle'</span>,</span></span><br><span class="line"><span class="javascript">            caption: <span class="string">'Why are we as consumers so captivated by stories of great customer service? Perhaps it is because...'</span>,</span></span><br><span class="line"><span class="javascript">            enabled: <span class="literal">false</span>,</span></span><br><span class="line"><span class="undefined">            children: [</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Prompt attention'</span> &#125;,</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Professional waiter'</span> &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            label: <span class="string">'Pleasant surroundings'</span>,</span></span><br><span class="line"><span class="undefined">            children: [</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Happy atmosphere'</span> &#125;,</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Good table presentation'</span>, <span class="attr">header</span>: <span class="string">'generic'</span> &#125;,</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Pleasing decor'</span> &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        ]</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    ]</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Applying-a-default-header-and-body-slot"><a href="#Applying-a-default-header-and-body-slot" class="headerlink" title="Applying a default header and body slot"></a>Applying a default header and body slot</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tree</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:nodes</span>=<span class="string">"customize"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">node-key</span>=<span class="string">"label"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">default-expand-all</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"default-header"</span> <span class="attr">slot-scope</span>=<span class="string">"prop"</span> <span class="attr">class</span>=<span class="string">"row items-center"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">:name</span>=<span class="string">"prop.node.icon || 'share'"</span> <span class="attr">color</span>=<span class="string">"orange"</span> <span class="attr">size</span>=<span class="string">"28px"</span> <span class="attr">class</span>=<span class="string">"q-mr-sm"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-weight-bold text-primary"</span>&gt;</span>&#123;&#123; prop.node.label &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"default-body"</span> <span class="attr">slot-scope</span>=<span class="string">"prop"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"prop.node.story"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text-weight-thin"</span>&gt;</span>This node has a story<span class="tag">&lt;/<span class="name">span</span>&gt;</span>: &#123;&#123; prop.node.story &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">"text-weight-thin"</span>&gt;</span>This is some default content.<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-tree</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span></span><br><span class="line"><span class="undefined">    customize: [</span></span><br><span class="line"><span class="undefined">      &#123;</span></span><br><span class="line"><span class="javascript">        label: <span class="string">'Satisfied customers'</span>,</span></span><br><span class="line"><span class="javascript">        header: <span class="string">'root'</span>,</span></span><br><span class="line"><span class="undefined">        children: [</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            label: <span class="string">'Good food'</span>,</span></span><br><span class="line"><span class="javascript">            icon: <span class="string">'restaurant_menu'</span>,</span></span><br><span class="line"><span class="javascript">            header: <span class="string">'generic'</span>,</span></span><br><span class="line"><span class="undefined">            children: [</span></span><br><span class="line"><span class="undefined">              &#123;</span></span><br><span class="line"><span class="javascript">                label: <span class="string">'Quality ingredients'</span>,</span></span><br><span class="line"><span class="javascript">                header: <span class="string">'generic'</span>,</span></span><br><span class="line"><span class="javascript">                body: <span class="string">'story'</span>,</span></span><br><span class="line"><span class="javascript">                story: <span class="string">'Lorem ipsum dolor sit amet.'</span></span></span><br><span class="line"><span class="undefined">              &#125;,</span></span><br><span class="line"><span class="undefined">              &#123;</span></span><br><span class="line"><span class="javascript">                label: <span class="string">'Good recipe'</span>,</span></span><br><span class="line"><span class="javascript">                body: <span class="string">'story'</span>,</span></span><br><span class="line"><span class="javascript">                story: <span class="string">'A Congressman works with his equally conniving wife to exact revenge on the people who betrayed him.'</span></span></span><br><span class="line"><span class="undefined">              &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            label: <span class="string">'Good service'</span>,</span></span><br><span class="line"><span class="javascript">            header: <span class="string">'generic'</span>,</span></span><br><span class="line"><span class="javascript">            body: <span class="string">'toggle'</span>,</span></span><br><span class="line"><span class="javascript">            caption: <span class="string">'Why are we as consumers so captivated by stories of great customer service? Perhaps it is because...'</span>,</span></span><br><span class="line"><span class="javascript">            enabled: <span class="literal">false</span>,</span></span><br><span class="line"><span class="undefined">            children: [</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Prompt attention'</span> &#125;,</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Professional waiter'</span> &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            label: <span class="string">'Pleasant surroundings'</span>,</span></span><br><span class="line"><span class="undefined">            children: [</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Happy atmosphere'</span> &#125;,</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Good table presentation'</span>, <span class="attr">header</span>: <span class="string">'generic'</span> &#125;,</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Pleasing decor'</span> &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        ]</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    ]</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Filtering-nodes"><a href="#Filtering-nodes" class="headerlink" title="Filtering nodes"></a>Filtering nodes</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"filter"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">stack-label</span>=<span class="string">"Filter"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">clearable</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"q-mb-sm"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-tree</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:nodes</span>=<span class="string">"simple"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:filter</span>=<span class="string">"filter"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">default-expand-all</span></span></span><br><span class="line"><span class="tag">      <span class="attr">node-key</span>=<span class="string">"label"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span></span><br><span class="line"><span class="javascript">    filter: <span class="string">''</span>,</span></span><br><span class="line"><span class="undefined">    simple: [</span></span><br><span class="line"><span class="undefined">      &#123;</span></span><br><span class="line"><span class="javascript">        label: <span class="string">'Satisfied customers'</span>,</span></span><br><span class="line"><span class="undefined">        children: [</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            label: <span class="string">'Good food'</span>,</span></span><br><span class="line"><span class="undefined">            children: [</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Quality ingredients'</span> &#125;,</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Good recipe'</span> &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            label: <span class="string">'Good service (disabled node)'</span>,</span></span><br><span class="line"><span class="javascript">            disabled: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">            children: [</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Prompt attention'</span> &#125;,</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Professional waiter'</span> &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            label: <span class="string">'Pleasant surroundings'</span>,</span></span><br><span class="line"><span class="undefined">            children: [</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Happy atmosphere'</span> &#125;,</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Good table presentation'</span> &#125;,</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Pleasing decor'</span> &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        ]</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    ]</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Accordion-mode-sibling-nodes-get-contracted-when-one-gets-expanded"><a href="#Accordion-mode-sibling-nodes-get-contracted-when-one-gets-expanded" class="headerlink" title="Accordion mode (sibling nodes get contracted when one gets expanded)"></a>Accordion mode (sibling nodes get contracted when one gets expanded)</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-tree</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:nodes</span>=<span class="string">"simple"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">accordion</span></span></span><br><span class="line"><span class="tag">  <span class="attr">node-key</span>=<span class="string">"label"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Selectable-nodes"><a href="#Selectable-nodes" class="headerlink" title="Selectable nodes"></a>Selectable nodes</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-mb-sm"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">size</span>=<span class="string">"sm"</span> <span class="attr">color</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"selectGoodService"</span> <span class="attr">label</span>=<span class="string">"Select 'Good service'"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">v-if</span>=<span class="string">"selected"</span> <span class="attr">size</span>=<span class="string">"sm"</span> <span class="attr">color</span>=<span class="string">"red"</span> @<span class="attr">click</span>=<span class="string">"unselectNode"</span> <span class="attr">label</span>=<span class="string">"Unselect node"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-tree</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:nodes</span>=<span class="string">"props"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">default-expand-all</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:selected.sync</span>=<span class="string">"selected"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">node-key</span>=<span class="string">"label"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span></span><br><span class="line"><span class="javascript">    selected: <span class="literal">null</span>,</span></span><br><span class="line"><span class="undefined">    props: [</span></span><br><span class="line"><span class="undefined">      &#123;</span></span><br><span class="line"><span class="javascript">        label: <span class="string">'Satisfied customers'</span>,</span></span><br><span class="line"><span class="javascript">        avatar: <span class="string">'statics/boy-avatar.png'</span>,</span></span><br><span class="line"><span class="undefined">        children: [</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            label: <span class="string">'Good food'</span>,</span></span><br><span class="line"><span class="javascript">            icon: <span class="string">'restaurant_menu'</span>,</span></span><br><span class="line"><span class="undefined">            children: [</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Quality ingredients'</span> &#125;,</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Good recipe'</span> &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            label: <span class="string">'Good service'</span>,</span></span><br><span class="line"><span class="javascript">            icon: <span class="string">'room_service'</span>,</span></span><br><span class="line"><span class="undefined">            children: [</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Prompt attention'</span> &#125;,</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Professional waiter'</span> &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            label: <span class="string">'Pleasant surroundings'</span>,</span></span><br><span class="line"><span class="javascript">            icon: <span class="string">'photo'</span>,</span></span><br><span class="line"><span class="undefined">            children: [</span></span><br><span class="line"><span class="undefined">              &#123;</span></span><br><span class="line"><span class="javascript">                label: <span class="string">'Happy atmosphere'</span>,</span></span><br><span class="line"><span class="javascript">                img: <span class="string">'statics/parallax1.jpg'</span></span></span><br><span class="line"><span class="undefined">              &#125;,</span></span><br><span class="line"><span class="undefined">              &#123;</span></span><br><span class="line"><span class="javascript">                label: <span class="string">'Good table presentation'</span>,</span></span><br><span class="line"><span class="javascript">                img: <span class="string">'statics/parallax2.jpg'</span></span></span><br><span class="line"><span class="undefined">              &#125;,</span></span><br><span class="line"><span class="undefined">              &#123;</span></span><br><span class="line"><span class="javascript">                label: <span class="string">'Pleasing decor'</span>,</span></span><br><span class="line"><span class="javascript">                img: <span class="string">'statics/mountains.jpg'</span></span></span><br><span class="line"><span class="undefined">              &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        ]</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    ]</span></span><br><span class="line"><span class="undefined">  &#125;),</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    selectGoodService () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="keyword">this</span>.selected !== <span class="string">'Good service'</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.selected = <span class="string">'Good service'</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    unselectNode () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.selected = <span class="literal">null</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Tickable-nodes-amp-strategies"><a href="#Tickable-nodes-amp-strategies" class="headerlink" title="Tickable nodes &amp; strategies"></a>Tickable nodes &amp; strategies</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-mb-sm row no-wrap items-center"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">"tickStrategy"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">stack-label</span>=<span class="string">"Tick Strategy"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:options</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">          &#123;label: 'None', value: 'none'&#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">          &#123;label: 'Leaf', value: 'leaf'&#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">          &#123;label: 'Leaf Filtered', value: 'leaf-filtered'&#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">          &#123;label: 'Strict', value: 'strict'&#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">        ]"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"q-ma-none q-mr-sm"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"width: 150px"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-input</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-if</span>=<span class="string">"tickStrategy === 'leaf-filtered'"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">stack-label</span>=<span class="string">"Filter"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">"tickFilter"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"q-ma-none"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">clearable</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-tree</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:nodes</span>=<span class="string">"tickable"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">color</span>=<span class="string">"secondary"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">default-expand-all</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:ticked.sync</span>=<span class="string">"ticked"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:tick-strategy</span>=<span class="string">"tickStrategy"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:filter</span>=<span class="string">"tickFilter"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">node-key</span>=<span class="string">"label"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span></span><br><span class="line"><span class="undefined">    ticked: [],</span></span><br><span class="line"><span class="javascript">    tickStrategy: <span class="string">'leaf'</span>,</span></span><br><span class="line"><span class="javascript">    tickFilter: <span class="literal">null</span>,</span></span><br><span class="line"><span class="undefined">    tickable: [</span></span><br><span class="line"><span class="undefined">      &#123;</span></span><br><span class="line"><span class="javascript">        label: <span class="string">'Satisfied customers'</span>,</span></span><br><span class="line"><span class="javascript">        avatar: <span class="string">'statics/boy-avatar.png'</span>,</span></span><br><span class="line"><span class="undefined">        children: [</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            label: <span class="string">'Good food'</span>,</span></span><br><span class="line"><span class="javascript">            icon: <span class="string">'restaurant_menu'</span>,</span></span><br><span class="line"><span class="undefined">            children: [</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Quality ingredients'</span> &#125;,</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Good recipe'</span> &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            label: <span class="string">'Good service'</span>,</span></span><br><span class="line"><span class="javascript">            icon: <span class="string">'room_service'</span>,</span></span><br><span class="line"><span class="undefined">            children: [</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Prompt attention'</span> &#125;,</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">'Professional waiter'</span> &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            label: <span class="string">'Pleasant surroundings'</span>,</span></span><br><span class="line"><span class="javascript">            icon: <span class="string">'photo'</span>,</span></span><br><span class="line"><span class="undefined">            children: [</span></span><br><span class="line"><span class="undefined">              &#123;</span></span><br><span class="line"><span class="javascript">                label: <span class="string">'Happy atmosphere (not tickable)'</span>,</span></span><br><span class="line"><span class="javascript">                tickable: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">                img: <span class="string">'statics/parallax1.jpg'</span></span></span><br><span class="line"><span class="undefined">              &#125;,</span></span><br><span class="line"><span class="undefined">              &#123;</span></span><br><span class="line"><span class="javascript">                label: <span class="string">'Good table presentation (disabled node)'</span>,</span></span><br><span class="line"><span class="javascript">                disabled: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                img: <span class="string">'statics/parallax2.jpg'</span></span></span><br><span class="line"><span class="undefined">              &#125;,</span></span><br><span class="line"><span class="undefined">              &#123;</span></span><br><span class="line"><span class="javascript">                label: <span class="string">'Pleasing decor'</span>,</span></span><br><span class="line"><span class="javascript">                img: <span class="string">'statics/mountains.jpg'</span></span></span><br><span class="line"><span class="undefined">              &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            label: <span class="string">'Extra information (has no tick)'</span>,</span></span><br><span class="line"><span class="javascript">            noTick: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            icon: <span class="string">'photo'</span></span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            label: <span class="string">'Forced tick strategy (to "strict" in this case)'</span>,</span></span><br><span class="line"><span class="javascript">            tickStrategy: <span class="string">'strict'</span>,</span></span><br><span class="line"><span class="javascript">            icon: <span class="string">'school'</span>,</span></span><br><span class="line"><span class="undefined">            children: [</span></span><br><span class="line"><span class="undefined">              &#123;</span></span><br><span class="line"><span class="javascript">                label: <span class="string">'Happy atmosphere'</span>,</span></span><br><span class="line"><span class="javascript">                img: <span class="string">'statics/parallax1.jpg'</span></span></span><br><span class="line"><span class="undefined">              &#125;,</span></span><br><span class="line"><span class="undefined">              &#123;</span></span><br><span class="line"><span class="javascript">                label: <span class="string">'Good table presentation'</span>,</span></span><br><span class="line"><span class="javascript">                img: <span class="string">'statics/parallax2.jpg'</span></span></span><br><span class="line"><span class="undefined">              &#125;,</span></span><br><span class="line"><span class="undefined">              &#123;</span></span><br><span class="line"><span class="javascript">                label: <span class="string">'Very pleasing decor'</span>,</span></span><br><span class="line"><span class="javascript">                img: <span class="string">'statics/mountains.jpg'</span></span></span><br><span class="line"><span class="undefined">              &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        ]</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    ]</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Lazy-loading-nodes"><a href="#Lazy-loading-nodes" class="headerlink" title="Lazy loading nodes"></a>Lazy loading nodes</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-tree</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:nodes</span>=<span class="string">"lazy"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">default-expand-all</span></span></span><br><span class="line"><span class="tag">    <span class="attr">node-key</span>=<span class="string">"label"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">lazy-load</span>=<span class="string">"onLazyLoad"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span></span><br><span class="line"><span class="undefined">    lazy: [</span></span><br><span class="line"><span class="undefined">      &#123;</span></span><br><span class="line"><span class="javascript">        label: <span class="string">'Node 1'</span>,</span></span><br><span class="line"><span class="undefined">        children: [</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">label</span>: <span class="string">'Node 1.1'</span>, <span class="attr">lazy</span>: <span class="literal">true</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">label</span>: <span class="string">'Node 1.2'</span>, <span class="attr">lazy</span>: <span class="literal">true</span> &#125;</span></span><br><span class="line"><span class="undefined">        ]</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      &#123;</span></span><br><span class="line"><span class="javascript">        label: <span class="string">'Node 2'</span>,</span></span><br><span class="line"><span class="javascript">        lazy: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      &#123;</span></span><br><span class="line"><span class="javascript">        label: <span class="string">'Lazy load empty'</span>,</span></span><br><span class="line"><span class="javascript">        lazy: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      &#123;</span></span><br><span class="line"><span class="javascript">        label: <span class="string">'Node is not expandable'</span>,</span></span><br><span class="line"><span class="javascript">        expandable: <span class="literal">false</span>,</span></span><br><span class="line"><span class="undefined">        children: [</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">label</span>: <span class="string">'Some node'</span> &#125;</span></span><br><span class="line"><span class="undefined">        ]</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    ]</span></span><br><span class="line"><span class="undefined">  &#125;),</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    onLazyLoad (&#123; node, key, done, fail &#125;) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// call fail() if any error occurs</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// simulate loading and setting an empty node</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (key.indexOf(<span class="string">'Lazy load empty'</span>) &gt; <span class="number">-1</span>) &#123;</span></span><br><span class="line"><span class="undefined">          done([])</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> label = node.label</span></span><br><span class="line"><span class="undefined">        done([</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">label</span>: <span class="string">`<span class="subst">$&#123;label&#125;</span>.1`</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">label</span>: <span class="string">`<span class="subst">$&#123;label&#125;</span>.2`</span>, <span class="attr">lazy</span>: <span class="literal">true</span> &#125;,</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            label: <span class="string">`<span class="subst">$&#123;label&#125;</span>.3`</span>,</span></span><br><span class="line"><span class="undefined">            children: [</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">`<span class="subst">$&#123;label&#125;</span>.3.1`</span>, <span class="attr">lazy</span>: <span class="literal">true</span> &#125;,</span></span><br><span class="line"><span class="javascript">              &#123; <span class="attr">label</span>: <span class="string">`<span class="subst">$&#123;label&#125;</span>.3.2`</span>, <span class="attr">lazy</span>: <span class="literal">true</span> &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        ])</span></span><br><span class="line"><span class="undefined">      &#125;, 1000)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Uploader]]></title>
      <url>https://quasar-framework.org/components/uploader.html</url>
      <content type="html"><![CDATA[<p>Quasar supplies a way for you to upload files through QUploader component.</p>
<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<input type="hidden" data-fullpage-demo="forms/uploader">

<p><img src="/images/uploader.png" alt="Uploader Screenshot 2"></p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [<span class="string">'QUploader'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-uploader</span> <span class="attr">:url</span>=<span class="string">"url"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>url</code></td>
<td>String</td>
<td>(<strong>Required</strong>) URL or path to the server which handles the upload</td>
</tr>
<tr>
<td><code>name</code></td>
<td>String</td>
<td>Name of the file, if it should be different than the file’s name.</td>
</tr>
<tr>
<td><code>headers</code></td>
<td>Object</td>
<td>Specify what headers need to be added to the XHR request</td>
</tr>
<tr>
<td><code>url-factory</code></td>
<td>Function</td>
<td>Function (with <code>file</code> object received as parameter) which returns a Promise that resolves to a URL.</td>
</tr>
<tr>
<td><code>upload-factory</code></td>
<td>Function</td>
<td>(v0.17+) Function defining a custom upload method which returns a Promise that resolves with a file. Check section below.</td>
</tr>
<tr>
<td><code>no-content-type</code></td>
<td>Boolean</td>
<td>(v0.17+) Avoid setting Content-Type header when uploading.</td>
</tr>
<tr>
<td><code>with-credentials</code></td>
<td>Boolean</td>
<td>(v0.17+) Sets <code>xhr.withCredentials</code> to <code>true</code> (doesn’t apply when using <code>upload-factory</code>).</td>
</tr>
<tr>
<td><code>method</code></td>
<td>String</td>
<td>HTTP method to use (POST/PUT). Defaults to POST.</td>
</tr>
<tr>
<td><code>filter</code></td>
<td>Function</td>
<td>(v0.17+) Function defining a custom filter method which returns a list of filtered files. Check section below.</td>
</tr>
<tr>
<td><code>extensions</code></td>
<td>String</td>
<td>Extensions to allow for uploading. Example: <code>&#39;.gif,.jpg,.jpeg,.png&#39;</code></td>
</tr>
<tr>
<td><code>multiple</code></td>
<td>Boolean</td>
<td>Allow multiple file uploads</td>
</tr>
<tr>
<td><code>hide-upload-button</code></td>
<td>Boolean</td>
<td>Hides the Upload button. You can then trigger it manually by calling <code>upload()</code> on the Vue ref</td>
</tr>
<tr>
<td><code>hide-upload-progress</code></td>
<td>Boolean</td>
<td>Hides the upload progress. Useful when you want some other means of signaling upload progress to the user.</td>
</tr>
<tr>
<td><code>additional-fields</code></td>
<td>Array</td>
<td><strong>Additional fields to send along the upload request.</strong> Useful for authentication and so on. Array of Objects containing <code>name</code> and <code>value</code> props.</td>
</tr>
<tr>
<td><code>no-thumbnails</code></td>
<td>Boolean</td>
<td>Don’t display thumbnails when files are images.</td>
</tr>
<tr>
<td><code>auto-expand</code></td>
<td>Boolean</td>
<td>Auto-expand the list of files when some are added to the queue.</td>
</tr>
<tr>
<td><code>expand-style</code></td>
<td>String/Array/Object</td>
<td>Style of the expanded file list container.</td>
</tr>
<tr>
<td><code>expand-class</code></td>
<td>String/Array/Object</td>
<td>Classes of the expanded file list container.</td>
</tr>
<tr>
<td><code>send-raw</code></td>
<td>Boolean</td>
<td>Don’t use <strong>multipart/form-data</strong> and send the file content inside the request body. If using this approach you will need to specify the correct <strong>Content-Type</strong> header. Defaults to false.</td>
</tr>
<tr>
<td><code>readonly</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, Uploader is displayed as read-only.</td>
</tr>
<tr>
<td><code>clearable</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the component offers the user an actionable icon to remove the current selection.</td>
</tr>
</tbody>
</table>
<p>Common input frame properties:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>prefix</code></td>
<td>String</td>
<td>A text that should be shown before the textfield.</td>
</tr>
<tr>
<td><code>suffix</code></td>
<td>String</td>
<td>A text that should be shown after the textfield.</td>
</tr>
<tr>
<td><code>float-label</code></td>
<td>String</td>
<td>A text label that will “float” up above the input field, once the input field gets focus.</td>
</tr>
<tr>
<td><code>stack-label</code></td>
<td>String</td>
<td>A text label that will be shown above the input field and is static.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>inverted</code></td>
<td>Boolean</td>
<td>Inverted mode. Color is applied to background instead.</td>
</tr>
<tr>
<td><code>inverted-light</code></td>
<td>Boolean</td>
<td>Inverted mode with a light color. Color is applied to background instead.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Is QUploader rendered on a dark background?</td>
</tr>
<tr>
<td><code>hide-underline</code></td>
<td>Boolean</td>
<td>Hides the bottom border.</td>
</tr>
<tr>
<td><code>align</code></td>
<td>String</td>
<td>One of ‘left’, ‘center’ or ‘right’ which determines the text align within textfield.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, Uploader is disabled and the user cannot change anything.</td>
</tr>
<tr>
<td><code>error</code></td>
<td>Boolean</td>
<td>If set to true, the input fields colors are changed to show there is an error.</td>
</tr>
<tr>
<td><code>warning</code></td>
<td>Boolean</td>
<td>Same as <code>error</code>, the input field color is changed to show there is a warning.</td>
</tr>
<tr>
<td><code>before</code></td>
<td>Array of Objects</td>
<td>Icon buttons on left side of input frame. Read below more details.</td>
</tr>
<tr>
<td><code>after</code></td>
<td>Array of Objects</td>
<td>Icon buttons on right side of input frame. Read below more details.</td>
</tr>
<tr>
<td><code>no-parent-field</code></td>
<td>Boolean</td>
<td>Avoid trying to connect to a parent QField.</td>
</tr>
</tbody>
</table>
<h3 id="Upload-Factory"><a href="#Upload-Factory" class="headerlink" title="Upload Factory"></a>Upload Factory</h3><p>Sometimes you need to define your own upload method. You can do this through <code>upload-factory</code> parameter, as below:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-uploader</span></span></span><br><span class="line"><span class="tag">    <span class="attr">url</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:upload-factory</span>=<span class="string">"uploadFile"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    uploadFile (file, updateProgress) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// "file" is an Object containing file's props, including content</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// for updating progress (as 0-1 floating number), we need to call:</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// updateProgress (bytesTransferred / totalBytes)</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// we need to return a Promise</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// (resolves when upload is done, rejects when there's an error)</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Filter-files"><a href="#Filter-files" class="headerlink" title="Filter files"></a>Filter files</h3><p>Sometimes you need to filter files before upload. You can do this through <code>filter</code> parameter.<br>Below an example with max file size check:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-uploader</span></span></span><br><span class="line"><span class="tag">    <span class="attr">url</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:filter</span>=<span class="string">"filterFiles"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    filterFiles (files) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> MAX_FILE_SIZE = <span class="number">3</span> * <span class="number">1024</span> * <span class="number">1024</span> <span class="comment">/* =3M */</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// returns an Array containing allowed files</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> files.filter(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> file.size &lt;= MAX_FILE_SIZE</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Icon-buttons"><a href="#Icon-buttons" class="headerlink" title="Icon buttons"></a>Icon buttons</h3><p>This section refers to <code>before</code> and <code>after</code> properties which can add additional buttons as icons to the textfield. Here is the structure of the two properties:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// required icon</span></span><br><span class="line">  icon: <span class="built_in">String</span>,</span><br><span class="line">  <span class="comment">// required function to call when</span></span><br><span class="line">  <span class="comment">// icon is clicked/tapped</span></span><br><span class="line">  handler: <span class="built_in">Function</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Optional. Show icon button</span></span><br><span class="line">  <span class="comment">// if model has a value</span></span><br><span class="line">  content: <span class="built_in">Boolean</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Optional. Show icon button</span></span><br><span class="line">  <span class="comment">// if textfield is marked with error</span></span><br><span class="line">  error: <span class="built_in">Boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Examples:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Show an icon button (with 'warning' as icon)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-uploader</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:url</span>=<span class="string">"url"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:after</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">      icon: 'warning',</span></span></span><br><span class="line"><span class="tag"><span class="string">      handler () &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        // do something...</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">  ]"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>upload()</code></td>
<td>Start file(s) upload.</td>
</tr>
<tr>
<td><code>abort()</code></td>
<td>Abort uploading file(s).</td>
</tr>
<tr>
<td><code>reset()</code></td>
<td>Reset uploader state.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@add(files)</code></td>
<td>Triggered when file is picked for upload</td>
</tr>
<tr>
<td><code>@remove:abort(file)</code></td>
<td>Triggered when file is removed from upload queue while uploading.</td>
</tr>
<tr>
<td><code>@remove:cancel(file)</code></td>
<td>Triggered when file is removed from upload queue before uploading.</td>
</tr>
<tr>
<td><code>@remove:done(file)</code></td>
<td>Triggered when file is removed from upload list after it has been  uploaded.</td>
</tr>
<tr>
<td><code>@uploaded(file, xhr)</code></td>
<td>Triggered individually for each file that has just been uploaded</td>
</tr>
<tr>
<td><code>@fail(file, xhr)</code></td>
<td>Triggered individually for each file that has encountered error while uploading</td>
</tr>
<tr>
<td><code>@start</code></td>
<td>Triggered when upload has started</td>
</tr>
<tr>
<td><code>@finish</code></td>
<td>Triggered when upload of file(s) has ended (with success or failure)</td>
</tr>
</tbody>
</table>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><h3 id="AWS-S3-Uploading-Using-Pre-Signed-URLs"><a href="#AWS-S3-Uploading-Using-Pre-Signed-URLs" class="headerlink" title="AWS S3 - Uploading Using Pre-Signed URLs"></a>AWS S3 - Uploading Using Pre-Signed URLs</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> x-amz-acl and content-type headers must match the ACL and ContentType</span></span><br><span class="line"><span class="comment"> specified when generating the signed url.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-uploader</span></span></span><br><span class="line"><span class="tag">  <span class="attr">url</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">  <span class="attr">method</span>=<span class="string">"PUT"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:headers</span>=<span class="string">"&#123; 'x-amz-acl': &lt;acl&gt;, 'content-type': &lt;file-type&gt; &#125;"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:url-factory</span>=<span class="string">"getSignedUrl"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:send-raw</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> getSignedUrl (file) &#123;</span><br><span class="line">  <span class="keyword">const</span> contentType = file.type <span class="comment">// To send the correct Content-Type</span></span><br><span class="line">  <span class="keyword">const</span> fileName = file.name <span class="comment">// If you want to use this value to calculate the S3 Key.</span></span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> api.getSignedUrl(&#123; fileName, contentType &#125;) <span class="comment">// Your api call to a sever that calculates the signed url.</span></span><br><span class="line">  <span class="keyword">return</span> response.data.url</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue Prototype Injections]]></title>
      <url>https://quasar-framework.org/components/vue-prototype-injections.html</url>
      <content type="html"><![CDATA[<p>Quasar injects Vue prototype with <code>$q</code> object:</p>
<table>
<thead>
<tr>
<th>Injection</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>$q.version</code></td>
<td>String</td>
<td>Quasar version.</td>
</tr>
<tr>
<td><code>$q.theme</code></td>
<td>String</td>
<td>Theme being used. Examples: mat, ios</td>
</tr>
<tr>
<td><code>$q.platform</code></td>
<td>Object</td>
<td>Same object as <a href="/components/platform-detection.html">Platform</a> import from Quasar.</td>
</tr>
<tr>
<td><code>$q.i18n</code></td>
<td>Object</td>
<td>Internationalisation for Quasar, containing labels etc (one of <a href="https://github.com/quasarframework/quasar/tree/dev/i18n" target="_blank" rel="noopener">i18n files</a>). Designed for Quasar components, but you can use in your app components too.</td>
</tr>
<tr>
<td><code>$q.cordova</code></td>
<td>Object</td>
<td>Reference to Cordova global object. Available only when running under a Cordova app.</td>
</tr>
<tr>
<td><code>$q.electron</code></td>
<td>Object</td>
<td>Reference to Electron global object. Available only when running under an Electron app.</td>
</tr>
</tbody>
</table>
<p>You can use it globally inside a Vue context (component script or template) like this:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- inside a Vue template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"$q.platform.is.ios"</span>&gt;</span></span><br><span class="line">      Gets rendered only on iOS platform.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// not available here outside</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// of the export</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// inside a Vue component script</span></span></span><br><span class="line"><span class="undefined">  ...,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// showing an example on a method, but</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// can be any part of Vue script</span></span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    show () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// prints out Quasar version</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$q.version)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Window Resize Observable]]></title>
      <url>https://quasar-framework.org/components/window-resize-observable.html</url>
      <content type="html"><![CDATA[<p>QWindowResizeObservable is a Quasar component that emits a <code>resize</code> event whenever the document viewport (window) changes its size, with no polling involved.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  components: [</span><br><span class="line">    <span class="string">'QWindowResizeObservable'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">    <span class="comment">&lt;!--can be placed anywhere within your template --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-window-resize-observable</span> @<span class="attr">resize</span>=<span class="string">"onResize"</span> /&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  ...,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    ...,</span></span><br><span class="line"><span class="undefined">    onResize (size) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(size)</span></span><br><span class="line"><span class="javascript">      <span class="comment">// &#123;</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//   width: 1200 // width of viewport (in px)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//   height: 920 // height of viewport (in px)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Please note that QWindowResizeObservable will issue an event as soon as it gets rendered and attached to DOM, so you can have the initial size of the window.</p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>debounce</code></td>
<td>Number</td>
<td>(v0.17+) Emitting the event with a custom debounce. “0” means no debounce.</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS Visibility]]></title>
      <url>https://quasar-framework.org/components/visibility.html</url>
      <content type="html"><![CDATA[<p>There are some CSS classes that you can use out of the box for common functionality.</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>disabled</code></td>
<td>Cursor is changed to notify a ‘disable’ and opacity is set to a lower value.</td>
</tr>
<tr>
<td><code>hidden</code></td>
<td>Set <code>display</code> to <code>none</code>. Compare with below - the class <code>hidden</code> means the element will not show <em>and</em> will not take up space in the layout.</td>
</tr>
<tr>
<td><code>invisible</code></td>
<td>Set <code>visibility</code> to <code>hidden</code>. Compare with above - the class <code>invisible</code> means the element will not show, but it will still take up space in the layout.</td>
</tr>
<tr>
<td><code>transparent</code></td>
<td>Background color is transparent.</td>
</tr>
<tr>
<td><code>dimmed</code></td>
<td>Apply dark transparent overlay on top of your element. Do not use on elements which already have <strong>:after</strong> pseudoelement.</td>
</tr>
<tr>
<td><code>light-dimmed</code></td>
<td>Apply white transparent overlay on top of your element. Do not use on elements which already have <strong>:after</strong> pseudoelement.</td>
</tr>
<tr>
<td><code>highlight-and-fade</code></td>
<td>Adds a yellow background color and fades it away upon element is displayed.</td>
</tr>
<tr>
<td><code>ellipsis</code></td>
<td>Truncates text and shows ellipsis when not enough space available.</td>
</tr>
<tr>
<td><code>ellipsis-2-lines</code></td>
<td>Truncates text and shows ellipsis when not enough space available on two lines (works only on Webkit browsers).</td>
</tr>
<tr>
<td><code>ellipsis-3-lines</code></td>
<td>Truncates text and shows ellipsis when not enough space available on three lines (works only on Webkit browsers).</td>
</tr>
<tr>
<td><code>z-top</code></td>
<td>Positions your element on top of any other component, but behind Popovers, Tooltips, Notifications.</td>
</tr>
<tr>
<td><code>z-max</code></td>
<td>Positions your element on top of any other component (including Drawer, Modals, Notifications, Layout header/footer, …)</td>
</tr>
</tbody>
</table>
<h3 id="Window-Width-Related"><a href="#Window-Width-Related" class="headerlink" title="Window Width Related"></a>Window Width Related</h3><p>First of all, let’s define what does a small, medium, big or large window means:</p>
<table>
<thead>
<tr>
<th>Window Size</th>
<th>Prefix</th>
<th>Width threshold in pixels</th>
</tr>
</thead>
<tbody>
<tr>
<td>Extra Small</td>
<td>xs</td>
<td>Up to 576px</td>
</tr>
<tr>
<td>Small</td>
<td>sm</td>
<td>Up to 768px</td>
</tr>
<tr>
<td>Medium</td>
<td>md</td>
<td>Up to 992px</td>
</tr>
<tr>
<td>Large</td>
<td>lg</td>
<td>Up to 1200px</td>
</tr>
<tr>
<td>Extra Large</td>
<td>xl</td>
<td>Bigger than 1200px</td>
</tr>
</tbody>
</table>
<p>Now on to the window width related CSS classes.</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>xs</code></td>
<td>Display only on extra small windows</td>
</tr>
<tr>
<td><code>sm</code></td>
<td>Display only on small windows</td>
</tr>
<tr>
<td><code>md</code></td>
<td>Display only on medium-sized windows</td>
</tr>
<tr>
<td><code>lg</code></td>
<td>Display only on large windows</td>
</tr>
<tr>
<td><code>xl</code></td>
<td>Display only on extra large windows</td>
</tr>
</tbody>
</table>
<p>You can also show some DOM element or component <strong>if it’s lower than one of the sizes</strong>. <strong>Same for greater than one of the sizes</strong>. Just attach <code>lt-</code> or <code>gt-</code> prefixes, which come from “lower than” and “greater than”. Example: <code>lt-md</code> (display on xs and sm only), <code>lt-xl</code> (display on xs, sm, md and lg windows only), <code>gt-md</code> (display on greater than medium windows: lg and xl).</p>
<blockquote>
<p><strong>NOTE</strong><br>You can combine the visibility classes with the <code>inline</code> class for inline-blocks.<br>Example : <code>&lt;span class=&quot;gt-sm inline&quot;&gt;&amp;nbsp;and here is the end of this long sentence.&lt;/span&gt;</code></p>
</blockquote>
<h3 id="Platform-Related"><a href="#Platform-Related" class="headerlink" title="Platform Related"></a>Platform Related</h3><p>Visible only on:</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>desktop-only</code></td>
<td>Visible only on desktop</td>
</tr>
<tr>
<td><code>mobile-only</code></td>
<td>Visible only on mobile</td>
</tr>
<tr>
<td><code>cordova-only</code></td>
<td>Visible only on Cordova wrapped Apps</td>
</tr>
<tr>
<td><code>electron-only</code></td>
<td>Visible only on Electron wrapped Apps</td>
</tr>
<tr>
<td><code>touch-only</code></td>
<td>Visible only on touch capable platforms</td>
</tr>
<tr>
<td><code>mat-only</code></td>
<td>Visible only for Material Quasar Theme</td>
</tr>
<tr>
<td><code>ios-only</code></td>
<td>Visible only for iOS Quasar Theme</td>
</tr>
<tr>
<td><code>platform-ios-only</code></td>
<td>Visible only on an iOS platform</td>
</tr>
<tr>
<td><code>platform-android-only</code></td>
<td>Visible only on an Android platform</td>
</tr>
<tr>
<td><code>within-iframe-only</code></td>
<td>Visible only when entire website is under an IFRAME tag</td>
</tr>
</tbody>
</table>
<p>Hide on:</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>desktop-hide</code></td>
<td>Hide on desktop</td>
</tr>
<tr>
<td><code>mobile-hide</code></td>
<td>Hide on mobile</td>
</tr>
<tr>
<td><code>cordova-hide</code></td>
<td>Hide on Cordova wrapped Apps</td>
</tr>
<tr>
<td><code>electron-hide</code></td>
<td>Hide on Electron wrapped Apps</td>
</tr>
<tr>
<td><code>touch-hide</code></td>
<td>Hide on touch capable platforms</td>
</tr>
<tr>
<td><code>mat-hide</code></td>
<td>Hide for Material Quasar Theme</td>
</tr>
<tr>
<td><code>ios-hide</code></td>
<td>Hide for iOS Quasar Theme</td>
</tr>
<tr>
<td><code>platform-ios-hide</code></td>
<td>Hide on iOS platform</td>
</tr>
<tr>
<td><code>platform-android-hide</code></td>
<td>Hide on Android platform</td>
</tr>
<tr>
<td><code>within-iframe-hide</code></td>
<td>Hide only when entire website is under an IFRAME tag</td>
</tr>
</tbody>
</table>
<p>Also check <a href="/guide/quasar-theming.html#Platform-Specific-Styles">Quasar Theming &gt; Platform Specific Styles</a>.</p>
<blockquote>
<p><strong>NOTE</strong><br>Based on your needs, you might want to also check <a href="/components/platform-detection.html">Javascript &gt; Environment</a> page to see how you can achieve the same effect using Javascript. This latter method allows you to not even render a DOM element or component. It is useful when the rendering process is expensive.</p>
</blockquote>
<h3 id="Orientation-Related"><a href="#Orientation-Related" class="headerlink" title="Orientation Related"></a>Orientation Related</h3><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>orientation-portrait</code></td>
<td>Visible only when screen orientation is <em>Portrait</em></td>
</tr>
<tr>
<td><code>orientation-landscape</code></td>
<td>Visible only when screen orientation is <em>Landscape</em></td>
</tr>
</tbody>
</table>
<h3 id="Printing-Related"><a href="#Printing-Related" class="headerlink" title="Printing Related"></a>Printing Related</h3><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>print-only</code></td>
<td>Visible only on print media - hidden on <em>screen</em> media</td>
</tr>
<tr>
<td><code>print-hide</code></td>
<td>Visible on <em>screen</em> media - hidden on <em>print</em> media</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Web Storage]]></title>
      <url>https://quasar-framework.org/components/web-storage.html</url>
      <content type="html"><![CDATA[<p>Quasar provides a wrapper over <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API" target="_blank" rel="noopener">Web Storage API</a>.</p>
<blockquote>
<p><strong>NOTE</strong><br>Web Storage API only retrieves strings. <strong>Quasar retrieves data with its original data type.</strong> You tell it to store a Number then to retrieve it and it will still be a Number, not a string representation of the number as with Web Storage API. Same for JSON, Regular Expressions, Dates, Booleans and so on. Read below.</p>
</blockquote>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Edit <code>/quasar.conf.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">framework: &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="string">'LocalStorage'</span>,</span><br><span class="line">    <span class="string">'SessionStorage'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Note-about-SSR"><a href="#Note-about-SSR" class="headerlink" title="Note about SSR"></a>Note about SSR</h3><p>When running the code server-side on SSR builds, this feature can’t work. Web Storage is a browser API only. You can however make use of it on the client-side with SSR.</p>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>Quasar supports both Local and Session Storage.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// outside of a Vue file</span></span><br><span class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line">LocalStorage.set(key, value)</span><br><span class="line"><span class="keyword">let</span> value = LocalStorage.get.item(key)</span><br><span class="line"></span><br><span class="line">SessionStorage.set(key, value)</span><br><span class="line"><span class="keyword">let</span> value = SessionStorage.get.item(key)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// inside of a Vue file</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$q.localStorage.set(key, value)</span><br><span class="line"><span class="keyword">let</span> value = <span class="keyword">this</span>.$q.localStorage.get.item(key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$q.sessionStorage.set(key, value)</span><br><span class="line"><span class="keyword">let</span> value = <span class="keyword">this</span>.$q.sessionStorage.get.item(key)</span><br></pre></td></tr></table></figure>
<p>Before we jump to discuss on the API, let’s see what data types are supported out of the box.</p>
<h2 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h2><p>Quasar Storage supports (but not limited to) the following data types out of the box. If you store one of these types, the retrieved data will have the same data type.</p>
<ul>
<li>Dates</li>
<li>Regular Expressions</li>
<li>Numbers</li>
<li>Booleans</li>
<li>Strings</li>
<li>Plain Javascript Objects</li>
</ul>
<p>If you store any <em>other</em> data type, the returned value will be a String.</p>
<p>So you can even store functions, but be careful that you need to eval() the returned value (which is a String representation of the function).</p>
<h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><h3 id="Storing-Data"><a href="#Storing-Data" class="headerlink" title="Storing Data"></a>Storing Data</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// outside of a Vue file</span></span><br><span class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line">LocalStorage.set(key, value)</span><br><span class="line">SessionStorage.set(key, value)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// inside of a Vue file</span></span><br><span class="line"><span class="keyword">this</span>.$q.localStorage.set(key, value)</span><br><span class="line"><span class="keyword">this</span>.$q.sessionStorage.set(key, value)</span><br></pre></td></tr></table></figure>
<h3 id="Retrieving-Data"><a href="#Retrieving-Data" class="headerlink" title="Retrieving Data"></a>Retrieving Data</h3><p>One item:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// outside of a Vue file</span></span><br><span class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> item = LocalStorage.get.item(key)</span><br><span class="line"><span class="keyword">let</span> item = SessionStorage.get.item(key)</span><br><span class="line"></span><br><span class="line"><span class="comment">// inside of a Vue file</span></span><br><span class="line"><span class="keyword">let</span> item = <span class="keyword">this</span>.$q.localStorage.get.item(key)</span><br><span class="line"><span class="keyword">let</span> item = <span class="keyword">this</span>.$q.sessionStorage.get.item(key)</span><br></pre></td></tr></table></figure></p>
<p>All items:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// outside of a Vue file</span></span><br><span class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> item = LocalStorage.get.all()</span><br><span class="line"><span class="keyword">let</span> item = SessionStorage.get.all()</span><br><span class="line"></span><br><span class="line"><span class="comment">// inside of a Vue file</span></span><br><span class="line"><span class="keyword">let</span> item = <span class="keyword">this</span>.$q.localStorage.get.all()</span><br><span class="line"><span class="keyword">let</span> item = <span class="keyword">this</span>.$q.sessionStorage.get.all()</span><br></pre></td></tr></table></figure></p>
<h3 id="Iterating-through-Store"><a href="#Iterating-through-Store" class="headerlink" title="Iterating through Store"></a>Iterating through Store</h3><p>Getting length of store:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// outside of a Vue file</span></span><br><span class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> length = LocalStorage.get.length()</span><br><span class="line"><span class="keyword">let</span> length = SessionStorage.get.length()</span><br><span class="line"></span><br><span class="line"><span class="comment">// inside of a Vue file</span></span><br><span class="line"><span class="keyword">let</span> length = <span class="keyword">this</span>.$q.localStorage.get.length()</span><br><span class="line"><span class="keyword">let</span> length = <span class="keyword">this</span>.$q.sessionStorage.get.length()</span><br></pre></td></tr></table></figure></p>
<p>Getting item at index:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// outside of a Vue file</span></span><br><span class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> item = LocalStorage.get.index(index)</span><br><span class="line"><span class="keyword">let</span> item = SessionStorage.get.index(index)</span><br><span class="line"></span><br><span class="line"><span class="comment">// inside of a Vue file</span></span><br><span class="line"><span class="keyword">let</span> item = <span class="keyword">this</span>.$q.localStorage.get.index(index)</span><br><span class="line"><span class="keyword">let</span> item = <span class="keyword">this</span>.$q.sessionStorage.get.index(index)</span><br></pre></td></tr></table></figure></p>
<p>Now you know how to loop through the store.</p>
<h3 id="Removing-Data"><a href="#Removing-Data" class="headerlink" title="Removing Data"></a>Removing Data</h3><p>One item:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// outside of a Vue file</span></span><br><span class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line">LocalStorage.remove(key)</span><br><span class="line">SessionStorage.remove(key)</span><br><span class="line"></span><br><span class="line"><span class="comment">// inside of a Vue file</span></span><br><span class="line"><span class="keyword">this</span>.$q.localStorage.remove(key)</span><br><span class="line"><span class="keyword">this</span>.$q.sessionStorage.remove(key)</span><br></pre></td></tr></table></figure></p>
<p>All items (clear the store):<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// outside of a Vue file</span></span><br><span class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line">LocalStorage.clear()</span><br><span class="line">SessionStorage.clear()</span><br><span class="line"></span><br><span class="line"><span class="comment">// inside of a Vue file</span></span><br><span class="line"><span class="keyword">this</span>.$q.localStorage.clear()</span><br><span class="line"><span class="keyword">this</span>.$q.sessionStorage.clear()</span><br></pre></td></tr></table></figure></p>
<h3 id="Is-Store-Empty"><a href="#Is-Store-Empty" class="headerlink" title="Is Store Empty?"></a>Is Store Empty?</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// outside of a Vue file</span></span><br><span class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line">(boolean) LocalStorage.isEmpty()</span><br><span class="line">(boolean) SessionStorage.isEmpty()</span><br><span class="line"></span><br><span class="line"><span class="comment">// inside of a Vue file</span></span><br><span class="line">(boolean) <span class="keyword">this</span>.$q.localStorage.isEmpty()</span><br><span class="line">(boolean) <span class="keyword">this</span>.$q.sessionStorage.isEmpty()</span><br></pre></td></tr></table></figure>
<h3 id="Is-Key-in-Store"><a href="#Is-Key-in-Store" class="headerlink" title="Is Key in Store?"></a>Is Key in Store?</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// outside of a Vue file</span></span><br><span class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></span><br><span class="line"></span><br><span class="line">(boolean) LocalStorage.has(key)</span><br><span class="line">(boolean) SessionStorage.has(key)</span><br><span class="line"></span><br><span class="line"><span class="comment">// inside of a Vue file</span></span><br><span class="line">(boolean) <span class="keyword">this</span>.$q.localStorage.has(key)</span><br><span class="line">(boolean) <span class="keyword">this</span>.$q.sessionStorage.has(key)</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>https://quasar-framework.org/search/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
