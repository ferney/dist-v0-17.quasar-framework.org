[{"title":"","updated":"2018-05-09T14:34:08.328Z","permalink":"https://quasar-framework.org/index.html","text":""},{"title":"","updated":"2018-05-09T14:34:08.328Z","permalink":"https://quasar-framework.org/quasar-play-privacy-policy.html","text":""},{"title":"","updated":"2018-05-09T14:34:08.328Z","permalink":"https://quasar-framework.org/support-quasar-framework.html","text":""},{"title":"","updated":"2018-05-09T14:34:08.654Z","permalink":"https://quasar-framework.org/blog/index.html","text":""},{"title":"Ajax Requests","updated":"2018-05-18T22:01:01.051Z","permalink":"https://quasar-framework.org/guide/ajax-requests.html","text":"Quasar recommends Axios during project initialization: Use Axios for Ajax calls? (Y/n) Then you should create a new plugin axios.js that looks like this:(Here you can also specify additional settings for your axios instance)import axios from &apos;axios&apos;export default (&#123;app, router, Vue&#125;) =&gt; &#123; Vue.prototype.$axios = axios // ^ ^ ^ this will allow you to use this.$axios // so you won&apos;t necessarily have to import axios in each vue file&#125; Usage in your single file components methods will be like:methods: &#123; loadData () &#123; this.$axios.get(&apos;/api/backend&apos;) .then((response) =&gt; &#123; this.data = response.data &#125;) .catch(() =&gt; &#123; this.$q.notify(&#123; color: &apos;negative&apos;, position: &apos;top&apos;, message: &apos;Loading failed&apos;, icon: &apos;report_problem&apos; &#125;) &#125;) &#125;, Usage in Vuex Actions for globally adding headers to axios (such as during authentication):import axios from &apos;axios&apos;export function register (&#123;commit&#125;, form) &#123; return axios.post(&apos;api/auth/register&apos;, form) .then(response =&gt; &#123; commit(&apos;login&apos;, &#123;token: response.data.token, user: response.data.user&#125;) setAxiosHeaders(response.data.token) &#125;)&#125;function setAxiosHeaders (token) &#123; axios.defaults.headers.common[&apos;Authorization&apos;] = &apos;Bearer &apos; + token&#125; Also look at Axios docs for more information."},{"title":"Adding Pages and Layouts","updated":"2018-05-18T22:01:01.051Z","permalink":"https://quasar-framework.org/guide/app-adding-pages-and-layouts.html","text":"Your Pages (/src/pages) and Layouts (/src/layouts) are injected into your website/app (and also managed) through Vue Router in /src/router/routes.js. Each Page and Layout needs to be referenced there. You may want to read Routing first and also understand Lazy Loading / Code Splitting. Example of routes.js:// we define our routes in this fileimport LandingPage from 'pages/Landing'const routes = [ &#123; path: '/', component: LandingPage &#125;]export default routes Example of routes.js using lazy-loading / on-demand loading:// we define our routes in this fileconst routes = [ &#123; path: '/', component: () =&gt; import('pages/Landing') &#125;]export default routes Configuring routes to use Layouts and Pages basically consists of correctly nesting routes, as we’ll see in the next section. Nested RoutesReal app UIs are usually composed of components that are nested multiple levels deep. It is also very common that the segments of a URL corresponds to a certain structure of nested components, for example: /user/profile /user/posts+------------------+ +-----------------+| User | | User || +--------------+ | | +-------------+ || | Profile | | +------&gt; | | Posts | || | | | | | | || +--------------+ | | +-------------+ |+------------------+ +-----------------+ With Vue Router, it is very simple to express this relationship using nested route configurations. We notice some things: both pages need to be wrapped by a User component. Hey, User component is then a Layout! Let’s create these files:$ quasar new layout User app:new Generated layout: src/layouts/User.vue +0ms app:new Make sure to reference it in src/router/routes.js +2ms$ quasar new page Profile Posts app:new Generated page: src/pages/Profile.vue +0ms app:new Make sure to reference it in src/router/routes.js +2ms app:new Generated page: src/pages/Posts.vue +1ms app:new Make sure to reference it in src/router/routes.js +0ms Since User layout wraps inner pages, they need an injection point. This is supplied by the &lt;router-view&gt; component:&lt;!-- /src/layouts/User.vue --&gt;&lt;template&gt; &lt;q-layout&gt; ... &lt;!-- this is where the Pages are injected --&gt; &lt;q-page-container&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/q-page-container&gt; ... &lt;/q-layout&gt;&lt;/template&gt; &lt;!-- /src/pages/Profile.vue or Posts.vue --&gt;&lt;template&gt; &lt;q-page&gt; ...page content... &lt;/q-page&gt;&lt;/template&gt;` Our example has some routes specified (/user/profile and /user/posts). So how can we put everything together now? We edit the routes file. That’s where we will configure routes, tell which components are Layouts and which are Pages and also reference/import them into our app: // src/router/routes.jsimport User from 'layouts/User'import Profile from 'pages/Profile'import Posts from 'pages/Posts'const routes = [ &#123; path: '/user', // we use /src/layouts/User component which is imported above component: User, // hey, it has children routes and User has &lt;router-view&gt; in it; // It is really a Layout then! children: [ // Profile page &#123; path: 'profile', // here it is, route /user/profile component: Profile // we reference /src/pages/Profile.vue imported above &#125;, // Posts page &#123; path: 'posts', // here it is, route /user/posts component: Posts // we reference /src/pages/Posts.vue imported above &#125; ] &#125;]export default routes Note that nested paths that start with / will be treated as a root path. This allows you to leverage component nesting without having to use a nested URL. For further in-detail reading please take a look on Vue Router documentation."},{"title":"API Proxying for Dev","updated":"2018-05-18T22:01:01.052Z","permalink":"https://quasar-framework.org/guide/app-api-proxying.html","text":"When integrating a project folder with Quasar CLI and the Main Starter Kit with an existing backend, a common need is to access the backend API when using the dev server. To achieve this, we can run the dev server and the API backend side-by-side (or remotely), and let the dev server proxy all API requests to the actual backend. This is useful if you access relative paths in your API requests. Obviously, these relative paths will probably not work while you are developing. In order to create an environment similar to the one used by your deployed website/app, you can proxy your API requests. To configure the proxy rules, edit /quasar.conf.js in devServer.proxy. You should refer to Webpack Dev Server Proxy docs for detailed usage. But here’s a simple example: // quasar.conf.jsdevServer: &#123; proxy: &#123; // proxy all requests starting with /api to jsonplaceholder '/api': &#123; target: 'http://some.api.target.com:7070', changeOrigin: true, pathRewrite: &#123; '^/api': '' &#125; &#125; &#125;&#125; The above example will proxy the request /api/posts/1 to http://some.api.target.com:7070/posts/1."},{"title":"Build Commands","updated":"2018-07-25T14:14:24.684Z","permalink":"https://quasar-framework.org/guide/app-build-commands.html","text":"We will be covering Development and Production build commands. For a full list of Quasar CLI commands, make sure to read its documentation page. Development Starts a Node.js local development server. # run development server (with default theme)$ quasar dev# run development server with specific theme$ quasar dev -t mat$ quasar dev -t ios# on specific port$ quasar dev -p 9090# SSR$ quasar dev -m ssr# PWA$ quasar dev -m pwa# Mobile App$ quasar dev -m cordova -T [android|ios] -t [mat|ios]# Electron App$ quasar dev -m electron# with iOS theme...$ quasar dev -m electron -t ios For a complete list, please read Quasar CLI Development Server section. While developing with the Dev Server you will have: Babel, so you can write ES6 code Webpack + vue-loader for Vue SFC (single file components) State preserving hot-reload State preserving compilation error overlay Lint-on-save with ESLint Source maps Develop right on a device emulator (or a real phone connected to your machine) if you target a Mobile App Develop right on an Electron window with Developer Tools included if you target an Electron App Production Build assets for production. # build for production$ quasar build# build for production with specific theme$ quasar build -t mat$ quasar build -t ios# SSR$ quasar build -m ssr# PWA$ quasar build -m pwa# Mobile App$ quasar build -m cordova -T [android|ios] -t [mat|ios]# Electron App$ quasar build -m electron# with iOS theme...$ quasar build -m electron -t ios For a complete list, please read Quasar CLI Build App for Production section. In addition to what you get while developing your website/app, for production builds you also take advantage of: Javascript minified with UglifyJS HTML minified with html-minifier CSS across all components extracted (and auto-prefixed) into a single file and minified with cssnano All static assets are compiled with version hashes for efficient long-term caching, and a production index.html is auto-generated with proper URLs to these generated assets."},{"title":"Directory Structure","updated":"2018-07-25T14:14:24.685Z","permalink":"https://quasar-framework.org/guide/app-directory-structure.html","text":"This is the structure of a project with all modes installed. There’s no reason to be intimidated though! If you are a beginner, all you’ll need to care about is /quasar.conf.js (Quasar App Config file), /src/router, /src/layouts, /src/pages and optionally /src/assets..├── src/│ ├── assets/ # dynamic assets (processed by webpack)│ ├── statics/ # pure static assets (directly copied)│ ├── components/ # .vue components used in pages &amp; layouts│ ├── css/ # CSS/Stylus/Sass/... files for your app| | ├── app.styl| │ └── themes/ # Quasar themes entry points for you to tweak| │ ├── common.variables.styl # Common Stylus variables for all Quasar themes| │ ├── variables.mat.styl # Variables for Material Design theme| │ └── variables.ios.styl # Variables for iOS theme│ ├── layouts/ # layout .vue files│ ├── pages/ # page .vue files│ ├── plugins/ # app plugins (app initialization code)│ ├── router/ # Vue Router| | ├── index.js # Vue Router definition| │ └── routes.js # App Routes definitions│ ├── store/ # Vuex Store| | ├── index.js # Vuex Store definition| │ ├── &lt;folder&gt; # Vuex Store Module...| │ └── &lt;folder&gt; # Vuex Store Module...│ ├── App.vue # root Vue component of your App│ └── index.template.html # Template for index.html├── src-ssr/ # SSR specific code (like production Node webserver)├── src-pwa/ # PWA specific code (like Service Worker)├── src-cordova/ # Cordova generated folder used to create Mobile Apps├── src-electron/ # Electron specific code (like \"main\" thread)├── dist/ # where production builds go│ ├── spa-mat/ # example when building SPA with MAT theme│ ├── spa-ios/ # example when building SPA with IOS theme│ ├── electron-mat/ # example when building Electron with MAT theme│ └── ....├── quasar.conf.js # Quasar App Config file├── .babelrc # babel config├── .editorconfig # editor config├── .eslintignore # ESlint ignore paths├── .eslintrc.js # ESlint config├── .postcssrc.js # PostCSS config├── .stylintrc # Stylus lint config├── .gitignore # GIT ignore paths├── package.json # npm scripts and dependencies└── README.md # readme for your website/App"},{"title":"Deployment of SPA","updated":"2018-05-20T16:04:39.318Z","permalink":"https://quasar-framework.org/guide/app-deploying-spa.html","text":"There exist many services that allow deploying applications with ease.To list all of them would not be possible so we will focus on the general deployment process and some specifics for common services. If your favorite deployment tool is missing feel free to create a pull request on GitHub to add it to the list. General deploymentThe first step in deploying you Quasar SPA is always to build a production-ready bundle of your files, which gets rid of development statements and minifies your source. To produce such a build use Quasar CLI with the following command$ quasar build For possible build options please refer to the Quasar CLI docs. This command will build your project in SPA mode and output your production ready bundle to a newly created folder /dist/spa-&lt;theme&gt; were &lt;theme&gt; is replaced by the theme you chose to build with. To serve your production files it is required to use a web server, so to serve over http:// protocol. Simply opening the index.html file from within your browser will not work, since this uses the file:// protocol instead. Common choices for web servers are nginx, Caddy, Apache, Express; but you should be able to use whatever web server you want. The web server requires no special setup (unless you built with Vue Router in “history” mode). The main requirement is to be able to serve static files from a directory, so consult the documentation of your web server on how to set up static file serving. An example config for nginx may look like this:server &#123; listen 80 http2; server_name quasar.myapp.com; root /home/user/quasar.myapp.com/public; add_header X-Frame-Options &quot;SAMEORIGIN&quot;; add_header X-XSS-Protection &quot;1; mode=block&quot;; add_header X-Content-Type-Options &quot;nosniff&quot;; index index.html; charset utf-8; location / &#123; try_files $uri $uri/ /index.html; &#125; location = /favicon.ico &#123; access_log off; log_not_found off; &#125; location = /robots.txt &#123; access_log off; log_not_found off; &#125; access_log off; error_log /var/log/nginx/quasar.myapp.com-error.log error; location ~ /\\.(?!well-known).* &#123; deny all; &#125;&#125; Deploying with NowDeploying your Quasar application with now is really easy. All you have to do is to download the now-cli and log in by running:$ now login Then proceed to build your Quasar application using the steps described in General deployment. After the build is finished, change directory into your deploy root (example: /dist/spa-mat) and run:$ now The Now CLI should now display information regarding your deployment, like the URL. That’s it. You’re done. Deploying with HerokuUnfortunately, Heroku does not support static sites out of the box. But don’t worry, we just need to add an HTTP server to our project so Heroku can serve our Quasar application. In this example, we will use Express to create a minimal server which Heroku can use. First, we need to install the required dependencies to our project:$ npm install express serve-static connect-history-api-fallback Now that we have installed the required dependencies, we can add our server. Create a file called server.js in the root directory of your project.const express = require('express'), serveStatic = require('serve-static'), history = require('connect-history-api-fallback'), port = process.env.PORT || 5000const app = express()app.use(history())app.use(serveStatic(__dirname + '/dist/spa-&lt;theme&gt;'))app.listen(port) Make sure to exchange &lt;theme&gt; to the theme you use. Heroku assumes a set of npm scripts to be available, so we have to alter our package.json and add the following under the script section:\"build\": \"quasar build\",\"start\": \"node server.js\",\"heroku-postbuild\": \"npm install --only=dev --no-shrinkwrap &amp;&amp; npm run build\" Now it is time to create an app on Heroku by running:$ heroku create and deploy to Heroku using:$ heroku deploy Deploying with SurgeSurge is a popular tool to host and deploy static sites. If you want to deploy your application with Surge you first need to install the Surge CLI tool:$ npm install -g surge Next, we will use Quasar CLI to build our app:$ quasar build Now we can deploy our application using Surge by calling:# make sure to replace &lt;theme&gt; with your actual theme$ surge dist/spa-&lt;theme&gt; Now your application should be successfully deployed using Surge. You should be able to adapt this guide to any other static site deployment tool. Deploying on GitHub PagesTo deploy your Quasar application to GitHub pages the first step is to create a special repository on GitHub which is named &lt;username&gt;.github.io. Clone this repository to your local machine. Next, you need to build your Quasar application like it is described in the general deployment section. This will result in a spa-&lt;theme&gt; directory inside the dist directory. Copy the content of this folder to your cloned repository. The last step is to add a commit in your repository an push to GitHub. After a short time, you should be able to visit your Quasar application at https://.github.io/. Adding a custom domain to GitHub pagesPlease see the GitHub pages guides for an in-depth explanation on how to set up a custom domain. Automated deployment to GitHub pages with push-dirManual copying all your files to your GitHub Pages repository can be a cumbersome task to do. This step can be automated by using the push-dir package. First, install the package with:$ npm install push-dir --save-dev Then add a deploy script command to your package.json:// replace &lt;theme&gt; with your actual theme (mat, ios)\"scripts\": &#123; \"deploy\": \"push-dir --dir=dist/spa-&lt;theme&gt; --remote=gh-pages --branch=master\"&#125; Add your GitHub Pages repository as a remote named gh-pages:$ git remote add gh-pages git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git Now you can build and deploy your application using:$ quasar build$ npm run deploy which will push the content of your build directory to your master branch on your Github Pages repository."},{"title":"CLI Installation and Development Features","updated":"2018-09-17T10:11:13.872Z","permalink":"https://quasar-framework.org/guide/app-installation.html","text":"Using the CLI is the recommended way to go in order to benefit from all Quasar can do for it. You’ll be able to build: a SPA (Single Page Application/Website), a SSR (Server-side Rendered App/Website + optional PWA client takeover) a PWA (Progressive Web App), a Mobile App (through Cordova), an Electron App,…sharing the same base-code. First, we install Quasar CLI. Make sure you have Node &gt;=8 and NPM &gt;=5 installed on your machine. # Node.js &gt;= 8.9.0 is required.$ yarn global add quasar-cli# or:$ npm install -g quasar-cli Then we create a project folder with Quasar CLI:$ quasar init &lt;folder_name&gt; Note that you don’t need separate projects if you want to build any of the options described above. This one project can seamlessly handle all of them. To continue your learning about Quasar, you should familiarize yourself with the Quasar CLI in depth, because you will be using it a lot. What’s IncludedWhile developing with Dev Server ($ quasar dev): Babel, so you can write ES6 code Webpack + vue-loader for Vue SFC (single file components) State preserving hot-reload State preserving compilation error overlay Lint-on-save with ESLint Source maps Develop right on a device emulator (or a real phone connected to your machine) if you target a Mobile App Develop right on an Electron window with Developer Tools included if you target an Electron App Developing for production ($ quasar build): Javascript minified with UglifyJS HTML minified with html-minifier CSS across all components extracted (and auto-prefixed) into a single file and minified with cssnano All static assets are compiled with version hashes for efficient long-term caching, and a production index.html is auto-generated with proper URLs to these generated assets. Take note of the ‘/quasar.conf.js’ file in the root of your project folder. This file helps you quickly configure the way your website/App works. We’ll go over it in the Configuration section."},{"title":"App Handling Assets","updated":"2018-05-18T22:01:01.053Z","permalink":"https://quasar-framework.org/guide/app-handling-assets.html","text":"You will notice in the project structure we have two directories for assets: /src/statics/ and /src/assets/. What is the difference between them? Some are static assets while the others are processed and embedded by the build system. Type of AssetsSo let’s try to answer the question above. We’ll first talk about using regular assets then we’ll see what static assets are. Regular assets - /src/assetsIn *.vue components, all your templates and CSS are parsed by vue-html-loader and css-loader to look for asset URLs. For example, in &lt;img src=&quot;./logo.png&quot;&gt; and background: url(./logo.png), &quot;./logo.png&quot; is a relative asset path and will be resolved by Webpack as a module dependency. Because logo.png is not JavaScript, when treated as a module dependency, we need to use url-loader and file-loader to process it. Quasar CLI has already configured these webpack loaders for you, so you basically get features such as filename fingerprinting and conditional base64 inlining for free, while being able to use relative/module paths without worrying about deployment. Since these assets may be inlined/copied/renamed during build, they are essentially part of your source code. This is why it is recommended to place Webpack-processed assets inside /src/assets, along side other source files. In fact, you don’t even have to put them all in /src/assets: you can organize them based on the module/component using them. For example, you can put each component in its own directory, with its static assets right next to it. Asset Resolving RulesRelative URLs, e.g. ./assets/logo.png will be interpreted as a module dependency. They will be replaced with a auto-generated URL based on your Webpack output configuration. URLs prefixed with ~ are treated as a module request, similar to require(&#39;some-module/image.png&#39;). You need to use this prefix if you want to leverage Webpack’s module resolving configurations. Quasar provides assets Webpack alias out of the box, so it is recommended that you use it like this: &lt;img src=&quot;~assets/logo.png&quot;&gt;. Notice ~ in front of ‘assets’. Static Assets - /src/staticsRoot-relative URLs, e.g. /statics/logo.png or statics/logo.png are not processed at all. This should be placed in src/statics/. These won’t be processed by Webpack at all. The statics folder is simply copied over to the distributable folder as-is. Quasar has some smart algorithms behind the curtains which ensure that no matter what you build (SPA, PWA, Cordova, Electron), your statics are correctly referenced if and only if all your statics start with statics/ string. For this reason, do not use /statics as URL. &lt;!-- Good! --&gt;&lt;img src=\"statics/logo.png\"&gt;&lt;!-- BAD! Don't! --&gt;&lt;img src=\"/statics/logo.png\"&gt; Vue Binding Requires Statics OnlyPlease note that whenever you bind “src” to a variable in your Vue scope, it must be one from the statics folder. The reason is simple: the URL is dynamic, so Webpack (which packs up assets at compile time) doesn’t know which file you’ll be referencing at runtime, so it won’t process the URL. &lt;template&gt; &lt;!-- imageSrc MUST reference a file from /src/statics --&gt; &lt;img :src=\"imageSrc\"&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; &lt;!-- Referencing /src/statics. Notice string doesn't start with a slash. (/) --&gt; imageSrc: 'statics/logo.png' &#125; &#125;&#125;&lt;/script&gt; IMPORTANTYou can force serving static assets by using src as a Vue property. Instead of src=&quot;statics/path/to/image&quot; use :src=&quot;&#39;statics/path/to/image&#39;&quot;. Please note the usage of single and double quotes. Getting Asset Paths in JavaScriptIn order for Webpack to return the correct asset paths, you need to use require(&#39;./relative/path/to/file.jpg&#39;), which will get processed by file-loader and returns the resolved URL. For example: computed: &#123; background () &#123; return require('./bgs/' + this.id + '.jpg') &#125;&#125; Note the above example will include every image under ./bgs/ in the final build. This is because Webpack cannot guess which of them will be used at runtime, so it includes them all."},{"title":"Lazy Loading / Code Splitting","updated":"2018-05-18T22:01:01.054Z","permalink":"https://quasar-framework.org/guide/app-lazy-loading---code-splitting.html","text":"When your website/app is small, you can load all layouts/pages/components into the initial bundle and serve everything at startup. But when your code gets complex and has many layouts/pages/components, it won’t be optimal to do this as it will massively impact loading time. Fortunately, there is a way to solve this. We’ll cover how you can lazy load / code split parts of your app so that they are automatically requested only on demand. This is done through dynamic imports. Let’s start with an example and then convert it so that we use lazy loading – we’ll focus this example on loading a page, but the same principle can be applied to load anything (assets, JSONs, …): import SomePage from 'pages/SomePage'const routes = [ &#123; path: '/some-page', component: SomePage &#125;] Now let’s change this and make the page be loaded on demand only, using dynamic imports:const routes = [ &#123; path: '/some-page', component: () =&gt; import('pages/SomePage') &#125;] Easy, right? What this does is that it creates a separate chunk for /src/pages/SomePage.vue which is then loaded only when it is needed. In this case, when a user visits the ‘/same-page’ route. As you noticed above, we’re using dynamic imports (import(&#39;..resource..&#39;)) instead of regular imports (import Resource from &#39;./path/to/resource&#39;). Dynamic imports are essentially returning a Promise that you can use: import('./categories.json') .then(categories =&gt; &#123; // hey, we have lazy loaded the file // and we have its content in \"categories\" &#125;) .catch(() =&gt; &#123; // oops, something went wrong... // couldn't load the resource &#125;) One advantage of using dynamic imports as opposed to regular imports is that the import path can be determined at runtime: import('pages/' + pageName + '/' + 'id') Caveat for Dynamic ImportsThere’s one caveat when using dynamic imports with variable parts like in the previous example. When the website/app is bundled, so at compile time, we have no way of telling what the exact import path will be at runtime. As a result, chunks will be created for each file that could match the variable path. You might see un-necessary files in the build log. So how can we limit the number of chunks created in this case? The idea is to limit the variable part as much as you can so the matched paths are as few as possible. Add file extension, even if it works without it too. This will create chunks only for that file types. Useful when that folder contains many file types. // badimport('./folder/' + pageName)// much betterimport('./folder/' + pageName + '.vue') Try to create a folder structure that will limit the files available in that variable path. Make it as specific as possible: // bad -- makes chunks for any JSON inside ./folder (recursive search)const asset = 'my/jsons/categories.json'import('./folder/' + asset)// good -- makes chunks only for JSONs inside ./folder/my/jsonsconst asset = 'categories.json'import('./folder/my/jsons/' + asset) Try to import from folders containing only files. Take the previous example and imagine ./folder/my/jsons further contains sub-folders. We made the dynamic import better by specifying a more specific path, but it’s still not optimal in this case. Best is to use terminal folders that only contain files, so we limit the number of matched paths. Remember that the number of matched paths equals to the number of chunks being generated."},{"title":"App Linter","updated":"2018-05-28T17:24:35.869Z","permalink":"https://quasar-framework.org/guide/app-linter.html","text":"Having a code linter in place is highly recommended and ensures your code looks legible. It also helps you capture some errors before even running the code. When you create a Quasar project folder with Quasar CLI it will ask you if you want a linter and which setup you want for ESLint: Standard - https://github.com/standard/standard Airbnb - https://github.com/airbnb/javascript .. or you can configure one yourself Two dot files will be created: .eslintrc.js – ESLint configuration, including rules .eslintignore – what ESLint should ignore when linting Further extension of one of the Eslint setups above can be made. Your project will by default use eslint-plugin-vue to handle your Vue files. Take a quick look at .eslintrc.js and notice it: extends: [ // https://github.com/vuejs/eslint-plugin-vue#priority-a-essential-error-prevention // consider switching to `plugin:vue/strongly-recommended` or `plugin:vue/recommended` for stricter rules. 'plugin:vue/strongly-recommended'] If you chose ESLint when creating your project folder, you’ll also notice that /quasar.conf.js adds the eslint-loader to Webpack configuration for you: build: &#123; extendWebpack (cfg) &#123; cfg.module.rules.push(&#123; enforce: 'pre', test: /\\.(js|vue)$/, loader: 'eslint-loader', exclude: /(node_modules|quasar)/ &#125;) &#125;&#125; Lint RulesThe linting rules can be removed, changed, or added. Notice some things: Some rules are for the Standard or Airbnb standards (whichever you chose when project was created). Example: ‘brace-style’. Some rules are for eslint-plugin-vue. Example: ‘vue/max-attributes-per-line’. You can add/remove/change rules by first visiting https://eslint.org/docs/rules/ or https://github.com/vuejs/eslint-plugin-vue. Example of ESLint rules below:// .eslintrc.js'rules': &#123; 'brace-style': [2, 'stroustrup', &#123; 'allowSingleLine': true &#125;], 'vue/max-attributes-per-line': 0, 'vue/valid-v-for': 0, // allow async-await 'generator-star-spacing': 'off', // allow paren-less arrow functions 'arrow-parens': 0, 'one-var': 0, 'import/first': 0, 'import/named': 2, 'import/namespace': 2, 'import/default': 2, 'import/export': 2, 'import/extensions': 0, 'import/no-unresolved': 0, 'import/no-extraneous-dependencies': 0, // allow debugger during development 'no-debugger': process.env.NODE_ENV === 'production' ? 2 : 0&#125; Disabling LinterIn order for you to disable ESLint, all you need to do is comment out (or remove) the following code from /quasar.conf.js: build: &#123; extendWebpack (cfg) &#123; /* * we comment out this block * cfg.module.rules.push(&#123; enforce: 'pre', test: /\\.(js|vue)$/, loader: 'eslint-loader', exclude: /(node_modules|quasar)/ &#125;) */ &#125;&#125;"},{"title":"App Plugins","updated":"2018-07-25T14:14:24.687Z","permalink":"https://quasar-framework.org/guide/app-plugins.html","text":"A common use case for Quasar applications is to run code before the root Vue instance is instantiated.Quasar provides an elegant solution to that problem by allowing users to define so-called app plugins. IMPORTANTDo not confuse app plugins with Quasar plugins, like ActionSheet, Dialog, Notify. Quasar plugins are something else entirely and will be covered in the Components section. In earlier Quasar versions, to run code before the root Vue instance was instantiated, you could alter the /src/main.js file and add any code you needed to execute. There is a major problem with this approach: With a growing project, your main.js file was very likely to get cluttered and challenging to maintain, which breaks with Quasar’s concept of encouraging developers to write maintainable and elegant cross-platform applications. With app plugins, it is possible to split each of your dependencies into a self-contained, easy to maintain file. It is also trivial to disable any of the app plugins or even contextually determine which of the app plugins get into the build through quasar.conf.js configuration. Anatomy of an app pluginAn app plugin is a simple JavaScript file which needs to export a function. Quasar will then call the exported function when it boots the application and additionally pass an object with the following properties to the function: Prop name Description app Object with which the root component gets instantiated by Vue router Instance of Vue Router from ‘src/router/index.js’ store Instance of the app Vuex Store - store only will be passed if your project uses Vuex (you have src/store) Vue Is same as if we do import Vue from &#39;vue&#39; and it’s there for convenience ssrContext Available only on server-side, if building for SSR export default (&#123; app, router, store, Vue &#125;) =&gt; &#123; // something to do&#125; Notice we are using the ES6 destructuring assignment. Only assign what you actually need/use. When to use app plugins IMPORTANTPlease make sure you understand what problem app plugins solve and when it is appropriate to use them, to avoid applying them in cases where they are not needed. App plugins fulfill one special purpose: they run code before the App’s Vue root component is instantiated while giving you access to certain variables, which is required if you need to initialize a library, interfere with Vue Router, inject Vue prototype or inject the root instance of the Vue app. Examples of appropriate usage of app plugins Your Vue plugin has installation instructions, like needing to call Vue.use() on it. Your Vue plugin requires instantiation of data that is added to the root instance - An example would be vue-i18n. You want to add something to the Vue prototype for convenient access - An example would be to conveniently use this.$axios inside your Vue files instead of importing Axios in each such file. You want to interfere with the router - An example would be to use router.beforeEach for authentication You want to interfere with the Vuex store instance - An example would be to use vuex-router-sync package Configure aspects of libraries - An example would be to create an instance of Axios with a base URL; you can then inject it into Vue prototype and/or export it (so you can import the instance from anywhere else in your app) Examples of unneeded usage of app plugins For plain JavaScript libraries like Lodash, which don’t need any initialization prior to their usage. Lodash, for example, might make sense to use as an app plugin only if you want to inject Vue prototype with it, like being able to use this.$_ inside your Vue files. Make API requests - You probably want to do this inside your pages Vue component Usage of app pluginsThe first step is always to generate a new plugin using Quasar CLI: $ quasar new plugin &lt;name&gt; Where &lt;name&gt; should be exchanged by a suitable name for your plugin. This command creates a new file: /src/plugins/&lt;name&gt;.js with the following content: // import something here// leave the export, even if you don't use itexport default (&#123; app, router, store, Vue &#125;) =&gt; &#123; // something to do&#125; You can now add content to that file depending on the intended use of your plugin. Do not forget that your default export needs to be a function.However, you can have as many named exports as you want, should the plugin expose something for later usage. In this case, you can import any of these named exports anywhere in your app. The last step is to tell Quasar to use your new plugin. For this to happen you need to add the plugin in /quasar.conf.js plugins: [ '&lt;name&gt;' // references /src/plugins/&lt;name&gt;.js] Quasar App FlowIn order to better understand how a plugin works and what it does, you need to understand how your website/app boots: Quasar is initialized (components, directives, plugins, Quasar i18n, Quasar icon sets) Quasar Extras get imported (Roboto font – if used, icons, animations, …) Quasar CSS &amp; your app’s global CSS is imported App.vue is loaded (not yet being used) Store is imported (if using Vuex Store in src/store) App plugins are imported App plugins get their default export function executed, except for App Boot plugin (if on Electron mode) Electron is imported and injected into Vue prototype (if on Cordova mode) Listening for “deviceready” event and only then continuing with following steps (if App Boot plugin exists) Executing App Boot plugin (if no App Boot plugin exists) Instantiating Vue with root component and attaching to DOM Examples of app pluginsAxiosimport axios from 'axios'export default (&#123; Vue &#125;) =&gt; &#123; // we add it to Vue prototype // so we can reference it in Vue files // without the need to import axios Vue.prototype.$axios = axios // Example: this.$axios will reference Axios now so you don't need stuff like vue-axios&#125; vue-i18n// we import the external packageimport VueI18n from 'vue-i18n'// let's say we have a file in /src/i18n containing the language packimport messages from 'src/i18n'export default (&#123; app, Vue &#125;) =&gt; &#123; // we tell Vue to use our Vue package: Vue.use(VueI18n) // Set i18n instance on app; // We inject it into root component by doing so; // new Vue(&#123;..., i18n: ... &#125;).$mount(...) app.i18n = new VueI18n(&#123; locale: 'en', fallbackLocale: 'en', messages &#125;)&#125; Router authenticationSome plugins might need to interfere with Vue Router configuration:export default (&#123; router, store, Vue &#125;) =&gt; &#123; router.beforeEach((to, from, next) =&gt; &#123; // Now you need to add your authentication logic here, like calling an API endpoint &#125;)&#125; Accessing data from pluginsSometimes you want to access data that you configure in your app plugin in files where you don’t have access to the root Vue instance. Fortunately, because app plugins are just normal JavaScript files you can add as many named exports to your app plugin as you want. Let’s take the example of Axios. Sometimes you want to access your Axios instance inside your JavaScript files, but you can not access the root Vue instance. To solve this you can export the Axios instance in your plugin and import it elsewhere. Consider the following plugin file for axios: // axios app plugin file (src/plugins/axios.js)import axios from 'axios'// We create our own axios instance and set a custom base URL.// Note that if we wouldn't set any config here we do not need// a named export, as we could just `import axios from 'axios'`const axiosInstance = axios.create(&#123; baseURL: 'https://api.example.com'&#125;)export default (&#123; Vue &#125;) =&gt; &#123; // for use inside Vue files through this.$axios Vue.prototype.$axios = axiosInstance&#125;// Here we define a named export// that we can later use inside .js files:export &#123; axiosInstance &#125; In any JavaScript file, you’ll be able to import the axios instance like this. // we import one of the named exports from src/plugins/axios.jsimport &#123; axiosInstance &#125; from 'plugins/axios' Further reading on syntax: ES6 import, ES6 export. Special App Plugin: Boot This is deprecated and will be removed in next version in favor of using PreFetch Feature in src/App.vue and calling redirect(false) to abort app render. IMPORTANT!This special app plugin is ignored for SSR builds. Every Quasar website/app is booted up after plugins have been loaded and executed. The last step is to call new Vue() and attach it to the DOM. If, for whatever reason, you need to control this final step and decide the specific moment when Vue kicks in, you can create a special Quasar plugin named “boot” (requires Quasar v0.15.6+). Remember to only use this plugin for eventually calling new Vue(app). Don’t use this for initializing any library you may have – for that, use a regular app plugin. # we create the boot plugin$ quasar new plugin boot app:new Generated plugin: src/plugins/boot.js +0ms app:new Make sure to reference it in quasar.conf.js &gt; plugins +2ms We then add this plugin to app plugins list in /quasar.conf.js:module.export = function (ctx) &#123; return &#123; plugins: [ &apos;boot&apos; ], ... &#125;&#125; IMPORTANTThe name “boot” for your plugin has a special meaning to Quasar CLI. It runs this plugin after all other app initialization has been executed and right before kicking off Vue with new Vue(). By adding this plugin you are responsible for kicking off Vue yourself, as we’ll see next. We edit our new plugin (/src/plugins/boot.js):export default (&#123; app, Vue &#125;) =&gt; &#123; // do some logic here... // ... then, kick off our Quasar website/app: /* eslint-disable-next-line no-new */ new Vue(app) // \"app\" has everything cooked in by Quasar CLI, // you don't need to inject it with anything at this point&#125; IMPORTANTDo not forget to have at least one decisional branch where you call new Vue(app) otherwise your app won’t boot and you’ll only see a blank page!"},{"title":"App Pre-Processors & Webpack","updated":"2018-07-25T14:14:24.687Z","permalink":"https://quasar-framework.org/guide/app-pre-processors-and-webpack.html","text":"The build system uses Webpack to create your website/app. Don’t worry if you aren’t acquainted with Webpack. Out of the box, you won’t need to configure it because it already has everything set up. However, for cases where you need to tweak the default Webpack config you can do so by editing /quasar.conf.js and configuring build &gt; extendWebpack (cfg) method or (CLI v0.16.2+) build &gt; chainWebpack (chain). Example of adding ESLint loader to it (assuming you’ve installed it):build: &#123; extendWebpack (cfg) &#123; cfg.module.rules.push(&#123; enforce: 'pre', test: /\\.(js|vue)$/, loader: 'eslint-loader', exclude: /(node_modules|quasar)/ &#125;) &#125;&#125; Notice that you don’t need to return anything. The parameter of extendWebpack(cfg) is the Webpack configuration Object generated by Quasar for you. You can add/remove/replace anything from it, assuming you really know what you are doing. Equivalent quasar.conf for chainWebpack():build: &#123; chainWebpack (chain) &#123; chain.module.rule('eslint') .test(/\\.(js|vue)$/) .enforce('pre') .exclude(/(node_modules|quasar)/) .use('eslint-loader') .loader('eslint-loader') &#125;&#125; Let’s discuss about Webpack loaders now. It’s probably where you’ll make the most additions. Webpack AliasesQuasar comes with a bunch of useful Webpack aliases preconfigured.You can use them anywhere in your project and webpack will resolve the correct path. If you want to add you own alias, se the section about adding your own alias to Webpack. Alias Resolves to quasar node_modules/quasar-framework/dist/quasar.&lt;configured-theme&gt;.esm.js src /src components /src/components layouts /src/layouts pages /src/pages assets /src/assets plugins /src/plugins variables /.quasar/variables.styl Also if you configure to build with the Vue compiler version (build &gt; vueCompiler: true), vue$ resolves to vue/dist/vue.esm.js. Webpack LoadersThe build system uses Webpack, so it relies on using webpack loaders to handle different types of files (js, css, styl, scss, json, and so on). By default, the most used loaders are provided by default. Installing loaders:Let’s take an example. You want to be able to import .json files. Out of the box, Quasar supplies json support so you don’t actually need to follow these steps, but for the sake of demonstrating how to add a loader, we’ll pretend Quasar doesn’t offer it. So, you need a loader for it. You search Google to see what webpack loader you need. In this case, it’s “json-loader”. We first install it:$ yarn add --dev json-loader# or:$ npm install --save-dev json-loader After installing your new loader, we want to tell Webpack to use it. So we edit /quasar.conf.js and change build.extendWebpack() to add entries to module/rules for this new loader: // quasar.confbuild: &#123; extendWebpack (cfg) &#123; cfg.module.rules.push(&#123; test: /\\.json$/, loader: 'json-loader' &#125;) &#125;&#125; Equivalent with chainWebpack():// quasar.confbuild: &#123; chainWebpack (chain) &#123; chain.module.rule('json') .test(/\\.json$/) .use('json-loader') .loader('json-loader') &#125;&#125; And you’re done. SASS/SCSS supportSo you want to be able to write SASS/SCSS CSS code. You need a loader for it. We first install it. Note that for this particular case you also need to install node-sass because sass-loader depends on it as a peer dependency. $ yarn add --dev sass-loader node-sass# or:$ npm install --save-dev sass-loader node-sass And you’re done. For SCSS/SASS it’s all it takes. You don’t need to further configure /quasar.conf.js. Once installed, you can use this pre-processor inside your *.vue components using the lang attribute on &lt;style&gt; tags: &lt;style lang=\"scss\"&gt;/* We can write SASS now! */&lt;/style&gt; A note on SASS syntax: lang=”scss” corresponds to the CSS-superset syntax (with curly braces and semicolons). lang=”sass” corresponds to the indentation-based syntax. PostCSSStyles in *.vue files (and all other style files) are piped through PostCSS by default, so you don’t need to use a specific loader for it. By default, PostCSS is configured to use Autoprefixer. Take a look at `/.postcssrc.js where you can tweak it if you need to. PugFirst, you need to install some dependencies: $ yarn add --dev pug pug-plain-loader# or:$ npm install --save-dev pug pug-plain-loader Then you need to extend the webpack configuration through quasar.conf.js:// quasar.conf.jsbuild: &#123; extendWebpack (cfg) &#123; cfg.module.rules.push(&#123; test: /\\.pug$/, loader: 'pug-plain-loader' &#125;) &#125;&#125; Equivalent with chainWebpack():// quasar.conf.jsbuild: &#123; chainWebpack (chain) &#123; chain.module.rule('pug') .test(/\\.pug$/) .use('pug-plain-loader') .loader('pug-plain-loader') &#125;&#125; CoffeescriptIf you are using Coffeescript then you need to EITHER disable ESLint OR tell ESLint which Vue components are using Coffeescript. Note that vue-loader uses lang=&quot;coffee&quot; to identify components which are using Coffeescript, but lang=&quot;coffee&quot; is not recognizable for ESLint. Fortunately, ESLint (following traditional HTML) uses type=&quot;xxx&quot; to identify the type of scripts. As long as a &lt;script&gt; tag has any type other than javascript, ESLint would mark the script as non-javascript, and skips linting it. Coffeescript’s convention is to use type=&quot;text/coffeescript&quot; to identify itself. Therefore, in your Vue components which are using Coffeescript, using both lang and type to avoid ESLint warnings: &lt;template&gt; ...&lt;/template&gt;&lt;script lang=\"coffee\" type=\"text/coffeescript\"&gt; ...&lt;/script&gt;"},{"title":"PreFetch Feature","updated":"2018-09-19T16:29:58.447Z","permalink":"https://quasar-framework.org/guide/app-prefetch-feature.html","text":"The PreFetch is a feature available when using Quasar CLI that allows a way for the components picked up by Vue Router (defined in /src/router/routes.js) to: pre-fetch data validate the route redirect to another route should some conditions are not met (like user should be logged in) can help in initializing the Store state All the above will run before the actual route component gets to be rendered. It is designed to work with all Quasar modes (SPA, PWA, SSR, Cordova, Electron), but it is especially useful for SSR builds. Installation// quasar.conf.jsreturn &#123; preFetch: true&#125; When you use it to pre-fetch data, you are required to use a Vuex Store, so make sure your project folder has the /src/store folder when you create your project, otherwise generate a new project and copy the store folder contents to your current project. How It Helps SSR ModeThis feature is especially useful for the SSR mode (but not limited to it only). During SSR, we are essentially rendering a “snapshot” of our app, so if the app relies on some asynchronous data, these data need to be pre-fetched and resolved before we start the rendering process. Another concern is that on the client, the same data needs to be available before we mount the client side app - otherwise the client app would render using different state and the hydration would fail. To address this, the fetched data needs to live outside the view components, in a dedicated data store, or a “state container”. On the server, we can pre-fetch and fill data into the store before rendering. The client-side store will directly pick up the server state before we mount the app. When It Gets ActivatedThe preFetch hook (described in next sections) is determined by the route visited - which also determines what components are rendered. In fact, the data needed for a given route is also the data needed by the components rendered at that route. So it is natural (and also required) to place the hook logic inside route components. This includes /src/App.vue, which in this case will run only once at the app bootup. Let’s take an example in order to understand when the hook is being called. Let’s say we have these routes and we’ve written preFetch hooks for all these components: // routes[ &#123; path: '/', component: LandingPage &#125;, &#123; path: '/shop', component: ShopLayout, children: [ &#123; path: 'all', component: ShopAll &#125;, &#123; path: 'new', component: ShopNew &#125;, &#123; path: 'product/:name', component: ShopProduct, children: [&#123; path: 'overview', component: ShopProductOverview &#125;] &#125; ] &#125;] Now, let’s see how the hooks are called when user visits these routes in the order specified below, one after another. Route being visited Hooks called from Observations / App.vue then LandingPage App.vue hook is called since our app boots up. /shop/all ShopLayout then ShopAll - /shop/new ShopNew ShopNew is a child of ShopLayout, and ShopLayout is already rendered, so ShopLayout isn’t called again. /shop/product/pijamas ShopProduct - /shop/product/shoes ShopProduct Quasar notices the same component is already rendered, but the route has been updated and it has route params, so it calls the hook again. /shop/product/shoes/overview ShopProduct then ShopProductOverview ShopProduct has route params so it is called even though it’s already rendered. / LandingPage - UsageThe hook is defined as a custom static function called preFetch on our route components. Note that because this function will be called before the components are instantiated, it doesn’t have access to this. &lt;!-- some .vue component used as route --&gt;&lt;template&gt; &lt;div&gt;&#123;&#123; item.title &#125;&#125;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; // our hook here preFetch (&#123; store, currentRoute, previousRoute, redirect, ssrContext &#125;) &#123; // fetch data, validate route and optionally redirect to some other route... // ssrContext is available only server-side in SSR mode // No access to \"this\" here as preFetch() is called before // the component gets instantiated. // Return a Promise if you are running an async job // Example: return store.dispatch('fetchItem', currentRoute.params.id) &#125;, computed: &#123; // display the item from store state. item () &#123; return this.$store.state.items[this.$route.params.id] &#125; &#125;&#125;&lt;/script&gt; Redirecting ExampleExample of redirecting the user under some circumstances, like when they try to access a page that only an authenticated user should see. // We assume here we already wrote the authentication logic// in the Vuex Store, so take as a high-level example only.preFetch (&#123; store, redirect &#125;) &#123; if (!store.state.authenticated) &#123; // IMPORTANT! Always use the String form of a // route if also building for SSR. The Object form // won't work on SSR builds. redirect('/login') &#125;&#125; If redirect(false) is called (supported only on client-side!), it aborts the current route navigation. Note that if you use it like this in src/App.vue it will halt the app bootup, which is undesirable. Using preFetch to Initialize the StoreThe preFetch hook runs only once, when the app boots up, so you can use this opportunity to initialize the Vuex Store here. // App.vueexport default &#123; // ... preFetch (&#123; store &#125;) &#123; // initialize something in store here &#125;&#125; Store Code SplittingIn a large application, your Vuex store will likely be split into multiple modules. Of course, it is also possible to code-split these modules into corresponding route component chunks. Suppose we have the following store module: // src/store/foo.js// we've merged everything into one file here;// an initialized Quasar project splits every component of a Vuex module// into separate files, but for the sake of the example// here in the docs, we show this module as a single fileexport default &#123; namespaced: true, // IMPORTANT: state must be a function so the module can be // instantiated multiple times state: () =&gt; (&#123; count: 0 &#125;), actions: &#123; inc: (&#123; commit &#125;) =&gt; commit('inc') &#125;, mutations: &#123; inc: state =&gt; state.count++ &#125;&#125; Now, we can use store.registerModule() to lazy-register this module in a route component’s preFetch() hook: // inside a route component&lt;template&gt; &lt;div&gt;&#123;&#123; fooCount &#125;&#125;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;// import the module here instead of in `src/store/index.js`import fooStoreModule from 'store/foo'export default &#123; preFetch (&#123; store &#125;) &#123; store.registerModule('foo', fooStoreModule) return store.dispatch('foo/inc') &#125;, // IMPORTANT: avoid duplicate module registration on the client // when the route is visited multiple times. destroyed () &#123; this.$store.unregisterModule('foo') &#125;, computed: &#123; fooCount () &#123; return this.$store.state.foo.count &#125; &#125;&#125;&lt;/script&gt; Also note that because the module is now a dependency of the route component, it will be moved into the route component’s async chunk by Webpack. Loading StateA good UX includes notifying the user that something is being worked on in the background while he/she waits for the page to be ready. Quasar CLI offers two options for this out of the box. LoadingBarWhen you add Quasar LoadingBar plugin to your app, Quasar CLI will use it while it runs the preFetch hooks by default. LoadingThere’s also the possibility to use Quasar Loading plugin. Here’s an example: // a route .vue componentimport &#123; Loading &#125; from 'quasar'export default &#123; // ... preFetch (&#123; /* ... */ &#125;) &#123; Loading.show() return new Promise(resolve =&gt; &#123; // do something async here // then call \"resolve()\" &#125;).then(() =&gt; &#123; Loading.hide() &#125;) &#125;&#125;"},{"title":"App Routing","updated":"2018-05-18T22:01:01.055Z","permalink":"https://quasar-framework.org/guide/app-routing.html","text":"You’ll notice that your Quasar project contains a /src/router folder. This holds the routing configuration of your website/app: “/src/router/index.js” holds the Vue Router initialization code “/src/router/routes.js” holds the routes of your website/app Make sure to read Vue Router documentation to understand how it works. The /src/router/routes.js needs to import your website/app’s Pages and Layouts. Read more on Adding Pages and Layouts documentation page."},{"title":"Supporting IE","updated":"2018-05-20T16:04:39.322Z","permalink":"https://quasar-framework.org/guide/app-supporting-ie.html","text":"If you are building a website, you might want to support IE 11+. This support is not added by default to your website. Quasar CLI provides it on demand only. It is strongly recommended to use Yarn instead of NPM when developing on a Windows machine, to avoid many problems. Installation of IE SupportIn order to support IE, you’ll need to edit /quasar.conf.js:module.exports = function (ctx) &#123; return &#123; supportIE: true, .... &#125;&#125; That’s it. This will inject the Promise polyfill, along with some other smaller polyfills, adding an extra ~6k worth of code (minified) to your bundle. NOTEQuasar CLI is smart enough to include the IE polyfills only if it is really needed. An Electron app for example doesn’t need it and as a result, even if you leave supportIE set to “true” in quasar.conf.js it won’t be bundled. WARNINGRunning dev server on a Windows machine and consuming the output in IE11 will result in an error (ansi-strip package related used by webpack-dev-server). This is only an issue during development, and if you run the dev server on a Linux or MAC machine you can consume it safely in IE11.The fix is to use “yarn” instead of “npm” as node packager. If you have used npm until now, then delete /node_modules folder and /package-lock.json then run “yarn”."},{"title":"Configuring quasar.conf.js","updated":"2018-10-05T13:17:40.836Z","permalink":"https://quasar-framework.org/guide/app-quasar.conf.js.html","text":"Quasar makes use of some awesome development tools under it’s hood, like Webpack. One of the great things about Quasar is its handling of most of the complex configuration needed by the underlying tools for you. As a result, you don’t even need to know Webpack or any of the other development tools in order to use Quasar. So what can you configure through /quasar.conf.js? Quasar components, directives and plugins that you’ll be using in your website/app. Default Quasar I18n language pack Icon pack(s) that you wish to use Default icon set for Quasar components Development server port, HTTPS mode, hostname and so on CSS animations that you wish to use App Plugins list (that determines order of execution too) – which are files in /src/plugins that tell how your app is initialized before mounting the root Vue component Global CSS/Stylus/… files to be included in the bundle PWA manifest and Workbox options Electron Packager and/or Electron Builder IE11+ support Extend Webpack config Object You’ll notice that changing any of these settings does not require you to manually reload the dev server. Quasar detects if the changes can be injected through Hot Module Replacement and in case it can’t, it will reload the dev server automatically for you. You won’t lose your development flow, because you can just sit back while Quasar CLI quickly reloads the changed code, even keeping the current state. This save tons of your time! /quasar.conf.js is run by the Quasar CLI build system, so this code runs under Node directly, not in the context of your app. This means you can require modules like ‘fs’, ‘path’, ‘webpack’ and so on. Make sure the ES6 features that you want to write this file with are supported by the installed version of your Node (which should be &gt;= 8.9.0). StructureYou’ll notice that /quasar.conf.js exports a function that takes a ctx (context) parameter and returns an Object. This allows you to dynamically change your website/app config based on this context: module.exports = function (ctx) &#123; console.log(ctx) // Example output on console: &#123; dev: true, prod: false, theme: &#123; mat: true &#125;, themeName: 'mat', mode: &#123; spa: true &#125;, modeName: 'spa', target: &#123;&#125;, targetName: undefined, arch: &#123;&#125;, archName: undefined, debug: undefined &#125; // context gets generated based on the parameters // with which you run \"quasar dev\" or \"quasar build\"&#125; What this means is that, as an example, you can load a font when building with Quasar Material theme, and pick another one for Quasar iOS theme.module.exports = function (ctx) &#123; extras: [ ctx.theme.mat ? 'roboto-font' // we're building with Material theme : null // we're not building with Material theme, so it's iOS theme ]&#125; Or you can use a global CSS file for SPA mode and another one for Cordova mode while avoiding loading any such file for the other modes.module.exports = function (ctx) &#123; css: [ ctx.mode.spa ? 'app-spa.styl' : null, // looks for /src/css/app-spa.styl ctx.mode.cordova ? 'app-cordova.styl' : null // looks for /src/css/app-cordova.styl ]&#125; Or you can configure the dev server to run on port 8000 for SPA mode, on port 9000 for PWA mode or on port 9090 for the other modes:module.exports = function (ctx) &#123; devServer: &#123; port: ctx.mode.spa ? 8000 : (ctx.mode.pwa ? 9000 : 9090) &#125;&#125; The possibilities are endless. Options to ConfigureLet’s take each option one by one: Property Type Description css Array Global CSS/Stylus/… files from /src/css/, except for theme files, which are included by default. More info preFetch Boolean Enable PreFetch Feature. extras Array What to import from quasar-extras package. Example: [‘material-icons’, ‘roboto-font’, ‘ionicons’] vendor Object (v0.17+) Add/remove files/3rd party libraries to/from vendor chunk: { add: […], remove: […] }. More info supportIE Boolean Add support for IE11+. htmlVariables Object (CLI v0.17.11+) Add variables that you can use in index.template.html. More info framework Object/String What Quasar components/directives/plugins to import, what Quasar I18n language pack to use, what icon set to use for Quasar components. More info animations Object/String What CSS animations to import. Example: [‘bounceInLeft’, ‘bounceOutRight’] devServer Object Webpack dev server options. Some properties are overwritten based on the Quasar mode you’re using in order to ensure a correct config. Note: if you’re proxying the development server (i.e. using a cloud IDE), set the public setting to your public application URL. build Object Build configuration options. More info sourceFiles Object (v0.16+) Change the default name of parts of your app. More info cordova Object Cordova specific config. pwa Object PWA specific config. ssr Object SSR specific config. electron Object Electron specific config. css PropertyGlobal CSS/Stylus/… files from /src/css/, except for theme files, which are included by default. // quasar.confreturn &#123; css: [ 'app.styl', // referring to /src/css/app.styl '~some-library/style.css' // referring to node_modules/some-library/style.css ]&#125; vendor PropertyBy default, everything that comes from node_modules will be injected into the vendor chunk for performance &amp; caching reasons. However, should you wish to add or remove something from this special chunk, you can do so: // quasar.confreturn &#123; vendor: &#123; add: ['src/plugins/my-special-plugin'], remove: ['axios', 'vue$'] &#125;&#125; framework PropertyTells the CLI what Quasar components/directives/plugins to import, what Quasar I18n language pack to use, what icon set to use for Quasar components and more.// quasar.confreturn &#123; // a list with all options (all are optional) framework: &#123; components: ['QBtn', 'QIcon' /* ... */], directives: ['TouchSwipe' /* ... */], plugins: ['Notify' /* ... */], // Quasar config // You'll see this mentioned for components/directives/plugins which use it config: &#123; /* ... */ &#125;, iconSet: 'fontawesome', // requires icon library to be specified in \"extras\" section too, i18n: 'de', // Tell Quasar which language pack to use for its own components // v0.17+ cssAddon: true // Adds the flex responsive++ CSS classes (noticeable bump in footprint) &#125;&#125; More on cssAddon here. devServer PropertyWebpack devServer options. Take a look at the full list of options. Some are overwritten by Quasar CLI based on “quasar dev” parameters and Quasar mode in order to ensure that everything is setup correctly. Note: if you’re proxying the development server (i.e. using a cloud IDE), set the public setting to your public application URL. Most used properties are: Property Type Description port Number Port of dev server host String Local IP/Host to use for dev server open Boolean Open up browser pointing to dev server address automatically. Applies to SPA, PWA and SSR modes. public String Public address of the application (for use with reverse proxies) build Property Property Type Description transpileDependencies Array of Regex (CLI v0.17.6+) Add dependencies for transpiling with Babel (from node_modules, which are by default not transpiled). Example: [ /my-dependency/, ...] showProgress Boolean (CLI v0.17+) Show a progress bar while compiling. extendWebpack(cfg) Function Extend Webpack config generated by Quasar CLI. Equivalent to chainWebpack(), but you have direct access to the Webpack config object. chainWebpack(chain) Function (CLI v0.16.2+) Extend Webpack config generated by Quasar CLI. Equivalent to extendWebpack(), but using webpack-chain instead. publicPath String Public path of your app. By default, it uses the root. Use it when your public path is something else, like “&lt;protocol&gt;://&lt;domain&gt;/some/nested/folder” – in this case, it means the distributables are in “some/nested/folder” on your webserver. vueRouterMode String Sets Vue Router mode: ‘hash’ or ‘history’. Pick wisely. History mode requires configuration on your deployment web server too. htmlFilename String Default is ‘index.html’. productName String Default value is taken from package.json &gt; productName field. distDir String Folder where Quasar CLI should generate the distributables. Relative path to project root directory. Default is ‘dist/{ctx.modeName}-{ctx.themeName}’. Applies to all Modes except for Cordova (which is forced to src-cordova/www). devtool String Source map strategy to use. env Object Add properties to process.env that you can use in your website/app JS code. Each property needs to be JSON encoded. Example: { SOMETHING: JSON.stringify(‘someValue’) }. gzip Boolean Gzip the distributables. Useful when the web server with which you are serving the content does not have gzip. scopeHoisting Boolean Default: true. Use Webpack scope hoisting for slightly better runtime performance. analyze Boolean/Object Show analysis of build bundle with webpack-bundle-analyzer. If using as Object, it represents the webpack-bundle-analyzer config Object. vueCompiler Boolean (v0.15.7+) Include vue runtime + compiler version, instead of default Vue runtime-only uglifyOptions Object (v0.16+) Minification options. Full list. preloadChunks Boolean (v0.16+) Default is “true”. Preload chunks when browser is idle to improve user’s later navigation to the other pages. The following properties of build are automatically configured by Quasar CLI depending on dev/build commands and Quasar mode. But if you like to override some (make sure you know what you are doing), you can do so: Property Type Description extractCSS Boolean Extract CSS from Vue files sourceMap Boolean Use source maps minify Boolean Minify code (html, js, css) webpackManifest Boolean Improves caching strategy. Use a webpack manifest (runtime) file to avoid cache bust on vendor chunk changing hash on each build. If, for example, you run “quasar build –debug”, sourceMap and extractCSS will be set to “true” regardless of what you configure. htmlVariables PropertyCLI v0.17.11+ You can define and then reference variables in src/index.template.html, like this:// quasar.confmodule.exports = function (ctx) &#123; return &#123; htmlVariables: &#123; title: 'test name' &#125; Then (just an example showing you how to reference a variable defined above, in this case title):&lt;!-- src/index.template.html --&gt;&lt;%= htmlWebpackPlugin.options.title %&gt; sourceFiles PropertyQuasar v0.16+ Use this property to change the default names of some files of your website/app if you have to. All paths must be relative to the root folder of your project. // default values:sourceFiles: &#123; rootComponent: 'src/App.vue', router: 'src/router', store: 'src/store', indexHtmlTemplate: 'src/index.template.html', registerServiceWorker: 'src-pwa/register-service-worker.js', serviceWorker: 'src-pwa/custom-service-worker.js', electronMainDev: 'src-electron/main-process/electron-main.dev.js', electronMainProd: 'src-electron/main-process/electron-main.js'&#125; Example setting env for dev/buildbuild: &#123; env: ctx.dev ? &#123; // so on dev we'll have API: JSON.stringify('https://dev.api.com') &#125; : &#123; // and on build (production): API: JSON.stringify('https://prod.api.com') &#125;&#125; Then in your website/app you can access process.env.API and it’s gonna point to one of those two links above, based on dev or production build type. You can even go one step further. Supply it with values taken from the quasar dev/build env variables:# we set an env variable in terminal$ MY_API=api.com quasar build# then we pick it up in /quasar.conf.jsbuild: &#123; env: ctx.dev ? &#123; // so on dev we&apos;ll have API: JSON.stringify(&apos;https://dev.&apos;+ process.env.MY_API) &#125; : &#123; // and on build (production): API: JSON.stringify(&apos;https://prod.&apos;+ process.env.MY_API) &#125;&#125; Extending Webpack Config ObjectThis is achieved through build &gt; extendWebpack() Function. Example adding a Webpack loader. // quasar.conf.jsbuild: &#123; extendWebpack (cfg, &#123; isServer, isClient &#125;) &#123; // Booleans \"isServer\" or \"isClient\" are useful when // building for SSR mode, telling if you are extending // the server or client webpack config // we make in-place changes cfg.module.rules.push(&#123; test: /\\.json$/, loader: 'json-loader' &#125;) // no need to return anything &#125;&#125; If you are using Quasar CLI v0.16.2+, then you have another method to tamper with the generated Webpack config, through build &gt; chainWebpack(chain). The difference is that it is easier because you’ll be using webpack-chain to do it. Equivalent with chainWebpack(chain):// quasar.conf.jsbuild: &#123; chainWebpack (chain, &#123; isServer, isClient &#125;) &#123; // Booleans \"isServer\" or \"isClient\" are useful when // building for SSR mode, telling if you are extending // the server or client webpack config chain.module.rule('json') .test(/\\.json$/) .use('json-loader') .loader('json-loader') // no need to return anything &#125;&#125; NOTE chainWebpack() gets executed BEFORE extendWebpack() The two examples above are equivalent. Do NOT use both methods to tamper for the same thing! Adding your own alias to WebpackTo add your own alias you can extend the webpack config and merge it with the existing alias.Use the path.resolve helper to resolve the path to your intended alias. // quasar.conf.jsbuild: &#123; extendWebpack (cfg, &#123; isServer, isClient &#125;) &#123; cfg.resolve.alias = &#123; ...cfg.resolve.alias, // This adds the existing alias // Add your own alias like this myalias: path.resolve(__dirname, './src/somefolder'), &#125; &#125;&#125; Equivalent with chainWebpack():// quasar.conf.jsbuild: &#123; chainWebpack (chain, &#123; isServer, isClient &#125;) &#123; chain.resolve.alias .set('myalias', path.resolve(__dirname, './src/somefolder')) &#125;&#125;"},{"title":"App Vuex Store","updated":"2018-07-25T14:14:24.689Z","permalink":"https://quasar-framework.org/guide/app-vuex-store.html","text":"In large applications, state management often becomes complex due to multiple pieces of state scattered across many components and the interactions between them. It is often overlooked that the source of truth in Vue instances is the raw data object - a Vue instance simply proxies access to it. Therefore, if you have a piece of state that should be shared by multiple instances, you should avoid duplicating it and share it by identity. The recommended way to go if you want components sharing state is Vuex. Take a look at its documentation before diving in. It has a great feature when used along the Vue dev-tools browser extension like Time Travel debugging. We won’t go into details on how to configure or use Vuex since it has great docs. Instead we’ll just show you what the folder structure looks like when using it on a Quasar project. .└── src/ └── store/ # Vuex Store ├── index.js # Vuex Store definition ├── &lt;folder&gt; # Vuex Store Module... └── &lt;folder&gt; # Vuex Store Module... By default, if you choose to use Vuex when you create a project folder with Quasar CLI, it will set you up on using Vuex modules. Each sub-folder of /src/store represents a Vuex Module. If Vuex Modules is too much for your website app, you can change /src/store/index.js and avoid importing any module. Adding a Vuex Module.Adding a Vuex Module is made easy by Quasar CLI through the $ quasar new command.$ quasar new store &lt;store_name&gt; It will create a folder in /src/store named by “store_name” from the command above. It will contain all the boilerplate that you need. Let’s say that you want to create a “showcase” Vuex Module. You issue $ quasar new store showcase. You then notice the newly created /src/store/showcase folder, which holds the following files: .└── src/ └── store/ ├── index.js # Vuex Store definition └── showcase # Module \"showcase\" ├── index.js # Gluing the module together ├── actions.js # Module actions ├── getters.js # Module getters ├── mutations.js # Module mutations └── state.js # Module state We’ve created the new Vuex Module, but we haven’t yet informed Vuex to use it. So we edit /src/store/index.js and add a reference to it: import Vue from 'vue'import Vuex from 'vuex'// we first import the moduleimport showcase from './showcase'Vue.use(Vuex)const store = new Vuex.Store(&#123; modules: &#123; // then we reference it showcase &#125;&#125;)// if we want some HMR magic for it, we handle// the hot update like below. Notice we guard this// code with \"process.env.DEV\" -- so this doesn't// get into our production build (and it shouldn't).if (process.env.DEV &amp;&amp; module.hot) &#123; module.hot.accept(['./showcase'], () =&gt; &#123; const newShowcase = require('./showcase').default store.hotUpdate(&#123; modules: &#123; showcase: newShowcase &#125; &#125;) &#125;)&#125;export default store Now we can use this Vuex Module in our Vue files. Here is a quick example. Assume we configured drawerState in the state and added updateDrawerState mutation. // src/store/showcase/mutations.jsexport const updateDrawerState = (state, opened) =&gt; &#123; state.drawerState = opened&#125;// src/store/showcase/state.jsexport default &#123; drawerState: true&#125; In a Vue file:&lt;template&gt; &lt;div&gt; &lt;q-toggle v-model=\"drawerState\" /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; computed: &#123; drawerState: &#123; get () &#123; return this.$store.state.showcase.drawerState &#125;, set (val) &#123; this.$store.commit('showcase/updateDrawerState', val) &#125; &#125; &#125;&#125;&lt;/script&gt; Store Code SplittingYou can take advantage of the PreFetch Feature to code split code for modules."},{"title":"What is Cordova","updated":"2018-05-18T22:01:01.057Z","permalink":"https://quasar-framework.org/guide/cordova-introduction.html","text":"Apache Cordova is a mobile application development framework originally created by Nitobi. Adobe Systems purchased Nitobi in 2011, rebranded it as PhoneGap, and later released an open source version of the software called Apache Cordova. Apache Cordova enables software programmers to build applications for mobile devices using CSS3, HTML5, and JavaScript instead of relying on platform-specific APIs like those in Android, iOS, or Windows Phone. It enables wrapping up of CSS, HTML, and JavaScript code depending upon the platform of the device. It extends the features of HTML and JavaScript to work with the device. The resulting applications are hybrid, meaning that they are neither truly native mobile application (because all layout rendering is done via Web views instead of the platform’s native UI framework) nor purely Web-based (because they are not just Web apps, but are packaged as apps for distribution and have access to native device APIs). You can hook into the native device APIs by using Cordova Plugins."},{"title":"Mobile App Build Commands","updated":"2019-01-01T13:12:57.798Z","permalink":"https://quasar-framework.org/guide/cordova-build-commands.html","text":"Quasar CLI makes it incredibly simple to develop or build the final distributables from your source code. Before we dive in, make sure you got the Cordova CLI installed.$ yarn global add cordova# or:$ npm install -g cordova Developing$ quasar dev -m cordova -T [ios|android]# ..or the longer form:$ quasar dev --mode cordova -T [ios|android]# with a specific Quasar theme, for iOS platform:$ quasar dev -m cordova -T ios -t ios# with a specific Quasar theme, for Android platform:$ quasar dev -m cordova -T android -t mat# using a specific emulator (--emulator, -e)$ quasar dev -m cordova -T ios -e iPhone-7 IMPORTANTYou can develop with any Quasar theme, regardless of the platform you are building on (Android, IOS, …). In order for you to be able to develop on a device emulator or directly on a phone (with Hot Module Reload included), Quasar CLI follows these steps: Detects your machine’s external IP address. If there are multiple such IPs detected, then it asks you to choose one. If you’ll be using a mobile phone to develop then choose the IP address of your machine that’s pingable from the phone/tablet. It starts up a development server on your machine. It temporarily changes the &lt;content/&gt; tag in /src-cordova/config.xml to point to the IP previously detected. This allows the app to connect to the development server. It defers to Cordova CLI to build a native app with the temporarily changed config.xml. Cordova CLI checks if a mobile phone / tablet is connected to your development machine. If it is, it installs the development app on it. If none is found, then it boots up an emulator and runs the development app. Finally, it reverts the temporary changes made to /src-cordova/config.xml. IMPORTANTIf developing on a mobile phone/tablet, it is very important that the external IP address of your build machine is accessible from the phone/tablet, otherwise you’ll get a development app with white screen only. Also check your machine’s firewall to allow connections to the development chosen port. Building for Production$ quasar build -m cordova -T [ios|android]# ..or the longer form:$ quasar build --mode cordova -T [ios|android]# with a specific Quasar theme, for iOS platform:$ quasar build -m cordova -T ios -t ios# with a specific Quasar theme, for Android platform:$ quasar build -m cordova -T android -t mat IMPORTANTYou can build with any Quasar theme, regardless of the platform you are targeting (Android, IOS, …). These commands parse and build your /src folder then overwrite /src-cordova/www then defer to Cordova CLI to trigger the actual native app creation. You may ask yourself. So where’s the .apk or .app? Watch the terminal console to see where it puts it."},{"title":"Managing Google Analytics","updated":"2018-05-18T22:01:01.057Z","permalink":"https://quasar-framework.org/guide/cordova-managing-google-analytics.html","text":"Getting to know your users and measuring user behavior is an important step in App Development. Unfortunately, it takes a bit of non-standard work to get Google Analytics to work after wrapping your mobile app with Cordova. Setting up Google Analytics in a pure web application is quite easy, but Cordova somehow prevents pageviews and events from being sent to Google Analytics. Follow this guide to implement Google Analytics into your Cordova powered Quasar App. IMPORTANTYou’ll need to include a &lt;script&gt; tag provided by Google in /src/index.template.html, which will make your App depend on an Internet connection! Prerequisites Make sure all your routes have a name and path parameter specified. Otherwise, they cannot be posted to the ga.logPage function. Please refer to Routing for more info on routing. Have Basic knowledge of Google Analytics PreparationBefore we can start implementing Google Analytics into your application, you’ll need an account for Google Analytics and Google Tagmanager. So let’s do that first. When you have these accounts, it’s time to configure Tag manager. Follow the steps in this Multiminds article to do so. Implementing this into application For this guide, we’ll assume you have a fixed sessionId that you send to Google Analytics. Google Analytics uses a sessionId to distinguish different users from each other. If you want to create an anonymous sessionId, see Analytics Documentation on user id. Place the Tag Manager snippet into head of your index.html file (if you’ve followed the Multiminds article, you already have this.) Create a new file in your codebase called analytics.js with the following contents: export default &#123; logEvent(category, action, label, sessionId = null) &#123; dataLayer.push(&#123; 'appEventCategory': category, 'appEventAction': action, 'appEventLabel': label, 'sessionId': sessionId &#125;) dataLayer.push(&#123; 'event': 'appEvent' &#125;) &#125;, logPage(path, name, sessionId = null) &#123; dataLayer.push(&#123; 'screenPath': path, 'screenName': name, 'sessionId': sessionId &#125;) dataLayer.push(&#123; 'event': 'appScreenView' &#125;) &#125;&#125; To make sure all the pages in your application are automatically posted to Google Analytics, we create an app plugin:$ quasar new plugin google-analytics Then we edit the newly created file: /src/plugins/google-analytics:import ga from &apos;analytics.js&apos;export default (&#123; router &#125;) =&gt; &#123; router.afterEach((to, from) =&gt; &#123; ga.logPage(to.path, to.name, sessionId) &#125;)&#125; Finally we register the app plugin in /quasar.conf.js. We can do so only for Cordova wrapped apps if we want:plugins: [ ctx.mode.cordova ? &apos;google-analytics&apos; : &apos;&apos;] More information about events can be found in the Analytics documentation on events. You’ll see the events and pageviews coming in when you run your app. It usually takes around 5 to 10 seconds for a pageview to be registered in the realtime view."},{"title":"Configuring Cordova","updated":"2018-10-12T22:46:40.682Z","permalink":"https://quasar-framework.org/guide/cordova-configuring-cordova.html","text":"We’ll be using Quasar CLI (and Cordova CLI) to develop and build a Mobile App. The difference between building a SPA, PWA, Electron App or a Mobile App is simply determined by the “mode” parameter in “quasar dev” and “quasar build” commands. There are two configuration files of great importance to your mobile apps. We’ll go over each one. Config.xmlThe most important config file for your mobile app is /src-cordova/config.xml. Like mentioned above, /src-cordova is a Cordova project folder, so please refer to Cordova documentation in order to understand what each file from there does. But for now, have a few moments to read about config.xml. Some properties from this file will get overwritten as we’ll see in next section. Quasar.conf.jsQuasar CLI helps you in setting some properties of the mobile Apps automatically (from config.xml): the Cordova “id”, app version, description and android-versionCode. This is for convenience so you’ll be able to have a single point where, for example, you change the version of your app, not multiple files that you need to simultaneously touch which is error prone. For determining the values for each of the properties mentioned above, Quasar CLI: Look in /quasar.conf.js for a “cordova” Object. Does it have “id”, “version”, “description” and/or “androidVersionCode”? If yes, it will use them. If not, then it looks into your /package.json for “cordovaId”, “version” and “description” fields. Other options you can configure: // Quasar v0.17+ onlyreturn &#123; framework: &#123; config: &#123; cordova: &#123; iosStatusBarPadding: true/false, // add the dynamic top padding on iOS mobile devices backButtonExit: true/false // Quasar handles app exit on mobile phone back button &#125; &#125; &#125;&#125;"},{"title":"Cordova Plugins","updated":"2018-07-25T14:14:24.690Z","permalink":"https://quasar-framework.org/guide/cordova-plugins.html","text":"You can hook into the native device APIs by using Cordova Plugins. Cordova PluginsA few examples of such plugins: Battery Status Camera Contacts Device Device Motion Geolocation Media Media Capture Network Information Splashscreen Vibration Statusbar Deviceready EventYou’ll notice that some Cordova plugins are usable only after the deviceready event has been triggered. We don’t need to worry about it too much. Quasar listens to this event and takes care of our root Vue component to be mounted after this event has been triggered. But if you need some plugin’s own variable and that is initialized after deviceready you can follow the example of using the plugin device below CaveatLet’s take a vue file for example:&lt;template&gt; ... we are sure 'deviceready' has been triggered here ...&lt;/template&gt;&lt;script&gt;// outside of the default export,// we need to listen to the event for ourselves:document.addEventListener('deviceready', () =&gt; &#123; // it's only now that we are sure // the event has triggered&#125;, false)export default &#123; // we are sure 'deviceready' has been triggered here&#125;&lt;/script&gt; The reason is simple. Quasar listens for the event then mounts the root Vue component. But before this, the Vue files are imported into the /src/router/routes.js file, so the code outside of the default export gets executed. Using a Cordova PluginLet’s learn by taking some examples, assuming you’ve added Cordova mode to your Quasar project and installed a platform (android, ios, …) already. Example: Battery StatusFirst step is to read the documentation of the Cordova plugin that we want to use. We look at Cordova Plugins list and click on Battery Status doc page. We see instructions on how to install this plugin. It’s always a Cordova command. So we “cd” into /src-cordova (which is a Cordova generated folder) and issue the install command form there:# from /src-cordova:$ cordova plugin add cordova-plugin-battery-status Now let’s put this plugin to some good use. In one of your Quasar project’s pages/layouts/components Vue file, we write: // some Vue file// remember this is simply an example;// only look at how we use the API described in the plugin's page;// the rest of things here are of no importance&lt;template&gt; &lt;div&gt; Battery status is: &lt;strong&gt;&#123;&#123; batteryStatus &#125;&#125;&lt;/strong&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; batteryStatus: 'determining...' &#125; &#125;, methods: &#123; updateBatteryStatus (status) &#123; this.batteryStatus = `Level: $&#123;status.level&#125;, plugged: $&#123;status.isPlugged&#125;` &#125; &#125; created () &#123; // we register the event like on plugin's doc page window.addEventListener('batterystatus', this.updateBatteryStatus, false) &#125;, beforeDestroy () &#123; // we do some cleanup; // we need to remove the event listener window.removeEventListener('batterystatus', this.updateBatteryStatus, false) &#125;&#125;&lt;/script&gt; Example: CameraFirst step is to read the documentation of the Cordova plugin that we want to use. We look at Cordova Plugins list and click on Camera doc page. There’s a mention of the deviceready event. But we already know how to handle it from the previous sections. We read the instructions on how to install this plugin. It’s always a Cordova command. So we “cd” into /src-cordova (which is a Cordova generated folder) and issue the install command form there:# from /src-cordova:$ cordova plugin add cordova-plugin-camera Now let’s put this plugin to some good use. In one of your Quasar project’s pages/layouts/components Vue file, we write: // some Vue file// remember this is simply an example;// only look at how we use the API described in the plugin's page;// the rest of things here are of no importance&lt;template&gt; &lt;div&gt; &lt;q-btn color=\"primary\" label=\"Get Picture\" @click=\"captureImage\" /&gt; &lt;img :src=\"imageSrc\"&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; imageSrc: '' &#125; &#125;, methods: &#123; captureImage () &#123; navigator.camera.getPicture( data =&gt; &#123; // on success this.imageSrc = `data:image/jpeg;base64,$&#123;data&#125;` &#125;, () =&gt; &#123; // on fail this.$q.notify('Could not access device camera.') &#125;, &#123; // camera options &#125; ) &#125; &#125;&#125;&lt;/script&gt; Example: DeviceFirst step is to read the documentation of the Cordova plugin that we want to use. Look at the Cordova Plugins list and click on Device doc page. This plugin initializes a global variable called device which describes the device’s hardware and software. So it can be accessed with window.device. Read the instructions on how to install this plugin on its cordova doc page. It’s always a Cordova command. So we “cd” into /src-cordova (which is a Cordova generated folder) and issue the install command from there:# from /src-cordova:$ cordova plugin add cordova-plugin-device Now let’s put this plugin to some good use. If you need the information of your device when starting the application, you will have to capture the created event. In one of your Quasar project’s pages/layouts/components Vue file, we write: // some Vue file// remember this is simply an example;// only look at how we use the API described in the plugin's page;// the rest of things here are of no importance&lt;template&gt; &lt;div&gt; &lt;q-page class=\"flex flex-center\"&gt; &lt;div&gt;IMEI &#123;&#123;IMEI&#125;&#125;&lt;/div&gt; &lt;/q-page&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; IMEI: window.device === void 0 ? 'Run this on a mobile/tablet device' : window.device &#125; &#125;&#125;&lt;/script&gt;"},{"title":"Mobile App Preparation","updated":"2019-01-01T13:12:57.799Z","permalink":"https://quasar-framework.org/guide/cordova-preparation.html","text":"Before we dive in to the actual development, we need to do some preparation work. Here we will go over Android as the target platform. 1. InstallationFirst step is to make sure you got the Cordova CLI installed and the necessary SDKs.$ yarn global add cordova# or:$ npm install -g cordova After this step you will need to install the Android platform SDK on your machine. You can download the Android Studio here and follow these installation steps afterwards. Add Android installation to your path Unixexport ANDROID_HOME=\"$HOME/Android/Sdk\"PATH=$PATH:$ANDROID_HOME/tools; PATH=$PATH:$ANDROID_HOME/platform-tools Please note that sometimes the /Android/Sdk folder is added inside /Library/ inside your user folder. Check your user folder and if the /Android/ folder is only inside /Library/ do: export ANDROID_HOME=&quot;$HOME/Library/Android/Sdk&quot; instead. Windowssetx ANDROID_HOME &quot;%USERPROFILE%\\AppData\\Local\\Android\\Sdk&quot;setx path &quot;%path%;%ANDROID_HOME%\\tools;%ANDROID_HOME%\\platform-tools&quot; Start Android studio by changing into the folder you installed it in and run ./studio.sh. Next step is to install the individual SDKs: Open the “Configure” menu at the bottom of the window: Select the desired SDKs. As per August 2018 Cordova supports 5.0 and up and click on “Apply” to install the SDKs. 2. Add Cordova Quasar ModeIn order to develop/build a Mobile app, we need to add the Cordova mode to our Quasar project. What this does is that it uses Cordova CLI to generate a Cordova project in /src-cordova folder. /src-cordova/www folder will be overwritten each time you build.$ quasar mode -a cordova 3. Add PlatformTo switch to the cordova project, type:$ cd src-cordova To add a target platform, type:$ cordova platform add [android|ios] To verify that everything is in order, type:$ cordova requirements On some newer Debian-based operating systems you might face a very persistent problem when running cordova requirements. Please see the “Android SDK not found” after installation section for assistance. 4. Start DevelopingIf you want to jump right in and start developing, you can skip step #2 and #3 commands and issue:$ quasar dev -m cordova -T [android|ios] This will add Cordova mode and project automatically, if it is missing."},{"title":"Publishing to Store","updated":"2018-08-01T04:41:36.368Z","permalink":"https://quasar-framework.org/guide/cordova-publishing-to-store.html","text":"So, you’ve finished working on your Mobile App. Now it’s time to deploy it. Let’s learn how. Android PublishingTo generate a release build for Android, we can use the following Quasar CLI command:$ quasar build -m cordova -T android# optionally picking a Quasar theme too$ quasar build -m cordova -T android -t mat This will generate a release build based on the settings in your /src-cordova/config.xml. Next, we can find our unsigned APK file in /src-cordova/platforms/android/build/outputs/apk. Filename usually ends with “-release-unsigned.apk”. Now, we need to sign the unsigned APK and run an alignment utility on it to optimize it and prepare it for the app store. If you already have a signing key, skip these steps and use that one instead. Let’s generate our private key using the keytool command that comes with the JDK. If this tool isn’t found, refer to the installation guide: $ keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 20000 You’ll first be prompted to create a password for the keystore. Then, answer the rest of the nice tools’s questions and when it’s all done, you should have a file called my-release-key.keystore created in the current directory. NoteMake sure to save this file somewhere safe, if you lose it you won’t be able to submit updates to your app! To sign the unsigned APK, run the jarsigner tool which is also included in the JDK: $ jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore &lt;path-to-unsigned-apk-file&gt; alias_name This signs the apk in place. Finally, we need to run the zip align tool to optimize the APK. The zipalign tool can be found in /path/to/Android/sdk/build-tools/VERSION/zipalign. For example, on OS X with Android Studio installed, zipalign is in ~/Library/Android/sdk/build-tools/VERSION/zipalign: $ zipalign -v 4 &lt;path-to-same-apk-file&gt; HelloWorld.apk Now we have our final release binary called HelloWorld.apk and we can release this on the Google Play Store for all the world to enjoy! (There are a few other ways to sign APKs. Refer to the official Android App Signing documentation for more information.) Google Play StoreNow that we have our release APK ready for the Google Play Store, we can create a Play Store listing and upload our APK. To start, you’ll need to visit the Google Play Store Developer Console and create a new developer account. Unfortunately, this is not free. However, the cost is only $25 compared to Apple’s $99. Once you have a developer account, you can go ahead and click “Publish an Android App on Google Play”. Then, you can go ahead and click the button to edit the store listing (We will upload an APK later). You’ll want to fill out the description for the app. When you are ready, upload the APK for the release build and publish the listing. Be patient and your hard work should be live in the wild! Updating your AppAs you develop your app, you’ll want to update it periodically. In order for the Google Play Store to accept updated APKs, you’ll need to bump the app version (from /package.json or from /quasar.conf.js &gt; cordova &gt; version, then rebuild the app for release. iOS PublishingFirst, you need to enroll in Apple Developer Program. As with Google, if you have a personal account with Apple, you can create an additional one for your applications. Connecting Xcode with your developer accountAfter you receive your developer status, open Xcode on your Mac and go to Preferences &gt; Accounts. Add your account to Xcode by clicking the + button on the lower left-hand side and follow the instructions. SigningNow that you linked Xcode with your developer account, go to Preferences &gt; Accounts, select your Apple Id on the left-hand side and then click the View Details button shown on the previous image. Click the Create button next to the iOS Distribution option. You can learn more about maintaining your signing identities and certificates from the official documentation. Setting up the app identifierNext, through the Apple Developer Member Center we’ll set up the app ID identifier details. Identifiers are used to allow an app to have access to certain app services like for example Apple Pay. You can login to Apple Developer Member Center with your Apple ID and password. Once you’re logged in you should choose Certificates, Identifiers, and Profiles option. Also select the Identifiers option under the iOS Apps. Then select the + button in order to add a new iOS App ID. Then you’ll have to set the name of your app, use the Explicit App ID option and set the Bundle ID to the value of the id in your Cordova config.xml tag. Additionally, you’ll have to choose any of the services that need to be enabled. For example, if you use Apple Pay or Wallet in your app, you need to choose those option. You can learn more about registering app identifiers from the official documentation. Creating the app listingApple uses iTunes Connect to manage app submissions. After your login, you should select the My Apps button, and on the next screen select the + button, just below the iTunes Connect My Apps header. This will show three options in a dropdown, and you should select the New App. After this the popup appears where you have to choose the name of the application, platform, primary language, bundle ID and SKU. Once you’re done, click on the Create button and you’ll be presented with a screen where you’ll have to set some basic options like Privacy Policy URL, category and sub category. Now, before we fill out everything in the listing, we’ll build our app and get it uploaded with Xcode. Then you’ll come back to finish the listing. You can learn more about managing your app in iTunes Connect from the official documentation. Building the app for production$ quasar build -m cordova -T [android|ios] -t [mat|ios] If everything went well you’ll see the BUILD SUCCEEDED output in the console. Opening the project in XcodeNow, open the /src-cordova/platforms/ios/&lt;name&gt;.xcodeproj file in Xcode. Once the Xcode opens up the project, you should see the details about your app in the general view. You should just check that the bundle identifier is set up correctly, so that it’s the same as the value you specified earlier in the app ID. Also, make sure that the version and build numbers are correct. Team option should be set to your Apple developer account. Under the deployment target you can choose which devices your application will support. Creating an archive of the applicationIn Xcode, select Product &gt; Scheme &gt; Edit Scheme to open the scheme editor. Next, select the Archive from the list on the left-hand side. Make sure that the Build configuration is set to Release. To create an archive, choose a Generic iOS Device, or your device if it’s connected to your Mac (you can’t create an archive if simulator is selected), from the Scheme toolbar menu in the project editor. Next, select Product &gt; Archive, and the Archive organizer appears and displays the new archive. At this point you can click the Upload to App Store... button, and if everything goes fine you’ll have an uploaded app, and the only thing that’s left to do is to complete the iTunes Connect listing and submit it for review! At this point you should get an email from iTunes Connect shortly after you uploaded the archive with the content. Finishing the app list processNow you should head back to the iTunes Connect portal and login. Next, click on the Pricing and Availability on the left-hand side under APP STORE INFORMATION. You don’t have to worry about forgetting to insert any crucial and required information about your application, since you’ll be notified about what’s missing and what needs to be added/changed if you try to submit the app for review before all details are filled in. Next, click on the 1.0 Prepare for Submission button on the left-hand side, as shown on the image below. When we uploaded our archive, iTunes Connect automatically determined which device sizes are supported. You’ll need to upload at least one screenshot image for each of the various app sizes that were detected by iTunes Connect. Next, you’ll have to insert Description, Keywords, Support URL and Marketing URL (optionally). In the Build section you have to click on the + button and select the build that was uploaded through Xcode in the previous steps. Next, you’ll have to upload the icon, edit the rating, and set some additional info like copyright and your information. Note that the size of the icon that you’ll have to upload here will have to be 1024 by 1024 pixels. Thankfully, you can use the splash.png from the second tutorial. If you’re the sole developer then the data in the App Review Information should be your own. Finally, as the last option, you can leave the default checked option that once your app is approved that it is automatically released to the App Store. Now that we’re finished with adding all of the details to the app listing, we can press Save and then Submit for Review. Finally, you’ll be presented with the last form that you’ll have to fill out. After you submit your app for review you’ll see the status of it in the My Apps as Waiting for review, as shown on the image below. Also, shortly after you submit your app for review you’ll get a confirmation email from iTunes Connect that your app is in review. Apple prides itself with a manual review process, which basically means it can take several days for your app to be reviewed. You’ll be notified of any issues or updates to your app status. Updating the appSince you’ll probably want to update your app at some point you’ll first need to bump the app version (from /package.json or from /quasar.conf.js &gt; cordova &gt; version, then rebuild the app for release. Finally, you’ll have to open it up from the Xcode and follow the same steps all over again. Once you submit for the review, you’ll have to wait for the review process again."},{"title":"Cordova Troubleshooting and Tips","updated":"2018-05-18T22:01:01.058Z","permalink":"https://quasar-framework.org/guide/cordova-troubleshooting-and-tips.html","text":"Browser SimulatorUse Google Chrome’s emulator from Developer Tools. It’s a fantastic tool. You can select which device to emulate, but keep in mind that it’s an emulator and not the real deal. IMPORTANTAlso, if you change from desktop to mobile emulator or backwards, hit the refresh button as Quasar Platform detection is not dynamic (nor it should be). Disabling iOS rubber band effectWhen building an iOS app with Cordova and you want to disable the rubber band effect (https://www.youtube.com/watch?v=UjuNGpU29Mk), add this to your /src-cordova/config.xml: &lt;preference name = \"DisallowOverscroll\" value = \"true\" /&gt; Remote DebuggingIf you are debugging Android Apps, you can use Google Chrome Remote Debugging through a USB cable attached to your Android phone/tablet. It can be used for emulator too. This way you have Chrome Dev Tools directly for your App running on the emulator/phone/table. Inspect elements, check console output, and so on and so forth. Android SDK not found after installation of the SDKSome newer Debian-based OS (e.g. ubuntu, elementary OS) might leave you with a Android SDK not found. after you installed and (correctly) configured the environment. The output might look similar to this: $ cordova requirementsRequirements check results for android:Java JDK: installed 1.8.0Android SDK: installed trueAndroid target: not installedAndroid SDK not found. Make sure that it is installed. If it is not at the default location, set the ANDROID_HOME environment variable.Gradle: not installedCould not find gradle wrapper within Android SDK. Might need to update your Android SDK.Looked here: /home/your_user/Android/Sdk/tools/templates/gradle/wrapperError: Some of requirements check failed This could have two different reasons: Usually the paths aren’t configured correctly. The first step is to verify if your paths are set correctly. This can be done by running the following commands: $ echo $ANDROID_HOME The expected output should be a path similar to this $HOME/Android/Sdk. After this run: $ ls -la $ANDROID_HOME To ensure the folder contains the SDK. The expected output should contain folders like ‘tools’, ‘sources’, ‘platform-tools’, etc. $ echo $PATH The output should contain each one entry for the Android SDK ‘tools’-folder and ‘platform-tools’-tools. This could look like this: /home/your_user/bin:/home/your_user/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/your_user/Android/Sdk/tools:/home/your_user/Android/Sdk/platform-tools If you ensured your paths are set correctly and still get the error on cordova requirements you can try the following fix: Replacing the Android Studio ‘tools’ folder manually Setting Up Device on LinuxYou may bump into ?????? no permissions problem when trying to run your App directly on an Android phone/tablet. Here’s how you fix this: # create the .rules file and insert the content# from below this examplesudo vim /etc/udev/rules.d/51-android.rulessudo chmod 644 /etc/udev/rules.d/51-android.rulessudo chown root. /etc/udev/rules.d/51-android.rulessudo service udev restartsudo killall adb The content for 51-android.rules:SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0bb4&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0e79&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0502&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0b05&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;413c&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0489&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;091e&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;18d1&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0bb4&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;12d1&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;24e3&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;2116&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0482&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;17ef&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;1004&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;22b8&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0409&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;2080&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0955&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;2257&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;10a9&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;1d4d&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0471&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;04da&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;05c6&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;1f53&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;04e8&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;04dd&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0fce&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0930&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;19d2&quot;, MODE=&quot;0666&quot;SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;1bbb&quot;, MODE=&quot;0666&quot; Now running adb devices should discover your device."},{"title":"What is Electron","updated":"2018-05-18T22:01:01.059Z","permalink":"https://quasar-framework.org/guide/electron-introduction.html","text":"Electron (formerly known as Atom Shell) is an open-source framework created by Cheng Zhao, and now developed by GitHub. It allows for the development of desktop GUI applications using front and back end components originally developed for web applications: Node.js runtime for the backend and Chromium for the frontend. Electron is the main GUI framework behind several notable open-source projects including GitHub’s Atom and Microsoft’s Visual Studio Code source code editors, the Tidal music streaming service desktop application and the Light Table IDE, in addition to the freeware desktop client for the Discord chat service. Each Electron app has two threads: one is the main thread (dealing with the App window and bootup), and one is the renderer thread (which is basically your web code UI). Renderer ThreadElectron uses Chromium for displaying web pages in a separate process called the render process. This thread deals with your UI code in /src folder. In normal browsers, web pages usually run in a sand-boxed environment and are not allowed access to native resources. For Electron users, however, you got the power to use Node.js APIs in web pages allowing lower level operating system interactions. Main ThreadIn Electron, the process that runs package.json’s main script is called the main process. The script that runs in the main process and can display a GUI by initializing the renderer thread."},{"title":"Configuring Electron","updated":"2018-07-25T14:14:24.691Z","permalink":"https://quasar-framework.org/guide/electron-configuring-electron.html","text":"We’ll be using Quasar CLI to develop and build an Electron App. The difference between building a SPA, PWA, Mobile App or an Electron App is simply determined by the “mode” parameter in “quasar dev” and “quasar build” commands. But first, let’s learn how we can configure the Electron build. Quasar.conf.jsYou may notice that /quasar.conf.js contains a property called electron.electron: &#123; // optional; webpack config Object for // the Main Process ONLY (/src-electron/main-process/) extendWebpack (cfg) &#123; // directly change props of cfg; // no need to return anything &#125;, // optional; EQUIVALENT to extendWebpack() but uses webpack-chain; // for the Main Process ONLY (/src-electron/main-process/) chainWebpack (chain) &#123; // chain is an webpack-chain instance // of the Webpack configuration &#125;, bundler: 'packager', // or 'builder' // electron-packager options packager: &#123; //... &#125;, // electron-builder options builder: &#123; //... &#125;&#125; The “packager” prop refers to electron-packager options. The dir and out properties are overwritten by Quasar CLI to ensure the best results. The “builder” prop refers to electron-builder options."},{"title":"Electron Build Commands","updated":"2018-05-18T22:01:01.059Z","permalink":"https://quasar-framework.org/guide/electron-build-commands.html","text":"Quasar CLI makes it incredibly simple to develop or build the final distributables from your source code. Developing$ quasar dev -m electron# ..or the longer form:$ quasar dev --mode electron# with a specific Quasar theme, for iOS platform:$ quasar dev -m electron -t ios# with a specific Quasar theme, for Android platform:$ quasar dev -m electron -t mat It opens up an Electron window with dev-tools included. You have HMR for the renderer process and changes to main process are also picked up (but the latter restarts the Electron window on each change). Check how you can tweak Webpack config Object for the Main Process on Configuring Electron page. Building for Production$ quasar build -m electron# ..or the longer form:$ quasar build --mode electron# with a specific Quasar theme, for iOS platform:$ quasar build -m electron -t ios# with a specific Quasar theme, for Android platform:$ quasar build -m electron -t mat It builds your app for production and then uses electron-packager to pack it into an executable. Check how to configure this on Configuring Electron page. A note for non-Windows usersIf you want to build for Windows with a custom icon using a non-Windows platform, you must have wine installed. More Info."},{"title":"Electron Packages","updated":"2018-05-20T16:04:39.326Z","permalink":"https://quasar-framework.org/guide/electron-packages.html","text":"You can npm/yarn install and use Electron specific packages in your app. Take a look at the link and choose wisely if you need to."},{"title":"Troubleshooting and Tips","updated":"2018-05-18T22:01:01.060Z","permalink":"https://quasar-framework.org/guide/electron-troubleshooting-and-tips.html","text":"Read &amp; Write Local FilesOne great benefit of using Electron is the ability to access the user’s file system. This enables you to read and write files on the local system. To help avoid Chromium restrictions and writing to your application’s internal files, make sure to take use of electron’s APIs, specifically the app.getPath(name) function. This helper method can get you file paths to system directories such as the user’s desktop, system temporary files, etc. We can use the userData directory, which is reserved specifically for our application, so we can have confidence other programs or other user interactions should not tamper with this file space. import path from &apos;path&apos;import &#123; remote &#125; from &apos;electron&apos;const filePath = path.join(remote.app.getPath(&apos;userData&apos;), &apos;/some.file&apos;) Debugging Main ProcessWhen running your application in development you may have noticed a message from the main process mentioning a remote debugger. Ever since the release of electron@^1.7.2, remote debugging over the Inspect API was introduced and can be easily accessed by opening the provided link with Google Chrome or through another debugger that can remotely attach to the process using the default port of 5858, such as Visual Studio Code. ┏ Electron ------------------- Debugger listening on port 5858. Warning: This is an experimental feature and could change at any time. To start debugging, open the following URL in Chrome: chrome-devtools://devtools/bundled/inspector.html?experiments=true&amp;v8only=true&amp;ws=127.0.0.1:5858/22271e96-df65-4bab-9207-da8c71117641┗ ----------------------------"},{"title":"Electron Static Assets","updated":"2018-05-18T22:01:01.060Z","permalink":"https://quasar-framework.org/guide/electron-static-assets.html","text":"Please read about Handling Assets first, which applies to the renderer process. However, when we deal with Electron then Quasar CLI offers a handy __static variable in addition. Statics can be consumed by both the main process and renderer process, but since the paths change when building for production (due to packaging), then usage with fs and other modules that need a full path can be a little tricky. So __statics can come into play. On the subject of using dirname &amp; filenameSince the main process is bundled using webpack, the use of __dirname and __filename will not provide an expected value in production. Referring to the File Tree, you’ll notice that in production the electron-main.js is placed inside the dist/electron-* folder. Based on this knowledge, use __dirname &amp; __filename accordingly. app.asar└─ dist └─ electron-* ├─ statics/ ├─ js/... ├─ node_modules/ ├─ index.html ├─ package.json └─ electron-main.js Static assets with fs, path and __staticsLet’s say we have a static asset that we need to read into our application using fs, but how do we get a reliable path, in both development and production, to the statics/ folder? Quasar provides a global variable named __statics that will yield a proper path to it. Here’s how we can use it to read a simple text file in both development and production. Let’s assume we have a file called someFile.txt in /src/statics. Now, in main or renderer process, we can access it like this:// main or renderer processimport fs from 'fs'import path from 'path'let fileContents = fs.readFileSync(path.join(__statics, '/someFile.txt'), 'utf8')"},{"title":"Electron Preparation","updated":"2018-05-18T22:01:01.060Z","permalink":"https://quasar-framework.org/guide/electron-preparation.html","text":"Before we dive in to the actual development, we need to do some preparation work. 1. Add Quasar Electron ModeIn order to develop/build a Quasar Electron app, we need to add the Electron mode to our Quasar project. What this does is that it npm installs some Electron packages and creates /src-electron folder.$ quasar mode -a electron Every Electron app has two threads: the main thread (deals with the window and initialization code – from the newly created folder /src-electron) and the renderer thread (which deals with the actual content of your app from /src). The new folder has the following structure:.└── src-electron/ ├── icons/ # Icons of your app for all platforms | ├── icon.icns # Icon file for Darwin (MacOS) platform | ├── icon.ico # Icon file for win32 (Windows) platform | └── linux-256x256.png # Icon file for Linux platform └── main-process/ # Main thread source code ├── electron-main.dev.js # Main thread code while developing; read below └── electron-main.js # Main thread code for production When you add the Quasar Electron mode, you’ll notice that a few npm packages are installed. These are Electron specific and since Electron doesn’t follow the semver notation, it’s best that you lock the installed versions. Otherwise, other developers working on the same project may end up using on different Electron version – room for trouble. Electron makes releases quite often so features are always subject to change. Electron-main.dev.jsThis file (/src-electron/main-process/electron-main.dev.js) is used specifically for development and is used to install dev-tools. Usually it should not have to be modified, but can be used to extend your development needs. After it sets up dev-tools it imports the electron-main.js which is the place you’ll make most (if not all) of your changes. A note for Windows UsersIf you run into errors during npm install about node-gyp, then you most likely do not have the proper build tools installed on your system. Build tools include items like Python and Visual Studio. Fortunately, there are a few packages to help simplify this process. The first item we need to check is our npm version and ensure that it is not outdated. This is accomplished using npm-windows-upgrade. If you are using yarn, then you can skip this check. Once that is complete, we can then continue to setup the needed build tools. Using windows-build-tools, most of the dirty work is done for us. Installing this globally will in turn setup Visual C++ packages, Python, and more. At this point things should successfully install, but if not then you will need a clean installation of Visual Studio. Please note that these are not problems with Quasar, but they are related to NPM and Windows. 2. Start DevelopingIf you want to jump right in and start developing, you can skip the previous step with “quasar mode” command and issue:$ quasar dev -m electron -t [mat|ios] This will add Electron mode automatically, if it is missing.It will open up an Electron window which will render your app along with Developer Tools opened side by side."},{"title":"UMD Starter Kit - CDN install","updated":"2018-08-18T15:39:58.743Z","permalink":"https://quasar-framework.org/guide/embedding-quasar.html","text":"If you want to embed Quasar into your existing website project, integrating it in a progressive manner, then go for the UMD/Standalone (Unified Module Definition) version. InstallationUMD is all about adding Quasar style and javascript tags. This is a full list. Choose only what you use. &lt;head&gt; &lt;!-- Do you need Material Icons? --&gt; &lt;link href=\"https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900|Material+Icons\" rel=\"stylesheet\" type=\"text/css\"&gt; &lt;!-- Do you need Fontawesome? --&gt; &lt;link href=\"https://use.fontawesome.com/releases/v5.0.13/css/all.css\" rel=\"stylesheet\"&gt; &lt;!-- Do you need Ionicons? --&gt; &lt;link href=\"https://cdn.jsdelivr.net/npm/ionicons@^4.0.0/dist/css/ionicons.min.css\" rel=\"stylesheet\"&gt; &lt;!-- Do you need MDI? --&gt; &lt;link href=\"https://cdn.jsdelivr.net/npm/@mdi/font@^2.0.0/css/materialdesignicons.min.css\" rel=\"stylesheet\"&gt; &lt;!-- Do you need all animations? --&gt; &lt;link href=\"https://cdn.jsdelivr.net/npm/animate.css@^3.5.2/animate.min.css\" rel=\"stylesheet\"&gt; &lt;!-- Finally, add Quasar's CSS: Replace version below (0.17.8) with your desired version of Quasar. Replace \".mat\" with \".ios\" for the iOS theme. Add \".rtl\" for the RTL support (example: quasar.mat.rtl.min.css). --&gt; &lt;link href=\"https://cdn.jsdelivr.net/npm/quasar-framework@0.17.8/dist/umd/quasar.mat.min.css\" rel=\"stylesheet\" type=\"text/css\"&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- Do you want IE support? Replace \"0.17.8\" with your desired Quasar version --&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/quasar-framework@0.17.8/dist/umd/quasar.ie.polyfills.umd.min.js\"&gt;&lt;/script&gt; &lt;!-- You need Vue too --&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/vue@latest/dist/vue.min.js\"&gt;&lt;/script&gt; &lt;!-- Add Quasar's JS: Replace version below (0.17.8) with your desired version of Quasar. Replace \".mat\" with \".ios\" for the iOS theme. --&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/quasar-framework@0.17.8/dist/umd/quasar.mat.umd.min.js\"&gt;&lt;/script&gt; &lt;!-- If you want to add a Quasar I18n language pack (other than \"en-us\"). Notice \"pt-br\" in \"i18n.pt-br.umd.min.js\" for Brazilian Portuguese language pack. Replace version below (0.17.8) with your desired version of Quasar. Also check final &lt;script&gt; tag below to enable the language Language pack list: https://github.com/quasarframework/quasar/tree/dev/i18n --&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/quasar-framework@0.17.8/dist/umd/i18n.pt-br.umd.min.js\"&gt;&lt;/script&gt; &lt;!-- If you want to make Quasar use a specific set of icons (unless you're using Material Icons already). Replace version below (0.17.8) with your desired version of Quasar. Icon sets list: https://github.com/quasarframework/quasar/tree/dev/icons --&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/quasar-framework@0.17.8/dist/umd/icons.fontawesome.umd.min.js\"&gt;&lt;/script&gt; &lt;script&gt; // if using a Quasar language pack other than the default \"en-us\"; // requires the language pack style tag from above Quasar.i18n.set(Quasar.i18n.ptBr) // notice camel-case \"ptBr\" // if you want Quasar components to use a specific icon library // other than the default Material Icons; // requires the icon set style tag from above Quasar.icons.set(Quasar.icons.fontawesome) // fontawesome is just an example /* Example kicking off the UI. Obviously, adapt this your specific needs. */ // custom component example, assumes you have a &lt;div id=\"my-page\"&gt;&lt;/div&gt; in your &lt;body&gt; Vue.component('my-page', &#123; template: '#my-page' &#125;) // start the UI; assumes you have a &lt;div id=\"q-app\"&gt;&lt;/div&gt; in your &lt;body&gt; new Vue(&#123; el: '#q-app', data: function () &#123; return &#123;&#125; &#125;, methods: &#123;&#125;, // ...etc &#125;) &lt;/script&gt;&lt;/body&gt; OptionalOne other quick way to get necessary tags based on your requirements is to use the UMD starter kit. It will ask you some questions and will generate a simple HTML file that will show you how to use CDN to add Quasar: $ vue init quasarframework/quasar-starter-kit-umd &lt;folder_name&gt; And you’re done. Inspect index.html file that was created in the new folder and learn how you can embed Quasar. Notice the &lt;style&gt; and &lt;script&gt; tags and their order. Notice that as opposed to the Main Starter Kit, you don’t need to import anything. All components, directives and Quasar plugins are ready to be used out of the box. However, the disadvantage is that you won’t benefit from the top notch development experience provided by Quasar CLI – which allows you to simultaneously develop and build SPA, PWA, Mobile and Electron Apps. JsFiddle / CodepenYou can fork and use these links for reporting issues on Github too: Material Theme iOS Theme jsFiddle https://jsfiddle.net/rstoenescu/waugrryy/ https://jsfiddle.net/rstoenescu/7gu065yg/ Codepen https://codepen.io/rstoenescu/pen/KQRZJg https://codepen.io/rstoenescu/pen/paVpBN These links (obviously) use the Quasar UMD version. Quasar Global ObjectWhen you embed Quasar UMD into a webpage you’ll get a Quasar global Object injected: Quasar = &#123; version, theme: 'mat', // or 'ios', based on the theme you are using from CDN // -- must match both .js and .css CDN links to point to same theme plugins, utils, // if you want to extend Quasar's components or directives components, directives, // if you want to change current icon set or Quasar I18n language // (must include CDN links so they are available first!) i18n, icons&#125; Init ConfigurationRequires Quasar v0.17+There are some configuration options for Quasar &amp; Quasar plugins. For the Quasar UMD version you can define the following before including the Quasar script tag: &lt;script&gt; // optional window.quasarConfig = &#123; brand: &#123; // this will NOT work on IE 11 primary: '#e46262', // ... or all other brand colors &#125;, notify: &#123;...&#125;, // default set of options for Notify Quasar plugin loading: &#123;...&#125;, // default set of options for Loading Quasar plugin loadingBar: &#123; ... &#125; // settings for LoadingBar Quasar plugin &#125;&lt;/script&gt; UsageSo, after you figured out the CDN links that you need to embed into your webpages (hopefully you’ve inspected the project folder created by UMD Starter Kit), now it’s time to use Quasar. You’ll notice that all the Quasar Components, Quasar Directives and Quasar Plugins have an installation section at the top of their pages. When using UMD, you can skip this section, as it is intended only for when your project is generated from the Main Starter Kit. By using the UMD version, you’ll have all of the components, directives and Quasar plugins already installed for you. You just need to start using them. Do not use self-closing tags with the UMD version:You will notice that you won’t be able to use the self-closing tag form of any of the components. You must close all components tags. &lt;!-- In docs, but for Main Starter Kit usage --&gt;&lt;q-btn label=\"My Button\" /&gt;&lt;!-- ^^^ can't use it like this on UMD --&gt;&lt;!-- Instead, include a self-closing tag too: --&gt;&lt;q-btn label=\"My Button\"&gt;&lt;/q-btn&gt; Quasar ComponentsAn example. No need to install any component in UMD version. &lt;q-btn label=\"My Button\"&gt;&lt;/q-btn&gt; Quasar DirectivesAn example. No need to install any directives in UMD version.&lt;div v-ripple&gt;...&lt;/div&gt; Quasar PluginsAn example. No need to install any plugins in UMD version. Quasar.plugins.actionSheet.create(&#123;...&#125;) Quasar UtilsAn example. Quasar.utils.event.getEventKey(evt) Changing Quasar Icon SetAssuming you have already included the CDN link to your favorite Quasar Icon Set (unless you’re using Material Icons which is used by default), you can then tell Quasar to use it: Quasar.icons.set(Quasar.icons.fontawesome) Changing Quasar I18n LanguageAssuming you have already included the CDN link to your desired Quasar I18n Language (unless you want “en-us” language pack which is used by default), you can then tell Quasar to use it: // example setting German language,// using ISO 2 letter code:Quasar.i18n.set(Quasar.i18n.de)// example setting Portuguese (Brazil) language:Quasar.i18n.set(Quasar.i18n.ptBr) The list of available languages can be found on Github. If your desired language pack is not available yet, you can help by providing a PR. We welcome any languages!"},{"title":"Opening Your Dev Server to the Public","updated":"2018-05-18T22:01:01.062Z","permalink":"https://quasar-framework.org/guide/opening-dev-server-to-public.html","text":"At some point you may want to show someone else the project you’ve been working on. Fortunately, there is a simple CLI tool to accomplish this. Ngrok creates a tunnel to your dev server and (by default) generates a hexadecimal internet address on the ngrok server to offer to your clients or anyone special you’d like to show your work to. IMPORTANTOpening a dev server to the public constitutes security risks. Be absolutely cautious when using tools like this. This tip is not intended for the general public. When you’ve finished with your demonstration or testing, make sure to stop ngrok. This will prevent any unwanted access of your computer through ngrok. Getting started Download and install ngrok here.(Please note that the ngrok executable file does not need to be placed in or run from inside your cordova folder. When on a mac it’s best to place the ngrok executable file inside /usr/local/bin to be able to run it globally.) Start your Dev server $ quasar dev Create your ngrok connection $ ngrok http 8080# In case your development server doesn't run on port 8080 you need to change the number to the correct port ngrok shows the url in the command line when it started. Tunnel Status onlineVersion 2.0/2.0Web Interface http://127.0.0.1:4040Forwarding http://92832de0.ngrok.io -&gt; localhost:8080Forwarding https://92832de0.ngrok.io -&gt; localhost:8080Connnections ttl opn rt1 rt5 p50 p90 0 0 0.00 0.00 0.00 0.00 Please be careful as the ‘Forwarding’ URL will be accessible to anyone until this connection is closed again. Inspecting trafficWhen running ngrok, visit http://localhost:4040 to inspect the traffic. This tool allows for custom domains, password protection and a lot more. If you require further assistance, please refer to the ngrok docs for more information."},{"title":"Introduction to the Quasar Framework","updated":"2018-09-19T16:29:58.448Z","permalink":"https://quasar-framework.org/guide/introduction-to-quasar.html","text":"What is Quasar?Quasar (pronounced /ˈkweɪ.zɑɹ/) is an MIT licensed open-source framework (powered with Vue) that helps web developers create responsive++ websites/apps in many flavours: SPAs (Single Page App) SSR (Server-side Rendered App) (+ optional PWA client takeover) PWAs (Progressive Web App) Mobile Apps (Android, iOS, …) through Apache Cordova Multi-platform Desktop Apps (using Electron) Quasar allows developers to write code once and simultaneously deploy as website (SPA, PWA, SSR + SPA client takeover, SSR + PWA client takeover), Mobile App and/or Electron App using the same codebase. Design an app in record time, using a state of the art CLI and backed by well-written, very fast Quasar web components. When using Quasar, you won’t need additional heavy libraries like Hammerjs, Momentjs or Bootstrap. It’s got that covered too, and with a small footprint! Why Quasar?Because of what is offered out of the box. Follow our Twitter account for testimonials. All Platforms in One GoOne authoritative source of code for all platforms, simultaneously: responsive desktop/mobile websites (SPA, SSR + SPA client takeover, SSR + PWA client takeover), PWAs (Progressive Web Apps), mobile apps (that look native) and multi-platform desktop apps (through Electron). Top class, fast web responsive componentsThere’s a component for almost every web development need out there. Each of these components is carefully crafted to offer the best possible experience to users. Quasar is designed with performance &amp; responsiveness in mind – so the overhead of using Quasar is barely noticeable. This is an area we take special pride in. Best practices integrated by defaultDevelopers using Quasar are encouraged to follow web development best practices, and it comes embedded with many such features out of the box. HTML/CSS/JS minification, cache busting, tree shaking, sourcemapping, code-splitting &amp; lazy loading, ES6 transpiling, linting code, accessibility features. Quasar takes care of all these and more - no configuration needed. Full RTL SupportRTL (right to left) support for both Quasar components &amp; the developer’s own code. Developer-written website/app CSS code gets automatically converted to RTL if an RTL language pack is used. Two Themes (more to come)The framework supports two of the most commonly used themes out of the box – Material theme and iOS theme. Progressively migrate your existing projectQuasar offers a UMD (Unified Module Definition) version, which means developers can add a CSS and JS HTML tag into their existing project and they’re ready to use it. No build step is required. Unparalleled developer experience through Quasar CLIWhen using Quasar’s CLI, developers benefit from: State preserving hot-reload when making changes to app source code, no matter if it’s a website, PWA, a Mobile App (directly on a phone or on an emulator) or an Electron app. Developers simply change their code and they can watch it get updated on the fly, without the need of any page refresh. State preserving compilation error overlay. Lint-on-save with ESLint – if developers like linting their code only ES6 code transpiling Sourcemaps Changing build options doesn’t require a manual reload of the dev server Many more leading-edge developer tools and techniques Get up to speed fastThe top-class project intitialization feature of the CLI makes getting started very easy for you, as a developer. You can get your idea to reality in record time. In other words, Quasar does the heavy lifting for you, so you are free to focus on your features and not on boilerplate. Awesome ever-growing communityWhen developers encounter a problem they can’t solve, they can visit the Quasar forum or Discord chat server. The community is there to help you. Wide platform supportGoogle Chrome, Firefox, IE11/Edge, Safari, Opera, iOS, Android, Windows Phone, Blackberry. Quasar components Internationalization (I18n)I18n is provided by default for Quasar components. If your language pack is missing it takes just 5 minutes to add it. Great documentationFinally, it’s worth mentioning the significant amount of time that is spent on writing great, bloat-free, focused, complete documentation pages so that developers can quickly pick up Quasar. There will be no room for confusion. Underlying technologiesVue, Babel, Webpack, Cordova, Electron. Except for Vue, which takes half a day to pick up and will change you forever, you are not really required to know the other technologies. Most of them are integrated and already configured for you. Get started in under a minuteHaving said this, let’s get started! You’ll be running a website or app in under a minute."},{"title":"Getting Started - Installation","updated":"2018-09-17T10:11:13.873Z","permalink":"https://quasar-framework.org/guide/index.html","text":"If you want to learn what Quasar is and what it can do for you, read the Introduction to Quasar. Otherwise, let’s get started and choose how you want to use Quasar: UMD/Standalone (embed into an existing project through CDN, progressive integration) Development with Quasar CLI (the premium experience, recommended) Vue CLI 3 plugin Here’s a comparison: Feature UMD Quasar CLI Vue CLI 3 Plugin Ability to embed into an existing project Yes - Yes, if it is Vue CLI app Progressive integration of Quasar Yes - - Ability to serve Quasar from CDN Yes - - Build SPA, PWA Yes Yes Yes Build SSR (+ optional PWA client takeover) - Yes ?? Build Mobile Apps, Electron Apps Yes Yes - Dynamic RTL support for Quasar components Yes Yes Yes Generating your own website/app RTL equivalent CSS rules automatically by Quasar - Yes Yes Take advantage of Quasar CLI for a stellar developer experience - Yes - Tree Shaking - Yes Yes SFC (Single File Component - for Vue) - Yes Yes Advanced configuration through dynamic quasar.conf.js - Yes - Unit &amp; end to end testing - Not yet Yes If you are upgrading from previous Quasar versions, check Upgrade Guide. UMD / Standalone (uses CDN)If you want to embed Quasar into your existing website project, integrating it in a progressive manner, then go for the UMD/Standalone (Unified Module Definition) version. There a helper UMD starter kit which will show you how to get started and what CSS and JS tags to include into your project. It will ask you some questions (what Quasar theme will you be using, what Quasar I18n to include, …) and it will generate a simple HTML file that will demo on how to use CDN to add Quasar: # make sure you have @vue-cli (Vue CLI 3.0) globally installed# Node.js &gt;= 8.9.0 is required.$ yarn global add vue-cli # or @vue/cli @vue/cli-init# or:$ npm install -g vue-cli # or @vue/cli @vue/cli-init# then...$ vue init quasarframework/quasar-starter-kit-umd &lt;folder_name&gt; And you’re done. Inspect index.html file that was created in the new folder and learn how you can embed Quasar. You may want to repeat the step above to experiment with different setups based on the answers you give out. Now head on to read about UMD/Standalone. Development with Quasar CLI (Recommended)If you want to be able to build: a SPA (Single Page Application/Website), a SSR (Server-side Rendered App/Website), a PWA (Progressive Web App), a Mobile App (through Cordova), an Electron App,…and benefit from a stellar experience provided by the Quasar CLI, with HMR (Hot Module Reload) share the same base-code for all those modes benefit from the latest web recommended practices out of the box ability to write ES6 code benefit from Tree Shaking get your code optimized, minified, bundled in the best possible way ability to write SFC (Single File Component - for Vue) …then go for the best developer experience: First, we will need to install Quasar CLI. Make sure you have Node &gt;=8 and NPM &gt;=5 installed on your machine. We’ll also be installing Vue CLI 3.0, which is only needed for initializing a Quasar project. # make sure you have vue-cli globally installed# -- the init procedure to scaffold the project files uses vue-cli init command$ yarn global add vue-cli # or @vue/cli @vue/cli-init# or:$ npm install -g vue-cli # or @vue/cli @vue/cli-init# Node.js &gt;= 8.9.0 is required.$ yarn global add quasar-cli# or:$ npm install -g quasar-cli Then we will create a project folder with Quasar CLI:$ quasar init &lt;folder_name&gt; Note that you don’t need separate projects, in order to build any one of the options described above. This one project folder can seamlessly handle all of them. Be sure to also familiarize yourself with the Quasar CLI. Vue CLI 3 pluginMake sure you have vue-cli 3.x.x: vue --version If you don’t have a project created with vue-cli 3.x yet: vue create my-app Navigate to the newly created project folder and add the cli plugin. Before installing it, make sure to commit your current changes should you wish to revert them later. cd my-appvue add quasar It will ask you if you want the plugin to replace some existing files. It is recommended that you do it if you wish to have an example so you can quickly develop your app. Your Vue config (in package.json or vue.config.js file, depending on what you chose when you created your vue app) will also contain a quasar Object. Most important property is theme (with possible values “mat” or “ios”), which you can later change should you want."},{"title":"PWA Build Commands","updated":"2018-05-18T22:01:01.062Z","permalink":"https://quasar-framework.org/guide/pwa-build-commands.html","text":"Quasar CLI makes it incredibly simple to develop or build the final distributables from your source code. Developing$ quasar dev -m pwa# ..or the longer form:$ quasar dev --mode pwa# with a specific Quasar theme:$ quasar dev -m pwa -t ios IMPORTANTDo not run Lighthouse on your development build. It is not optimized and does not contain a true Service Worker. Building for Production$ quasar build -m pwa# ..or the longer form:$ quasar build --mode pwa# with a specific Quasar theme:$ quasar build -m pwa -t ios PWA Checklisthttps://developers.google.com/web/progressive-web-apps/checklist IMPORTANTDo not run Lighthouse on your development build. It is not optimized and does not contain a true Service Worker."},{"title":"What is a PWA","updated":"2018-08-18T15:39:58.744Z","permalink":"https://quasar-framework.org/guide/pwa-introduction.html","text":"A Progressive Web App (PWA) is a web app that uses modern web capabilities to deliver an app-like experience to users. These apps meet certain requirements (see below), are deployed to web servers and accessible through URLs (on HTTPS protocol). This can work in conjunction with Cordova to provide a multiple deploy targets for all your users. Quasar CLI allows you to deploy your app as a PWA as well as a Mobile app and take advantage of both channels. What is RequiredTo be considered a Progressive Web App, your app must be: Progressive - Work for every user, regardless of browser choice, because they are built with progressive enhancement as a core tenet. Responsive - Fit any form factor, desktop, mobile, tablet, or whatever is next. Connectivity independent - Enhanced with service workers to work offline or on low quality networks. App-like - Use the app-shell model to provide app-style navigation and interactions. Fresh - Always up-to-date thanks to the service worker update process. Safe - Served via HTTPS to prevent snooping and ensure content has not been tampered with. Discoverable - Are identifiable as “applications” thanks to W3C manifests and service worker registration scope allowing search engines to find them. Re-engageable - Make re-engagement easy through features like push notifications. Installable - Allow users to “keep” apps they find most useful on their home screen without the hassle of an app store. Linkable - Easily share via URL and not require complex installation. More information available on Addy Osmani’s article about PWA. Manifest FileAn app manifest file describes the resources your app will need. This includes your app’s displayed name, icons, as well as splash screen. Quasar CLI configures this for you, but you can override any property from within /quasar.conf.js. Learn how by visiting the Configure PWA documentation page. More information on the Manifest file can be read by accessing:https://developer.mozilla.org/en-US/docs/Web/Manifest Service WorkerThe Service worker provides a programmatic way to cache app resources (files). The programmatic API allows developers to decide how to handle caching and provides a much more flexible experience than other options. More information on the Service Worker API can be read by accessing:https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API"},{"title":"Configuring PWA","updated":"2018-07-25T14:14:24.694Z","permalink":"https://quasar-framework.org/guide/pwa-configuring-pwa.html","text":"We’ll be using Quasar CLI to develop and build a PWA. The difference between building a SPA, Mobile App, Electron App, PWA or SSR is simply determined by the “mode” parameter in “quasar dev” and “quasar build” commands. InstallationIn order to build a PWA, we first need to add the PWA mode to our Quasar project:$ quasar mode -a pwa If you want to jump right in and start developing, you can skip the “quasar mode” command and issue:$ quasar dev -m pwa This will add PWA mode automatically, if it is missing. Service WorkerAdding PWA mode to a Quasar project means a new folder will be created: /src-pwa, which contains PWA specific files:.└── src-pwa/ ├── register-service-worker.js # App-code *managing* service worker └── custom-service-worker.js # Optional custom service worker file You can freely edit these files. Notice a few things: “register-service-worker.js” is automatically imported into your app (like any other /src file). It registers the service worker (created by Workbox or your custom one, depending on workbox plugin mode – quasar.conf.js &gt; pwa &gt; workboxPluginMode) and you can listen for Service Worker’s events. You can use ES6 code. “custom-service-worker.js” will be your service worker file ONLY if workbox plugin mode is set to “InjectManifest” (quasar.conf.js &gt; pwa &gt; workboxPluginMode: ‘InjectManifest’). Otherwise, Workbox will create a service-worker file for you. It makes sense to run Lighthouse tests on production builds only. Quasar.conf.jsThis is the place where you can configure Workbox’s behavior and also tweak your manifest.json. pwa: &#123; // workboxPluginMode: &apos;InjectManifest&apos;, // workboxOptions: &#123;&#125;, manifest: &#123; // ... &#125;&#125; More information: Workbox Webpack Plugin, Workbox. Configuring Manifest FileThe Manifest file is generated by Quasar CLI with a default configuration for it. You can however tweak this configuration from /quasar.conf.js. Example taken from Quasar Play’s quasar.conf.js:pwa: &#123; // workboxPluginMode: 'InjectManifest', // workboxOptions: &#123;&#125;, manifest: &#123; name: 'Quasar Play', short_name: 'Quasar-Play', description: 'Quasar Framework Showcase', icons: [ &#123; 'src': 'statics/icons/icon-128x128.png', 'sizes': '128x128', 'type': 'image/png' &#125;, &#123; 'src': 'statics/icons/icon-192x192.png', 'sizes': '192x192', 'type': 'image/png' &#125;, &#123; 'src': 'statics/icons/icon-256x256.png', 'sizes': '256x256', 'type': 'image/png' &#125;, &#123; 'src': 'statics/icons/icon-384x384.png', 'sizes': '384x384', 'type': 'image/png' &#125;, &#123; 'src': 'statics/icons/icon-512x512.png', 'sizes': '512x512', 'type': 'image/png' &#125; ], display: 'standalone', orientation: 'portrait', background_color: '#ffffff', theme_color: '#027be3' &#125;&#125; Please read about the manifest config before diving in. IMPORTANTNote that you don’t need to edit your index.html file (generated from /src/index.template.html) to link to the manifest file. Quasar CLI takes care of embedding the right things for you. PWA Checklisthttps://developers.google.com/web/progressive-web-apps/checklist IMPORTANTDo not run Lighthouse on your development build. It is not optimized and does not contain a true Service Worker."},{"title":"Quasar CLI","updated":"2018-09-19T16:29:58.448Z","permalink":"https://quasar-framework.org/guide/quasar-cli.html","text":"The Quasar CLI allows you to create new projects in no time, by generating a base application, filled with everything you need to begin working on your application. It does most of the heavy-lifting, so you need not concern yourself with the redundant tasks of building the application. You only need Quasar CLI if you are using the project initialization feature. If you want the UMD version, you won’t be needing it. # Node.js &gt;= 8.9.0 is required.$ yarn global add quasar-cli# or:$ npm install -g quasar-cli Familiarize yourself with the list of commands:$ quasar ... Commands init Create a project folder dev Start a dev server for your App build Build your app for production clean Clean all build artifacts new Quickly scaffold page/layout/component/... vue file mode Add/remove Quasar Modes for your App info Display info about your machine and your App serve Create an ad-hoc (production-ready) server on App distributables help Displays this message See help for any command:$ quasar [command name] --help init (Create Project Folder)Creates an App folder with initial project boilerplate.$ quasar init &lt;folder-name&gt; You’ll need @vue/cli and @vue/cli-init globally installed, or just vue-cli. info (Package Versions)The Quasar CLI is equipped with a stable combination of multiple NPM build packages (Webpack, Vue, etc) which gets updated frequently after heavy testing. In order for you to see what versions of Node, NPM, Quasar CLI, Quasar, Vue, Webpack, Cordova, Babel and many more, issue this command in a Quasar project folder:$ quasar info dev (Development Server)$ quasar dev -h Description Starts the app in development mode (hot-code reloading, error reporting, etc) Usage $ quasar dev -p &lt;port number&gt; Options --theme, -t App theme (default: mat) --mode, -m App mode [spa|ssr|pwa|cordova|electron] (default: spa) --port, -p A port number on which to start the application --hostname, -H A hostname to use for serving the application --help, -h Displays this message Only for Cordova mode: --target, -T (required) App target [android|ios|blackberry10|browser|osx|ubuntu|webos|windows] --emulator, -e (optional) Emulator name Example: iPhone-7, iPhone-X The Quasar development server allows you to develop your App by compiling and maintaining code in-memory. A web server will serve your App while offering hot-reload out of the box. Running in-memory offers faster rebuilds when you change your code. Hot Reload is much more than just refreshing your browser when code changes. It skips the refresh and updates your code on the fly, while maintaining your App’s state (like your Vue’s model data). Please note that there are cases when this is impossible, so the dev webserver will simply refresh your browser. (Always ensure you are running only one instance of Quasar CLI at a time, otherwise Hot-Reload and other stuff will break!) Based on what you want to develop, you can start the development server by using “quasar dev” command as follows: # Developing a SPA$ quasar dev# ...or$ quasar dev -m spa# Developing for SSR$ quasar dev -m ssr# Developing a PWA$ quasar dev -m pwa# Developing a Mobile App (through Cordova)$ quasar dev -m cordova -T [android|ios]# Developing an Electron App$ quasar dev -m electron However, there are two themes available: Material Design (‘mat’) and iOS (‘ios’). In order for specifying a specific theme, add the ‘-t’ parameter to the above commands: # Material Design$ quasar dev -t mat# iOS theme$ quasar dev -t ios If you wish to change the hostname or port serving your App you have 3 options: Edit ‘/quasar.conf.js’: devServer: &#123; host: '...', port: ...&#125; Through ‘-H’ (hostname) and ‘-p’ (port) command options. If this is a one time thing, specify the hostname and/or port as an environment variable:$ PORT=3000 quasar dev$ HOSTNAME=1.1.1.14 quasar dev If there appears to be an issue with hot reload, you can try two fixes: Change the permissions for the project folder with sudo chown -R username: . or run the dev server with root privileges sudo quasar dev build / clean (Build App for Production)$ quasar build -h Description Builds distributables of your app. Usage $ quasar build -p &lt;port number&gt; Options --theme, -t App theme (default: mat) --mode, -m App mode [spa|ssr|pwa|cordova|electron] (default: spa) --target, -T App target - Cordova (default: all installed) [android|ios|blackberry10|browser|osx|ubuntu|webos|windows] - Electron with default \"electron-packager\" bundler (default: yours) [darwin|win32|linux|mas|all] - Electron with \"electron-builder\" bundler (default: yours) [darwin|mac|win32|win|linux|all] --debug, -d Build for debugging purposes --help, -h Displays this message ONLY for Electron mode: --bundler, -b Bundler (electron-packager or electron-builder) [packager|builder] --arch, -A App architecture (default: yours) - with default \"electron-packager\" bundler: [ia32|x64|armv7l|arm64|mips64el|all] - with \"electron-builder\" bundler: [ia32|x64|armv7l|arm64|all] The Quasar CLI can pack everything together and optimize your App for production. It minifies source code, extracts vendor components, leverages browser cache and much more. # build for production$ quasar build# build for production with specific theme$ quasar build -t mat$ quasar build -t ios$ quasar build -m pwa -t mat You can also clean up all the build assets:$ quasar clean new (Generating Components, Pages, Layouts, Vuex Store)$ quasar new -h Description Quickly scaffold a page/layout/component/store module. Usage $ quasar new [p|page] &lt;page_file_name&gt; $ quasar new [l|layout] &lt;layout_file_name&gt; $ quasar new [c|component] &lt;component_file_name&gt; $ quasar new plugin &lt;plugin_name&gt; $ quasar new [s|store] &lt;store_module_name&gt; # Examples: # Create src/pages/MyNewPage.vue: $ quasar new p MyNewPage # Create src/pages/MyNewPage.vue and src/pages/OtherPage.vue: $ quasar new p MyNewPage OtherPage # Create src/layouts/shop/Checkout.vue $ quasar new layout shop/Checkout.vue Options --help, -h Displays this message This command is simply a helper in order to quickly scaffold a page/layout/component/vuex store module. You are not required to use it, but can help you when you don’t know how to start. mode (PWA, Cordova, Electron)$ quasar mode -h Description Add/Remove support for SSR / PWA / Cordova / Electron modes. Usage $ quasar mode -r|-a pwa|ssr|cordova|electron Options --add, -a Add support for mode [pwa|ssr|cordova|electron] --remove, -r Remove support for mode [pwa|ssr|cordova|electron] --help, -h Displays this message When you initialize a project with the CLI, you can build SPA (Single Page Website/Application), SSR (Server-side Render Website/Application with optional PWA client takeover), PWA (Progressive Web App), Mobile App (through Cordova), and/or Electron Apps. When you develop for SSR, PWA, Cordova or Electron, you need these modes installed. If you issue “quasar dev” or “quasar build” they will automatically be installed. These modes will add a “src-*” folder into your project with very specific code for it: Folder Mode Description src-ssr ssr Contains the production Node server files. src-pwa pwa Contains the Service Worker file that you can tweak. src-cordova cordova Is a Cordova project folder that will be using your ‘src’ as content. Tweak Cordova config, add/remove platforms, splash screens, Cordova plugins and so on from this folder. Do NOT touch “src-cordova/www” folder though as it will get overwritten at every build. src-electron electron Has code for the main Electron thread. The renderer thread will be your app in ‘src’. If for some reason you decide you don’t need a mode, you can remove it. This will permanently delete the respective “src-*” folder.$ quasar mode --remove pwa serve (Serve Static-Content Folder)This command can be used in production too. $ quasar serve -h Description Start a HTTP(S) server on a folder. Usage $ quasar serve [path] $ quasar serve . # serve current folder If you serve a SSR folder built with the CLI then control is yielded to /index.js and params have no effect. Options --port, -p Port to use (default: 8080) --hostname, -H Address to use (default: 0.0.0.0) --gzip, -g Compress content (default: true) --silent, -s Supress log message --colors Log messages with colors (default: true) --open, -o Open browser window after starting --cache, -c &lt;number&gt; Cache time (max-age) in seconds; Does not apply to /service-worker.js (default: 86400 - 24 hours) --micro, -m &lt;seconds&gt; Use micro-cache (default: 1 second) --history Use history api fallback; All requests fallback to index.html --https Enable HTTPS --cert, -C [path] Path to SSL cert file (Optional) --key, -K [path] Path to SSL key file (Optional) --proxy &lt;file.js&gt; Proxy specific requests defined in file; File must export Array (&#123; path, rule &#125;) See example below. \"rule\" is defined at: https://github.com/chimurai/http-proxy-middleware --help, -h Displays this message Proxy file example module.exports = [ &#123; path: '/api', rule: &#123; target: 'http://www.example.org' &#125; &#125; ] --&gt; will be transformed into app.use(path, httpProxyMiddleware(rule)) Custom Node serverWhen building a SPA or PWA, the distributable folder can be served by any static webserver. To test it out (assuming you don’t have a specific publicPath or not using Vue Router “history” mode), you can use the “http-server” npm package. Or you can build your own server. Here are some examples:// when using default Vue Router \"hash\" modeconst express = require('express'), serveStatic = require('serve-static'), port = process.env.PORT || 5000const app = express()app.use(serveStatic(...path-to-dist...))app.listen(port) // when using Vue Router \"history\" modeconst express = require('express'), serveStatic = require('serve-static'), history = require('connect-history-api-fallback'), port = process.env.PORT || 5000const app = express()app.use(history())app.use(serveStatic(...path-to-dist...))app.listen(port) If you need URL rewrites of API, or simply put you want to proxy your API requests, then you can use “http-proxy-middleware” package:// add this to one of the two previous examples:const proxy = require('http-proxy-middleware')// ...app.use('/api', proxy(&#123; '/api': &#123; target: `http://my-api.com:5050`, pathRewrite: &#123;\"^/api\" : \"\"&#125; &#125;&#125;))// then app.listen(...) Finally, run one of these files:$ node my-server.js"},{"title":"Quasar Release Notes","updated":"2018-05-18T22:01:01.064Z","permalink":"https://quasar-framework.org/guide/quasar-release-notes.html","text":"Release Notes are available on Github."},{"title":"Quasar Framework Contributing Guide","updated":"2018-05-18T22:01:01.064Z","permalink":"https://quasar-framework.org/guide/quasar-contribution-guide.html","text":"The Quasar team is really excited when people help by contributing to Quasar Framework. It’s what the FLOSS community is all about! There are lots of features waiting for someone to write them and make the Quasar experience even better. Check Github or contact Razvan Stoenescu through Discord chat/email. Before submitting your contribution though, please make sure to take a moment and read through the contributing guidelines and also the code of conduct. You can also help with the documentation. If you catch a mistake or want to add a few lines to a page or write new pages, use the link at the end of each page of this website (specifically the Suggest an edit on Github link). Finally, if you want, you can leave a buck for coffee from time to time. Quasar needs some financial backing to evolve. Read more here. Github Repositories Quasar Framework Quasar CLI Quasar Starter Kit Quasar Play Documentation Website Please use the appropriate Github repo to report issues. See “Github Repositories” above. For example, a bug related to CLI should be reported to the CLI repo, one related to build issues to Quasar Starter Kit repo and so on."},{"title":"Quasar Playground","updated":"2018-05-18T22:01:01.064Z","permalink":"https://quasar-framework.org/guide/quasar-playground.html","text":"jsFiddle / Codepen Material Theme iOS Theme jsFiddle https://jsfiddle.net/rstoenescu/waugrryy/ https://jsfiddle.net/rstoenescu/7gu065yg/ Codepen https://codepen.io/rstoenescu/pen/KQRZJg https://codepen.io/rstoenescu/pen/paVpBN You can fork and use these links for reporting issues on Github too. These links (obviously) use the Quasar UMD version. Make sure to read about it before diving in. When you use jsFiddle/Codepen you can skip the Installation section. Quasar PlayLive Demo: Material Theme iOS Theme Google Play Store (currently it’s outdated, using a very old Quasar version) Quasar Play is used for these documentation pages too, on the right side, on the mobile frame.You can clone it and play with it by visiting its Github page."},{"title":"Quasar Roadmap","updated":"2018-07-25T14:14:24.697Z","permalink":"https://quasar-framework.org/guide/quasar-roadmap.html","text":"Next Quasar version is v1.0. Quasar’s main focus points at the moment are: Notable improvements to the form components Total documentation website revamp, using Quasar SSR. Better “view source” functionality, with ability to fork and play each example on JsFiddle. Quasar Icon Factory - automatically generate necessary icons for all platforms (favicons, mobile icons, electron icons, …) from one image file used as source Quasar CLI testing module (with your favorite assertion library and favorite test runner) Alternative to Quasar SSR: Nuxt module (for ability to use Quasar + Nuxt) Out of the box Typescript support (can be added now too) Notable features on the roadmap for longer term (some might end up in v1.0): Chrome (+ Firefox) extension Quasar CLI mode Tipster component List Item Sliding with Actions component Virtual Lists component Quasar needs your backing in order to speed up development and offer even better support. Please take a look on the Patreon Campaign. If invoices are needed for bigger amounts, please contact us by email (razvan.stoenescu@gmail.com). Every cent really counts and helps us spend more time on Quasar."},{"title":"Quasar Theming","updated":"2018-05-18T22:01:01.066Z","permalink":"https://quasar-framework.org/guide/quasar-theming.html","text":"Every website/app needs a specific design to differentiate from the competition. This is where Quasar Framework excels, because: It offers two themes out of the box: Material and iOS The two themes can be customized/extended easily from the App code. You can change the primary color, the secondary color, and most of the CSS. Customizing does not mean having multiple CSS files, one overriding properties from the other. No. You’ll have one stylesheet with each CSS property declared only once. All themes include a CSS reset (following latest standards) to eliminate quirks between platforms. Quasar CSS is a blank slate that you can easily customize and modify to fit your brand, while still following the standards of each platform. The best apps in the app stores are fully customized and Quasar makes it easy to do the same with your App. Quasar is built on top of Stylus, which allows it to set some default styles for your App but makes it extremely easy for you to change the defaults in your App code. Customizing a theme means overriding Stylus variables which can hold colors, sizes, border types and so on. After reading this intro you can go to Components &gt; Stylus Variables for a list of all Stylus variables that you can override so you can theme your App. Please note the following: When building your App or starting the dev server you can only use one theme at a time. Quasar themes can be configured in /src/css/themes folder, which contains three files, as you’ll see in the next section. Structuresrc/css/themes folder from a Quasar App will contain the following files: src└── css └── themes ├── common.variables.styl # Theme Shared Quasar Variables ├── variables.mat.styl # Quasar Variables that apply to Material only └── variables.ios.styl # Quasar Variables that apply to iOS only You will find more documentation and steps in these files. Using Stylus variables in Vue filesIn your app’s *.vue files you can use the core Quasar Stylus variables (examples - colors: $primary, $red-1, media breakpoints: $breakpoint-md, $breakpoint-md-min and so on). &lt;!-- Notice lang=\"stylus\" --&gt;&lt;style lang=\"stylus\"&gt;// \"variables\" is a Webpack alias (provided out of the box by Quasar CLI)@import '~variables'div color $red-1 background-color $grey-5&lt;/style&gt; NOTE: You must add @import &#39;~variables&#39; within your &lt;style&gt; tags, in order for Quasar to parse any Stylus variables you may add. If you don’t, Quasar will literally pass the variables as text and any theming changes using Stylus variables won’t work. NOTE: The &lt;style&gt; tag uses Stylus code. You can’t use any other CSS pre-processor. Theming Your AppYou can easily theme your App by adding Stylus variable declarations in src/css/themes/common.variables.styl or the other two files (in the latter case if you want different looks for each Quasar theme). To customize the look and feel of this app, you can override the Stylus variables found in Quasar’s source Stylus files. Setting variables before Quasar’s Stylus will use these variables rather than Quasar’s default Stylus variable values. Stylus variables specific to the themes belong in either the variables.ios.styl or variables.mat.styl files. For example, change the primary color of your App: $primary = #00ffff Platform Specific StylesThe platform in which your App runs is automatically detected and the &lt;body&gt; tag gets following classes: Body Class Name Description mat Default style; Material Design theme; Android platform ios Apple platform; iOS theme desktop App runs on a desktop browser mobile App runs on a mobile browser cordova Standalone Mobile App wrapped with Apache Cordova electron App runs under Electron touch Touch capable platform no-touch Touch capability not present within-iframe For when entire website is under an IFRAME tag So you can write specific Stylus code for your App like this: body &amp;.cordova .tag color $primary &amp;.desktop .tag color $secondary &amp;.mobile .tag color $tertiary Stylus VariablesRead a complete list of all Stylus variables that you can override."},{"title":"SSR Build Commands","updated":"2018-07-25T14:14:24.698Z","permalink":"https://quasar-framework.org/guide/ssr-build-commands.html","text":"Quasar CLI makes it incredibly simple to develop or build the final distributables from your source code. Developing$ quasar dev -m ssr# ..or the longer form:$ quasar dev --mode ssr# with a specific Quasar theme:$ quasar dev -m ssr -t ios Building for Production$ quasar build -m ssr# ..or the longer form:$ quasar build --mode ssr# with a specific Quasar theme:$ quasar build -m ssr -t ios"},{"title":"Client Side Hydration","updated":"2018-07-25T14:14:24.699Z","permalink":"https://quasar-framework.org/guide/ssr-client-side-hydration.html","text":"Hydration refers to the client-side process during which Vue takes over the static HTML sent by the server and turns it into dynamic DOM that can react to client-side data changes. Since the server has already rendered the markup, we obviously do not want to throw that away and re-create all the DOM elements. Instead, we want to “hydrate” the static markup and make it interactive. In development mode, Vue will assert the client-side generated virtual DOM tree matches the DOM structure rendered from the server. If there is a mismatch, it will bail hydration, discard existing DOM and render from scratch. In production mode, this assertion is disabled for maximum performance. Hydration CaveatsOne thing to be aware of when using SSR + client hydration is some special HTML structures that may be altered by the browser. For example, when you write this in a Vue template: &lt;table&gt; &lt;tr&gt;&lt;td&gt;hi&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; The browser will automatically inject &lt;tbody&gt; inside &lt;table&gt;, however, the virtual DOM generated by Vue does not contain &lt;tbody&gt;, so it will cause a mismatch. To ensure correct matching, make sure to write valid HTML in your templates."},{"title":"Upgrade Guide","updated":"2018-09-19T16:29:58.449Z","permalink":"https://quasar-framework.org/guide/quasar-upgrade-guide.html","text":"We’ll cover how to upgrade to a new Quasar version in your project, both for UMD and using the project initialization feature of the CLI. Then we’ll go on to discuss how you can migrate v0.15 to v0.16 and your pre v0.15 project to v0.15+. Upgrading to a newer Quasar versionThis applies when upgrading from v0.15+ to a newer Quasar version, including v0.16 and v0.17. IMPORTANTQuasar v0.15+ requires Node.js version 8.9.0 or greater UMDSimply replace the version string in all the CSS and JS tags that refer to Quasar to the newer version. The CLIAs you may have noticed, the only dependency in your project (unless you’ve also installed a linter or your own deps) is quasar-cli. All you need is to update this dependency. $ yarn add --dev quasar-cli@latest# or:$ npm install --save-dev quasar-cli@latest Quasar CLI is installed both globally and locally. When you issue a Quasar command, the global installation defers to the project locally installed Quasar CLI. This allows you to skip writing npm scripts in your package.json (for Quasar commands), and also it allows you to run different Quasar versions in multiple projects. Watch for Quasar CLI version. It’s not the same thing as Quasar version. Type $ quasar info. All you need to know is that the major and minor part of Quasar CLI version matches Quasar version. So for example installing latest Quasar CLI v0.15.x will ensure you are using latest Quasar v0.15.x. While working on v0.15.x, no breaking changes will occur, so you are safe (&amp; recommended) to upgrade to latest Quasar CLI as it’s released. CaveatSometimes after you npm install a package, or even update current packages, might screw things up. You’ll get errors that some packages are missing and you need to install them. In such cases, delete node_modules and package-lock.json and npm install again.Same goes for Yarn. In case you get errors, delete node_modules and yarn.lock then install again. Upgrading v0.16 to v0.17There’s only one breaking change, regarding QLayoutDrawer mini-width prop. It is now a Number (instead of String!) defining width in pixels (default: 60). v0.17 introduces the SSR mode for Quasar CLI, and the following changes will be required only if you build for SSR too. Otherwise, you can simply upgrade the quasar-cli dependency and benefit from the latest goodies. A minor change that you should be aware of is that we are deprecating the special boot app plugin and it will be removed in the next version in favor of using the PreFetch Feature in src/App.vue and calling redirect(false) in case you want to abort the initial app render. For the time being it is still available, but you should migrate as soon as possible. SSR mode (ONLY)Like mentioned above, these changes will be required by the Quasar CLI only when you build with SSR mode. After doing these changes you’ll still be able to build the other modes (SPA/PWA/Cordova/Electron) too. src/router/index.jsYou need to have a default export set to “function ({ store })” which returns a new instance of Router instead of default exporting the Router instance itself. // OLD WAY import Vue from 'vue' import VueRouter from 'vue-router' import routes from './routes' Vue.use(VueRouter) // in the new way, we'll wrap the instantiation into: // export default function (&#123; store &#125;) --&gt; store is optional const Router = new VueRouter(&#123; scrollBehavior: () =&gt; (&#123; y: 0 &#125;), routes, // Leave these as they are and change from quasar.conf.js instead! mode: process.env.VUE_ROUTER_MODE, base: process.env.VUE_ROUTER_BASE, &#125;) // in the new way, this will be no more export default Router// NEW WAY import Vue from 'vue' import VueRouter from 'vue-router' import routes from './routes' Vue.use(VueRouter) // DO NOT import the store here as you will receive it as // parameter in the default exported function: export default function (/* &#123; store &#125; */) &#123; // IMPORTANT! Instantiate Router inside this function const Router = new VueRouter(&#123; scrollBehavior: () =&gt; (&#123; y: 0 &#125;), routes, // Leave these as they are and change from quasar.conf.js instead! mode: process.env.VUE_ROUTER_MODE, base: process.env.VUE_ROUTER_BASE, &#125;) return Router &#125; src/store/index.jsYou need to have a default export set to “function ()” which returns a new instance of Vuex Store instead of default exporting the Store instance itself. Some of you might need the Router instance on the Store. It is accessible through this.$router inside your actions, mutations, etc. // OLD WAY import Vue from 'vue' import Vuex from 'vuex' import example from './module-example' Vue.use(Vuex) // in the new way, we'll wrap the instantiation into: // export default function () const store = new Vuex.Store(&#123; modules: &#123; example &#125; &#125;) // in the new way, this will be no more export default store// NEW WAY import Vue from 'vue' import Vuex from 'vuex' import example from './module-example' Vue.use(Vuex) export default function () &#123; // IMPORTANT! Instantiate Store inside this function const Store = new Vuex.Store(&#123; modules: &#123; example &#125; &#125;) return Store &#125; Also, if you want to be able to access the Router instance from vuex actions, mutations, etc, you need to make some simple changes (in all of them): // OLD WAY:export const someAction = (context) =&gt; &#123; ... &#125;// NEW WAY:export function someAction (context) &#123; // now we have access to: this.$router&#125; Upgrading v0.15 to v0.16The difference between Quasar v0.15.x and v0.16 is minimal. No big breaking changes as you can see below. The only reason for bumping Quasar’s version is to maintain consistency (same major + minor version) with Quasar CLI (which got an important update: webpack 4, babel 7, Workbox, electron-builder support, ionicons v4 and many more). Upgrading from v0.15.x should be seamless if you are using Quasar CLI – which will guide you to do some minor changes to your project folder. Note that Ionicons v4 has breaking changes, so if you are using it in your project, then you need to update each such icon to its new name. If you face any problems, there is probably something conflicting in your npm modules. It is either babel, webpack or eslint. The console messages will tell you more about what is wrong. Remember you’ll be using Webpack 4, so all your webpack plugins must be compatible with it. For example, you need to upgrade to a newer eslint-loader, babel-eslint etc package if you already have it in your package.json as dev dependency. If you’re using ESLint, make sure you have these in your package.json (minimum version required):\"babel-eslint\": \"^8.2.1\",\"eslint\": \"^4.18.2\",\"eslint-config-standard\": \"^11.0.0\",\"eslint-friendly-formatter\": \"^4.0.1\",\"eslint-loader\": \"^2.0.0\",\"eslint-plugin-import\": \"^2.9.0\",\"eslint-plugin-node\": \"^6.0.1\",\"eslint-plugin-promise\": \"^3.7.0\",\"eslint-plugin-standard\": \"^3.0.1\",\"eslint-plugin-vue\": \"^4.3.0\", If you are seeing babel issues when you run quasar dev, then you have probably installed a package that is using babel-core instead of @babel/core - such as cypress-vue-unit-test. To find out which one it is, run: npm ls babel-core and then remove the offending source. # cd into project folder$ rm yarn.lock # or: package-lock.json (if installed through npm)$ rm -rf node_modules/$ yarn global add quasar-cli@latest # or: npm install --global quasar-cli@latest$ yarn add --dev quasar-cli@latest # or: npm install --save-dev quasar-cli@latest$ yarn # or: npm install Breaking Changes: QIcon: removed “mat” &amp; “ios” props for performance reasons (use :name=&quot;$q.theme === &#39;mat&#39; ? val : otherVal&quot; instead) Removed utils &gt; dom &gt; viewport() method (use window.innerHeight/innerWidth instead) Updated Quasar ionicons set to Ionicons v4 – compatible with quasar-extras@2.0 Upgrading pre v0.15 to Quasar v0.15+There’s been A LOT of work done for v0.15. The Quasar CLI has been rewritten from scratch to allow for a stellar development experience (Mobile App developers and Electron will fall in love with it!). Only one CLI initialized project is required in order to handle websites, PWAs, Mobile Apps and Electron Apps. Building any of those is a matter of just adding a parameter to the dev/build command. Furthermore, you can now use an UMD/standalone version of Quasar to embed in an existing project. No build step is required. Take some time to read all “Guide” pages once again. It will help you understand the true power of Quasar v0.15+ and what you can do with it. So, what is new and what has changed? Everything has been polished. The full list of enhancements and new features is exhausting. We’ll try to cover the major parts only. This is just a guide to get you started so that you know where to look in docs for things that have changed. First step - when using the CLIFirst we make sure we update the globally installed Quasar version (needs to be at least v0.15). Then we create a new project folder:# Node.js &gt;= 8.9.0 is required.$ yarn global add quasar-cli@latest# or:$ npm install -g quasar-cli@latest# Then we create a project folder with Quasar CLI:$ quasar init &lt;folder_name&gt; Observe the new project structure. Start to port out files to the new project folder, taking into account the far superior structure. Using the new project initialization feature will allow you to take advantage of future seamless upgrades! In any case, do not simply copy your /src folder over to the newly initialized project folder. Build configuration no longer requiredYou’ll notice a newly initialized project doesn’t provide a /build or /config folders. They are no longer required. Everything can be easily configured from /quasar.conf.js now. You don’t need to know Webpack. More Info. No main.js?Yes. It’s no longer there because you don’t need it anymore. For initialization code and importing libraries into your website/app, read about App Plugins. Importing Components/Directives/etcYou’re no longer required to import Quasar components and directives anywhere in your app. Simply configuring /quasar.conf.js in framework Object will suffice. More Info. Quasar Plugins?Yes, this refers to Action Sheet, Notify (replacement of Toast and Alert), LocalStorage/SessionStorage and so on. They are available globally or under the Vue $q Object injection, and need to be specified in /quasar.conf.js &gt; framework &gt; plugins in order for them to be available. Revamps Typography Flex CSS gutter classes QLayout &amp; co. You’ll love the new features! Be sure to check this out. Major improvements in syntax and flexibility. Some breaking changes, like slots no longer being used. QBtn (new features!) QToolbar (small update regarding buttons) QBreadcrumbs (powerful component instead of just CSS) QPagination (major improvements) QCollapsible (new powerful features!) QTable (replacing QDataTable – full customization now!) Lists &amp; List Items – more options, better control, “dark” theme QTree (the most advanced you’ll ever see and need!) ActionSheet (now as a Quasar Plugin &amp; QActionSheet component too! – has new features too) Dialog (now as a Quasar Plugin &amp; QDialog component too for unlimited flexibility! – has new features too) QModal - Easier to use than ever! Now with full v-model support. QPopover &amp; QTooltip - new animation, ability to close it without the need of a Vue reference (through v-close-overlay directive), full support for v-model now Loading (now as a Quasar Plugin) QCarousel - Easier to use. Fully customizable! Transitions - No need for QTransition anymore! Minimum overhead, better performance. QAlert - new features QChat - new features TouchSwipe, TouchHold and TouchPan - Much better implementation, more control. Read about these directive’s modifiers. AppFullscreen &amp; AppVisibility - Now as Quasar Plugins, with reactive state properties that can be used in Vue watchers QUploader - new features &amp; design Also notice QInlineDatetime has been renamed to QDatetimePicker. New Components or Features Spacing CSS classes QTable - It’s on the Revamps list too, but it sure deserves a place here too. Prepare for next level Data Tables, now fully customizable! Check out the demo too. QEditor - Quasar’s own WYSIWYG approach! This alone would deserve its own section. Notify - A merge between Toast and Alert, with flexible positioning and awesome animations. QColor - Color Picker! New button types: QBtnGroup and QBtnDropdown QBtnToggle - A radio-like component, but with buttons I18n for Quasar ComponentsBe sure to check out the Internationalization for Quasar Components. Icon PacksYou can now tell Quasar to use one of Fontawesome, Ionicons, MDI or Material Icons for its components. You are no longer required to include Material Icons. You can use any of these packs as default. Also, small change for Fontawesome icons:&lt;!-- pre v0.15 --&gt;&lt;q-icon name=\"fa-paypal fab\" /&gt;&lt;!-- v0.15+ --&gt;&lt;!-- Copy paste fontawesome icon class as it's in fontawesome docs now --&gt;&lt;q-icon name=\"fab fa-paypal\" /&gt; Vue Prototype InjectionsYou can use $q injection for convenience, accessing Quasar Theme, Quasar I18n, Quasar Platform, and many more. Quasar Plugins add functionality to it. Read doc page, especially if you build Cordova or Electron apps. What has been dropped? Global Event Bus (Events) – no longer needed. Use Vue root component events instead. More Info QFixedPosition – now replaced by a more powerful QPageSticky QSideLink – no longer required! Simply use a QItem or whatever component you want and bind an @click=&quot;$router.push(...)&quot; to it. Alert and Toast as methods. They’ve been merged into Notify. HTML Table. You can however check code from v0.14 and embed it yourself into your app. Image Gallery - no longer needed. The new QCarousel is so powerful that you’ll immediately see the benefit of switching to it. QTransition - no longer required. Simply use Vue’s &lt;transition&gt; (or &lt;transition-group&gt;) instead. More Info QDatetimeRange - it’s so easy to simply write two QDatetime side by side that this component is simply not required anymore; this allows you full flexibility too. New LayoutThe following upgrade guide for QLayout barely scratches the surface, but it’s a starting point. &lt;!-- v0.14 --&gt;&lt;q-layout ref=\"layout\" view=\"hHr LpR lFf\" :right-breakpoint=\"1100\"&gt; &lt;!-- Header --&gt; &lt;q-toolbar slot=\"header\"&gt; &lt;q-btn flat @click=\"$refs.layout.toggleLeft()\"&gt; &lt;q-icon name=\"menu\" /&gt; &lt;/q-btn&gt; &lt;q-toolbar-title&gt; Layout Header &lt;span slot=\"subtitle\"&gt;Optional subtitle&lt;/span&gt; &lt;/q-toolbar-title&gt; &lt;q-btn flat @click=\"$refs.layout.toggleRight()\"&gt; &lt;q-icon name=\"menu\" /&gt; &lt;/q-btn&gt; &lt;/q-toolbar&gt; &lt;!-- Navigation --&gt; &lt;q-tabs slot=\"navigation\"&gt; &lt;q-route-tab slot=\"title\" icon=\"view_quilt\" to=\"/test-layout/about\" replace hide=\"icon\" label=\"About\" /&gt; &lt;q-route-tab slot=\"title\" icon=\"view_day\" to=\"/test-layout/toolbar\" replace hide=\"icon\" label=\"Toolbar\" /&gt; &lt;q-route-tab slot=\"title\" icon=\"view_day\" to=\"/test-layout/tabs\" replace label=\"Tabs\" /&gt; &lt;q-route-tab slot=\"title\" icon=\"input\" to=\"/test-layout/drawer\" replace label=\"Drawer\" /&gt; &lt;/q-tabs&gt; &lt;!-- Left Side Panel --&gt; &lt;div slot=\"left\"&gt; &lt;q-list no-border link inset-separator&gt; &lt;q-list-header&gt;Essential Links&lt;/q-list-header&gt; &lt;q-side-link item to=\"/docs\"&gt; &lt;q-item-side icon=\"school\" /&gt; &lt;q-item-main label=\"Docs\" sublabel=\"quasar-framework.org\" /&gt; &lt;/q-side-link&gt; &lt;/q-list&gt; &lt;/div&gt; &lt;!-- Right Side Panel --&gt; &lt;div slot=\"right\"&gt; Right Side of Layout &lt;/div&gt; &lt;!-- sub-routes get injected here: --&gt; &lt;router-view /&gt; &lt;!-- Footer --&gt; &lt;q-toolbar slot=\"footer\"&gt; &lt;q-toolbar-title&gt; Layout Footer &lt;/q-toolbar-title&gt; &lt;/q-toolbar&gt;&lt;/q-layout&gt; We upgrade it to v0.15+. Notice that in order for us to place navigation tabs on header (for Material) and on Footer (for iOS), we also write a NavTabs component. Notice no slots, no QSideLink, “flat round dense” buttons, v-model on left/right drawers, QLayout* components:&lt;!-- layout component --&gt;&lt;q-layout ref=\"layout\" view=\"hHr LpR lFf\"&gt; &lt;!-- Header --&gt; &lt;q-layout-header&gt; &lt;q-toolbar&gt; &lt;q-btn flat round dense icon=\"menu\" @click=\"leftSide = !leftSide\" /&gt; &lt;q-toolbar-title&gt; Layout Header &lt;span slot=\"subtitle\"&gt;Optional subtitle&lt;/span&gt; &lt;/q-toolbar-title&gt; &lt;q-btn flat round dense icon=\"menu\" @click=\"rightSide = !rightSide\" /&gt; &lt;/q-toolbar&gt; &lt;!-- Navigation for Material theme --&gt; &lt;nav-tabs v-if=\"$q.theme === 'mat'\" /&gt; &lt;/q-layout-header&gt; &lt;!-- Left Side Panel --&gt; &lt;q-layout-drawer v-model=\"leftSide\" side=\"left\"&gt; &lt;q-list no-border link inset-separator&gt; &lt;q-list-header&gt;Essential Links&lt;/q-list-header&gt; &lt;q-item to=\"/docs\"&gt; &lt;q-item-side icon=\"school\" /&gt; &lt;q-item-main label=\"Docs\" sublabel=\"quasar-framework.org\" /&gt; &lt;/q-item&gt; &lt;/q-list&gt; &lt;/q-layout-drawer&gt; &lt;!-- Right Side Panel --&gt; &lt;q-layout-drawer v-model=\"rightSide\" side=\"right\" :breakpoint=\"1100\"&gt; Right Side of Layout &lt;/q-layout-drawer&gt; &lt;!-- sub-routes get injected here: --&gt; &lt;q-page-container&gt; &lt;router-view /&gt; &lt;/q-page-container&gt; &lt;!-- Footer --&gt; &lt;q-layout-footer&gt; &lt;!-- Navigation for iOS theme --&gt; &lt;nav-tabs v-if=\"$q.theme === 'ios'\" /&gt; ... &lt;/q-layout-footer&gt;&lt;/q-layout&gt;&lt;!-- nav-tabs component --&gt;&lt;q-tabs&gt; &lt;q-route-tab slot=\"title\" icon=\"view_quilt\" to=\"/test-layout/about\" replace hide=\"icon\" label=\"About\" /&gt; &lt;q-route-tab slot=\"title\" icon=\"view_day\" to=\"/test-layout/toolbar\" replace hide=\"icon\" label=\"Toolbar\" /&gt; &lt;q-route-tab slot=\"title\" icon=\"view_day\" to=\"/test-layout/tabs\" replace label=\"Tabs\" /&gt; &lt;q-route-tab slot=\"title\" icon=\"input\" to=\"/test-layout/drawer\" replace label=\"Drawer\" /&gt;&lt;/q-tabs&gt; Form ComponentsIn previous versions you would listen for @change event to detect changes. Now you can listen to @input for immediate changes or @change for lazy update. Vue v-model.lazy support is a pending change, so until then you can use the equivalent form (details below). &lt;!-- QInput example --&gt;&lt;!-- same as listening for @input --&gt;&lt;q-input v-model=\"myModel\" /&gt;&lt;!-- listening for lazy update --&gt;&lt;q-input :value=\"myModel\" @change=\"val =&gt; &#123; myModel = val &#125;\" /&gt; You’ll notice all form components have been polished. Also, you’ll be pleasantly surprised by new properties. To name just a few: “hide-underline”, “inverted-light”, “dark” or “warning” (for highlighting a warning state). Prior to v0.15, form components had a default margin. This was removed to allow easier customization. You can now use the new Spacing CSS classes to do it. QCheckbox now supports an indeterminate state as well. You can specify a value for “true”/“false”/“indeterminate” states, so it no longer operates with Booleans (or Arrays) only. QDatetime now doesn’t require the “Set” button when using Popovers. Clicking on a date will simply select it and close the popover. QChipsInput (&amp; QChips) have new props that allow for better customization now. Using PromisesModals, Popovers, Tooltips, Layout Drawer, Dialog, Notify (just to name a few) now use Promises instead of taking a callback parameter. This allows you to take advantage of async/await and simplifies your code. methods: &#123; async showNotify () &#123; await this.$q.dialog('Some dialog...') console.log('Dialog has been closed') &#125;&#125; Vue refs no longer necessary for a lot of componentsYou were also used to using Vue refs for a few components (Layout left/right drawer, Modals, …). This is no longer necessary. You can use a “v-model” instead to show (open) / hide (close) them. This wasn’t quite possible pre v0.15 because you needed for them to close in order to, as an example, navigate away. Now it’s no longer needed, so a Boolean scoped variable will suffice. Some components need .native modifier for events nowSome components, like QItem or QCard &amp; co now need the .native modifier for binding to native DOM events like click. A general rule is: if @click is not mentioned in the component’s docs Vue Events section, then you need to use the native modifier. &lt;!-- prior to v0.15 --&gt;&lt;q-item @click=\"...\"&gt;....&lt;/q-item&gt;&lt;!-- v0.15+ way: --&gt;&lt;q-item @click.native=\"...\"&gt;...&lt;/q-item&gt; A few Quasar components were of functional type. These pass native events right through, so there’s no need to add the native modifier. But during a thorough benchmarking session it turned out having these as regular components meant better performance due to a number of reasons. Switching these components from functional to regular adds this small breaking change where you need to use the native modifier. We were using different env for dev and productionYou still can! Only now it’s even better, due to /quasar.conf.js features. More Info New directive: v-close-overlayAll components using popups, like Modal, Dialog, Popover, Context Menu, now support a much simplified way of closing them. Instead of using a Vue reference, which is troublesome for some use cases, you can simply add v-close-overlay to the element/component that you wish to close the popup. This directive listens for the @click event, determines the first parent popup component and closes it. &lt;q-btn label=\"I got a Popover\"&gt; &lt;q-popover&gt; ... &lt;q-icon v-close-overlay name=\"close\" /&gt; ... &lt;/q-popover&gt;&lt;/q-btn&gt; Handling Back ButtonUnfortunately, the automatic handling of back button was a one of the features that was the hardest to comprehend. It required you to handle Vue references (which beginners on Vue were struggling with) and didn’t fully allow you to connect components like Drawers &amp; Modals to Vuex in an easy way. Now it only works on Mobile Apps (for example Android has a back button that is handled by Quasar). The removal of this feature for websites greatly simplify your code: &lt;q-modal v-model=\"modal\"&gt;...&lt;/q-modal&gt;&lt;q-btn label=\"Open modal\" @click=\"modal = true\" /&gt; ButtonsWhile QBtn still allows you to specify icon and label as children nodes, it is now recommended that you use the “icon” and “label” props instead: &lt;q-btn icon=\"map\" label=\"See map\" /&gt;&lt;!-- instead of old: --&gt;&lt;q-btn&gt; &lt;q-icon class=\"on-left\" name=\"map\" /&gt; See map&lt;/q-btn&gt; Be sure to check out the new button types and props too. Quasar CLI and Pre-0.15 AppsThe Quasar CLI v0.15+ is not compatible with pre-0.15 apps. You can install the latest CLI globally while still supporting quasar commands in legacy apps by adding quasar-cli as a development dependency. To support 0.14 and earlier you need quasar-cli v0.6.5. $ yarn add --dev quasar-cli@0.6.5# or:$ npm install --save-dev quasar-cli@0.6.5 This will add the legacy quasar CLI tool to your projects ./node_modules/.bin/ directory. Use the npx tool (automatically installed alongside npm) to run quasar from your local node modules. For example: $ npx quasar dev"},{"title":"Configuring SSR","updated":"2019-01-01T13:12:57.800Z","permalink":"https://quasar-framework.org/guide/ssr-configuring-ssr.html","text":"We’ll be using Quasar CLI to develop and build a SSR website. The difference between building a SPA, Mobile App, Electron App, PWA or SSR is simply determined by the “mode” parameter in “quasar dev” and “quasar build” commands. InstallationIn order to build a SSR website, we first need to add the SSR mode to our Quasar project:$ quasar mode -a ssr If you want to jump right in and start developing, you can skip the “quasar mode” command and issue:$ quasar dev -m ssr This will add SSR mode automatically, if it is missing. Quasar.conf.jsThis is the place where you can configure some SSR options. Like if you want the client side to takeover as a SPA (Single Page Application – the default behaviour), or as a PWA (Progressive Web App). return &#123; // ... ssr: &#123; pwa: true/false, // should a PWA take over (default: false), or just a SPA? componentCache: &#123;...&#125; // lru-cache package options &#125;&#125; If you decide to go with a PWA client takeover (which is a killer combo), the Quasar CLI PWA mode will be installed too. You may want to check out the Quasar PWA guide too. But most importantly, make sure you read SSR with PWA page. When building, extendWebpack() and chainWebpack() will receive one more parameter (Object), currently containing isServer or isClient boolean props, because there will be two Webpack builds (one for the server-side and one for the client-side). // quasar.conf.jsbuild: &#123; extendWebpack(cfg, &#123; isServer, isClient &#125;) &#123; ... &#125;&#125; If you want more information, please see this page that goes into more detail about extending webpack in the quasar.conf.js file. Nodejs ServerAdding SSR mode to a Quasar project means a new folder will be created: /src-ssr, which contains SSR specific files which define your production Node webserver:.└── src-ssr/ ├── index.js # Production Node webserver serving the app └── extension.js # Common code for production &amp; development server You can freely edit these files. You’re not required to use an Express server. Simply choose whatever fits you best and tweak however you want. Notice a few things: These files run in a Node context (they are NOT transpiled by Babel), so use only the ES6 features that are supported by your Node version. (https://node.green/) All content of this folder will be copied as is to the output folder. So only import: node_modules (and yarn/npm install your dependencies – NOT as devDependecies though) create files in this folder and import only those with the relative path Do not change the names of these two files. You can however add any additional files that you may need. Just take into consideration that if you want common configuration of the Node webserver for both production &amp; development, you need to add that to /src-ssr/extension.js file. When /src-ssr/extension.js is used by the development server, it assumes the configuration is ready to be used by an Express server. So plan accordingly. If you switch to another server, you may want to decouple extension.js from the production server (index.js). Helping SEOOne of the main reasons when you develop a SSR instead of a SPA is for taking care of the SEO. And SEO can be greatly improved by using the Quasar Meta Plugin to manage dynamic html markup required by the search engines. App PluginsWhen running on SSR mode, your application code needs to be isomorphic or “universal”, which means that it must run both on a Node context and in the browser. This applies to your App plugins too. However, there are cases where you only want some app plugins to run only on the server or only on the client-side. You can achieve that by specifying: // quasar.conf.jsreturn &#123; // ... plugins: [ 'some-plugin', // runs on both server and client &#123; path: 'some-other', server: false &#125; // this plugin gets embedded only on client-side &#123; path: 'third', client: false &#125; // this plugin gets embedded only on server-side ]&#125; Just make sure that your app is consistent, though. When an app plugin runs on the server, you will have access to one more parameter (called ssrContext) on the default exported function: // some app pluginexport default (&#123; app, ..., ssrContext &#125;) =&gt; &#123; // ssrContext has: &#123; url, req, res &#125; // You can add props to the ssrContext then use them in the src/index.template.html. // Example - let's say we ssrContext.someProp = 'some value', then in index template we can reference it: // &#123;&#123; someProp &#125;&#125;&#125; When you add such references (someProp surrounded by brackets in the example above) into your src/index.template.html, make sure you tell Quasar it’s only valid for SSR builds: &lt;!-- index.template.html --&gt;&lt;% if (htmlWebpackPlugin.options.ctx.mode.ssr) &#123; %&gt;&#123;&#123; someProp &#125;&#125; &lt;% &#125; %&gt;"},{"title":"SSR FAQ","updated":"2018-11-07T17:15:51.801Z","permalink":"https://quasar-framework.org/guide/ssr-frequently-asked-questions.html","text":"Why am I getting hydration errors?Take a look at our Client Side Hydration page. When you get hydration errors, it means the HTML rendered on the server does not match the equivalent HTML rendered on client-side. This error will appear only when developing (and NOT on production) and it definitely needs to be addressed, before you release your app. Is there some content that you can only generate on client-side? Then use QNoSSR. Why doesn’t importing Platform and Cookies work?When building for SSR, use only the $q.platform/$q.cookies form. If you need to use the import { Platform, Cookies } from &#39;quasar&#39; (when on server-side), then you’ll need to do it like this: // example with Platform; same thing for Cookiesimport &#123; Platform &#125; from 'quasar'// you need access to `ssrContext`function (ssrContext) &#123; const platform = process.env.SERVER ? Platform.parseSSR(ssrContext) : Platform // otherwise we're on client // platform is equivalent to the global import as in non-SSR builds&#125; The ssrContext is available in the App Plugins or the preFetch feature, where it is supplied as a parameter. There is a good reason for this. In a client-only app, every user will be using a fresh instance of the app in their browser. For server-side rendering we want the same thing. Each request should have a fresh, isolated app instance so that there is no cross-request state pollution. So Platform and Cookies need to be bound to each request separately. Also a good idea is to read the Writing Universal Code documentation page. Why isn’t LocalStorage and SessionStorage working?When running the code on server-side, the storage facilities can’t work. Web Storage is a browser only API."},{"title":"Deploying SSR","updated":"2018-07-25T14:14:24.699Z","permalink":"https://quasar-framework.org/guide/ssr-deploying.html","text":"When deploying as a SPA or PWA, the distributables folder that gets generated by Quasar CLI can be served by a static webserver. However, this not the case with a SSR (Server-side Render) build. Your distributables, in this case, contain your production webserver too – which can be tweaked from /src-ssr. By default, the SSR distributables use Express, but you can replace it with your webserver of choice. The Distributables FolderAfter building your app on SSR mode ($ quasar build -m ssr) the folder that gets generated contains a standalone webserver tweaked for serving with SSR. You’ll notice that it contains a package.json file of its own. It has an npm script defined, called “start”: \"scripts\": &#123; \"start\": \"node index.js\"&#125; So what you need to do when deploying is to copy this distributables folder on your server, yarn/npm install the dependencies inside it, then run $ yarn start or $ npm run start. This boots up the webserver and starts listening for connections. Enhancing PerformanceBy default, the webserver runs on only one of the available server’s cores. What you could do is make it use all cores. There is a solution for this: PM2. After installing PM2 on your server, your npm start script can look like this instead:\"scripts\": &#123; \"start\": \"pm2 start index.js\"&#125; Deploying with Now.shDeploying with Now is a breeze. All you need to do is to follow their installation instructions. They recommend downloading “Now Desktop” but you can skip that and directly install the Now CLI: $ npm install -g now$ now login Then, you cd into the distributables folder and run $ now. You might want to use a “now alias” or connect your domain to Now. And you’re done! Now.sh will npm install the dependencies automatically then run $ npm run start. Your website will be up and running on an HTTPS connection in a matter of seconds!"},{"title":"SSR Handling of 404 and 500 Errors","updated":"2018-07-25T14:14:24.700Z","permalink":"https://quasar-framework.org/guide/ssr-handling-404-and-500-errors.html","text":"The handling of the 404 &amp; 500 errors on SSR is a bit different than on the other modes (like SPA). If you check out /src-ssr/index.js (which is your production webserver), you will notice the following section: // this should be last get(), rendering with SSRapp.get('*', (req, res) =&gt; &#123; res.setHeader('Content-Type', 'text/html') ssr.renderToString(&#123; req, res &#125;, (err, html) =&gt; &#123; if (err) &#123; if (err.url) &#123; res.redirect(err.url) &#125; else if (err.code === 404) &#123; res.status(404).send('404 | Page Not Found') &#125; else &#123; // Render Error Page or Redirect res.status(500).send('500 | Internal Server Error') if (ssr.settings.debug) &#123; console.error(`500 on $&#123;req.url&#125;`) console.error(err) console.error(err.stack) &#125; &#125; &#125; else &#123; res.send(html) &#125; &#125;)&#125;) The section above is written after catching the other possible requests (like for /statics folder, the manifest.json and service worker, etc). This is where we initialize your app, along with your Router and Vue gets to render the requested page. Things to be aware ofWe’ll discuss some architectural decisions that you need to be aware of. Choose whatever fits your app best. Error 404If you define an equivalent 404 route on your Vue Router /src/router/routes.js file (like below), then if (err.code === 404) { part from the example above will NEVER be true since Vue Router already handled it. // Example of route for catching 404 with Vue Router&#123; path: '*', component: () =&gt; import('pages/error404.vue') &#125; For best performance and server load, it is recommended to avoid configuring a 404 page with Vue Router and leave the SSR production webserver handle it. In your /src/router/routes.js you could preferentially catch 404 only for non-SSR mode like this: // assuming you have a \"routes\" arrayif (process.env.MODE !== 'ssr') &#123; routes.push(&#123; path: '*', component: () =&gt; import('pages/error404.vue') &#125;)&#125; Error 500On the /src-ssr/index.js example at the top of the page, notice that if the webserver encounters any rendering error, we send a simple string back to the client (‘500 | Internal Server Error’). If you want to show a nice page instead, you could: Add a specific route in /src/router/routes.js, like: &#123; path: 'error500', component: () =&gt; import('pages/Error500.vue') &#125; Write the Vue component to handle this page. In this example, we create /src/pages/Error500.vue Then in /src-ssr/index.js:if (err.url) &#123; ... &#125;else if (err.code === 404) &#123; ... &#125;else &#123; // We got a 500 error here; // We redirect to our \"error500\" route newly defined at step #1. res.redirect('/error500')&#125; The only caveat is that you need to be sure that while rendering ‘/error500’ route you don’t get another 500 error, which would put your app into an infinite loop! A perfect approach to avoid this would simply be to directly return the HTML (as String) of the error 500 page from /src-ssr/index.js: res.status(500).send(`&lt;html&gt;....&lt;/html&gt;`)"},{"title":"What is SSR","updated":"2018-07-25T14:14:24.701Z","permalink":"https://quasar-framework.org/guide/ssr-introduction.html","text":"Quasar and Vue.js are frameworks for building client-side applications. By default, Quasar Vue components produce and manipulate DOM in the browser as output. However, it is also possible to render the same components into HTML strings on the server, send them directly to the browser, and finally “hydrate” the static markup into a fully interactive app on the client. A server-rendered Quasar app can also be considered “isomorphic” or “universal”, in the sense that the majority of your app’s code runs on both the server and the client. Why SSR?Compared to a traditional SPA (Single-Page Application), the advantage of SSR primarily lies in: Better SEO, as the search engine crawlers will directly see the fully rendered page. Faster time-to-content, especially on slow internet or slow devices. Server-rendered markup doesn’t need to wait until all JavaScript has been downloaded and executed to be displayed, so your user will see a fully-rendered page sooner. This generally results in better user experience, and can be critical for applications where time-to-content is directly associated with conversion rate. There are also some trade-offs to consider when using SSR: Development constraints. Browser-specific code can only be used inside certain lifecycle hooks; some external libraries may need special treatment to be able to run in a server-rendered app. More server-side load. Rendering a full app in Node.js is obviously going to be more CPU-intensive than just serving static files, so if you expect high traffic, be prepared for corresponding server load and wisely employ caching strategies. Before using SSR for your app, the first question you should ask is whether you actually need it. It mostly depends on how important time-to-content is for your app. For example, if you are building an internal dashboard where an extra few hundred milliseconds on initial load doesn’t matter that much, SSR would be an overkill. However, in cases where time-to-content is absolutely critical, SSR can help you achieve the best possible initial load performance. Most of the content on this page is taken from the official Vue.js SSR guide, which is a recommended read for you before digging into SSR with Quasar."},{"title":"SSR with PWA Client Takeover","updated":"2018-07-25T14:14:24.701Z","permalink":"https://quasar-framework.org/guide/ssr-with-pwa.html","text":"With Quasar CLI you can build your app with the killer combo of SSR + PWA. In order to enable PWA for SSR builds, you need to edit your /quasar.conf.js first: // quasar.conf.jsreturn &#123; // ... ssr: &#123; pwa: true &#125;&#125; The first request will be served from the webserver. The PWA gets installed then it takes over on client side. For more information on PWA, head on to PWA Introduction and read the whole PWA Guide section. CaveatOne caveat to be aware of is that, as opposed to a normal PWA build, you need to also specify the URL routes that you wish to cache. The quasar.conf &gt; ssr &gt; pwa can have the Object form, specifying workbox options that will get applied on top of quasar.conf &gt; pwa &gt; workboxOptions. So we’ll be using this to add our routes to the runtime caching: // quasar.conf.jsreturn &#123; // ... ssr: &#123; // we use the Object form of \"pwa\" now: pwa: &#123; runtimeCaching: [ &#123; urlPattern: '/user', handler: 'networkFirst' &#125;, &#123; // using a regex, especially useful // when you have Vue Routes with parameters urlPattern: /\\/dashboard\\/.*/, handler: 'networkFirst' &#125; ] &#125; &#125;&#125; The index route (/) is added by default, but you can overwrite it if you want. In the example above, we’re caching routes /, /user and /dashboard/**."},{"title":"Writing Universal Code","updated":"2018-10-12T22:46:40.683Z","permalink":"https://quasar-framework.org/guide/ssr-writing-universal-code.html","text":"Writing “universal” code means writing code that runs on both the server and the client. Due to use-case and platform API differences, the behavior of our code will not be exactly the same when running in different environments. Here we will go over the key things you need to be aware of. Data Reactivity on the ServerIn a client-only app, every user will be using a fresh instance of the app in their browser. For server-side rendering we want the same: each request should have a fresh, isolated app instance so that there is no cross-request state pollution. Because the actual rendering process needs to be deterministic, we will also be “pre-fetching” data on the server - this means our application state will be already resolved when we start rendering. This means data reactivity is unnecessary on the server, so it is disabled by default. Disabling data reactivity also avoids the performance cost of converting data into reactive objects. Component Lifecycle HooksSince there are no dynamic updates, of all the Vue lifecycle hooks, only beforeCreate and created will be called during SSR. This means any code inside other lifecycle hooks such as beforeMount or mounted will only be executed on the client. Another thing to note is that you should avoid code that produces global side effects in beforeCreate and created, for example setting up timers with setInterval. In client-side only code we may setup a timer and then tear it down in beforeDestroy or destroyed. However, because the destroy hooks will not be called during SSR, the timers will stay around forever. To avoid this, move your side-effect code into beforeMount or mounted instead. Avoid Stateful SingletonsWhen writing client-only code, we are used to the fact that our code will be evaluated in a fresh context every time. However, a Node.js server is a long-running process. When our code is required into the process, it will be evaluated once and then it stays in memory. This means if you create a singleton object, it will be shared between every incoming request. So, Quasar CLI creates a new root Vue instance with a new Router and Vuex Store instances for each request. This is similar to how each user will be using a fresh instance of the app in their own browser. If we would have used a shared instance across multiple requests, it will easily lead to cross-request state pollution. Instead of directly creating a Router and Vuex Store instances, you’ll be exposing a factory function that can be repeatedly executed to create fresh app instances for each request: // src/router/index.jsexport default function (/* &#123; store, ssrContext &#125; */) &#123; const Router = new VueRouter(&#123;...&#125;) return Router&#125; // src/store/index.jsexport default function (/* &#123; ssrContext &#125; */) &#123; const Store = new Vuex.Store(&#123;...&#125;) return Store&#125; If you’re using Vuex modules don’t forget to export the state as a function otherwise a singleton will be created:// src/store/myModule/state.jsexport default () =&gt; (&#123; ...&#125;) Access to Platform-Specific APIsUniversal code cannot assume access to platform-specific APIs, so if your code directly uses browser-only globals like window or document, they will throw errors when executed in Node.js, and vice-versa. For tasks shared between server and client but use different platform APIs, it’s recommended to wrap the platform-specific implementations inside a universal API, or use libraries that do this for you. For example, Axios is an HTTP client that exposes the same API for both server and client. For browser-only APIs, the common approach is to lazily access them inside client-only lifecycle hooks. App PluginsNote that if a 3rd party library is not written with universal usage in mind, it could be tricky to integrate it into an server-rendered app. You might be able to get it working by mocking some of the globals, but it would be hacky and may interfere with the environment detection code of other libraries. When you add a 3rd party library to your project (through an App Plugin), take into consideration whether it can run on server and on client. If it needs to run only on server or only on client, then specify this in quasar.conf.js: // quasar.conf.jsreturn &#123; // ... plugins: [ 'some-plugin', // runs on both server &amp; client &#123; path: 'some-other', server: false &#125; // this plugin gets embedded only on client-side &#123; path: 'third', client: false &#125; // this plugin gets embedded only on server-side ]&#125; Data Pre-Fetching and StateDuring SSR, we are essentially rendering a “snapshot” of our app, so if the app relies on some asynchronous data, this data need to be pre-fetched and resolved before we start the rendering process. The Quasar CLI preFetch feature has been created to solve this problem. Take a few moments to read about it. Parts of this page are taken from the official Vue.js SSR guide."},{"title":"","updated":"2018-05-09T14:34:08.654Z","permalink":"https://quasar-framework.org/search/index.html","text":""},{"title":"Mobile Addressbar Coloring","updated":"2018-05-18T22:01:01.000Z","permalink":"https://quasar-framework.org/components/addressbar-color.html","text":"Newer mobile browsers have the ability to specify a color for the addressbar, like in the example below. Note 1. There isn’t yet a Web standard for this so it won’t work for all mobile browsers.Note 2. This applies when building a website only. For coloring top bar on a mobile app (built with Cordova wrapper), please refer to Cordova plugins. Basic UsageFirst, we need to indicate that we want the AddressbarColor Quasar plugin embedded into our website/app: // file: /quasar.conf.jsframework: &#123; plugins: ['AddressbarColor']&#125; Then we create an app plugin to initialize its usage: quasar new plugin addressbar-color. A file is created (/src/plugins/addressbar-color.js). We edit it: import &#123; AddressbarColor &#125; from 'quasar'export default () =&gt; &#123; AddressbarColor.set('#a2e3fa')&#125; What this does is that it injects some &lt;meta&gt; tags into your index.html at runtime. This means, as an example, that you can dynamically change this color during runtime multiple times, based on the page the user is on (by calling set method on created() lifecycle hook on the respective pages): // a .vue file representing a pageexport default &#123; // ..., created () &#123; this.$q.addressbarColor.set('#a2e3fa') &#125;&#125; Calling set() with no parameters will use the primary color."},{"title":"Action Sheet","updated":"2018-05-18T22:01:01.000Z","permalink":"https://quasar-framework.org/components/action-sheet.html","text":"Action Sheets slide up from the bottom edge of the device screen, and display a set of options with the ability to confirm or cancel an action. Action Sheets can sometimes be used as an alternative to menus, however, they should not be used for navigation. The Action Sheet always appears above any other components on the page, and must be dismissed in order to interact with the underlying content. When it is triggered, the rest of the page darkens to give more focus to the Action Sheet options. Action Sheets can be displayed as a list or as a grid, with icons or with avatars. They can be used either as a component in your Vue file templates, or as a globally available method. Basic Usage as a MethodFirst, we install it: Edit /quasar.conf.js:framework: &#123; plugins: ['ActionSheet']&#125; Now let’s see how we can use it:// outside of a Vue fileimport &#123; ActionSheet &#125; from 'quasar'(Promise) ActionSheet.create(configObj)// inside of a Vue file(Promise) this.$q.actionSheet(configObj) Basic syntax for the config object:this.$q.actionSheet(&#123; title: 'Article Actions', // specify ONLY IF you want grid mode: grid: true, // optional; change dismiss label (only for iOS theme) dismissLabel: 'Quit', actions: [ &#123; label: 'Delete', // Optional color: 'negative', // Choose one of the following two: icon: 'delete', // specify ONLY IF using icon avatar: 'assets/some-avatar.png', // specify ONLY IF using avatar // optional; what to do when user chooses this action; // Can also be handled later by using the returned Promise // and identifying the action from \"action\" param handler () &#123; console.log('Deleted Article') &#125; &#125;, &#123;&#125;, // optional separator ... ]&#125;) IMPORTANTWhen user hits the phone/tablet back button (only for Cordova apps), the Action Sheet will get closed automatically.Also, when on a desktop browser, hitting the &lt;ESCAPE&gt; key also closes the Action Sheet. Handling OutcomeThe returning object when creating an ActionSheet is a Promise, so you can leverage the Promise API to handle the outcome: this.$q.actionSheet(&#123;...&#125;) .then(action =&gt; &#123; // user picked an action console.log(action) // &#123; label: 'Joe', ... &#125; &#125;) .catch(() =&gt; &#123; // user dismissed Action Sheet &#125;)// OR with async/await:async showActionSheet () &#123; try &#123; const action = await this.$q.actionSheet(&#123;...&#125;) // user picked an action at this point console.log(action) // &#123; label: 'Joe', ... &#125; &#125; catch () &#123; // user dismissed Action Sheet &#125;&#125; Basic Usage As a ComponentFirst, we install it: Edit /quasar.conf.js:framework: &#123; components: ['QActionSheet']&#125; Now let’s see how we can use it:&lt;template&gt; &lt;q-action-sheet v-model=\"actionSheet\" title=\"Action Sheet\" @ok=\"onOk\" @cancel=\"onCancel\" @show=\"onShow\" @hide=\"onHide\" :actions=\"[ &#123; label: 'Delete', icon: 'delete', color: 'red', handler: deleteAction &#125;, &#123; label: 'Share', icon: 'share', color: 'primary' &#125;, // optional separator &#123;&#125;, // continuing with other actions &#123; label: 'Play', icon: 'gamepad' &#125;, &#123; label: 'Favorite', icon: 'favorite' &#125; ]\" /&gt; &lt;!-- there's an optional \"title\" slot if you have something very specific for the ActionSheet title (it replaces \"title\" prop) --&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; // model for QActionSheet example return &#123; actionSheet: false &#125; &#125;, methods: &#123; // custom handler for one of the actions deleteAction () &#123; // @ok event will still be triggered this.$q.notify('Deleting...') &#125;, // user picked one of the actions onOk (item) &#123; if (item.handler) &#123; // if we've already triggered a handler return &#125; this.$q.notify(&#123; color: 'secondary', message: `Clicked on \"$&#123;item.label&#125;\"` &#125;) &#125;, // user dismissed ActionSheet onCancel () &#123; this.$q.notify(&#123; color: 'tertiary', icon: 'done', message: 'Action Sheet was dismissed' &#125;) &#125;, // when we show it to the user onShow () &#123; &#125;, // when it gets hidden onHide () &#123; &#125; &#125;&#125;&lt;/script&gt; QActionSheet Vue Properties Vue Property Type Required Description actions Array of Objects yes Defining ActionSheet actions title String Title of Action Sheet. grid Boolean Makes it a “tag” type. dismiss-label String Override default i18n “Cancel” label (for iOS theme only) QActionSheet Vue Events Vue Property Description @ok(action) User picked an action. @cancel User dismissed ActionSheet. @show ActionSheet has just been showed to the user. @hide ActionSheet has been hidden (regardless of outcome). @escape-key ActionSheet dismissed with ESCAPE key."},{"title":"Ajax Bar","updated":"2018-08-04T06:58:14.864Z","permalink":"https://quasar-framework.org/components/ajax-bar.html","text":"Ajax Bar is a component which displays a loading bar (like Youtube) whenever an Ajax call (regardless of Ajax library used) is in progress. It can be manually triggered as well. For a more convenient usage, you may want to check LoadingBar Quasar plugin. This page describes how the QAjaxBar component works should you want to directly use it yourself. Otherwise, if you want Quasar to take care of setting everything up, head to the LoadingBar page. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QAjaxBar']&#125; Basic UsageAs long as this component is rendered by Vue it will capture all Ajax calls.&lt;q-ajax-bar /&gt; The best way to use it is to place it in your App’s root component (App.vue if you are using the default Quasar template):&lt;template&gt; &lt;div id=\"q-app\"&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;q-ajax-bar /&gt; &lt;/div&gt;&lt;/template&gt; IMPORTANTDo not simultaneously use more than one Ajax Bar component in your App. Vue Properties Vue Property Type Default Value Description position String ‘top’ Where to place the loading bar: ‘top’, ‘bottom’, ‘left’ or ‘right’. size String ‘4px’ Thickness of the loading bar. color String ‘red’ One from Quasar Color Palette. reverse Boolean false Reverse direction of loading bar. skip-hijack Boolean false Avoid taking into account Ajax calls. Vue MethodsUse this only if you want to also trigger it manually. Ajax calls trigger these methods automatically. Vue Method Description start() Trigger loading bar. stop() Notify when event has finished. Vue Events Vue Event Description @start Triggered when loading bar has been triggered for being displayed. @stop Triggered when loading bar has finished its work and becomes hidden. If multiple events are captured by Ajax Bar simultaneously, @start and @stop will still be triggered only once: when loading bar starts showing up and when it becomes hidden. How start/stop worksEach Ajax call makes a start() call when it is triggered. When it ends, it calls stop(). So yes, if you also manually trigger Ajax Bar you must call start() each time a new event is starting and stop() each time an event finished. Ajax Bar knows to handle multiple events simultaneously."},{"title":"Alert","updated":"2018-05-18T22:01:01.001Z","permalink":"https://quasar-framework.org/components/alert.html","text":"QAlert is a component that allows you to display an informational message to the users, with optional action buttons. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QAlert']&#125; Basic Usage&lt;q-alert color=\"primary\"&gt; Some cool message&lt;/q-alert&gt;&lt;q-alert type=\"positive\" icon=\"cloud\" :actions=\"[&#123;label: 'Snooze', handler () &#123;&#125;&#125;]\"&gt; Some cool message for your users.&lt;/q-alert&gt; As a tip, you can also add an animation to it. Make sure you specify the animation in /quasar.conf.js.&lt;transition enter-active-class=\"animated bounceInLeft\" leave-active-class=\"animated bounceOutRight\" appear&gt; &lt;q-alert v-if=\"visible\" color=\"secondary\" icon=\"cloud\" appear :actions=\"[&#123; label: 'Dismiss', handler: () =&gt; &#123; visible = false &#125; &#125;]\" class=\"q-mb-sm\" &gt; Lorem ipsum dolor sit amet. &lt;/q-alert&gt;&lt;/transition&gt; Vue PropertiesHere are the available properties, when using Alert as a component: Property Type Description type String One of ‘positive’, ‘negative’, ‘warning’, ‘info’. Applies the respective color and icon, so you can skip specifying those props too. color String This can be any color set up under the Quasar Color Palette. text-color String This can be any color (for the text) set up under the Quasar Color Palette. message String Alert’s content message, if you don’t add it as a children of QAlert. detail String Alert’s sub-message, as a detail. icon String Icon to use. See Icons. avatar String Image file (use statics folder for it). actions Array of Objects Place one or more buttons within the alert, like “Snooze” or “Abort”. Each Object from Array must have label (String) and handler (Function) props."},{"title":"Animation CSS Helper Classes","updated":"2018-05-18T22:01:01.001Z","permalink":"https://quasar-framework.org/components/animation-css-helper-classes.html","text":"Add these CSS classes to the DOM element / component you want the effect on.These are very basic effects so for advanced ones check Transition, Slide Transition or use JS Animations. Class Name Description animate-pop Apply a pop-in effect to the DOM element animate-scale Apply a scale-in effect to the DOM element animate-fade Apply a fade-in effect to the DOM element animate-spin Apply a continuous spin/rotation to the DOM element animate-spin-reverse Apply a continuous spin/rotation (opposite direction to animate-spin) to the DOM element animate-blink Apply a continuous blinking effect to the DOM element animate-bounce Apply a continuous bouncing effect to the DOM element"},{"title":"Fullscreen","updated":"2018-05-18T22:01:01.001Z","permalink":"https://quasar-framework.org/components/app-fullscreen.html","text":"There are times when you want your website or App to run in fullscreen.Quasar makes it easy by wrapping the Web Fullscreen API. Please note that the behavior is different depending on the platform the code is running on, due to the fact that there isn’t a fixed Web standard for Web Fullscreen API yet. InstallationEdit /quasar.conf.js:framework: &#123; plugins: ['AppFullscreen']&#125; Basic Usage// outside of a Vue fileimport &#123; AppFullscreen &#125; from 'quasar'// determine if platform has Fullscreen capability:(Boolean) AppFullscreen.isCapable// Determining if website is in fullscreen mode:(Boolean) AppFullscreen.isActive// Requesting fullscreen mode:AppFullscreen.request()// Exiting fullscreen mode:AppFullscreen.exit()// Toggle fullscreen mode:AppFullscreen.toggle() // inside of a Vue file// determine if platform has Fullscreen capability:(Boolean) this.$q.fullscreen.isCapable// Determining if website is in fullscreen mode:(Boolean) this.$q.fullscreen.isActive// Requesting fullscreen mode:this.$q.fullscreen.request()// Exiting fullscreen mode:this.$q.fullscreen.exit()// Toggle fullscreen mode:this.$q.fullscreen.toggle() ExampleWatching for fullscreen changes: // vue file&lt;template&gt;...&lt;/template&gt;&lt;script&gt;export default &#123; watch: &#123; '$q.fullscreen.isActive' (val) &#123; console.log(val ? 'In fullscreen now' : 'Exited fullscreen') &#125; &#125;&#125;&lt;/script&gt;"},{"title":"Autocomplete","updated":"2018-07-28T14:23:34.704Z","permalink":"https://quasar-framework.org/components/autocomplete.html","text":"The Quasar Autocomplete component binds to the parent textfield (eg. QInput, QSearch, QChipsInput) and offers suggestions to the user, while the user is typing. The suggestions offered to the user are based on either a static list of results or on an asynchronous function call (eg. containing an Ajax request). InstallationEdit /quasar.conf.js:framework: &#123; components: ['QAutocomplete']&#125; Basic UsageAs long as this component is rendered by Vue, it will capture all Ajax calls.&lt;!-- Binds to parent QInput --&gt;&lt;q-input color=\"amber\" v-model=\"terms\" placeholder=\"Type 'fre'\"&gt; &lt;q-autocomplete @search=\"search\" :min-characters=\"3\" @selected=\"selected\" /&gt;&lt;/q-input&gt;&lt;!-- Binds to parent QSearch --&gt;&lt;q-search v-model=\"terms\" placeholder=\"Start typing a country name\"&gt; &lt;q-autocomplete @search=\"search\" @selected=\"selected\" /&gt;&lt;/q-search&gt;&lt;!-- Adds a separator between results --&gt;&lt;q-search v-model=\"terms\"&gt; &lt;q-autocomplete separator @search=\"search\" @selected=\"selected\" /&gt;&lt;/q-search&gt;&lt;!-- Binds to parent QChipsInput --&gt;&lt;q-chips-input v-model=\"terms\" placeholder=\"Start typing a country name\"&gt; &lt;q-autocomplete @search=\"search\" @selected=\"selected\" /&gt;&lt;/q-chips-input&gt; Vue Properties Vue Property Type Default Value Description min-characters Number 1 How many minimum characters can trigger component to suggest something? max-results Number 6 How many results can we display at a time? max-height String None (v0.17+) CSS unit to determine the maximum height of Autocomplete popover. static-data Object None Use static suggestions. No need to do an Ajax call. Filtering is provided by Autocomplete component. filter Function Internal implementation If provided, autocomplete will perform custom filtering. debounce Number 500 Time in milliseconds, between key presses and finding new results. Good for delay, if using AJAX requests. separator Boolean false If set to true, it ads a delimeter between the values to select from. value-field String/Function value (v0.17+) What property should we use for filling out the model with? Check example in the next sections. Vue MethodsNo need to trigger these methods manually as they are invoked automatically. Only use them when your use-case is something very specific. Vue Method Description trigger() Trigger suggestions (parent textfield must be focused). hide() Hide suggestions Popover. setValue() Set textfield string to the value supplied. Vue Events Vue Event Description @search(terms, Function done) Triggered by the component when a search should start and offer some results. @selected(item, keyboard) Triggered when user has selected a suggestion. On keyboard navigation the event is emitted with a second parameter set to true (v0.17+). @show Triggered when the selections popup opens. @hide Triggered when selections popup closes. Example for search event: function search (terms, done) &#123; // do something with terms, like an Ajax call for example // then call done(Array results) // DO NOT forget to call done! When no results or an error occured, // just call with empty array as param. Example: done([])&#125; Using value-field&lt;!-- as a String --&gt;&lt;q-autocomplete @search=\"search\" @selected=\"selected\" :min-characters=\"0\" value-field=\"icon\"/&gt;&lt;!-- as a Function --&gt;&lt;q-autocomplete @search=\"search\" @selected=\"selected\" :value-field=\"v =&gt; `$&#123; v.icon &#125; - $&#123; v.label &#125;`\"/&gt; Using Static DataWhen using static data, specify an Object (notice that it uses some properties from List and List Items components:// static-data&#123; // Property name that will be used by filter() to filter the array of objects below. field: 'value', list: [ &#123; value: 'Romania', // The value given, when selected label: 'Romania', // The value displayed as main label for this suggested selection sublabel: 'Continent: Europe', // optional icon: 'location_city', // optional stamp: '18 mil', // optional ... &#125;, ... ]&#125; Here is the full list of properties that can be used: Property Type Description leftColor String Color for left side from Quasar Color Palette. icon String Icon on the left to use. avatar String URL pointing to statics for an avatar. letter String One character String. leftInverted Boolean Invert mode, but only for icon and letter. leftTextColor String Override default “white” text-color when using an icon or letter only. image String URL pointing to statics for an image. label String Main label of the selection. sublabel String Sub-label of the selection. labelLines String/Number Number of lines that label can expand to. sublabelLines String/Number Number of lines that the sublabel can expand to. inset Boolean Inset Label if no left-side is specified (no icon, avatar, letter or image). rightColor String Color for right side from Quasar Color Palette. rightIcon String Icon on the right to use. rightAvatar String URL pointing to statics for an avatar on right side. rightLetter String One character String for right side. rightImage String URL pointing to statics for an image on right side. rightInverted Boolean Invert mode, but only for icon and letter. rightTextColor String Override default “white” text-color when using an icon or letter only. stamp String Stamp to use for right side. Example: ‘10 min ago’. &lt;template&gt; &lt;q-search inverted color=\"secondary\" v-model=\"terms\" placeholder=\"Featuring static data\"&gt; &lt;q-autocomplete :static-data=\"&#123;field: 'value', list: countries&#125;\" @selected=\"selected\" /&gt; &lt;/q-search&gt;&lt;/template&gt;&lt;script&gt;import countries from 'countries.json'// See above for the data format for the array of objects with required and optional dataexport default &#123; data () &#123; return &#123; terms: '', countries &#125; &#125;&#125;&lt;/script&gt; Custom FilterTo perform custom filtering like fuzzy search, provide an optional function with following signature: &lt;template&gt; &lt;q-search v-model=\"terms\"&gt; &lt;!-- Provide custom filter function --&gt; &lt;q-autocomplete :filter=\"myFilter\" @search=\"search\" @selected=\"selected\" /&gt; &lt;/q-search&gt;&lt;/template&gt;&lt;script&gt;// fuzzysearch (needle, haystack) &#123; return true|false &#125;export default &#123; ..., methods: &#123; myFilter(terms, &#123; field, list &#125;) &#123; const token = terms.toLowerCase(); return list.filter(item =&gt; fuzzysearch(token, item[field].toLowerCase())); &#125; &#125;&#125;&lt;/script&gt; Using Asynchronous Method (Ajax call?)If you’d like to call up data from the server, you may also do so with the following usage of search() method. &lt;template&gt; &lt;q-search v-model=\"terms\" placeholder=\"Start typing a country name\"&gt; &lt;q-autocomplete @search=\"search\" @selected=\"selected\" /&gt; &lt;/q-search&gt;&lt;/template&gt;&lt;script&gt;export default &#123; ... methods: &#123; search (terms, done) &#123; // make an AJAX call // then call done(Array results) // DO NOT forget to call done! When no results or an error occurred, // just call with empty array as param. Example: done([]) &#125; &#125;, ...&#125;&lt;/script&gt;"},{"title":"App Visibility","updated":"2018-05-18T22:01:01.002Z","permalink":"https://quasar-framework.org/components/app-visibility.html","text":"Quasar makes use of the Web Page Visibility API which lets you know when a website/app is visible or in focus. InstallationEdit /quasar.conf.js:framework: &#123; plugins: ['AppVisibility']&#125; Basic Usage// outside of a Vue fileimport &#123; AppVisibility &#125; from 'quasar'(Boolean) AppVisibility.appVisible// inside of a Vue file(Boolean) this.$q.appVisible ExampleWatching for browser tab / app visibility changes: // vue file&lt;template&gt;...&lt;/template&gt;&lt;script&gt;export default &#123; watch: &#123; '$q.appVisible' (val) &#123; console.log(val ? 'App has focus now' : 'App lost focus (was minimized') &#125; &#125;&#125;&lt;/script&gt;"},{"title":"Back to Top","updated":"2018-05-18T22:01:01.002Z","permalink":"https://quasar-framework.org/components/back-to-top.html","text":"This is actually a directive and not a component. It allows to make visible any DOM elements (like buttons) which appear after a certain scroll offset. When clicked/tapped they take the user to the top of the page. InstallationEdit /quasar.conf.js:framework: &#123; directives: ['BackToTop']&#125; Basic Usage&lt;!-- Bare bones example --&gt;&lt;q-btn v-back-to-top round color=\"teal-5\" class=\"fixed-bottom-right\" style=\"margin: 0 15px 15px 0\"&gt; &lt;q-icon name=\"keyboard_arrow_up\" /&gt;&lt;/q-btn&gt;&lt;!-- With animation, custom scroll offset (after which button is visible) and animation duration. Use \"animate-*\" CSS classes for effects when buttons/elements become visible. In this case, we'll use \"animate-pop\":--&gt;&lt;q-btn v-back-to-top.animate=\"&#123;offset: 500, duration: 200&#125;\" round color=\"primary\" class=\"fixed-bottom-right animate-pop\" style=\"margin: 0 15px 15px 0\"&gt; &lt;q-icon name=\"keyboard_arrow_up\" /&gt;&lt;/q-btn&gt; When using a Layout then you can take advantage of the Fixed Positioning on Layout component too and wrap your element with it, like this: &lt;q-page-sticky position=\"top-right\" :offset=\"[18, 18]\"&gt; &lt;q-btn v-back-to-top round color=\"primary\" @click=\"alert\" icon=\"keyboard_arrow_up\" /&gt;&lt;/q-page-sticky&gt; Vue Modifiers Vue Modifier Description animate Adds scrolling animation Vue Binding ValueYou can use the binding value in 3 forms: No value. Defaults will apply. As a Number. This will be the scroll offset after which DOM element will be made visible. As an Object with offset and/or duration as props. Duration is ignored if animate modifier is not used. Determining Scrolling ContainerPlease read here about how Quasar determines the container to attach scrolling events to."},{"title":"Breadcrumbs","updated":"2018-05-18T22:01:01.003Z","permalink":"https://quasar-framework.org/components/breadcrumbs.html","text":"Quasar Breadcrumbs is a component used as a navigational aid in UI. It allows users to keep track of their location within programs, documents, or websites. InstallationEdit /quasar.conf.js:framework: &#123; components: [ 'QBreadcrumbs', 'QBreadcrumbsEl' ]&#125; Basic Usage&lt;q-breadcrumbs&gt; &lt;q-breadcrumbs-el label=\"Home\" icon=\"home\" /&gt; &lt;q-breadcrumbs-el label=\"Components\" icon=\"widgets\" /&gt; &lt;q-breadcrumbs-el label=\"Breadcrumbs\" icon=\"navigation\" /&gt;&lt;/q-breadcrumbs&gt; With route links and custom separator:&lt;q-breadcrumbs separator=\"-&gt;\" active-color=\"secondary\" color=\"light\"&gt; &lt;q-breadcrumbs-el label=\"Home\" to=\"/\" /&gt; &lt;q-breadcrumbs-el label=\"Components\" to=\"/components\" /&gt; &lt;q-breadcrumbs-el label=\"Breadcrumbs\" to=\"/components/breadcrums\" /&gt; &lt;q-breadcrumbs-el label=\"Bogus\" to=\"/components/breadcrums/bogus\" /&gt;&lt;/q-breadcrumbs&gt; With separator as scoped slot (in this case an icon, but can be anything):&lt;q-breadcrumbs&gt; &lt;q-icon name=\"trending_flat\" slot=\"separator\" slot-scope=\"props\" /&gt; &lt;q-breadcrumbs-el active&gt;Home&lt;/q-breadcrumbs-el&gt; &lt;q-breadcrumbs-el&gt;Components&lt;/q-breadcrumbs-el&gt; &lt;q-breadcrumbs-el&gt;Breadcrumbs&lt;/q-breadcrumbs-el&gt;&lt;/q-breadcrumbs&gt; With different alignment:&lt;q-breadcrumbs align=\"center\"&gt; &lt;q-icon name=\"arrow_forward\" slot=\"separator\" slot-scope=\"props\" /&gt; &lt;q-breadcrumbs-el&gt;Home&lt;/q-breadcrumbs-el&gt; &lt;q-breadcrumbs-el&gt;Components&lt;/q-breadcrumbs-el&gt; &lt;q-breadcrumbs-el&gt;Breadcrumbs&lt;/q-breadcrumbs-el&gt;&lt;/q-breadcrumbs&gt; QBreadcrumbs Vue Properties Vue Property Type Description color String A color from Quasar Color Palette active-color String Active color, one from Quasar Color Palette separator String Separator text between breadcrumb elements align String One of ‘left’, ‘right’, ‘center’, ‘between’, ‘around’. QBreadcrumbsEl Vue Properties Vue Property Type Description label String Label of element icon String Icon for element color String A color from Quasar Color Palette Using QBreadcrumbsEl as a Router LinkIf you want your QBreadcrumbsEl to act the same as Vue’s &lt;router-link&gt;, then you can use these additional properties (which work exactly the same as &lt;router-link&gt;): Property Type Description to String / Object Route to navigate to exact Boolean Match the exact route specified (and not also its children) when adding router-link-active CSS class. append Boolean Append route definition to current route when navigating. replace Boolean Replaces current route with the new one instead of adding it to the window history queue. For more details on these properties, please refer to the Vue Router documentation."},{"title":"Dropdown Button","updated":"2018-07-25T14:14:24.651Z","permalink":"https://quasar-framework.org/components/button-dropdown.html","text":"QBtnDropdown is a very convenient dropdown button. Goes very well with QList as dropdown content, but it’s by no means limited to it. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QBtnDropdown']&#125; Basic usageSimple dropdown menu&lt;q-btn-dropdown label=\"Button\"&gt; &lt;!-- dropdown content --&gt; &lt;q-list link&gt; &lt;q-item&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Item&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;/q-item&gt; &lt;/q-list&gt;&lt;/q-btn-dropdown&gt; Use the split prop to separate target areas for opening dropdown and triggering @click event &lt;q-btn-dropdown split label=\"Button\" @click=\"handlerFunction\"&gt; &lt;!-- dropdown content --&gt; &lt;q-list link&gt; &lt;q-item&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Item&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;/q-item&gt; &lt;/q-list&gt;&lt;/q-btn-dropdown&gt; Vue PropertiesAll props except split are shared with QBtn. Vue Property Type Description split Boolean Use a split QBtnDropdown icon String Name of the icon to use. icon-right String Name of the icon to place on right side of button. (only usable with split set to true) loading Boolean Display a spinner, if true. Can be optionally used along v-model. Check Button with Progress section. percentage Number Optional property for displaying a determinate progress. Use along loading. dark-percentage Boolean Optional property for displaying a determinate progress on a light button color. Use along loading and percentage. disable Boolean The button is disabled, if true. @click event won’t be triggered while in this state. label String/Number Button label. tabindex Number Set explicit tab index. repeat-timeout Number/Function Enables multiple @click events on click/tap and hold. Function gets a Number (timesTriggered) as parameter. wait-for-ripple Boolean Wait for ripple then before emitting @click event. Mat theme only. content-class String/Array/Object Classes applied to the Popover container. content-style String/Array/Object Style applied to the Popover container. type String (v0.17+) One of “a” (uses an &lt;a&gt; tag), “button”, “submit”, “reset”. Router syntax sugar Vue Property Type Description to String/Object Makes button go to the indicated route when clicked. replace Boolean Replaces current route instead of pushing to window history. The properties above are just syntactic sugar and work similar to &lt;router-link&gt; Vue component. &lt;q-btn-dropdown to=\"/\" ...&gt; ... &lt;/q-btn-dropdown&gt;&lt;!-- equivalent to: --&gt;&lt;q-btn-dropdown @click=\"$router.push('/')\" ...&gt; ... &lt;/q-btn-dropdown&gt; Apearance Vue Property Type Description size String Button size. One of xs, sm, md, lg, xl, or a css unit string size eg. 25px, 2rem, 3vw. color String A color from Quasar Color Palette. text-color String A color from Quasar Color Palette. align String Label/Content alignment. One of left, center, right, around, between. dense Boolean Dense Button. round Boolean Set true, if you want a round button. outline Boolean Set true, if you want an outlined button. flat Boolean Set true, if you want a flat button. push Boolean Set true, if the button should have a push effect. rounded Boolean Set true, if the square button should have rounded corners. glossy Boolean Set true, if the button should be glossy. fab Boolean Floating Action Button. See fab-mini Boolean Smaller Floating Action Button. no-wrap Boolean Prevent text wrapping no-caps Boolean Set true, if you don’t want button content/label to be transformed to uppercase letter on Material Theme. no-ripple Boolean Disable Material Ripple. Mat theme only. Vue Events Vue Event Description @click Triggered on button click/tap, if button is not disabled. More examplesComplete example with QList: Note the use of the v-close-overlay directive to close the dropdown on click. Don’t forget to register it in quasar.conf.js &lt;q-btn-dropdown color=\"primary\" label=\"Dropdown\"&gt; &lt;q-list link&gt; &lt;q-item v-for=\"n in 2\" :key=\"`1.$&#123;n&#125;`\" v-close-overlay @click.native=\"handlerFunction\"&gt; &lt;q-item-side icon=\"folder\" inverted color=\"primary\" /&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Photos&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;February 22, 2016&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;q-item-side right icon=\"info\" color=\"amber\" /&gt; &lt;/q-item&gt; &lt;q-item-separator inset /&gt; &lt;q-list-header inset&gt;Files&lt;/q-list-header&gt; &lt;q-item v-close-overlay @click.native=\"handlerFunction\"&gt; &lt;q-item-side icon=\"assignment\" inverted color=\"secondary\" /&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Vacation&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;February 22, 2016&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;q-item-side right icon=\"info\" color=\"amber\" /&gt; &lt;/q-item&gt; &lt;/q-list&gt;&lt;/q-btn-dropdown&gt;"},{"title":"Button Group","updated":"2018-07-25T14:14:24.652Z","permalink":"https://quasar-framework.org/components/button-group.html","text":"You can conveniently group QBtn and QBtnDropdown using QBtnGroup. Be sure to check those component’s respective pages to see their props and methods. InstallationEdit /quasar.conf.js:framework: &#123; components: [ 'QBtnGroup', 'QBtn', // if using QBtn 'QBtnDropdown' // if using QBtnDropdown ]&#125; Basic usageSimple group of three buttons:&lt;q-btn-group&gt; &lt;q-btn label=\"One\" @click=\"clickHandler1\"/&gt; &lt;q-btn label=\"Two\" @click=\"clickHandler2\"/&gt; &lt;q-btn label=\"Three\" @click=\"clickHandler3\"/&gt;&lt;/q-btn-group&gt; Simple group of three push buttons:&lt;q-btn-group push&gt; &lt;q-btn push label=\"One\" @click=\"clickHandler1\" /&gt; &lt;q-btn push label=\"Two\" @click=\"clickHandler2\" /&gt; &lt;q-btn push label=\"Three\" @click=\"clickHandler3\" /&gt;&lt;/q-btn-group&gt; Simple group of three outlined buttons:&lt;q-btn-group outline&gt; &lt;q-btn outline label=\"One\" @click=\"clickHandler1\" /&gt; &lt;q-btn outline label=\"Two\" @click=\"clickHandler2\" /&gt; &lt;q-btn outline label=\"Three\" @click=\"clickHandler3\" /&gt;&lt;/q-btn-group&gt; Vue Properties Vue Property Type Description outline Boolean Set true, if you want an outlined button. flat Boolean Set true, if you want a flat button. push Boolean Set true, if the button should have a push effect. rounded Boolean Set true, if the square button should have rounded corners. You must use these props on both the parent QBtnGroup and the children QBtn/QBtnDropdown. More examplesSimple group of three rounded buttons&lt;q-btn-group rounded&gt; &lt;q-btn rounded label=\"One\" @click=\"clickHandler1\" /&gt; &lt;q-btn rounded label=\"Two\" @click=\"clickHandler2\" /&gt; &lt;q-btn rounded label=\"Three\" @click=\"clickHandler3\" /&gt;&lt;/q-btn-group&gt; Simple group of three flat buttons&lt;q-btn-group flat&gt; &lt;q-btn flat label=\"One\" @click=\"clickHandler1\" /&gt; &lt;q-btn flat label=\"Two\" @click=\"clickHandler2\" /&gt; &lt;q-btn flat label=\"Three\" @click=\"clickHandler3\" /&gt;&lt;/q-btn-group&gt; Simple group of two rounded buttons and one rounded dropdown button:&lt;q-btn-group rounded&gt; &lt;q-btn rounded color=\"primary\" label=\"One\" /&gt; &lt;q-btn rounded color=\"primary\" label=\"Two\" /&gt; &lt;q-btn-dropdown rounded color=\"primary\" label=\"Three\" split&gt; &lt;!-- dropdown content goes here --&gt; &lt;q-list link&gt; &lt;q-item v-close-overlay&gt; &lt;q-item-side icon=\"folder\" inverted color=\"primary\" /&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Photos&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;February 22, 2016&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;q-item-side right icon=\"info\" color=\"amber\" /&gt; &lt;/q-item&gt; &lt;q-item-separator inset /&gt; &lt;q-list-header inset&gt;Files&lt;/q-list-header&gt; &lt;q-item v-close-overlay&gt; &lt;q-item-side icon=\"assignment\" inverted /&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Vacation&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;February 22, 2016&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;q-item-side right icon=\"info\" color=\"amber\" /&gt; &lt;/q-item&gt; &lt;/q-list&gt; &lt;/q-btn-dropdown&gt;&lt;/q-btn-group&gt;"},{"title":"Building Reusable Components with Quasar","updated":"2018-08-24T12:35:10.604Z","permalink":"https://quasar-framework.org/components/building-reusable-components.html","text":"Vue greatly encourages the use of components to encapsulate reusable code. Following this practice can DRY up your code, saving tons of developer time and effort. Quasar also follows this same practice and distributes all its components encapsulated. This guide should help you build new components by either using existing Quasar components or by building your own from scratch. Before you read this guide, please make sure you understand the concepts behind Vue components and also read up on Single File Components (SFC). Using existing componentsQuasar as a framework provides the building blocks to build your own apps. But, often the question arises as to how one can use the already existing Quasar components to build their own components. The first thing to notice is that Vue favors composition over inheritance. Inheritance is a concept known from Object Oriented Programming, where classes are able to extend other classes in order to reuse their methods and attributes to build a new, but in some ways different, classes. Composition, on the other hand, is also a known concept from Object Oriented Programming. With composition, instead of extending or overwriting an existing class, the composed objects are built from the classes through interfaces or mixins, et. al. The main difference being inheritance builds an “is a” relationship between the objects and composition builds a “has a” relationship. Think about a page for a login, for example. It “has a” username field and “has a” password field. Being able to compose components together to make more intricate components, is a powerful concept of SFCs. Compose components to build a new oneMost of the time you’ll want to take existing Quasar components and build new components from them.You can refer to this as the Decorator / Wrapper Pattern, also known from Object Oriented Programming. This pattern allows the developer to create new versions of an object by altering/extending its behavior through a wrapper object, which is given a new name. This new object can have any added methods or properties, but they do not affect the base object. Let’s take a look at a simple example: Custom select componentLet’s assume we want to build a component that hides some of the props passed to QSelect. Specifically, we want to build a select component, which always has the filter prop set to true and always apply a default filter-placeholder. A simple implementation of this wrapper component could look like this: MySelect.vue&lt;template&gt; &lt;q-select :value=&quot;value&quot; :options=&quot;options&quot; @change=&quot;handleChange&quot; filter filter-placeholder=&quot;select&quot;/&gt;&lt;/template&gt;&lt;script&gt; import &#123; QSelect &#125; from &apos;quasar&apos; export default &#123; props: [&apos;value&apos;, &apos;options&apos;], methods: &#123; handleChange (newVal) &#123; this.$emit(&apos;input&apos;, newVal) &#125; &#125;, components: &#123; QSelect &#125; &#125;&lt;/script&gt; Because v-model=&quot;foo&quot; is just syntactic sugar for :value=&quot;foo&quot; @input=&quot;foo = $event.target.the value&quot;, we can define a property value on our new component. This is then passed as value to the inner QSelect. Next, we can listen to the change event on the QSelect to trigger a method, as soon as the input has changed. If we receive such an event, we are emitting an input event from our new component and this new value is passed as a parameter, so it can again be used with v-model. Now we can use the component like this: &lt;template&gt; &lt;my-select v-model=&quot;selected&quot; :options=&quot;myOptions&quot; /&gt;&lt;/template&gt;&lt;script&gt; import MySelect from &apos;./MySelect&apos; export default &#123; data () &#123; return &#123; selected: null, myOptions: [] &#125; &#125;, components: &#123; MySelect &#125; &#125;&lt;/script&gt; This would render a QSelect with filter set to true and filter-placeholder set to “select”. A great way to inspect this is by using vue-devtools. Note that it is now no longer possible to use the standard QSelect properties. If we wanted to set other properties on the internal QSelect, we would have to define all of them on our own component and pass them to QSelect. Pinpad componentNow let’s assume we do not want to wrap an existing component to simplify it, but instead, we want to build an entirely new component, which is not included with Quasar. This example is taken from a forum post, where a user wanted to build a pin pad component. If you think about pin pads for a minute, you will quickly come to the conclusion that pin pads, in most cases, are made up of a matrix of buttons. That’s great, we already have the existing QBtn component included with Quasar, so these could be used to build our pin pad component. The next thing we need for a pin pad is to order a set of buttons in a matrix. The CSS flexbox layout could be an easy solution. Thankfully, Quasar also has you covered here, since it has a flexbox grid system already built in. If we throw these two thing together, building our pin pad is easy. &lt;template&gt; &lt;div&gt; &lt;div v-for=&quot;row in 3&quot; class=&quot;row justify-center&quot;&gt; &lt;div v-for=&quot;col in 3&quot; class=&quot;col-auto&quot;&gt; &lt;q-btn @click=&quot;handleClick((row-1)*3 + col)&quot;&gt; &#123;&#123; (row-1)*3 + col &#125;&#125; &lt;/q-btn&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import &#123; QBtn &#125; from &apos;quasar&apos; export default &#123; data () &#123; return &#123; pin: &apos;&apos; &#125; &#125;, methods: &#123; handleClick (digit) &#123; this.pin += digit &#125; &#125;, components: &#123; QBtn &#125; &#125;&lt;/script&gt; The above code gives us a whole new component by using existing components. We could now even extend this component with other Quasar components like a QInput to allow for manually entered pins. Of course, this is just a minimal example. We’re missing styling of the buttons and all the logic that goes behind a pin pad. MixinsMixins allow for the re-use of code, by holding certain methods or properties, which set of components may need. Mixins are a great way avoid code duplication. To define a mixin, one has to export an object that looks similar to a normal component. Other components now can use this mixin to implement the mixin functionality. For example, lets say we need to call a register method on a lot of different components. This method calls an API and returns some identifier that should be stored in the data object of the component. First, let us define the RegisterMixin: export const RegisterMixin = &#123; data () &#123; return &#123; id: '' &#125; &#125;, methods: &#123; register () &#123; // Lets assume we extracted the AJAX call to the Registration class new Registration() .register() .then(response =&gt; &#123; this.id = response.id &#125;) &#125; &#125;, created () &#123; this.register() &#125;&#125; Now that we have defined the mixin, we can use it with any other component and it will be “mixed in” the component’s attributes. import &#123; RegisterMixin &#125; from &apos;./registerMixin&apos;export default &#123; mixins: [RegisterMixin]&#125; A component can use any number of mixins. But, be aware of how Vue merges the options. You can read more about mixins in the Vue docs. Quasar uses mixins for some of its internal functionality. For example the RouterLinkMixin. It allows the adding of link functionality to different components. There is a caveat. As great as mixins are, you cannot really use another single file component as a mixin, because only the JavaScript parts are mixed into your component and not the template or style definitions. Let’s assume we want to build the MySelect component from above, using mixins. If we would write the following code import &#123; QSelect &#125; from &apos;quasar&apos;export default &#123; mixin: [QSelect]&#125; we would end up with a component that has all the internal methods, properties and data from QSelect, but no template at all. So we would have to get to the source of QSelect and copy the whole template definition. This would work up until QSelect gets updated and you forget to update the template as well. Even if you only update minor versions, it could still break, because you are not relying on the external interface of QSelect, which is described in the docs, nor the internal code, which normally one should never have to care about. So mixins are great to share methods and properties between your own components. How to style custom componentsStyling custom components is easy. Just declare your styles in the &lt;style&gt; section of your single file component or import an external style definition by using &lt;style src=&quot;/path/to/your/stlye&quot;&gt;&lt;/style&gt; But, what if we want our styles to be consistent and be able to change them in a single place? Quasar uses Stylus variables for that purpose. if you want to use some of the variables in your own components you can just import them like so: &lt;template&gt; ...&lt;/template&gt;&lt;script&gt; ...&lt;/script&gt;&lt;style lang=&quot;stylus&quot;&gt; @import &apos;~variables&apos;&lt;/style&gt; Now you can use all the Stylus variables like colors or breakpoints in your own component. @import '~variables'h1 color $primary Inter-component communicationVue provides various ways to allow two or more components to communicate with each other. PropsProps are used to pass data from a parent component to a child component. Almost all Quasar components use props to allow you to pass data or set options on them. EventsFor more complex communication events are used. One particulary interesting thing about events is that v-model=&quot;foo&quot; is just syntactic sugar for :value=&quot;foo&quot; @input=&quot;foo = $event.target.the value&quot;. If you want to build a custom component you can use v-model. Just emit an input event with the payload somewhere in your code. DirectivesAnother form of reusable code in Vue are directives. Quasar provides a set of directives out of the box you can use. Swiping, Panning and HoldThe v-touch-pan, v-touch-swipe and v-touch-hold directives allow you to add gesture and touch interactions to your custom components. RippleThe Material Ripple directive allows you add the well know ripple effect to your custom components. UtilsIn addition to components and directives Quasar also offers a set of JavaScript Utils to simplify your component development, check them out in the Components &gt; Utils section."},{"title":"Button Toggle","updated":"2018-07-25T14:14:24.653Z","permalink":"https://quasar-framework.org/components/button-toggle.html","text":"The QBtnToggle component is another basic element for user input, similar to QRadio but with buttons. You can use this to supply a way for the user to pick an option from multiple choices. Works well with QField for additional functionality such as a helper, error message placeholder and many others. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QBtnToggle']&#125; Basic Usage&lt;!-- Three choices for the user --&gt;&lt;q-btn-toggle v-model=\"model\" toggle-color=\"primary\" :options=\"[ &#123;label: 'One', value: 'one'&#125;, &#123;label: 'Two', value: 'two'&#125;, &#123;label: 'Three', value: 'three'&#125; ]\"/&gt; Vue PropertiesSupports v-model which should be binded to a String in your scope. Choosing one option (clicking/tapping on a radio) makes your v-model change to Radio’s val. Vue Property Type Description options Array An array of objects with value and label properties. The binary components will be created according to this array. readonly Boolean Set to true, to make the radio read-only. disable Boolean Set to true, to disable the radio. dense Boolean Dense Buttons. outline Boolean Set true, if you want an outlined button. flat Boolean Set true, if you want a flat button. push Boolean Set true, if the button should have a push effect. rounded Boolean Set true, if the square button should have rounded corners. glossy Boolean Set true, if the button should be glossy. no-wrap Boolean Prevent text wrapping no-caps Boolean Set true, if you don’t want button content/label to be transformed to uppercase letter on Material Theme. no-ripple Boolean Disable Material Ripple. Mat theme only. wait-for-ripple Boolean Wait for ripple then before emitting @click event. Mat theme only. size String (v0.16+) Button size. One of xs, sm, md, lg, xl, or a css unit string size eg. 25px, 2rem, 3vw. More info below this table. Color PropertiesAll can take values from Quasar Color Palette. Vue Property Type Description color String Color of buttons. text-color String Optional color of buttons label/icon. toggle-color String Color for button representing the current selection. toggle-text-color String Optional color for button label/icon representing the current selection. Options ConfigurationThe options property must be an Array of Objects with this structure:&#123; // required; the model gets this value when button is selected: value: ..., // include at least one of the following three props: label: '...', // Label for button icon: '...', // Icon for button iconRight: '...', // Icon for button on right side // Optional properties that override the QBtnToggle props: disable, color, textColor, toggleColor, toggleTextColor, noCaps, noWrap, noRipple, waitForRipple, tabindex&#125; Vue Events Vue Event Description @input Triggered when it gets selected."},{"title":"Button","updated":"2018-07-25T14:14:24.654Z","permalink":"https://quasar-framework.org/components/button.html","text":"Quasar has a component called QBtn which is a button with a few extra useful features. For instance, it comes in two shapes: rectangle (default) and round. It also has the material ripple effect by default when building with Material theme. The button component also comes with a spinner or loading effect. You would use this for times when app execution may cause a delay and you want to give the user some feedback about that delay. When used, the button will display a spinning animation as soon as the user clicks the button. When not disabled or spinning, QBtn emits a @click event, as soon as it is clicked or tapped. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QBtn']&#125; Basic Usage&lt;!-- Just label --&gt;&lt;q-btn label=\"New item\" /&gt;&lt;!-- Just icon --&gt;&lt;q-btn icon=\"map\" /&gt;&lt;!-- Icon &amp; Label --&gt;&lt;q-btn icon=\"create\" label=\"New item\" /&gt; A standard round button.&lt;!-- Notice \"round\" specified and self-closing tag (as we don't need to specify any content for button -- the icon fills all available space anyway). The label is discarded.--&gt;&lt;q-btn round color=\"secondary\" icon=\"card_giftcard\" /&gt;&lt;!-- Next is perfectly equivalent, but use \"icon\" property whenever you can.--&gt;&lt;q-btn round color=\"secondary\"&gt; &lt;q-icon name=\"card_giftcard\" /&gt;&lt;/q-btn&gt; IMPORTANTFor round buttons, only use an icon as content, through “icon” property or QIcon component as the only child. Do not add anything else besides the icon, unless you want a Popover or Tooltip. Primary colored button of small size: &lt;q-btn color=\"primary\" size=\"sm\" label=\"Edit\"/&gt; Button with “loading” state (we’ll go over these in more detail in its own section later): &lt;!-- Regular shaped --&gt;&lt;q-btn loading color=\"primary\" @click=\"clickMethod\" label=\"Button Label\"/&gt; &lt;template&gt; &lt;!-- Round shaped (only use icon or spinner as content!) with loading state --&gt; &lt;q-btn :loading=\"loading\" round icon=\"map\" color=\"primary\" @click=\"handler\" &gt; &lt;q-spinner-oval slot=\"loading\" /&gt; &lt;/q-btn&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; loading: false &#125; &#125;, methods: &#123; handler () &#123; this.loading = true // we simulate a delay here: setTimeout(() =&gt; &#123; this.loading = false &#125;, 3000) &#125; &#125;&#125;&lt;/script&gt; Vue Properties Vue Property Type Description icon String Name of the icon to use. icon-right String Name of the icon to place on right side of button. loading Boolean Display a spinner, if true. Check Button with Progress. percentage Number Optional property for displaying a determinate progress. Use along loading. dark-percentage Boolean Optional property for displaying a determinate progress on a light button color. Use along loading and percentage. disable Boolean The button is disabled, if true. @click event won’t be triggered while in this state. label String/Number Button label. tabindex Number Accessibility; set explicit HTML “tabindex” attribute value. repeat-timeout Number/Function Enables multiple @click events on click/tap and hold. Function gets a Number (timesTriggered) as parameter. wait-for-ripple Boolean Wait for ripple then before emitting @click event. Mat theme only. type String (v0.17+) One of “a” (uses an &lt;a&gt; tag), “button”, “submit”, “reset”. Router syntax sugar Vue Property Type Description to String/Object Makes button go to the indicated route when clicked. replace Boolean Replaces current route instead of pushing to window history. The properties above are just syntactic sugar and work similar to &lt;router-link&gt; Vue component. &lt;q-btn label=\"Home\" to=\"/\" /&gt;&lt;!-- equivalent to: --&gt;&lt;q-btn label=\"Home\" @click=\"$router.push('/')\" /&gt; Appearance Vue Property Type Description size String Button size. One of xs, sm, md, lg, xl, or a css unit string size eg. 25px, 2rem, 3vw. More info below this table. color String A color from Quasar Color Palette. text-color String A color from Quasar Color Palette. align String Label/Content alignment. One of left, center, right, around, between. dense Boolean Dense Button. round Boolean Set true, if you want a round button. outline Boolean Set true, if you want an outlined button. flat Boolean Set true, if you want a flat button. push Boolean Set true, if the button should have a push effect. rounded Boolean Set true, if the square button should have rounded corners. glossy Boolean Set true, if the button should be glossy. fab Boolean Floating Action Button. See fab-mini Boolean Smaller Floating Action Button. no-wrap Boolean Prevent text wrapping no-caps Boolean Set true, if you don’t want button content/label to be transformed to uppercase letter on Material Theme. no-ripple Boolean Disable Material Ripple. Mat theme only. Size property values: Size value Description xs, …, xl Predefined sizes form Same size as an input form component form-label Same size as an input form component with stack/float label form-hide-underline Same size as an input form component with no bottom border form-label-hide-underline Same size as an input form component with stack/float label and no bottom border form-inverted Same size as an inverted input form component form-label-inverted Same size as an inverted input form component with stack/float label Vue Events Vue Event Description @click Triggered on button click/tap, if button is not disabled. More examplesWhen adding an icon to a regular button, there are two possibilities for its position. The default position is left. Use icon-right property instead to position the icon to the right: &lt;!-- icon will be placed on the left --&gt;&lt;q-btn icon=\"mail\" color=\"primary\" label=\"Button Label\" /&gt;&lt;!-- icon will be placed on the right --&gt;&lt;q-btn icon-right=\"mail\" color=\"teal\" label=\"Button Label\" /&gt;&lt;!-- icons will be placed on both sides --&gt;&lt;q-btn icon=\"mail\" icon-right=\"mail\" color=\"teal\" label=\"Button Label\" /&gt; Button SizesUse size attribute with one of the following values: xs, sm, md, lg, xl. You don’t need to specify md, because that’s the default size.&lt;q-btn color=\"primary\" size=\"xs\" label=\"Extra Small Button\" /&gt;&lt;q-btn color=\"primary\" size=\"sm\" label=\"Small Button\" /&gt;&lt;q-btn color=\"primary\" size=\"md\" label=\"Medium Button\" /&gt;&lt;q-btn color=\"primary\" size=\"lg\" label=\"Large Button\" /&gt;&lt;q-btn color=\"primary\" size=\"xl\" label=\"Extra Large Button\" /&gt; You can also use a CSS unit as size:&lt;q-btn color=\"primary\" size=\"25px\" label=\"25 Pixels\" /&gt;&lt;q-btn color=\"primary\" size=\"2rem\" label=\"2 Rem\" /&gt;&lt;q-btn color=\"primary\" size=\"3vh\" label=\"3 View Height\" /&gt; You can also make use of globally available CSS helper class block (sets CSS display property to block) or full-width to expand the button. Button ColorsUse any color from the Quasar Color Palette. Examples: primary, orange, lime, ‘amber-8’. &lt;q-btn color=\"primary\" label=\"Primary Button\"/&gt;&lt;q-btn color=\"amber\" label=\"Amber Button\"/&gt;&lt;q-btn color=\"primary\" text-color=\"amber\" label=\"Primary Button with Amber text\" /&gt; Button Style TypesThere are also the outline, push, round, flat, rounded and glossy props for you to use to control some design aspects of the button. &lt;!-- an outlined button --&gt;&lt;q-btn outline color=\"teal\" label=\"Outlined Button\" /&gt;&lt;!-- a rounded push button --&gt;&lt;q-btn rounded push color=\"secondary\" label=\"Rounded Push Button\"/&gt;&lt;!-- a glossy button --&gt;&lt;q-btn glossy color=\"primary\" label=\"Glossy\" /&gt;&lt;!-- a flat dense round button --&gt;&lt;q-btn flat dense round icon=\"menu\" color=\"primary\" /&gt; Button with ProgressSome button actions involve contacting a server, so an asynchronous response. It’s best that you inform the user about a background process taking place until the asynchronous response is ready. QBtn offers this possibility through the loading prop. This property will display a QSpinner (by default) instead of the icon and/or label of the button. Custom loading content can also be used. Here is a full example highlighting what you can do with the loading property.&lt;template&gt; &lt;!-- Notice `loading` prop --&gt; &lt;q-btn :loading=\"loading\" @click=\"simulateProgress\" label=\"Button Label\"&gt; &lt;!-- Notice slot=\"loading\". This is optional. If missing, the default theme spinner will be used. --&gt; &lt;span slot=\"loading\"&gt;Loading...&lt;/span&gt; &lt;/q-btn&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; loading: false &#125; &#125;, methods: &#123; simulateProgress () &#123; // we set loading state this.loading = true // simulate a delay, like in // waiting for an Ajax call setTimeout(() =&gt; &#123; // delay is over, now we reset loading state this.loading = false // DON't forget to reset loading state // otherwise the button will keep on // being in \"loading\" state &#125;, 3000) &#125; &#125;&#125;&lt;/script&gt; If you’d like to add a different spinner than the default one of the theme you are building your website/app with, you can do so by slotting in the Spinner component that you’d like. &lt;q-btn icon=\"mail\" label=\"Get Mail\" color=\"orange\" @click=\"simulateProgress\"&gt; &lt;q-spinner-facebook slot=\"loading\" size=\"20px\" /&gt;&lt;/q-btn&gt; The “loading” slot can contain anything. It’s not limited to text or spinners only. You can use whatever DOM elements or components you want. The end result is that while in “loading” state, the Button content will be replaced by whatever the “loading” slot contains. Also, while in this state, the button gets disabled so no further click events are unnecessarily triggered. Handling Deterministic ProgressShould you wish, you can also display a deterministic progress within the button by using the additional “percentage” property along with what you’ve already learned about buttons with progress:&lt;template&gt; &lt;q-btn :percentage=\"percentage\" :loading=\"loading\" label=\"Compute PI\" color=\"primary\" @click=\"startComputing\" &gt; &lt;span slot=\"loading\"&gt; &lt;q-spinner-gears class=\"on-left\" /&gt; Computing... &lt;/span&gt; &lt;/q-btn&gt;&lt;/template&gt;&lt;script&gt;// remember to also register necessary components in quasar.conf.jsexport default &#123; data () &#123; return &#123; loading: false percentage: 0 &#125; &#125;, methods: &#123; startComputing () &#123; this.loading = true this.percentage = 0 // we simulate progress here this.interval = setInterval(() =&gt; &#123; // adding a random amount of percentage this.percentage += Math.floor(Math.random() * 8 + 10) // and when we are done... if (this.percentage &gt;= 100) &#123; clearInterval(this.interval) // DON'T forget to reset loading state: this.loading = false &#125; &#125;, 700) &#125; &#125;, beforeDestroy () &#123; // we also take care of clearing interval // should the user navigate away before the progress has ended clearInterval(this.interval) &#125;&#125;&lt;/script&gt; You can also use the dark-percentage prop if your button has a light color. Controlling the Button for Form SubmissionWhen you have a button to submit a form’s input to the server, like a “Save” button, more often than not you will also want to give the user the ability to submit the form with a press of the enter key. If you would also like to give the user feedback of the saving process being in progress, and to prevent the user repeatedly pressing the button, you would need the button to show a loading spinner and be disabled from click events. QBtn allows this behavior if configured so. To control this loading feature, all you need is logic in your form which sets the v-model of the button to true. Once it is set to true, the button displays the spinner. To stop the process, set the v-model value back to false. The example below demonstrates this button control with the Enter key. &lt;template&gt; &lt;div&gt; &lt;!-- a simple text field watching for the enter key release --&gt; &lt;q-input v-model=\"test\" @keyup.enter=\"simulateSubmit\" /&gt; &lt;!-- A button with v-model set to submit. v-model scope variable must be a strict Boolean --&gt; &lt;q-btn :loading=\"submitting\" @click=\"simulateSubmit\" label=\"Save\"&gt; &lt;q-spinner-facebook slot=\"loading\" /&gt; &lt;/q-btn&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; test: '', submitting: false &#125; &#125;, methods: &#123; simulateSubmit () &#123; this.submitting = true // Simulating a delay here. // When we are done, we reset \"submitting\" // Boolean to false to restore the // initial state. setTimeout(() =&gt; &#123; // delay simulated, we are done, // now restoring submit to its initial state this.submitting = false &#125;, 3000) &#125; &#125;&#125;&lt;/script&gt; Disabling a ButtonTo disable the button, use the disable prop. Along with a small fade applied to the Button, the @click event will no longer be triggered. &lt;q-btn color=\"primary\" disable label=\"Primary Button\" /&gt;&lt;q-btn color=\"amber\" :disable=\"booleanVar\" label=\"Amber Button\" /&gt; Dealing with formsRequires Quasar v0.15.11+ Should you wish to use QBtn inside of a &lt;form&gt; tag, you should know about the difference between (type=”button”, which is implicit, and type=”submit”): &lt;form&gt; ... &lt;q-btn label=\"I do not submit form\" /&gt; &lt;q-btn type=\"submit\" label=\"I do submit the form\" /&gt; ...&lt;/form&gt; Using a Button with Vue RouterIf you want to use a button to navigate to a new page you don’t need to use a wrapping &lt;router-link&gt; tag. Instead, you can use the @click event to handle the route change. &lt;q-btn @click=\"$router.push('/path/to/new/page')\" color=\"primary\" label=\"navigate\"/&gt; Delaying button click eventOn Material theme you can delay a button’s @click until the material ripple has reached the edge of the button using the wait-for-ripple prop. Useful from a UI perspective as an example when you want a button to dismiss a Modal. &lt;q-btn wait-for-ripple @click=\"clickHandler\" label=\"Click Me\"/&gt; Using a click and hold buttonIf you want to trigger a button’s @click event multiple times on click and hold use the repeat-timeout prop. Accepts either a Number or a Function (returning a Number). The Number represents the time amount to wait until triggering @click event again. &lt;template&gt; &lt;!-- Click and hold to trigger every second --&gt; &lt;q-btn @click=\"clickHandler\" :repeat-timeout=\"1000\" label=\"Click Me\" /&gt; &lt;!-- Click and hold to trigger faster over time --&gt; &lt;q-btn @click=\"clickHandler\" :repeat-timeout=\"repeatFunction\" label=\"Click Me\" /&gt;&lt;/template&gt;&lt;script&gt; export default &#123; methods: &#123; clickHandler () &#123; console.log('Handler Triggered') &#125;, repeatFunction (timesTriggered) &#123; // first time timesTriggered is 0, so we add 1 // to be sure we don't divide by 0 return 1000 / (timesTriggered + 1) &#125; &#125; &#125;&lt;/script&gt;"},{"title":"Cards","updated":"2018-09-13T11:16:30.852Z","permalink":"https://quasar-framework.org/components/card.html","text":"Quasar Cards are a great way to display important pieces of content, and are quickly emerging as a core design pattern for Apps. They’re a great way to contain and organize information, while also setting up predictable expectations for the user. With so much content to display at once, and often so little screen real-estate, Cards have fast become the design pattern of choice for many companies, including the likes of Google and Twitter. Quasar Cards are a collection of components that you can use, based on the needs. It’s all about being creative. Experiment with different Web Components by embedding them in Card components to create awesome results. InstallationEdit /quasar.conf.js:framework: &#123; components: [ 'QCard', 'QCardTitle', 'QCardMain', 'QCardMedia', 'QCardSeparator', 'QCardActions' ]&#125; Basic UsageFamiliarize yourself with Card components with the examples below. The only requirement is that QCard needs to wrap all the other ones. Everything else is optional and can be inserted into your template anywhere as long as they are direct children of QCard. Following are Vue properties of QCard component: Vue Property Type Description square Boolean Squared borders instead of round ones. flat Boolean Remove shadow. inline Boolean Make it inline. Also set a CSS width to work. Take a look at Grid example on the “More Examples” section. color String One color from Quasar Color Palette. text-color String Override color of text, one from Quasar Color Palette. dark Boolean (v0.17.13+) To be set when the color is a dark one. &lt;!-- An basic example --&gt;&lt;q-card&gt; &lt;q-card-title&gt; Card Title &lt;/q-card-title&gt; &lt;q-card-separator /&gt; &lt;q-card-main&gt; Card Content &lt;/q-card-main&gt;&lt;/q-card&gt; A more complex example:&lt;q-card inline style=\"width: 500px\"&gt; &lt;q-card-media&gt; &lt;img src=\"~assets/donuts.png\"&gt; &lt;/q-card-media&gt; &lt;q-card-title&gt; Cafe Basilico &lt;q-rating slot=\"subtitle\" v-model=\"stars\" :max=\"5\" /&gt; &lt;div slot=\"right\" class=\"row items-center\"&gt; &lt;q-icon name=\"place\" /&gt; 250 ft &lt;/div&gt; &lt;/q-card-title&gt; &lt;q-card-main&gt; &lt;p&gt;$・Italian, Cafe&lt;/p&gt; &lt;p class=\"text-faded\"&gt;Small plates, salads &amp; sandwiches in an intimate setting.&lt;/p&gt; &lt;/q-card-main&gt; &lt;q-card-separator /&gt; &lt;q-card-actions&gt; &lt;q-btn flat round dense icon=\"event\" /&gt; &lt;q-btn flat label=\"5:30PM\" /&gt; &lt;q-btn flat label=\"7:30PM\" /&gt; &lt;q-btn flat label=\"9:00PM\" /&gt; &lt;q-btn flat color=\"primary\" label=\"Reserve\" /&gt; &lt;/q-card-actions&gt;&lt;/q-card&gt; Card Title (QCardTitle)QCardTitle has three main areas (all are optional): title, subtitle (“subtitle” slot) and right side (“right” slot). Note that you can set title and subtitle as overlay on an image or video through a QCardMedia component too (see QCardMedia section). &lt;q-card-title&gt; &lt;!-- Optional. Anything that goes here without specifying \"slot\" is considered the main title --&gt; Title &lt;!-- Optional. Adding the subtitle. Notice slot=\"subtitle\" --&gt; &lt;span slot=\"subtitle\"&gt;Subtitle&lt;/span&gt; &lt;!-- Optional. Adding something on the right side, like an icon triggering a Popover with a menu. Notice the slot=\"right\" --&gt; &lt;q-icon slot=\"right\" name=\"more_vert\"&gt; &lt;q-popover&gt; &lt;q-list link class=\"no-border\"&gt; &lt;q-item v-close-overlay&gt; &lt;q-item-main label=\"Remove Card\" /&gt; &lt;/q-item&gt; &lt;q-item v-close-overlay&gt; &lt;q-item-main label=\"Send Feedback\" /&gt; &lt;/q-item&gt; &lt;q-item v-close-overlay&gt; &lt;q-item-main label=\"Share\" /&gt; &lt;/q-item&gt; &lt;/q-list&gt; &lt;/q-popover&gt; &lt;/q-icon&gt;&lt;/q-card-title&gt; Card Main Content (QCardMain)QCardMain defines an area containing the main Card content, like description, details or anything you need outside of the other Card component’s purpose. &lt;q-card-main&gt; Card main content.&lt;/q-card-main&gt;&lt;q-card-main&gt; &lt;p&gt;$・Italian, Cafe&lt;/p&gt; &lt;p class=\"text-faded\"&gt; Small plates, salads &amp; sandwiches in an intimate setting. &lt;/p&gt;&lt;/q-card-main&gt; Card Actions (QCardActions)Cards can have some actions (buttons) attached to them. Vue Property Type Description vertical Boolean Stack actions vertically align String One of ‘start’, ‘center’, ‘end’, ‘around’, ‘between’ which aligns buttons in respect to the actions container &lt;!-- Horizontal actions --&gt;&lt;q-card-actions&gt; &lt;!-- Define the buttons to your liking, these are just examples --&gt; &lt;q-btn flat round dense icon=\"event\" /&gt; &lt;q-btn flat label=\"5:30PM\" /&gt; &lt;q-btn flat label=\"7:30PM\" /&gt; &lt;q-btn flat label=\"9:00PM\" /&gt; &lt;q-btn flat color=\"primary\" label=\"Reserve\" /&gt;&lt;/q-card-actions&gt;&lt;!-- Vertical actions --&gt;&lt;q-card-actions vertical&gt; &lt;q-btn flat label=\"Action 1\" /&gt; &lt;q-btn flat label=\"Action 2\" /&gt;&lt;/q-card-actions&gt; Card Media (QCardMedia)Cards can also contain media elements: images, videos (through QVideo) or a parallax (through QParallax). This can be done through QCardMedia component, which supports an optional overlay too (for things like title and/or subtitle). Vue Property Type Description overlay-position String One of ‘top’, ‘bottom’ or ‘full’ which sets the position of overlay on top of media element. &lt;!-- Displaying an image --&gt;&lt;q-card-media&gt; &lt;img src=\"~assets/some-image.jpg\"&gt;&lt;/q-card-media&gt;&lt;!-- Display a video (with help of QVideo component) --&gt;&lt;q-card-media&gt; &lt;q-video src=\"https://www.youtube.com/embed/k3_tw44QsZQ?rel=0\" /&gt;&lt;/q-card-media&gt;&lt;!-- Displaying a Parallax (with help of QParallax) --&gt;&lt;q-card-media&gt; &lt;q-parallax :src=\"'statics/parallax1.jpg'\" :height=\"150\"&gt; &lt;div slot=\"loading\"&gt;Loading...&lt;/div&gt; &lt;/q-parallax&gt;&lt;/q-card-media&gt; Now let’s see how we can add overlays too (through “overlay” slot):&lt;q-card-media&gt; &lt;img src=\"~assets/mountains.jpg\"&gt; &lt;!-- Notice the slot=\"overlay\" --&gt; &lt;q-card-title slot=\"overlay\"&gt; Title &lt;span slot=\"subtitle\"&gt;Subtitle&lt;/span&gt; &lt;/q-card-title&gt;&lt;/q-card-media&gt;&lt;!-- Overlay at top of media elements. Notice overlay-position=\"top\"--&gt;&lt;q-card-media overlay-position=\"top\"&gt; &lt;img src=\"~assets/mountains.jpg\"&gt; &lt;!-- Notice the slot=\"overlay\" --&gt; &lt;q-card-title slot=\"overlay\"&gt; Title &lt;span slot=\"subtitle\"&gt;Subtitle&lt;/span&gt; &lt;/q-card-title&gt;&lt;/q-card-media&gt;&lt;!-- Overlay on full area of media elements Notice overlay-position=\"full\"--&gt;&lt;q-card-media overlay-position=\"full\"&gt; &lt;img src=\"~assets/mountains.jpg\"&gt; &lt;!-- Notice the slot=\"overlay\" --&gt; &lt;q-card-title slot=\"overlay\"&gt; Title &lt;span slot=\"subtitle\"&gt;Subtitle&lt;/span&gt; &lt;/q-card-title&gt;&lt;/q-card-media&gt; Card Inner SeparatorYou can choose to add a separator between Card components, which is basically a horizontal thin line, by adding QCardSeparator. Vue Property Type Description inset Boolean Inset separator &lt;q-card&gt; &lt;q-card-title&gt; ... &lt;/q-card-title&gt; &lt;!-- Here is the separator --&gt; &lt;q-card-separator /&gt; &lt;q-card-actions&gt; ... &lt;/q-card-actions&gt;&lt;/q-card&gt; Some More ExamplesColoring CardsUse colors from Quasar Color Palette to set a color for your Cards. &lt;q-card color=\"primary\"&gt; ...&lt;/q-card&gt;&lt;q-card color=\"amber-8\" text-color=\"black\"&gt; ...&lt;/q-card&gt; Lists on CardsPlace a QList with its QItems at root of your QCard, like this: &lt;q-card&gt; ... &lt;q-list&gt; &lt;q-item&gt; &lt;q-item-side&gt; &lt;q-item-tile color=\"primary\" icon=\"local bar\" /&gt; &lt;/q-item-side&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Bar XYZ&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;Have a drink.&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;/q-item&gt; &lt;q-item&gt; &lt;q-item-side&gt; &lt;q-item-tile color=\"red\" icon=\"local gas station\" /&gt; &lt;/q-item-side&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Gas Station&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;Fill your gas tank.&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;/q-item&gt; &lt;q-item&gt; &lt;q-item-side&gt; &lt;q-item-tile color=\"amber\" icon=\"local movies\" /&gt; &lt;/q-item-side&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Cinema XYZ&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;Watch a movie.&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;/q-item&gt; &lt;/q-list&gt; ...&lt;/q-card&gt; There’s also the possibility to create a nice header for your Cards with an image / avatar, a person name and some quick details. In this example, we skip using QCardList: &lt;q-card&gt; &lt;q-item&gt; &lt;q-item-side avatar=\"/statics/boy-avatar.png\" /&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Title&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;Subhead&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;/q-item&gt;&lt;/q-card&gt; Making a Grid of CardsIn order to make a grid of Cards you need to use the inline property of QCard component and set a width for your Cards. &lt;div&gt; &lt;!-- In this example every card has a \"style\" tag with a width. Consider defining a CSS class instead to ease the template syntax. --&gt; &lt;q-card inline style=\"width: 300px\"&gt;...&lt;/q-card&gt; &lt;q-card inline style=\"width: 300px\"&gt;...&lt;/q-card&gt; &lt;q-card inline style=\"width: 300px\"&gt;...&lt;/q-card&gt; ... &lt;q-card inline style=\"width: 300px\"&gt;...&lt;/q-card&gt;&lt;/div&gt; Card with CollapsiblesSince Collapsibles are List items too, it makes sense to use a QList component to encapsulate them. Also, imagine a Card with Collapsibles containing Cards. Inception :) &lt;q-card&gt; &lt;q-card-title&gt; Card with Collapsible List &lt;/q-card-title&gt; &lt;q-card-separator /&gt; &lt;q-list&gt; &lt;q-collapsible icon=\"explore\" label=\"First\"&gt; &lt;div&gt; Lorem ipsum dolor sit amet... &lt;/div&gt; &lt;/q-collapsible&gt; &lt;q-collapsible icon=\"perm_identity\" label=\"Second\"&gt; &lt;div&gt; Lorem ipsum dolor sit amet... &lt;/div&gt; &lt;/q-collapsible&gt; &lt;q-collapsible icon=\"shopping_cart\" label=\"Third\"&gt; &lt;div&gt; Lorem ipsum dolor sit amet... &lt;/div&gt; &lt;/q-collapsible&gt; &lt;/q-list&gt;&lt;/q-card&gt;"},{"title":"Chat","updated":"2018-08-04T06:58:14.864Z","permalink":"https://quasar-framework.org/components/chat.html","text":"Quasar supplies a chat component called QChatMessage which is really a chat entry that renders the data given by the props. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QChatMessage']&#125; Basic UsageThis show a simple chat between two parties. &lt;q-chat-message label='Sunday, 19th'/&gt;&lt;q-chat-message name=\"me\" avatar=\"statics/boy-avatar.png\" :text=\"['hunter2']\" stamp=\"4 minutes ago\" sent/&gt;&lt;q-chat-message name=\"Jane\" avatar=\"statics/linux-avatar.png\" :text=\"['hey, if you type in your pw', 'it will show as stars']\" stamp=\"7 minutes ago\"/&gt; Vue Properties Vue Property Type Description sent Boolean Render as a sent message (so from current user) label String Label of message name String Name of the message creator avatar String URL to the avatar image of the creator (use a static resource) text Array Array of strings that are the message body. Strings are not sanitized, see details below. stamp String Creation timestamp string text-color String Color of the text bg-color String Color of the chat message bubble size Number 1-12 out of 12 (same as col-*). Note that text property is an Array of Strings. This is useful when two or more messages share the same (or very close) timestamp. They will be displayed on separate bubbles, but grouped together more closely so that the name of the creator and timestamp are displayed only once for this kind of group. IMPORTANTStrings in the text property are not sanitized so you can display arbitrary html as message. If you display text from unknown source, like messages from users, you should always sanitize it yourself. Please refer to the demo source for a more complete set of examples."},{"title":"Checkbox","updated":"2018-07-25T14:14:24.656Z","permalink":"https://quasar-framework.org/components/checkbox.html","text":"The Quasar Checkbox component is a basic element to be used for selection or toggling by the user. It has a number of features, as described below. Please also refer to the Option Group documentation on other possibilities for creating groups of Toggles. Works well with QField for additional functionality such as a helper, error message placeholder and many others. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QCheckbox']&#125; Basic Usage&lt;!-- No label: --&gt;&lt;q-checkbox v-model=\"checked\" /&gt;&lt;!-- With a label --&gt;&lt;q-checkbox v-model=\"checked\" label=\"Checkbox Label\" /&gt;&lt;!-- Disabled: --&gt;&lt;q-checkbox v-model=\"checked\" disable /&gt; Vue PropertiesSupports v-model which should be binded to a Boolean or Array in your scope. Vue Property Type Description val Object Used to modify the v-model of the Checkbox when using an Array as v-model. true-value Any Gets into “true” state when model has this value. false-value Any Gets into “false” state when model has this value. indeterminate-value Any Gets into “indeterminate” state when model has this value. Default is null. toggle-indeterminate Boolean Toggle between 3 states, including “indeterminate”. label String The text label for the Checkbox. left-label Boolean Set to true, if the label should be placed to the left of the Checkbox. checked-icon String Optional icon to use, when the Checkbox is checked. unchecked-icon String Optional icon to use, when the Checkbox is not checked. indeterminate-icon String Optional icon to use, when the Checkbox is in indeterminate state. color String Color from Quasar Color Palette. keep-color Boolean Keep color when not truthy too. readonly Boolean Set to true, to make the checkbox read-only. disable Boolean Set to true, to disable the checkbox. dark Boolean Set to true when background is dark. no-focus Boolean (v0.17+) Disable accessibility for this component so that it can’t receive focus. Vue Events Vue Event Description @input Triggered when it changes model. @blur Triggered, when Checkbox loses focus. @focus Triggered, when Checkbox gains focus. Array as ModelIf you have a number of checkboxes for a selection, use an array as the model object and specify val property. &lt;q-checkbox v-model=\"selection\" val=\"one\" label=\"One\" /&gt;&lt;br&gt;&lt;br&gt;&lt;q-checkbox v-model=\"selection\" val=\"two\" label=\"Two\" /&gt;&lt;br&gt;&lt;br&gt;&lt;q-checkbox v-model=\"selection\" val=\"three\" label=\"Three\" /&gt; &lt;script&gt;export default &#123; data () &#123; return &#123; selection: ['one', 'two', 'three'] &#125; &#125;&#125;&lt;/script&gt; Ticking all Checkboxes will make selection scope variable to be [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;]. Unticking all Checkboxes will result in selection being an empty array []. More ExamplesThere are a number of props, which are available to help quickly format a Checkbox. An interesting feature of Checkbox is the ripple effect that user gets when clicking/tapping on it to change its state. Custom Model ValuesInstead of the default true/false values, you can use custom ones:&lt;q-checkbox v-model=\"customModel\" color=\"secondary\" label=\"Do you agree with the terms &amp; conditions?\" true-value=\"yes\" false-value=\"no\"/&gt; Specific IconsSometimes, you might need a checkbox simply as a type of button, to maybe turn something on or off. You can do this with the checked-icon and unchecked-icon props. &lt;!-- a happy and unhappy smiley, maybe for a one-touch satisfaction feedback --&gt;&lt;q-checkbox v-model=\"checked\" checked-icon=\"sentiment very satisfied\" unchecked-icon=\"sentiment very dissatisfied\"/&gt;&lt;!-- an eye and a crossed out eye to indicate visibility --&gt;&lt;q-checkbox v-model=\"checked\" checked-icon=\"visibility\" unchecked-icon=\"visibility_off\"/&gt; ColoringUse the color prop to control the Checkbox color. &lt;q-checkbox v-model=\"checked\" color=\"teal\" /&gt;&lt;q-checkbox v-model=\"checked\" color=\"orange\" /&gt;&lt;q-checkbox v-model=\"checked\" color=\"dark\" /&gt; Label PositionUse the left-label prop, to move the label to the left of Checkbox. &lt;q-checkbox v-model=\"checked\" color=\"teal\" left-label label=\"Checkbox Label\"/&gt; Usage Inside of a ListIn the following example we use the Right side of QItems to insert Checkbox, but it works anywhere. &lt;q-list link&gt; &lt;!-- Rendering a &lt;label&gt; tag (notice tag=\"label\") so the whole QItem will respond to clicks to change Checkbox state. --&gt; &lt;q-item tag=\"label\"&gt; &lt;q-item-side&gt; &lt;q-checkbox v-model=\"checked\" /&gt; &lt;/q-item-side&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Events and reminders&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;/q-item&gt; &lt;q-item tag=\"label\"&gt; &lt;q-item-side&gt; &lt;q-checkbox v-model=\"checked\" /&gt; &lt;/q-item-side&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Events and reminders&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;Lorem ipsum&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;/q-item&gt; &lt;q-item tag=\"label\" multiline&gt; &lt;q-item-side&gt; &lt;q-checkbox v-model=\"checked\" /&gt; &lt;/q-item-side&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Events and reminders&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;/q-item&gt;&lt;/q-list&gt;"},{"title":"Carousel","updated":"2018-08-30T14:23:50.830Z","permalink":"https://quasar-framework.org/components/carousel.html","text":"Quasar Carousel is a Vue Component which you can use to display more information with less real estate, using slides. Useful for creating Wizards too. The Carousel height is determined by the slide with biggest height, unless the height prop is used. InstallationEdit /quasar.conf.js:framework: &#123; components: [ 'QCarousel', 'QCarouselSlide', 'QCarouselControl' ],&#125; Basic UsageHere is a very basic example:&lt;q-carousel class=\"text-white\"&gt; &lt;q-carousel-slide class=\"bg-primary\"&gt; Slide 1 &lt;/q-carousel-slide&gt; &lt;q-carousel-slide class=\"bg-secondary\"&gt; Slide 2 &lt;/q-carousel-slide&gt; &lt;q-carousel-slide class=\"bg-tertiary\"&gt; Slide 3 &lt;/q-carousel-slide&gt;&lt;/q-carousel&gt; QCarousel (Parent)QCarousel Vue PropertiesSupports v-model which determines the slide number. Vue Property Type Description color String One from Quasar Color Palette. It determines the color of the out of the box Carousel controls (arrows, quick nav). arrows Boolean Show navigation arrows. infinite Boolean Infinite slides scrolling. autoplay Boolean/Number Auto scrolls between slides. Works great along infinite prop (but infinite is not required). If used as a number, it represents the number of milliseconds between scrolls. quick-nav Boolean Shows navigational dots at bottom. quick-nav-icon String Icon to use instead of the navigational dots at bottom. quick-nav-position String (v0.17+) One of “top” or “bottom” for the quick navigation toolbar position. no-swipe Boolean Disable navigation by touch/mouse actions. handle-arrow-keys Boolean Allow navigation with left and right arrow key. In this case, it’s best to render only one such Carousel at a time. easing Function Easing function used when changing slide from autoplay or button press. swipe-easing Function Easing function used when changing slide with a swipe. thumbnails Array (v0.15.11+) Array of thumbnails pointing to “statics” folder. Check examples. thumbnails-horizontal Boolean (v0.15.11+) Thumbnails get displayed horizontally. thumbnails-icon String Icon to use for thumbnails. height String (v0.17+) CSS unit optionally defining the height of Carousel. animation Boolean/Number If Boolean, enable/disable animation; if Number, tells the animation duration. QCarousel Vue Methods Vue Method Description next() Goes to next slide. previous() Goes to previous slide. goToSlide(slideNumber) Go to the desired slide. slideNumber is 0-based. QCarousel Vue Events Vue Event Description @input(index) Emits the index of the current slide. @slide-trigger(oldIndex, newIndex, direction) Emitted before animating to the new slide. @slide(index, direction) Emits the index of the current slide and the direction of the slide after the transition animation finishes. Emits even if navigating to the same slide. @slide-direction(&#39;next&#39;/&#39;previous&#39;) Emitted when navigating to a slide, describing direction (next / previous). @fullscreen(true/false) (v0.17.7+) Emitted when Fullscreen state gets toggled. QCarouselSlide (Child) Vue Property Type Description img-src String An image from statics folder. Example: ‘statics/mountaings.png’. QCarouselControl (Child) Vue Property Type Description position String Position of the control: ‘top’, ‘top-right’, ‘top-left’, ‘bottom-right’, etc offset Array of 2 Numbers Offset on horizontal and vertical (in pixels). Example (default value): [18, 18]. ExamplesCarousel with a base color, Arrows, Quick Navigation, and slides with images&lt;template&gt; &lt;q-carousel color=\"white\" arrows height=\"400px\" &gt; &lt;q-carousel-slide img-src=\"statics/mountains.jpg\"&gt; &lt;div class=\"absolute-bottom custom-caption\"&gt; &lt;div class=\"q-display-1\"&gt;First stop&lt;/div&gt; &lt;div class=\"q-headline\"&gt;Mountains&lt;/div&gt; &lt;/div&gt; &lt;/q-carousel-slide&gt; &lt;q-carousel-slide img-src=\"statics/parallax1.jpg\"&gt; &lt;div class=\"absolute-bottom custom-caption\"&gt; &lt;div class=\"q-display-1\"&gt;Second stop&lt;/div&gt; &lt;div class=\"q-headline\"&gt;Famous City&lt;/div&gt; &lt;/div&gt; &lt;/q-carousel-slide&gt; &lt;q-carousel-slide img-src=\"statics/parallax2.jpg\"&gt; &lt;div class=\"absolute-bottom custom-caption\"&gt; &lt;div class=\"q-display-1\"&gt;Third stop&lt;/div&gt; &lt;div class=\"q-headline\"&gt;Famous Bridge&lt;/div&gt; &lt;/div&gt; &lt;/q-carousel-slide&gt; &lt;/q-carousel&gt;&lt;/template&gt;&lt;style&gt;.custom-caption &#123; text-align: center; padding: 12px; color: $grey-4; background: rgba(0, 0, 0, 0.5);&#125;&lt;/style&gt; Carousel with image slides and thumbnails Requires Quasar v0.15.11+ &lt;q-carousel color=\"white\" arrows quick-nav height=\"300px\" :thumbnails=\"[ 'statics/mountains.jpg', 'statics/parallax1.jpg', 'statics/parallax2.jpg' ]\"&gt; &lt;q-carousel-slide img-src=\"statics/mountains.jpg\" /&gt; &lt;q-carousel-slide img-src=\"statics/parallax1.jpg\" /&gt; &lt;q-carousel-slide img-src=\"statics/parallax2.jpg\" /&gt;&lt;/q-carousel&gt; Horizontal thumbnails:&lt;q-carousel :thumbnails=\"....\" thumbnails-horizontal&gt; ...&lt;/q-carousel&gt;### Infinite scroll, auto-play and custom Quick Navigation icon. Second slide has a Youtube video.Use `infinite` Vue prop.``` html&lt;q-carousel color=\"white\" arrows quick-nav quick-nav-icon=\"favorite\" infinite autoplay height=\"300px\"&gt; &lt;q-carousel-slide img-src=\"statics/mountains.jpg\" /&gt; &lt;q-carousel-slide&gt; &lt;q-video class=\"absolute-full\" src=\"https://www.youtube.com/embed/k3_tw44QsZQ?rel=0\" /&gt; &lt;/q-carousel-slide&gt; &lt;q-carousel-slide img-src=\"statics/parallax1.jpg\" /&gt; &lt;q-carousel-slide img-src=\"statics/parallax2.jpg\" /&gt;&lt;/q-carousel&gt; Custom Quick Navigation and different type of slides contentThird slide has a Youtube video.&lt;q-carousel color=\"white\" quick-nav height=\"300px\"&gt; &lt;q-carousel-slide class=\"text-white bg-primary row flex-center\"&gt; &lt;div class=\"q-display-2\"&gt;First Slide&lt;/div&gt; &lt;/q-carousel-slide&gt; &lt;q-carousel-slide class=\"text-white bg-secondary row flex-center\"&gt; &lt;div class=\"q-display-2\"&gt;Second Slide&lt;/div&gt; &lt;/q-carousel-slide&gt; &lt;q-carousel-slide class=\"text-white bg-primary\"&gt; &lt;div v-for=\"n in 7\" :key=\"`custom-$&#123;n&#125;`\" class=\"q-ma-sm\"&gt; &#123;&#123; lorem &#125;&#125; &lt;/div&gt; &lt;/q-carousel-slide&gt; &lt;q-carousel-slide img-src=\"statics/mountains.jpg\" /&gt; &lt;q-carousel-slide&gt; &lt;q-video class=\"absolute-full\" src=\"https://www.youtube.com/embed/k3_tw44QsZQ?rel=0\" /&gt; &lt;/q-carousel-slide&gt; &lt;q-carousel-slide img-src=\"statics/parallax1.jpg\" /&gt; &lt;q-carousel-slide img-src=\"statics/parallax2.jpg\" /&gt; &lt;q-carousel-control slot=\"control-nav\" slot-scope=\"carousel\" :offset=\"[18, 52]\"&gt; &lt;q-btn @click=\"carousel.previous\" :disable=\"!carousel.canGoToPrevious\" color=\"amber\" text-color=\"black\" icon=\"keyboard_arrow_left\" round dense class=\"q-mr-small\" /&gt; &lt;q-btn @click=\"carousel.next\" :disable=\"!carousel.canGoToNext\" color=\"amber\" text-color=\"black\" icon=\"keyboard_arrow_right\" round dense /&gt; &lt;/q-carousel-control&gt; &lt;q-btn slot=\"quick-nav\" slot-scope=\"props\" color=\"white\" flat dense :label=\"`$&#123;props.slide + 1&#125;`\" @click=\"props.goToSlide()\" :class=\"&#123;inactive: !props.current&#125;\" /&gt;&lt;/q-carousel&gt; Using v-model &amp; some custom controls: autoplay button, progressbar, fullscreen toggleControlling from outside of Carousel:&lt;q-btn rounded color=\"primary\" @click=\"slide = 1\" icon=\"arrow_downward\" label=\"Navigate to second slide\" class=\"q-ml-sm\"/&gt;&lt;q-carousel v-model=\"slide\" color=\"amber\" quick-nav infinite :autoplay=\"autoplay\" height=\"400px\"&gt; &lt;q-carousel-slide v-for=\"n in 7\" :key=\"`car-$&#123;n&#125;`\" class=\"flex flex-center\" :class=\"`bg-$&#123;colors[n % 5]&#125;`\" &gt; &lt;div class=\"text-center\"&gt; &lt;div class=\"q-display-3\"&gt;Slide &#123;&#123; n &#125;&#125;&lt;/div&gt; &lt;div&gt;Slides can contain any content.&lt;/div&gt; &lt;/div&gt; &lt;/q-carousel-slide&gt; &lt;q-carousel-control slot=\"control\" position=\"top-right\" :offset=\"[18, 18]\" class=\"text-white\" style=\"background: rgba(0, 0, 0, .3); padding: 4px; border-radius: 4px\" &gt; &lt;q-toggle dark color=\"amber\" v-model=\"autoplay\" label=\"Auto Play\" /&gt; &lt;/q-carousel-control&gt; &lt;q-carousel-control slot=\"control-button\" slot-scope=\"carousel\" position=\"bottom-right\" :offset=\"[18, 22]\" &gt; &lt;q-btn round dense push color=\"amber\" :icon=\"carousel.inFullscreen ? 'fullscreen_exit' : 'fullscreen'\" @click=\"carousel.toggleFullscreen()\" /&gt; &lt;/q-carousel-control&gt; &lt;q-carousel-control slot=\"control-progress\" slot-scope=\"carousel\" position=\"bottom\" :offset=\"[42, 100]\"&gt; &lt;q-progress :percentage=\"carousel.percentage\" stripe color=\"amber\" :animate=\"autoplay\" /&gt; &lt;/q-carousel-control&gt;&lt;/q-carousel&gt; Custom easing animation.&lt;template&gt; &lt;q-carousel class=\"text-white\" :easing=\"overshoot\" infinite autoplay arrows color=\"white\" height=\"250px\" &gt; &lt;q-carousel-slide v-for=\"n in 7\" :key=\"`anim-$&#123;n&#125;`\" class=\"flex flex-center\" :class=\"`bg-$&#123;colors[n % 5]&#125;`\" &gt; &lt;div class=\"q-display-3\"&gt;Slide &#123;&#123; n &#125;&#125;&lt;/div&gt; &lt;/q-carousel-slide&gt; &lt;/q-carousel&gt;&lt;/template&gt;&lt;script&gt;import &#123; easing &#125; from 'quasar'// easing is a collection;// we're picking \"overshoot\" from itexport default &#123; data () &#123; return &#123; overshoot: easing.overshoot &#125; &#125;&#125;&lt;/script&gt; Launching on FullscreenUseful for creating Wizards. &lt;template&gt; &lt;div&gt; &lt;q-btn color=\"primary\" class=\"glossy\" @click=\"modal = true\"&gt; Launch &lt;/q-btn&gt; &lt;q-modal v-model=\"modal\" maximized&gt; &lt;q-carousel color=\"white\" arrows quick-nav class=\"text-white full-height\" &gt; &lt;q-carousel-slide v-for=\"n in 7\" :key=\"`full-$&#123;n&#125;`\" class=\"flex flex-center\" :class=\"`bg-$&#123;colors[n % 5]&#125;`\" &gt; &lt;div class=\"q-display-3\"&gt;Step &#123;&#123; n &#125;&#125;&lt;/div&gt; &lt;/q-carousel-slide&gt; &lt;q-carousel-control slot=\"control-full\" slot-scope=\"carousel\" position=\"bottom-right\" :offset=\"[18, 22]\" &gt; &lt;q-btn rounded push color=\"amber\" icon=\"close\" label=\"Close me\" @click=\"modal = false\" /&gt; &lt;/q-carousel-control&gt; &lt;/q-carousel&gt; &lt;/q-modal&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; modal: false &#125; &#125;&#125;&lt;/script&gt;"},{"title":"Chip","updated":"2018-05-18T22:01:01.006Z","permalink":"https://quasar-framework.org/components/chip.html","text":"The Chip component is basically a simple UI block entity, representing for example more advanced underlying data, such as a contact, in a compact way. Chips can contain entities such as an avatar, text or an icon, optionally having a pointer too. They can also be closed or removed if configured so. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QChip']&#125; Basic UsageSome basic examples: &lt;!-- icon on left side --&gt;&lt;q-chip icon=\"alarm\" color=\"primary\"&gt; q-chip&lt;/q-chip&gt;&lt;!-- icon on right side --&gt;&lt;q-chip icon-right=\"alarm\" color=\"primary\"&gt; q-chip&lt;/q-chip&gt;&lt;!-- avatar on left side --&gt;&lt;q-chip avatar=\"/statics/some.png\" color=\"primary\"&gt; q-chip&lt;/q-chip&gt;&lt;!-- floating chip applied to a button (v0.15.7+) --&gt;&lt;q-btn round dense color=\"dark\" icon=\"announcement\"&gt; &lt;q-chip floating color=\"red\"&gt;1&lt;/q-chip&gt;&lt;/q-btn&gt; Vue PropertiesThere are a number of properties available: Vue Property Type Description floating Boolean Allows the chip to float over other elements on top-right side of them. tag Boolean Makes it a “tag” type. detail Boolean Highlights the area on the right (icon or avatar), should there be one. icon String Icon for left side. icon-right String Icon for right side. avatar String URL pointing to statics folder for an image which gets placed on left side. small Boolean Reduces the size of the chip. Makes it compact. Use this or “dense”, but not both. dense Boolean (Quasar v0.15.7+) Makes chip small, with minimum padding. Use this or “small”, but not both. square Boolean Gives the chip right-angled corners. Rounded corners are default. pointing String Adds a carat to the chip, pointing either up, right, down or left. color String The color the chip should be. text-color String Override the text color of the chip. closable Boolean Adds a close button to the right of the chip, which when clicked, will emit @hide event. Vue Events Vue Property Description @hide The close button has been clicked/tapped. @focus The chip has been focused. @click Chip has been clicked/tapped outside of close button. When using closable property a close button will be displayed on the right side. When clicking/tapping on the button the @hide event will be triggered. This does not removes the chip by itself. You will have to handle it yourself. The two events fire independently but not both simultaneously, depending on where the user has clicked/tapped (on close button or anywhere else within the Chip). More ExamplesYou can add the ability to hide the chip too.&lt;q-chip closable color=\"red\"&gt; Joe&lt;/q-chip&gt; You can also use a chip to label a button.&lt;q-btn color=\"light\" label=\"Inbox\"&gt; &lt;q-chip floating color=\"primary\"&gt;22&lt;/q-chip&gt;&lt;/q-btn&gt; Or to label anything you want, as long as the container has position: relative (hint: use relative-position Quasar CSS helper class):&lt;div class=\"relative-position\"&gt; ....content... &lt;q-chip floating color=\"primary\"&gt;22&lt;/q-chip&gt;&lt;/div&gt; You can also use chips as pointing labels.&lt;q-chip pointing=\"up\" color=\"primary\"&gt; Pointing Up&lt;/q-chip&gt; You can create advanced label chips, with an avatar/image and a closeable button to delete the chip.&lt;q-chip closable avatar=\"statics/some.png\" color=\"red\"&gt; Joe&lt;/q-chip&gt; You can also create chips that look like tags. &lt;q-chip tag color=\"secondary\" icon-right=\"mail\"&gt; New&lt;/q-chip&gt; This chip highlights the icon by using the detail property. &lt;q-chip tag color=\"secondary\" detail icon=\"mail\"&gt; 10 emails&lt;/q-chip&gt; One more example where we add a shadow to a chip:&lt;q-chip class=\"shadow-1\" square color=\"primary\"&gt;10k&lt;/q-chip&gt;"},{"title":"Collapsible (+ Accordion)","updated":"2018-09-13T11:16:30.853Z","permalink":"https://quasar-framework.org/components/collapsible.html","text":"Quasar Collapsibles allow the hiding of content that is not immediately relevant to the user. Think of them as accordion elements that expand when clicked on. They are basically QItem components wrapped with additional functionality. So they can be included in QLists and inherit QItem component properties. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QCollapsible']&#125; Basic Usage&lt;q-list&gt; &lt;q-collapsible icon=\"explore\" label=\"First\"&gt; &lt;div&gt; Content &lt;/div&gt; &lt;/q-collapsible&gt; &lt;q-collapsible icon=\"perm_identity\" label=\"Second\"&gt; &lt;div&gt; Content &lt;/div&gt; &lt;/q-collapsible&gt; &lt;q-collapsible icon=\"shopping_cart\" label=\"Third\"&gt; &lt;div&gt; Content &lt;/div&gt; &lt;/q-collapsible&gt;&lt;/q-list&gt; AccordionYou can group multiple Collapsibles to act as an Accordion, which is to open only one Collapsible at a time while closing the others automatically. For this, use group Vue property and specify a unique name within the Vue parent container of the Collapsibles.&lt;q-list&gt; &lt;q-collapsible group=\"somegroup\" icon=\"explore\" label=\"First\"&gt; &lt;div&gt; Content &lt;/div&gt; &lt;/q-collapsible&gt; &lt;q-collapsible group=\"somegroup\" icon=\"perm_identity\" label=\"Second\"&gt; &lt;div&gt; Content &lt;/div&gt; &lt;/q-collapsible&gt; &lt;q-collapsible group=\"somegroup\" icon=\"shopping_cart\" label=\"Third\"&gt; &lt;div&gt; Content &lt;/div&gt; &lt;/q-collapsible&gt;&lt;/q-list&gt; Vue PropertiesSince QCollapsible is a wrapper over QItem components, it inherits some of their properties as you can see below. Supports v-model to control the state (open/close). Own Property Type Description opened Boolean Control if Collapsible is opened or not when first rendered. group String Unique name which allows to group multiple Collapsible so they work as an Accordion. popup Boolean “Popup” mode instead of default behavior. indent Boolean Indent Collapsible content. Useful when building a menu with it. icon-toggle Boolean Expand/Contract only by clicking/tapping on the arrow on the right. collapse-icon String Icon used instead of default arrow on the right side. header-style Array/String/Object Vue style binding for header. header-class Array/String/Object Vue class binding for header. disable Boolean Disable current Collapsible. duration Number (v0.17.13+) Toggle animation duration in milliseconds. Default: 300 tag Boolean Tag to use. Default is “div”. QItem &amp; QItem related components inherited properties: Inherited Property Type Description dark Boolean Set to true when background is dark. icon, right-icon String Icon to use. Either use an icon, image, avatar or letter. image, right-image String URL to image to use (point to statics). Either use an icon, image, avatar or letter. avatar, right-avatar String URL to avatar to use (point to statics). Either use an icon, image, avatar or letter. letter, right-letter String One character String to define a letter. Either use an icon, image, avatar or letter. label String Label to use as title. sublabel String Label to use as subtitle. label-lines String / Number Number of lines the label can span to. Ellipsis are used when overflowing. sublabel-lines String / Number Number of lines the sublabel can span to. Ellipsis are used when overflowing. dense Boolean Use a dense QItem. sparse Boolean Use a sparse QItem. multiline Boolean Use a multiline QItem. Useful in cases where you use label and sublabel that spans multiple lines, but even then it’s optional. separator Boolean Use a separator from other QItems or QCollapsibles, just like on QItem. inset-separator Boolean Inset separator, same behavior as separator. Using QCollapsible as a Router Linkv0.17.9+ If you want your QCollapsible to act the same as Vue’s &lt;router-link&gt;, then you can use these additional properties (which work exactly the same as &lt;router-link&gt;): Property Type Description to String / Object Route to navigate to exact Boolean Match the exact route specified (and not also its children) when adding router-link-active CSS class. append Boolean Append route definition to current route when navigating. replace Boolean Replaces current route with the new one instead of adding it to the window history queue. For more details on these properties, please refer to the Vue Router documentation. NOTEWhen you use a QCollapsible as a Router Link then the user will be able to toggle it only by clicking on the right-side icon. The rest of QCollapsible space is used to trigger the navigation. &lt;q-collapsible to=\"/some/page\" icon=\"explore\" label=\"First\"&gt; &lt;div&gt; Content &lt;/div&gt;&lt;/q-collapsible&gt; Vue Methods Vue Methods Description toggle() Toggle open/close state. show() Open it. hide() Close it. Vue Events Vue Method Description @show Triggered after opening Collapsible. @hide Triggered after closing Collapsible. ExamplesUsing a v-model&lt;template&gt; &lt;q-collapsible v-model=\"open\" icon=\"perm_identity\" label=\"With a model and events\" &gt; &lt;div&gt;...content...&lt;/div&gt; &lt;/q-collapsible&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; open: true &#125; &#125;, methods: &#123; toggle () &#123; this.open = !this.open &#125; &#125;&#125;&lt;/script&gt; Custom Header&lt;q-collapsible&gt; &lt;template slot=\"header\"&gt; &lt;q-chip color=\"primary\" small class=\"q-mr-sm\"&gt; Custom header &lt;/q-chip&gt; &lt;q-item-main label=\"using slot\" /&gt; &lt;q-item-side right&gt; &lt;q-icon name=\"star\" color=\"red\" size=\"24px\" /&gt; &lt;/q-item-side&gt; &lt;/template&gt; &lt;div&gt;Collapsible content&lt;/div&gt;&lt;/q-collapsible&gt; Popup Mode&lt;q-collapsible popup icon=\"mail\" label=\"Inbox\" sublabel=\"5 unread emails\"&gt; &lt;div&gt;...content...&lt;/div&gt;&lt;/q-collapsible&gt;&lt;q-collapsible popup icon=\"send\" label=\"Outbox\" sublabel=\"Empty\"&gt; &lt;div&gt;...content...&lt;/div&gt;&lt;/q-collapsible&gt; Creating a Menu&lt;q-list separator&gt; &lt;q-collapsible indent icon=\"mail\" label=\"Inbox\" sublabel=\"5 unread emails\" opened&gt; &lt;q-collapsible indent icon=\"receipt\" label=\"Receipts\"&gt; &lt;q-collapsible label=\"Today\"&gt; &lt;div&gt;...content...&lt;/div&gt; &lt;/q-collapsible&gt; &lt;q-collapsible label=\"Yesterday\"&gt; &lt;div&gt;...content...&lt;/div&gt; &lt;/q-collapsible&gt; &lt;/q-collapsible&gt; &lt;q-collapsible indent icon=\"schedule\" label=\"Postponed\"&gt; &lt;div&gt;...content...&lt;/div&gt; &lt;/q-collapsible&gt; &lt;/q-collapsible&gt; &lt;q-collapsible indent icon=\"send\" label=\"Outbox\" sublabel=\"Empty\"&gt; &lt;q-collapsible label=\"Today\"&gt; &lt;div&gt;...content...&lt;/div&gt; &lt;/q-collapsible&gt; &lt;q-collapsible label=\"Yesterday\"&gt; &lt;div&gt;...content...&lt;/div&gt; &lt;/q-collapsible&gt; &lt;/q-collapsible&gt; &lt;q-collapsible indent icon=\"drafts\" label=\"Draft\" sublabel=\"Draft a new email\"&gt; &lt;div&gt;...content...&lt;/div&gt; &lt;/q-collapsible&gt;&lt;/q-list&gt; Preselecting ItemsCollapsible items can be opened by default: &lt;q-collapsible opened icon=\"explore\" label=\"First\"&gt; &lt;div&gt; Content &lt;/div&gt;&lt;/q-collapsible&gt;&lt;!-- or --&gt;&lt;q-collapsible :opened=\"boolean_variable\" icon=\"explore\" label=\"First\"&gt; &lt;div&gt; Content &lt;/div&gt;&lt;/q-collapsible&gt; Indenting ContentWhen you are building a complex menu (with sub-menus), like for example on a Left or Right side of QLayout, it’s useful to also have some kind of left-side indentation on the Collapsible content: &lt;q-collapsible indent icon=\"explore\" label=\"First\"&gt; &lt;q-item link ...&gt;...&lt;/q-item&gt; &lt;q-item link ...&gt;...&lt;/q-item&gt; &lt;q-item link ...&gt;...&lt;/q-item&gt;&lt;/q-collapsible&gt; Making Use of Events&lt;template&gt; &lt;q-collapsible indent icon=\"explore\" label=\"Counter\" @show=\"startCounting\" @hide=\"stopCounting\" &gt; &lt;div&gt; &lt;q-chip color=\"secondary\"&gt; Counting: &#123;&#123; counter &#125;&#125; &lt;/q-chip&gt; &lt;/div&gt; &lt;div class=\"q-mt-md\"&gt; Will only count when opened, using the show/hide events to control count timer. &lt;/div&gt; &lt;/q-collapsible&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; counter: 0 &#125; &#125;, methods: &#123; startCounting () &#123; this.hndl = setInterval(() =&gt; &#123; this.counter++ &#125;, 1000) &#125;, stopCounting () &#123; clearInterval(this.hndl) &#125; &#125;&#125;&lt;/script&gt; UbiquityBe creative. In the example below we’re using a Card as Collapsible content. &lt;q-collapsible icon=\"explore\" label=\"First Card\" sublabel=\"Contains a Card\"&gt; &lt;q-card&gt; &lt;q-card-title&gt; Card Title &lt;/q-card-title&gt; &lt;q-card-main&gt; Lorem ipsum dolor sit amet, consectetur adipiscing elit. &lt;/q-card-main&gt; &lt;/q-card&gt;&lt;/q-collapsible&gt;"},{"title":"Chips Input","updated":"2018-08-24T12:35:10.605Z","permalink":"https://quasar-framework.org/components/chips-input.html","text":"The Quasar Chips Input allows user to enter a group of text items, which is also editable in the form of quick deletion of the Chips in the list. For more details on Chips used within Chips Input, please refer to its documentation. For autocomplete functionality, also refer to QAutocomplete documentation. Works well with QField for additional functionality such as a helper, error message placeholder and many others. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QChipsInput']&#125; Basic Usage&lt;q-chips-input v-model=\"model\" /&gt;&lt;!-- Disabled --&gt;&lt;q-chips-input v-model=\"model\" disable /&gt;&lt;!-- With floating label --&gt;&lt;q-chips-input v-model=\"model\" float-label=\"Floating Label\" /&gt;&lt;!-- With custom placeholder --&gt;&lt;q-chips-input v-model=\"model\" placeholder=\"Type some names\" /&gt;&lt;!-- On error state --&gt;&lt;q-chips-input v-model=\"model\" error /&gt; The model variable must be an Array. The user can remove a Chip by clicking/tapping on the close icon. Adding a Chip is done by clicking/tapping on the component, typing and then hitting the send icon or &lt;ENTER&gt; key. Pressing Backspace key either removes content of the textfield or if that is empty then the last Chip. Vue PropertiesSupports v-model which should be binded to an Array of Strings in your scope. Vue Property Type Description chips-color String Override default children chips text color. chips-bg-color String Override default children chips background color. add-icon String Override add icon (the one on the right side) to another one. readonly Boolean If readonly user can not add or remove chips. Also note you can use the native DOM attributes of an input: “max-length”, “autocomplete” and so on. Common input field properties: Property Type Description autofocus Boolean Focus input field after rendering component. placeholder String A text to be shown on textfield, mainly to explain what should be entered. loading Boolean Place the default spinner of the theme after textfield to highlight some process takes place in the background. Also note you can use the native DOM attributes of an input: “name”, “max-length”, “autocomplete” and so on. They are applied to the native &lt;input&gt; contained by QChipsInput. Common input frame properties: Property Type Description prefix String A text that should be shown before the textfield. suffix String A text that should be shown after the textfield. float-label String A text label that will “float” up above the input field, once the input field gets focus. stack-label String A text label that will be shown above the input field and is static. color String One from Quasar Color Palette. inverted Boolean Inverted mode. Color is applied to background instead. inverted-light Boolean Inverted mode with a light color. Color is applied to background instead. hide-underline Boolean Hides the bottom border. dark Boolean Is QChipsInput rendered on a dark background? align String One of ‘left’, ‘center’ or ‘right’ which determines the text align within textfield. disable Boolean If set to true, textfield is disabled and the user cannot type anything. warning Boolean If set to true, the component colors are changed to show there is a warning. error Boolean If set to true, the input fields colors are changed to show there is an error. before Array of Objects Icon buttons on left side of input frame. Read below more details. after Array of Objects Icon buttons on right side of input frame. Read below more details. no-parent-field Boolean Avoid trying to connect to a parent QField. upper-case Boolean Transform input to upper case. lower-case Boolean Transform input to lower case. Icon buttonsThis section refers to before and after properties which can add additional buttons as icons to the textfield. Here is the structure of the two properties: &#123; // required icon icon: String, // required function to call when // icon is clicked/tapped handler: Function, // Optional. Show icon button // if model has a value content: Boolean, // Optional. Show icon button // if textfield is marked with error error: Boolean&#125; Examples:&lt;q-chips-input v-model=\"model\" color=\"secondary\" :after=\"[ &#123; icon: 'warning', error: true, handler () &#123; // do something... &#125; &#125; ]\"/&gt; ColoringAs you may have noticed above, there’s a “color”, “chips-color” and “chips-bg-color” along with “inverted”/“inverted-light” and “dark” properties.By default, if you only use “color” then the input frame and Chips will share the color. If there’s also a “chips-color” or “chips-bg-color” specified then the encapsulated chips’ colors will be overwritten.When you want the frame inverted (color is applied to background), then specify “inverted” property. Use “inverted-light” when the color is light.When used on a dark background, specify “dark” property. &lt;!-- Use a color. --&gt;&lt;q-chips-input color=\"secondary\" v-model=\"model\" /&gt;&lt;!-- Use a color on inverted mode (background gets colored). --&gt;&lt;q-chips-input color=\"secondary\" v-model=\"model\" /&gt;&lt;!-- Coloring the encapsulated Chips.--&gt;&lt;q-chips-input color=\"amber\" chips-color=\"yellow\" chips-bg-color=\"black\" inverted-light v-model=\"model\"/&gt;&lt;!-- When we use the component on a dark background, so we specify \"dark\" property.--&gt;&lt;div class=\"bg-grey-9\" style=\"padding: 15px\"&gt; &lt;q-chips-input dark color=\"amber\" v-model=\"model\" /&gt;&lt;/div&gt; Lazy InputVue will soon supply the .lazy modifier for v-model on components too, but until then, you can use the longer equivalent form:&lt;q-chips-input :value=\"model\" @change=\"val =&gt; &#123; model = val &#125;\"/&gt; AutocompleteYou can use QAutocomplete to provide the user a list of values to select from.While the list of found values is open &lt;ENTER&gt; key will select a value from it and add it to the list.If you want to add a value not found in the list either hit the send icon or press &lt;ESC&gt; key to hide the list and then the &lt;ENTER&gt; key.&lt;q-chips-input v-model=\"model\" placeholder=\"Add from list or new ones\"&gt; &lt;q-autocomplete @search=\"search\" @selected=\"selected\" /&gt;&lt;/q-chips-input&gt; Vue Methods Vue Method Description add(value) Adds value to the model. remove(index) Removes value at index in model. focus() Focuses the input text field within Chips Input. select() Selects all textfield text and focuses. clear() Resets the model to an empty string. Vue Events Vue Event Description @input(newVal) Triggered immediately on model value change. @change(newVal) Triggered on lazy model value change. @clear(clearVal) Triggered when the model is cleared. @duplicate(val) Triggered when user tries to add a duplicate value. @add(val) Triggered when user adds a value. @remove({index, value}) Triggered when one Chip is removed. More ExamplesWrapped with QField&lt;q-field icon=\"account_box\" label=\"Birthday\" :count=\"10\" helper=\"Some helper here\"&gt; &lt;q-chips-input float-label=\"Float Label\" v-model=\"model\" /&gt;&lt;/q-field&gt; Usage Inside of a List&lt;q-list&gt; &lt;q-item multiline&gt; &lt;q-item-side icon=\"edit\" /&gt; &lt;q-item-main&gt; &lt;q-chips-input v-model=\"model\" placeholder=\"Type names\"/&gt; &lt;/q-item-main&gt; &lt;/q-item&gt;&lt;/q-list&gt;"},{"title":"Color Input","updated":"2018-08-18T15:39:58.732Z","permalink":"https://quasar-framework.org/components/color-input.html","text":"The Color component provides a method to input colors. There is also one more version available: Color Picker. Works well with QField for additional functionality such as a helper, error message placeholder and many others.You might also want to check Color Utils. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QColor']&#125; Basic Usage&lt;template&gt; &lt;q-color v-model=\"modelHex\" /&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data: () =&gt; (&#123; modelHex: '#C7044B', // and the other types of models: modelHexa: '#F0FF1CBF', modelRgb: &#123; r: 112, g: 204, b: 55 &#125;, modelRgba: &#123; r: 138, g: 36, b: 138, a: 64 &#125; &#125;)&#125; Vue PropertiesSupports v-model which must be a String, Number or Date Object. Vue Property Type Description readonly Boolean If set to true, component is displayed as read-only. display-value String Text to display on input frame. Supersedes ‘placeholder’. hide-underline Boolean Hides the bottom border. popover Boolean Always display with a Popover, regardless of Platform. modal Boolean Always display with a Modal, regardless of Platform. format-model String Data type of model (useful especially when starting out with undefined or null). One of ‘auto’, ‘hex’, ‘rgb’, ‘hexa’, ‘rgba’. placeholder String Placeholder text for input frame to use when model is not set (empty). ok-label String Text for the button to accept the input (when using Modal). cancel-label String Text for the button to cancel input with no change (when using Modal). clearable Boolean If used, the component offers the user an actionable icon to reset the current value to clear-value (if it is set) or otherwise default-value. The icon appears only when the current value matches clear-value/default-value. default-value String/Object Default color for picker when model is not yet set. clear-value String/Object The value to which to reset the field model to when using clearable, unless default-value is specified. Common input frame properties: Property Type Description prefix String A text that should be shown before the value of model. suffix String A text that should be shown after the value of model. float-label String A text label that will “float” up above the input field, once the input field gets focus. stack-label String A text label that will be shown above the input field and is static. color String One from Quasar Color Palette. inverted Boolean Inverted mode. Color is applied to background instead. inverted-light Boolean Inverted mode with a light color. Color is applied to background instead. dark Boolean Is component rendered on a dark background? align String One of ‘left’, ‘center’ or ‘right’ which determines the text align. disable Boolean If set to true, component is disabled and the user cannot change model. warning Boolean If set to true, the input fields colors are changed to show there is a warning. error Boolean If set to true, the input fields colors are changed to show there is an error. before Array of Objects Icon buttons on left side of input frame. Read below more details. after Array of Objects Icon buttons on right side of input frame. Read below more details. no-parent-field Boolean Avoid trying to connect to a parent QField. Lazy InputVue will soon supply the .lazy modifier for v-model on components too, but until then, you can use the longer equivalent form:&lt;q-color :value=\"model\" @change=\"val =&gt; &#123; model = val &#125;\"/&gt; Icon buttonsThis section refers to before and after properties which can add additional buttons as icons to the component. Here is the structure of the two properties: &#123; // required icon icon: String, // required function to call when // icon is clicked/tapped handler: Function, // Optional. Show icon button // if model has a value content: Boolean, // Optional. Show icon button // if model is marked with error error: Boolean&#125; Examples:&lt;!-- Show an icon button (with 'warning' as icon) when there is an error on component (through \"error\" prop)--&gt;&lt;q-color v-model=\"color\" :error=\"error\" :after=\"[ &#123; icon: 'warning', error: true, handler () &#123; // do something... &#125; &#125; ]\"/&gt;&lt;!-- Show an icon button (with 'arrow_forward' as icon) when the model has a non empty value--&gt;&lt;q-color v-model=\"color\" :after=\"[ &#123; icon: 'arrow_forward', content: true, handler () &#123; // do something... &#125; &#125; ]\"/&gt; Vue Methods Vue Method Description show() Show Popover (on desktop) and Dialog (on mobile) to select date and/or time. Returns a Promise. hide() Hide Popover (on desktop) and Dialog (on mobile) to select date and/or time and execute Function after it’s been hidden. Returns a Promise. toggle() Toggle the Popover or Modal. clear() Sets model to empty string (removes current value). Vue Events Vue Event Description @input(newVal) Triggered on immediate model value change. @change(newVal) Triggered on lazy model value change. @clear(clearVal) Triggered when the model is cleared. @blur Triggered when the modal/ popup is closed. @focus Triggered when the modal/ popup is opened. More ExamplesColoringUse the color and inverted/inverted-light props to control the color.&lt;q-color color=\"amber-7\" float-label=\"Float Label\" v-model=\"model\"/&gt;&lt;q-color inverted color=\"primary\" float-label=\"Float Label\" v-model=\"model\"/&gt; Also, if QColor is displayed on a dark background, add the dark property.&lt;q-color dark color=\"secondary\" /&gt;"},{"title":"Color Palette","updated":"2018-08-31T13:28:31.589Z","permalink":"https://quasar-framework.org/components/color-palette.html","text":"Quasar Framework offers a wide selection of colors out of the box. You can use them both as Stylus variables in your CSS code or directly as CSS classes in your HTML templates. This page comes in really handy after reading Quasar Theming. You might also want to check Color Utils. Brand ColorsThere can be three main colors used throughout your App, called primary, secondary and tertiary. Most of the colors that Quasar Components use are strongly linked with these three colors that you can change. Choosing these colors is the first step one should take when differentiating the design of an App. You’ll notice immediately upon changing their default values that Quasar Components follow these colors as a guideline. Color ListHere’s the list of colors provided out of the box. Use them as CSS classes (in HTML templates) or as Stylus variables (in &lt;style lang=&quot;stylus&quot;&gt; tags) within your app’s *.vue files. primary, secondary, tertiarypositive, negative, info, warning, white, black, light, dark, faded Colors come in the following preset hues:red, pink, purple, deep-purple, indigo, blue, light-blue, cyan, teal, green, light-green, lime, yellow, amber, orange, deep-orange, brown, grey, blue-grey Example of color variation: red, red-1, red-2, …, red-14. See the demo to get an idea of what variations do to the shade of the color. Variation 11 to 14 are color accents. Using as CSS ClassesUse text- or bg- prefixes as class names to change the color of text or the color of the background. &lt;!-- changing text color --&gt;&lt;p class=\"text-primary\"&gt;....&lt;/p&gt;&lt;!-- changing background color --&gt;&lt;p class=\"bg-positive\"&gt;...&lt;/p&gt; Using Stylus VariablesIn your app’s *.vue files you can use the colors as $primary, $red-1, and so on. &lt;!-- Notice lang=\"stylus\" --&gt;&lt;style lang=\"stylus\"&gt;// \"variables\" is a Webpack alias injected by Quasar CLI@import '~variables'div color $red-1 background-color $grey-5&lt;/style&gt; Adding Your Own ColorsIf you want to use your own colors for your components (let’s say we are adding a color named “brand”) all you need to do is add the following CSS into your app: .text-brand &#123; color: #a2aa33;&#125;.bg-brand &#123; background: #a2aa33;&#125; Now we can use this color for Quasar components:&lt;q-input color=\"brand\" ... /&gt; Dynamic Change of Brand Colors (Dynamic Theme Colors) WARNINGThis is only supported on browsers that support CSS Variables (Custom Properties).It is not going to work on IE11, but it will fall back to the brand colors from the CSS theme. This feature requires Quasar v0.15.7+ You can dynamically customize the brand colors during run-time: primary, secondary, tertiary, positive, negative, info, warning, light, dark, faded. That means you can have one build of your application with a default color theme but show it with a runtime selected one. The main color configuration is done using CSS custom properties, stored on the root element (:root). Each property has a name of --q-color-${name} (example: --q-color-primary, --q-color-secondary) and should have a valid CSS color as value. The CSS Custom properties use the same inheritance rules as normal CSS, so you can only redefine your desired colors and the rest will be inherited from the parent elements. The recommended workflow is to set your customized color properties on the html (document.documentElement) or body (document.body) elements. This will allow you to revert to the default color by just deleting your custom one. More info on CSS custom properties (variables): https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables Helper - setBrandQuasar offers a helper function for setting custom colors in the colors utils: setBrand(colorName, colorValue[, element]) Parameter Type Required Description colorName String Yes One of primary, secondary, tertiary, positive, negative, info, warning, light, dark, faded colorValue String Yes Valid CSS color value element Element - (Default: document.body) Element where the custom property will be set. Example of setting brand colors using the helper: import &#123; colors &#125; from 'quasar'colors.setBrand('light', '#DDD')colors.setBrand('primary', '#33F')colors.setBrand('primary', '#F33', document.getElementById('rebranded-section-id')) The helper function will also take care of setting dependent custom properties for some colors (positive, negative, light), so this is the recommended way of usage instead of the raw Javascript setProperty(). Helper - getBrandQuasar offers a helper function for setting custom colors in the colors utils: getBrand(colorName[, element]) Parameter Type Required Description colorName String Yes One of primary, secondary, tertiary, positive, negative, info, warning, light, dark, faded element Element - (Default: document.body) Element where the custom property will be read. Example of getting brand colors using the helper: import &#123; colors &#125; from 'quasar'colors.getBrand('primary') // '#33F'colors.getBrand('primary', document.getElementById('rebranded-section-id')) What this helper does is wrap the raw Javascript getPropertyValue() and it’s available for convenience. Here is an example of equivalent vanilla Javascript: // equivalent of colors.getBrand('primary') in raw Javascript:getComputedStyle(document.documentElement) .getPropertyValue('--q-color-primary') // #0273d4 Setting Up DefaultsQuasar v0.17+; Not supported by IE11 Should you wish to set up some brand colors without tampering with the Stylus variables, you can do so in quasar.conf.js: // quasar.conf.jsreturn &#123; framework: &#123; config: &#123; brand: &#123; primary: &apos;#ff0000&apos;, // ... &#125; &#125; &#125;&#125; This is especially useful when you use the Quasar UMD version, where you would place the global quasarConfig Object before your Quasar script tag. &lt;script&gt; // optional window.quasarConfig = &#123; brand: &#123; primary: '#ff0000', // ... &#125; &#125;&lt;/script&gt;"},{"title":"Color Picker","updated":"2018-07-25T14:14:24.658Z","permalink":"https://quasar-framework.org/components/color-picker.html","text":"The ColorPicker component provides a method to input colors. There is also one more version available: Color Input. Works well with QField for additional functionality such as a helper, error message placeholder and many others.You might also want to check Color Utils. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QColorPicker']&#125; Basic Usage&lt;template&gt; &lt;q-color-picker v-model=\"modelHex\" /&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data: () =&gt; (&#123; modelHex: '#C7044B', // and the other types of models: modelHexa: '#F0FF1CBF', modelRgb: &#123; r: 112, g: 204, b: 55 &#125;, modelRgba: &#123; r: 138, g: 36, b: 138, a: 64 &#125; &#125;)&#125; Vue PropertiesSupports v-model which must be a String, Number or Date Object. Vue Property Type Description dark Boolean Is component rendered on a dark background? default-value String/Object Default color hex/rgb for picker when model is not yet set. format-model String Data type of model (useful especially when starting out with undefined or null). One of ‘auto’, ‘hex’, ‘rgb’, ‘hexa’, ‘rgba’. readonly Boolean If set to true, component is displayed as read-only. disable Boolean If set to true, component is disabled and the user cannot change model. no-parent-field Boolean Avoid trying to connect to a parent QField. Lazy InputVue will soon supply the .lazy modifier for v-model on components too, but until then, you can use the longer equivalent form:&lt;q-color-picker :value=\"model\" @change=\"val =&gt; &#123; model = val &#125;\"/&gt; Vue Methods Vue Method Description clear() Sets model to empty string (removes current value). Vue Events Vue Event Description @input(newVal) Triggered on immediate model value change. @change(newVal) Triggered on lazy model value change. More ExamplesColoringUse the color and inverted/inverted-light props to control the color.&lt;q-color-picker color=\"amber-7\" float-label=\"Float Label\" v-model=\"model\"/&gt;&lt;q-color-picker inverted color=\"primary\" float-label=\"Float Label\" v-model=\"model\"/&gt; Also, if QColor is displayed on a dark background, add the dark property.&lt;q-color-picker dark color=\"secondary\" /&gt;"},{"title":"Color Utils","updated":"2018-07-25T14:14:24.659Z","permalink":"https://quasar-framework.org/components/color-utils.html","text":"Quasar provides a set of useful functions to manipulate colors easily in most use cases, without the high additional cost of integrating dedicated libraries. Helping Tree-ShakeYou will notice all examples import colors Object from Quasar. However, if you need only one method from it, then you can use ES6 destructuring to help Tree Shaking embed only that method and not all of colors. Example with setBrand():// we import all of `colors`import &#123; colors &#125; from 'quasar'// destructuring to keep only what is neededconst &#123; setBrand &#125; = colorssetBrand('primary', '#f33') Color ConversionThese functions take a color as string or Object and convert it to another format. Function Source format Destination format Description rgbToHex Object String Converts a RGB/A color Object ({ r: [0-255], g: [0-255], b: [0-255}&lt;, a: [0-100]&gt;}) to it’s HEX/A representation as a String (#RRGGBB&lt;AA&gt;). If Alpha channel is present in the original object it will be present also in the output. rgbToHsv Object Object Converts a RGB/A color Object ({ r: [0-255], g: [0-255], b: [0-255}&lt;, a: [0-100]&gt;}) to it’s HSV/A representation as an Object ({ h: [0-360], s: [0-100], v: [0-100}, a: [0-100]}). If Alpha channel is present in the original object it will be present also in the output. hexToRgb String Object Converts a HEX/A color String (#RRGGBB&lt;AA&gt;) to it’s RGB/A representation as an Object ({ r: [0-255], g: [0-255], b: [0-255}&lt;, a: [0-100]&gt;}) to it’s . If Alpha channel is present in the original object it will be present also in the output. textToRgb String Object Converts a HEX/A color String (#RRGGBB&lt;AA&gt;) or a RGB/A color String(rgb(R, G, B&lt;, A&gt;)) to it’s RGB/A representation as an Object ({ r: [0-255], g: [0-255], b: [0-255}&lt;, a: [0-100]&gt;}) to it’s . If Alpha channel is present in the original object it will be present also in the output. hsvToRgb String Object Converts a HSV/A color Object ({ h: [0-360], s: [0-100], v: [0-100}, a: [0-100]}) to it’s RGB/A representation as an Object ({ r: [0-255], g: [0-255], b: [0-255}&lt;, a: [0-100]&gt;}) to it’s . If Alpha channel is present in the original object it will be present also in the output. Color ProcessingThese functions perform changes on the color or extract specific information. lighten (color, percent)Lighten the color (if percent is positive) or darken it (if percent is negative). Accepts a HEX/A String or a RGB/A String as color and a percent (0 to 100 or -100 to 0) of lighten/darken to be applied to the color.Returns a HEX String representation of the calculated color. luminosity (color)Calculates the relative luminance of the color. Accepts a HEX/A String, a RGB/A String or a RGB/A Object as color.Returns a value between 0 and 1. Dynamic Change of Brand Colors (Dynamic Theme Colors) WARNINGThis is only supported on browsers that support CSS Variables (Custom Properties).It is not going to work on IE11, but it will fall back to the brand colors from the CSS theme. This feature requires Quasar v0.15.7+ You can dynamically customize the brand colors during run-time: primary, secondary, tertiary, positive, negative, info, warning, light, dark, faded. That means you can have one build of your application with a default color theme but show it with a runtime selected one. The main color configuration is done using CSS custom properties, stored on the root element (:root). Each property has a name of --q-color-${name} (example: --q-color-primary, --q-color-secondary) and should have a valid CSS color as value. The CSS Custom properties use the same inheritance rules as normal CSS, so you can only redefine your desired colors and the rest will be inherited from the parent elements. The recommended workflow is to set your customized color properties on the html (document.documentElement) or body (document.body) elements. This will allow you to revert to the default color by just deleting your custom one. More info on CSS custom properties (variables): https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables Helper - setBrandQuasar offers a helper function for setting custom colors in the colors utils: setBrand(colorName, colorValue[, element]) Parameter Type Required Description colorName String Yes One of primary, secondary, tertiary, positive, negative, info, warning, light, dark, faded colorValue String Yes Valid CSS color value element Element - (Default: document.body) Element where the custom property will be set. Example of setting brand colors using the helper: import &#123; colors &#125; from 'quasar'colors.setBrand('light', '#DDD')colors.setBrand('primary', '#33F')colors.setBrand('primary', '#F33', document.getElementById('rebranded-section-id')) The helper function will also take care of setting dependent custom properties for some colors (positive, negative, light), so this is the recommended way of usage instead of the raw Javascript setProperty(). Helper - getBrandQuasar offers a helper function for getting custom colors in the colors utils: getBrand(colorName[, element]) Parameter Type Required Description colorName String Yes One of primary, secondary, tertiary, positive, negative, info, warning, light, dark, faded element Element - (Default: document.body) Element where the custom property will be read. Example of getting brand colors using the helper: import &#123; colors &#125; from 'quasar'colors.getBrand('primary') // '#33F'colors.getBrand('primary', document.getElementById('rebranded-section-id')) What this helper does is wrap the raw Javascript getPropertyValue() and it’s available for convenience. Example of equivalent raw Javascript: // equivalent of colors.getBrand('primary') in raw Javascript:getComputedStyle(document.documentElement) .getPropertyValue('--q-color-primary') // #0273d4 Create Dynamic Custom ColorsYou can use setBrand and getBrand to define custom brand colors to use in your application.An example of such a new custom color usage: $primary-darkened = darken($primary, 10%):root --q-color-primary-darkened $primary-darkened.text-primary-darkened color $primary-darkened !important color var(--q-color-primary-darkened) !important.bg-primary-darkened background $primary-darkened !important background var(--q-color-primary-darkened) !important import &#123; colors &#125; from 'quasar'const &#123; lighten, setBrand &#125; = colorsconst newPrimaryColor = '#933'setBrand('primary', newPrimaryColor)setBrand('primary-darkened', lighten(newPrimaryColor, -10))"},{"title":"Context Menu","updated":"2018-11-07T17:15:51.798Z","permalink":"https://quasar-framework.org/components/context-menu.html","text":"This component allows you to display a context menu (popup) instead of the default browser one when user performs a right-click (or long tap on touch capable devices). InstallationEdit /quasar.conf.js:framework: &#123; components: ['QContextMenu'], directives: ['CloseOverlay']&#125; Basic UsageContext menus can contain anything. In the example below, we display a menu. &lt;q-context-menu&gt; &lt;q-list link separator style=\"min-width: 150px; max-height: 300px;\"&gt; &lt;q-item v-close-overlay @click.native=\"showToast()\"&gt; &lt;q-item-main label=\"Label\" sublabel=\"Value\" /&gt; &lt;/q-item&gt; &lt;q-item v-close-overlay @click.native=\"showOtherToast()\"&gt; &lt;q-item-main label=\"Other Label\" sublabel=\"Other Value\" /&gt; &lt;/q-item&gt; &lt;/q-list&gt;&lt;/q-context-menu&gt; The position of the popup is calculated so that it will be displayed on the available screen real estate, switching sides (right/left and/or top/bottom) when necessary.Clicking/Tapping outside of the popup will close the Context Menu. Notice the “v-close-overlay” directive. When applied to any element within a popup (Popover, Modal) like in this case, it closes it. IMPORTANTWhen on a mobile app and user hits the phone/tablet back button, the Context Menu will get closed automatically.When on a desktop browser and user hits the &lt;ESCAPE&gt; key, the Context Menu will get close automatically. Vue Properties Vue Property Type Description disable Boolean Disabled or not QContextMenu also supports a Boolean ‘v-model’ which controls the open/close state. Vue Methods Vue Method Description show() Open Context Menu hide() Close Context Menu Note that you need to pass the original DOM event to the show() method as the first argument to have the context menu show correctly. Vue Events Vue Method Description @show Triggered when showing up. @hide Triggered when closing/hiding."},{"title":"Cookies","updated":"2018-09-13T11:16:30.854Z","permalink":"https://quasar-framework.org/components/cookies.html","text":"This is a wrapper over the standardized document.cookie. NOTEIn addition, you can read and write cookies using JSON objects. InstallationEdit /quasar.conf.js:framework: &#123; plugins: ['Cookies']&#125; Note about SSRWhen building for SSR, use only the $q.cookies form. If you need to use the import { Cookies } from &#39;quasar&#39;, then you’ll need to do it like this: import &#123; Cookies &#125; from 'quasar'// you need access to `ssrContext`function (ssrContext) &#123; const cookies = process.env.SERVER ? Cookies.parseSSR(ssrContext) : Cookies // otherwise we're on client // \"cookies\" is equivalent to the global import as in non-SSR builds&#125; The ssrContext is available in App Plugins or preFetch feature where it is supplied as parameter. The reason for this is that in a client-only app, every user will be using a fresh instance of the app in their browser. For server-side rendering we want the same: each request should have a fresh, isolated app instance so that there is no cross-request state pollution. So Cookies needs to be bound to each request separately. Read a Cookie// outside of a Vue fileimport &#123; Cookies &#125; from 'quasar'var value = Cookies.get('cookie_name') When cookie is not set, the return value is undefined. // inside of a Vue filethis.$q.cookies.get('cookie_name') Read All Cookies// outside of a Vue fileimport &#123; Cookies &#125; from 'quasar'var cookies = Cookies.all() cookies variable will be an object with key-value pairs (cookie_name : cookie_value). // inside of a Vue filethis.$q.cookies.all() Verify if Cookie is Set// outside of a Vue fileimport &#123; Cookies &#125; from 'quasar'(Boolean) Cookies.has('cookie_name') // inside of a Vue filethis.$q.cookies.has('cookie_name') Write a Cookie// outside of a Vue fileimport &#123; Cookies &#125; from 'quasar'Cookies.set('cookie_name', cookie_value, options) options is an Object which can have the following properties: expires, path, domain, secure. They are explained below. // outside of a Vue fileimport &#123; Cookies &#125; from 'quasar'Cookies.set('quasar', 'framework', &#123; secure: true&#125;) // inside of a Vue filethis.$q.cookies.set('cookie_name', cookie_value, options) Option expiresexpires: 10 Define lifetime of the cookie. Value can be a Number which will be interpreted as days from time of creation or a Date object. If omitted, the cookie becomes a session cookie. Option pathpath: '/' Define the path where the cookie is valid. By default the path of the cookie is the path of the page where the cookie was created (standard browser behavior). If you want to make it available for instance across the entire domain use path: ‘/‘. Default: path of page where the cookie was created. Option domaindomain: 'quasar-framework.org' Define the domain where the cookie is valid. Default: domain of page where the cookie was created. Option securesecure: true If true, the cookie transmission requires a secure protocol (HTTPS) and will NOT be sent over HTTP. Default value is false. Remove a Cookie// outside of a Vue fileimport &#123; Cookies &#125; from 'quasar'Cookies.remove('cookie_name') // inside of a Vue filethis.$q.cookies.remove('cookie_name')"},{"title":"Data Table","updated":"2018-10-05T13:17:40.830Z","permalink":"https://quasar-framework.org/components/datatable.html","text":"QTable is a Component that allows you to display data in a tabular manner. Features: Filtering Sorting Single / Multiple rows selection with custom selection actions Pagination (including server-side if required) Total customization of rows and cells through scoped slots Ability to add additional row(s) at top or bottom of data rows Column picker (through QTableColumns component described in one of the sections) Custom top and/or bottom Table controls Responsive design (“dense” mode for narrow windows) InstallationEdit /quasar.conf.js:framework: &#123; components: [ 'QTable', // pick only what you are using from: 'QTh', 'QTr', 'QTd', 'QTableColumns' ]&#125; Basic UsageThis is the most basic QTable:&lt;template&gt; &lt;q-table title=\"Table Title\" :data=\"tableData\" :columns=\"columns\" row-key=\"name\" /&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data: () =&gt; (&#123; columns: [ &#123; name: 'desc', required: true, label: 'Dessert (100g serving)', align: 'left', field: 'name', sortable: true, classes: 'my-class', style: 'width: 500px' &#125;, ... ], tableData: [ &#123; name: 'Frozen Yogurt', calories: 159, fat: 6.0, carbs: 24, protein: 4.0, sodium: 87, calcium: '14%', iron: '1%' &#125;, ... ] &#125;)&#125;&lt;/script&gt; InternationalizationThe default values of the different QTable labels are taken care of by default through Quasar I18n. If your desired language pack is missing, please provide a PR for it. QTable Vue Properties Vue Property Type Description grid Boolean (v0.17+) Use “grid mode”. See example below. data Array of Objects Data containing Array of rows to display. columns Array of Objects (Required) Defining each column’s properties. row-key String (Required) Property name of each row defining a unique data key for the respective rows. pagination Object Use with .sync. Control of the pagination and sorting. Can enable Table “server-mode” by containing rowsNumber property. See next sections for details. rows-per-page-options Array Array of Numbers representing options for user to select how many rows per page should be shown. Example: ‘[3, 5, 7, 0]’. Notice value 0 means “All” and empty array hides the selection. selection String Set selection mode. One of ‘single’, ‘multiple’ or (default) ‘none’. selected Array Use with .sync. Array of unique keys for selected row(s). visible-columns Array Array of Strings containing the ‘name’ column property value of the visible columns. loading Boolean Show a background process is in progress (like fetching data and so on). color String Color of the default Table controls (pagination, checkboxes, …). dark Boolean When using Table on a dark background. dense Boolean Dense Table, when you want to display more data using the same real estate on window. Gets activated by default on narrow windows. title String Title of Table. hide-header Boolean Hide Table header. hide-bottom Boolean Hide Table bottom (usually containing pagination controls). separator String Sets separator for rows/columns/cell. One of ‘horizontal’, ‘vertical’, ‘cell’, ‘none’. table-style String/Array/Object Style for the &lt;table&gt; tag itself. table-class String/Array/Object Classes for the &lt;table&gt; tag itself. filter String Filter String for Table used by filter-method(). filter-method Function When you want a custom filtering method. See next sections for details. sort-method Function When you want a custom filtering method. See next sections for details. binary-state-sort Boolean (v0.17.11+) By default, sorting a column has 3 states (no sort, ascending, descending). By using this property it only allows 2 states (ascending, descending). Label properties are by default defined in Quasar’s i18n, but you can override them: Vue Property Type Description no-data-label String Message to display when no rows are available. no-results-label String Message to display when no rows match the filter. loading-label String Message to display when Table currently has no rows but is in the process of fetching them. selected-rows-label(rowsNumber) Function Function that returns a message (String) to display how many rows are selected. Takes a Number parameter which is the actual rows number that are selected. rows-per-page-label String Override ‘Rows per page:’ message. pagination-label(start,end,total) Function Override default ‘x-y of z’ pagination label. IMPORTANTInitial sorted column, sorting direction &amp; page is configured through the pagination prop. Check the Pagination section below. QTableColumns Vue PropertiesSupports v-model which should be the String for single selection and Array for multiple selection. Vue Property Type Description columns Array of Objects (Required) Defining each column’s properties. label String Overrides text displayed in input frame. See “Working with Display Value” section below. color String One from Quasar Color Palette. dark Boolean Is it rendered on a dark background? Defining the ColumnsLet’s take an example of configuring the columns property. Let’s assume we are telling QTable that row-key is ‘name’.columns: /* array of Objects */ [ // column Object definition &#123; // unique id (used by row-key, pagination.sortBy, ...) name: 'desc', // label for header label: 'Dessert (100g serving)', // row Object property to determine value for this column field: 'name', // OR field: row =&gt; row.some.nested.prop // (optional) if we use visible-columns, this col will always be visible required: true, // (optional) alignment align: 'left', // (optional) tell QTable you want this column sortable sortable: true, // (optional) compare function if you have // some custom data or want a specific way to compare two rows sort: (a, b) =&gt; parseInt(a, 10) - parseInt(b, 10) // function return value: // * is less than 0 then sort a to an index lower than b, i.e. a comes first // * is 0 then leave a and b unchanged with respect to each other, but sorted with respect to all different elements // * is greater than 0 then sort b to an index lower than a, i.e. b comes first // (optional) you can format the data with a function format: val =&gt; `$&#123;val&#125;%` // v0.17.9+; if using scoped slots, apply this yourself instead style: 'width: 500px', classes: 'my-special-class' &#125;, &#123; name: 'calories', label: 'Calories', field: 'calories', sortable: true &#125;, &#123; name: 'fat', label: 'Fat (g)', field: 'fat', sortable: true &#125;, &#123; name: 'carbs', label: 'Carbs (g)', field: 'carbs' &#125;, &#123; name: 'protein', label: 'Protein (g)', field: 'protein' &#125;, &#123; name: 'sodium', label: 'Sodium (mg)', field: 'sodium' &#125;, &#123; name: 'calcium', label: 'Calcium (%)', field: 'calcium', sortable: true, sort: (a, b) =&gt; parseInt(a, 10) - parseInt(b, 10) &#125;, &#123; name: 'iron', label: 'Iron (%)', field: 'iron', sortable: true, sort: (a, b) =&gt; parseInt(a, 10) - parseInt(b, 10) &#125;] IMPORTANTIf your data is nested and you need to fill a column with a certain value in the nested objects, you can grab a property value within the nested objects like so: field: obj =&gt; obj.some.nested.prop PaginationWhen you want to control Table’s pagination, use pagination prop, but don’t forget to add the .sync modifier: &lt;template&gt; &lt;div&gt; &lt;q-table :pagination.sync=\"pagination\" ... /&gt; &lt;q-btn @click=\"pagination.page++\" label=\"Next page\" ... /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data: () =&gt; (&#123; pagination: &#123; sortBy: null, // String, column \"name\" property value descending: false, page: 1, rowsPerPage: 5 // current rows per page being displayed &#125; &#125;)&#125; When pagination has a property named rowsNumber, then this means that you’ll be configuring Table for server-side pagination (&amp; sorting &amp; filtering). Custom Filter Method&lt;template&gt; &lt;q-table :filter=\"terms\" :filter-method=\"myFilter\" ...&lt;/template&gt;&lt;script&gt;export default &#123; data: () =&gt; (&#123; filter: '' &#125;), methods: &#123; // this is actually the default filtering method: myFilter (rows, terms, cols, cellValue) &#123; const lowerTerms = terms ? terms.toLowerCase() : '' return rows.filter( row =&gt; cols.some(col =&gt; (cellValue(col, row) + '').toLowerCase().indexOf(lowerTerms) !== -1) ) &#125; &#125;&#125;&lt;/script&gt; Custom Sort Method&lt;template&gt; &lt;q-table :sort-method=\"mySort\" ...&lt;/template&gt;&lt;script&gt;export default &#123; methods: &#123; // this is actually the default filtering method: mySort (data, sortBy, descending) &#123; const col = this.computedCols.find(def =&gt; def.name === sortBy) if (col === null || col.field === void 0) &#123; return data &#125; const dir = descending ? -1 : 1, val = typeof col.field === 'function' ? v =&gt; col.field(v) : v =&gt; v[col.field] return data.sort((a, b) =&gt; &#123; let A = val(a), B = val(b) if (A === null || A === void 0) &#123; return -1 * dir &#125; if (B === null || B === void 0) &#123; return 1 * dir &#125; if (col.sort) &#123; return col.sort(A, B) * dir &#125; if (isNumber(A) &amp;&amp; isNumber(B)) &#123; return (A - B) * dir &#125; if (isDate(A) &amp;&amp; isDate(B)) &#123; return sortDate(A, B) * dir &#125; if (typeof A === 'boolean' &amp;&amp; typeof B === 'boolean') &#123; return (a - b) * dir &#125; [A, B] = [A, B].map(s =&gt; (s + '').toLowerCase()) return A &lt; B ? -1 * dir : (A === B ? 0 : dir) &#125;) &#125; &#125;&#125;&lt;/script&gt; Popup EditQuasar v0.17.10+ Below is an example with the user being able to edit “in place” with the help of QPopupEdit component. Please note that we are using the “body” scoped slot. QPopupEdit won’t work with cell scoped slots.&lt;q-table :data=\"data\" :columns=\"columns\" :filter=\"filter\" :title=\"title\" row-key=\"name\"&gt; &lt;q-tr slot=\"body\" slot-scope=\"props\" :props=\"props\"&gt; &lt;q-td key=\"desc\" :props=\"props\"&gt; &#123;&#123; props.row.name &#125;&#125; &lt;q-popup-edit v-model=\"props.row.name\"&gt; &lt;q-field count&gt; &lt;q-input v-model=\"props.row.name\" /&gt; &lt;/q-field&gt; &lt;/q-popup-edit&gt; &lt;/q-td&gt; &lt;q-td key=\"calories\" :props=\"props\"&gt; &#123;&#123; props.row.calories &#125;&#125; &lt;q-popup-edit v-model=\"props.row.calories\" title=\"Update calories\" buttons&gt; &lt;q-input type=\"number\" v-model=\"props.row.calories\" /&gt; &lt;/q-popup-edit&gt; &lt;/q-td&gt; &lt;q-td key=\"fat\" :props=\"props\"&gt;&#123;&#123; props.row.fat &#125;&#125;&lt;/q-td&gt; &lt;q-td key=\"carbs\" :props=\"props\"&gt;&#123;&#123; props.row.carbs &#125;&#125;&lt;/q-td&gt; &lt;q-td key=\"protein\" :props=\"props\"&gt;&#123;&#123; props.row.protein &#125;&#125;&lt;/q-td&gt; &lt;q-td key=\"sodium\" :props=\"props\"&gt;&#123;&#123; props.row.sodium &#125;&#125;&lt;/q-td&gt; &lt;q-td key=\"calcium\" :props=\"props\"&gt;&#123;&#123; props.row.calcium &#125;&#125;&lt;/q-td&gt; &lt;q-td key=\"iron\" :props=\"props\"&gt;&#123;&#123; props.row.iron &#125;&#125;&lt;/q-td&gt; &lt;/q-tr&gt;&lt;/q-table&gt; QTable Vue Events Vue Event Parameters Description @request Object { pagination, filter, getCellValue } Gets triggered when using server-side pagination (pagination property Object contains rowsNumber) @fullscreen Boolean (true/false) (v0.17.7+) Emitted when Fullscreen state gets toggled. Server-side Pagination, Filtering, SortingWhen your database contains a big number of rows for a Table, obviously it’s not feasible to load them all for multiple reasons (memory, UI rendering performance, …). Instead, you can load only a Table page. Whenever the user wants to navigate to another Table page, or wants to sort by a column or wants to filter the Table, a request is sent to the server to fetch the partial data. First step to enable this behavior is to specify pagination prop, which MUST contain rowsNumber. QTable needs to know the total number of rows available in order to correctly render the pagination links. Second step is to listen for @request event on QTable. This event is triggered when data needs to be fetched from the server because either page number or sorting or filtering changed. It’s best that you also specify the loading prop in order to notify the user that a background process is in progress. &lt;template&gt; &lt;q-table ref=\"table\" :data=\"serverData\" :columns=\"columns\" :filter=\"filter\" row-key=\"name\" :pagination.sync=\"serverPagination\" :loading=\"loading\" @request=\"request\" &gt; &lt;template slot=\"top-right\" slot-scope=\"props\"&gt; &lt;q-search hide-underline v-model=\"filter\" /&gt; &lt;/template&gt; &lt;/q-table&gt;&lt;/template&gt;&lt;script&gt;import tableData from 'assets/table-data'export default &#123; data () &#123; return &#123; filter: '', loading: false, serverPagination: &#123; page: 1, rowsNumber: 10 // specifying this determines pagination is server-side &#125;, serverData: [], columns: [ &#123; name: 'desc', required: true, label: 'Dessert (100g serving)', align: 'left', field: 'name', sortable: true &#125;, &#123; name: 'calories', label: 'Calories', field: 'calories', sortable: true &#125;, &#123; name: 'fat', label: 'Fat (g)', field: 'fat', sortable: true &#125;, &#123; name: 'carbs', label: 'Carbs (g)', field: 'carbs' &#125;, &#123; name: 'protein', label: 'Protein (g)', field: 'protein' &#125;, &#123; name: 'sodium', label: 'Sodium (mg)', field: 'sodium' &#125;, &#123; name: 'calcium', label: 'Calcium (%)', field: 'calcium', sortable: true, sort: (a, b) =&gt; parseInt(a, 10) - parseInt(b, 10) &#125;, &#123; name: 'iron', label: 'Iron (%)', field: 'iron', sortable: true, sort: (a, b) =&gt; parseInt(a, 10) - parseInt(b, 10) &#125; ] &#125; &#125;, methods: &#123; request (&#123; pagination, filter &#125;) &#123; // we set QTable to \"loading\" state this.loading = true // we do the server data fetch, based on pagination and filter received // (using Axios here, but can be anything; parameters vary based on backend implementation) axios .get(`/data/$&#123;pagination.page&#125;?sortBy=$&#123;pagination.sortBy&#125;&amp;descending=$&#123;pagination.descending&#125;&amp;filter=$&#123;filter&#125;`) .then((&#123; data &#125;) =&gt; &#123; // updating pagination to reflect in the UI this.serverPagination = pagination // we also set (or update) rowsNumber this.serverPagination.rowsNumber = data.rowsNumber // then we update the rows with the fetched ones this.serverData = data.rows // finally we tell QTable to exit the \"loading\" state this.loading = false &#125;) .catch(error =&gt; &#123; // there's an error... do SOMETHING // we tell QTable to exit the \"loading\" state this.loading = false &#125;) &#125; &#125;, mounted () &#123; // once mounted, we need to trigger the initial server data fetch this.request(&#123; pagination: this.serverPagination, filter: this.filter &#125;) &#125;&#125;&lt;/script&gt; Examples - FeaturesFilter, Column selection, Separators, Toggle Fullscreen&lt;template&gt; &lt;q-table :data=\"tableData\" :columns=\"columns\" :filter=\"filter\" :visible-columns=\"visibleColumns\" :separator=\"separator\" row-key=\"name\" color=\"secondary\" &gt; &lt;template slot=\"top-left\" slot-scope=\"props\"&gt; &lt;q-search hide-underline color=\"secondary\" v-model=\"filter\" class=\"col-6\" /&gt; &lt;/template&gt; &lt;template slot=\"top-right\" slot-scope=\"props\"&gt; &lt;q-table-columns color=\"secondary\" class=\"q-mr-sm\" v-model=\"visibleColumns\" :columns=\"columns\" /&gt; &lt;q-select color=\"secondary\" v-model=\"separator\" :options=\"[ &#123; label: 'Horizontal', value: 'horizontal' &#125;, &#123; label: 'Vertical', value: 'vertical' &#125;, &#123; label: 'Cell', value: 'cell' &#125;, &#123; label: 'None', value: 'none' &#125; ]\" hide-underline /&gt; &lt;q-btn flat round dense :icon=\"props.inFullscreen ? 'fullscreen_exit' : 'fullscreen'\" @click=\"props.toggleFullscreen\" /&gt; &lt;/template&gt; &lt;/q-table&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data: () =&gt; (&#123; tableData: [ ... ], columns: [ ... ], visibleColumns: ['desc', 'fat', 'carbs', 'protein', 'sodium', 'calcium', 'iron'], separator: 'horizontal', filter: '' &#125;)&#125;&lt;/script&gt; Grid ModeRequires Quasar v0.17+ Notice we’ll be using a Vue scoped slot called item to define how each record (the equivalent of a row in non-grid mode) should look. This allows you total freedom. The code below is the equivalent of the demo. Feel free to tweak however you want as all the QTable features are available in grid mode too. In the example below, we hide the header, but you can show it should you want – the user will be able to sort the data by columns etc. &lt;q-table grid hide-header :data=\"data\" :columns=\"columns\" :filter=\"filter\" :selection=\"selection\" :selected.sync=\"selected\" :visible-columns=\"visibleColumns\" row-key=\"name\"&gt; &lt;template slot=\"top-right\" slot-scope=\"props\"&gt; &lt;q-search hide-underline v-model=\"filter\" /&gt; &lt;/template&gt; &lt;div slot=\"item\" slot-scope=\"props\" class=\"q-pa-xs col-xs-12 col-sm-6 col-md-4 col-lg-3 transition-generic\" :style=\"props.selected ? 'transform: scale(0.95);' : ''\" &gt; &lt;q-card class=\"transition-generic\" :class=\"props.selected ? 'bg-grey-2' : ''\"&gt; &lt;q-card-title class=\"relative-position\"&gt; &lt;q-checkbox v-model=\"props.selected\" :label=\"props.row.name\" /&gt; &lt;/q-card-title&gt; &lt;q-card-separator /&gt; &lt;q-card-main class=\"q-pa-none\"&gt; &lt;q-list no-border&gt; &lt;q-item v-for=\"col in props.cols.filter(col =&gt; col.name !== 'desc')\" :key=\"col.name\"&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;&#123;&#123; col.label &#125;&#125;&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;q-item-side right&gt; &lt;q-item-tile&gt;&#123;&#123; col.value &#125;&#125;&lt;/q-item-tile&gt; &lt;/q-item-side&gt; &lt;/q-item&gt; &lt;/q-list&gt; &lt;/q-card-main&gt; &lt;/q-card&gt; &lt;/div&gt;&lt;/q-table&gt; Row selection, Extra top/bottom rows, Loading state&lt;template&gt; &lt;q-table :data=\"tableData\" :columns=\"columns\" :selection=\"selection\" :selected.sync=\"selected\" :loading=\"loading\" row-key=\"name\" color=\"secondary\" :class=\"tableClass\" &gt; &lt;q-tr slot=\"top-row\" slot-scope=\"props\"&gt; &lt;q-td colspan=\"100%\"&gt; &lt;strong&gt;Extra top row&lt;/strong&gt; &lt;/q-td&gt; &lt;/q-tr&gt; &lt;q-tr slot=\"bottom-row\" slot-scope=\"props\"&gt; &lt;q-td colspan=\"100%\"&gt; &lt;strong&gt;Extra bottom row&lt;/strong&gt; &lt;/q-td&gt; &lt;/q-tr&gt; &lt;template slot=\"top-left\" slot-scope=\"props\"&gt; &lt;q-select v-model=\"selection\" stack-label=\"Selection\" hide-underline :options=\"[ &#123; label: 'Single', value: 'single' &#125;, &#123; label: 'Multiple', value: 'multiple' &#125;, &#123; label: 'None', value: 'none' &#125; ]\" color=\"secondary\" style=\"min-width: 100px\" /&gt; &lt;/template&gt; &lt;div slot=\"top-right\" slot-scope=\"props\" class=\"column\"&gt; &lt;q-toggle v-model=\"loading\" label=\"Loading state\" color=\"secondary\" class=\"q-mb-sm\" /&gt; &lt;q-toggle v-model=\"dark\" label=\"On dark background\" color=\"secondary\" /&gt; &lt;/div&gt; &lt;/q-table&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data: () =&gt; (&#123; tableData: [ ... ], columns: [ ... ], loading: false, dark: true, selection: 'multiple', selected: [ // initial selection; notice we specify the // row-key prop of the selected row &#123; name: 'Ice cream sandwich' &#125; ] &#125;)&#125;&lt;/script&gt; Controlling pagination, custom controls &amp; watching for page navigation&lt;template&gt; &lt;q-table :data=\"tableData\" :columns=\"columns\" :pagination.sync=\"paginationControl\" row-key=\"name\" color=\"primary\" &gt; &lt;div slot=\"pagination\" slot-scope=\"props\" class=\"row flex-center q-py-sm\"&gt; &lt;q-btn round dense size=\"sm\" icon=\"undo\" color=\"secondary\" class=\"q-mr-sm\" :disable=\"props.isFirstPage\" @click=\"props.prevPage\" /&gt; &lt;div class=\"q-mr-sm\" style=\"font-size: small\"&gt; Page &#123;&#123; props.pagination.page &#125;&#125; / &#123;&#123; props.pagesNumber &#125;&#125; &lt;/div&gt; &lt;q-btn round dense size=\"sm\" icon=\"redo\" color=\"secondary\" :disable=\"props.isLastPage\" @click=\"props.nextPage\" /&gt; &lt;/div&gt; &lt;/q-table&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data: () =&gt; (&#123; tableData: [ ... ], columns: [ ... ], paginationControl: &#123; rowsPerPage: 3, page: 1 &#125;, &#125;), watch: &#123; 'paginationControl.page' (page) &#123; this.$q.notify(&#123; color: 'secondary', message: `Navigated to page $&#123;page&#125;`, actions: page &lt; 4 ? [&#123; label: 'Go to last page', handler: () =&gt; &#123; this.paginationControl.page = 4 &#125; &#125;] : null &#125;) &#125; &#125;&#125;&lt;/script&gt; Row selection actions&lt;q-table :data=\"tableData\" :columns=\"columns\" selection=\"multiple\" :selected.sync=\"selectedSecond\" row-key=\"name\" color=\"secondary\" title=\"Select some rows\"&gt; &lt;!-- gets displayed only when there's at least one row selected --&gt; &lt;template slot=\"top-selection\" slot-scope=\"props\"&gt; &lt;q-btn color=\"secondary\" flat label=\"Action 1\" class=\"q-mr-sm\" /&gt; &lt;q-btn color=\"secondary\" flat label=\"Action 2\" /&gt; &lt;div class=\"col\" /&gt; &lt;q-btn color=\"negative\" flat round delete icon=\"delete\" @click=\"deleteRow\" /&gt; &lt;/template&gt;&lt;/q-table&gt; Hide header &amp; bottom&lt;q-table :data=\"tableData\" :columns=\"columns\" row-key=\"name\" color=\"primary\" hide-header hide-bottom/&gt; Display a nested property or format a columnYou can display the value of a nested property. For example:columns: [ &#123; name: 'author', label: 'Author', field: row =&gt; row.author.name &#125;] Then you can go even further and format the value for a specific column in your column definition. Example:columns: [ &#123; name: 'author', label: 'Author', field: row =&gt; row.author.name, format: val =&gt; `$&#123;val&#125;%` &#125;] The value returned by field is used for sorting rows, while the format value is specifically meant for displaying a value to the user. This is very useful for cases where you need to sort by the initial value of your data. You can (if you want to), however, avoid the format and use custom scoped slots (row, column cell) for defining how Quasar should format the cell(s). Examples - CustomizationCustom table top &amp; bottom&lt;q-table :data=\"tableData\" :columns=\"columns\" row-key=\"name\" color=\"primary\"&gt; &lt;div slot=\"top\" slot-scope=\"props\" class=\"row flex-center fit\"&gt; &lt;img src=\"~assets/quasar-logo-full.svg\"&gt; &lt;/div&gt; &lt;div slot=\"bottom\" slot-scope=\"props\" class=\"row flex-center fit\"&gt; &lt;q-btn round dense icon=\"chevron_left\" color=\"primary\" class=\"q-mr-md\" :disable=\"props.isFirstPage\" @click=\"props.prevPage\" /&gt; &lt;q-btn round dense icon=\"chevron_right\" color=\"primary\" :disable=\"props.isLastPage\" @click=\"props.nextPage\" /&gt; &lt;/div&gt;&lt;/q-table&gt; Custom column cell&lt;q-table :data=\"tableData\" :columns=\"columns\" row-key=\"name\" color=\"secondary\"&gt; &lt;!-- slot name syntax: body-cell-&lt;column_name&gt; --&gt; &lt;q-td slot=\"body-cell-desc\" slot-scope=\"props\" :props=\"props\"&gt; &lt;q-chip small color=\"secondary\"&gt;&#123;&#123; props.value &#125;&#125;&lt;/q-chip&gt; &lt;/q-td&gt;&lt;/q-table&gt; Custom rows&lt;q-table :data=\"tableData\" :columns=\"columns\" row-key=\"name\"&gt; &lt;q-tr slot=\"body\" slot-scope=\"props\" :props=\"props\"&gt; &lt;q-td key=\"desc\" :props=\"props\"&gt; &lt;span class=\"text-italic\"&gt;&#123;&#123; props.row.name &#125;&#125;&lt;/span&gt; &lt;q-tooltip&gt;I'd like to eat \"&#123;&#123; props.row.name &#125;&#125;\"&lt;/q-tooltip&gt; &lt;/q-td&gt; &lt;q-td key=\"calories\" :props=\"props\"&gt; &lt;div class=\"row items-center justify-between no-wrap\"&gt; &lt;q-btn size=\"sm\" round dense color=\"secondary\" icon=\"remove\" @click=\"props.row.calories--\" class=\"q-mr-xs\" /&gt; &lt;q-btn size=\"sm\" round dense color=\"tertiary\" icon=\"add\" @click=\"props.row.calories++\" class=\"q-mr-sm\" /&gt; &lt;div&gt;&#123;&#123; props.row.calories &#125;&#125;&lt;/div&gt; &lt;/div&gt; &lt;/q-td&gt; &lt;q-td key=\"fat\" :props=\"props\"&gt;&#123;&#123; props.row.fat &#125;&#125;&lt;/q-td&gt; &lt;q-td key=\"carbs\" :props=\"props\"&gt; &lt;q-chip small square color=\"amber\"&gt;&#123;&#123; props.row.carbs &#125;&#125;&lt;/q-chip&gt; &lt;/q-td&gt; &lt;q-td key=\"protein\" :props=\"props\"&gt;&#123;&#123; props.row.protein &#125;&#125;&lt;/q-td&gt; &lt;q-td key=\"sodium\" :props=\"props\"&gt;&#123;&#123; props.row.sodium &#125;&#125;&lt;/q-td&gt; &lt;q-td key=\"calcium\" :props=\"props\"&gt;&#123;&#123; props.row.calcium &#125;&#125;&lt;/q-td&gt; &lt;q-td key=\"iron\" :props=\"props\"&gt; &#123;&#123; props.row.iron &#125;&#125; &lt;/q-td&gt; &lt;/q-tr&gt;&lt;/q-table&gt; Alternative custom rows&lt;q-table :data=\"tableData\" :columns=\"columns\" title=\"Click on a row\" dark class=\"bg-black\" color=\"amber\" row-key=\"name\"&gt; &lt;q-tr slot=\"body\" slot-scope=\"props\" :props=\"props\" @click.native=\"rowClick(props.row)\" class=\"cursor-pointer\"&gt; &lt;q-td v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\"&gt; # &#123;&#123; col.value &#125;&#125; # &lt;/q-td&gt; &lt;/q-tr&gt;&lt;/q-table&gt; Custom header (has tooltips)&lt;q-table :data=\"tableData\" :columns=\"columns\" row-key=\"name\"&gt; &lt;tr slot=\"header\" slot-scope=\"props\"&gt; &lt;q-th key=\"desc\" :props=\"props\"&gt; Dessert &lt;q-tooltip&gt;Pick a desert&lt;/q-tooltip&gt; &lt;/q-th&gt; &lt;q-th key=\"calories\" :props=\"props\"&gt; Calories &lt;q-tooltip&gt;These are the calories&lt;/q-tooltip&gt; &lt;/q-th&gt; &lt;q-th key=\"fat\" :props=\"props\"&gt; Fat &lt;q-tooltip&gt;This is the fat&lt;/q-tooltip&gt; &lt;/q-th&gt; &lt;q-th key=\"carbs\" :props=\"props\"&gt; Carbs &lt;q-tooltip&gt;These are the carbohydrates&lt;/q-tooltip&gt; &lt;/q-th&gt; &lt;q-th key=\"protein\" :props=\"props\"&gt; Protein &lt;q-tooltip&gt;These are the proteins&lt;/q-tooltip&gt; &lt;/q-th&gt; &lt;q-th key=\"sodium\" :props=\"props\"&gt; Sodium &lt;q-tooltip&gt;This is the sodium&lt;/q-tooltip&gt; &lt;/q-th&gt; &lt;q-th key=\"calcium\" :props=\"props\"&gt; Calcium &lt;q-tooltip&gt;This is the calcium&lt;/q-tooltip&gt; &lt;/q-th&gt; &lt;q-th key=\"iron\" :props=\"props\"&gt; Iron &lt;q-tooltip&gt;This is the iron&lt;/q-tooltip&gt; &lt;/q-th&gt; &lt;/tr&gt;&lt;/q-table&gt; Alternative custom header&lt;q-table :data=\"tableData\" :columns=\"columns\" row-key=\"name\"&gt; &lt;q-tr slot=\"header\" slot-scope=\"props\" :props=\"props\"&gt; &lt;q-th v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\"&gt; # &#123;&#123; col.label &#125;&#125; # &lt;/q-th&gt; &lt;/q-tr&gt;&lt;/q-table&gt; Custom header &amp; rows with selection &amp; expandable rows&lt;q-table :data=\"tableData\" :columns=\"columns\" selection=\"multiple\" :selected.sync=\"selected\" row-key=\"name\"&gt; &lt;q-tr slot=\"header\" slot-scope=\"props\"&gt; &lt;q-th auto-width&gt; &lt;q-checkbox v-if=\"props.multipleSelect\" v-model=\"props.selected\" indeterminate-value=\"some\" /&gt; &lt;/q-th&gt; &lt;q-th v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\"&gt; &#123;&#123; col.label &#125;&#125; &lt;/q-th&gt; &lt;/q-tr&gt; &lt;template slot=\"body\" slot-scope=\"props\"&gt; &lt;q-tr :props=\"props\"&gt; &lt;q-td auto-width&gt; &lt;q-checkbox color=\"primary\" v-model=\"props.selected\" /&gt; &lt;/q-td&gt; &lt;q-td key=\"desc\" :props=\"props\"&gt; &lt;q-checkbox color=\"primary\" v-model=\"props.expand\" checked-icon=\"remove\" unchecked-icon=\"add\" class=\"q-mr-md\" /&gt; &#123;&#123; props.row.name &#125;&#125; &lt;/q-td&gt; &lt;q-td key=\"calories\" :props=\"props\"&gt;&#123;&#123; props.row.calories &#125;&#125;&lt;/q-td&gt; &lt;q-td key=\"fat\" :props=\"props\"&gt;&#123;&#123; props.row.fat &#125;&#125;&lt;/q-td&gt; &lt;q-td key=\"carbs\" :props=\"props\"&gt;&#123;&#123; props.row.carbs &#125;&#125;&lt;/q-td&gt; &lt;q-td key=\"protein\" :props=\"props\"&gt;&#123;&#123; props.row.protein &#125;&#125;&lt;/q-td&gt; &lt;q-td key=\"sodium\" :props=\"props\"&gt;&#123;&#123; props.row.sodium &#125;&#125;&lt;/q-td&gt; &lt;q-td key=\"calcium\" :props=\"props\"&gt;&#123;&#123; props.row.calcium &#125;&#125;&lt;/q-td&gt; &lt;q-td key=\"iron\" :props=\"props\"&gt; &lt;q-chip small square color=\"amber\"&gt;&#123;&#123; props.row.iron &#125;&#125;&lt;/q-chip&gt; &lt;/q-td&gt; &lt;/q-tr&gt; &lt;q-tr v-show=\"props.expand\" :props=\"props\"&gt; &lt;q-td colspan=\"100%\"&gt; &lt;div class=\"text-left\"&gt;This is expand slot for row above: &#123;&#123; props.row.name &#125;&#125;.&lt;/div&gt; &lt;/q-td&gt; &lt;/q-tr&gt; &lt;/template&gt;&lt;/q-table&gt;"},{"title":"Date Utils","updated":"2018-10-05T13:17:40.831Z","permalink":"https://quasar-framework.org/components/date-utils.html","text":"Quasar provides a set of useful functions to manipulate JS Date easily in most use cases, without the high additional cost of integrating dedicated libraries like moment. Most Quasar date functions take as parameter either a Unix timestamp or a String representing a date which needs to be parsable by the native JS Date constructor. Some examples: 1497159857411, Sun Jun 11 2017 08:44:42 GMT+0300, 2017-06-16. Returned values are all JS Dates. Get familiar with JS native Date class, which is very powerful, and remember that you don’t need solutions like Momentjs which add hundreds of minified KB to your bundle. Helping Tree-ShakeYou will notice all examples import date Object from Quasar. However, if you need only one method from it, then you can use ES6 destructuring to help Tree Shaking embed only that method and not all of date. Example with addToDate():// we import all of `date`import &#123; date &#125; from 'quasar'// destructuring to keep only what is neededconst &#123; addToDate &#125; = datelet newDate = addToDate(new Date(), &#123; days: 7, month: 1 &#125;) Format for displayIt takes a string of tokens and replaces them with their corresponding date values:import &#123; date &#125; from 'quasar'let timeStamp = Date.now()let formattedString = date.formatDate(timeStamp, 'YYYY-MM-DDTHH:mm:ss.SSSZ') For i18n, you can use a third parameter:let formattedString = date.formatDate(timesStamp, 'MMMM - dddd', &#123; dayNames: ['Duminica', 'Luni', /* and all the rest of days - remember starting with Sunday */], monthNames: ['Ianuarie', 'Februarie', /* and all the rest of months */]&#125;) Available format tokens: Unit Formats available Year YY: 70 71 … 29 30YYYY: 1970 1971 … 2029 2030 Month M: 1 2 … 11 12MM: 01 02 … 11 12MMM: Jan Feb … Nov DecMMMM: January February … November December Quarter Q: Quarter number 1 2 3 4Qo: Quarter number 1st 2nd 3rd 4th Day of Month D: 1 2 … 30 31Do: 1st 2nd … 30th 31stDD: 01 02 … 30 31 Day of Year DDD: 1 2 … 364 365DDDD: 001 002 … 364 365 Day of Week d: 0 1 … 5 6dd: Su Mo … Fr Saddd: Sun Mon … Fri Satdddd: Sunday Monday … Friday Saturday Day of Week (ISO) E: 1 2 … 6 7 Week of Year w: 1 2 … 52 53ww: 01 02 … 52 53 Hour H: 0 1 … 22 23HH: 00 01 … 22 23h: 0 … 11 12hh: 01 02 … 11 12 Minute m: 0 1 … 58 59mm: 00 01 … 58 59 Second s: 0 1 … 58 59ss: 00 01 … 58 59 Fractional Second S: 0 1 … 8 9SS: 00 01 … 98 99SSS: 000 001 … 998 999 Timezone offset Z: -07:00 -06:00 … +06:00 +07:00ZZ: -0700 -0600 … +0600 +0700 AM/PM A: AM, PMa: am, pmaa: a.m, p.m Unix Timestamp X: 1360013296x (ms): 1360013296123 Manipulate datesCreateTry to create dates with native JS Date class like so:let date = new Date(); The following method is just a wrapper to help you in cases where you just need current time but with a different year, or month, or second etc. import &#123; date &#125; from 'quasar'let newDate = date.buildDate(&#123; year:2010, date:5, hours:15, milliseconds:123&#125;) You can pass a second argument (a boolean) for setting UTC time (true) instead of local time. The object literal provided can contain the following keys (all are optional): Key Description milliseconds for the milliseconds component of the date/time seconds for the seconds component of the date/time minutes for the minutes component of the date/time hours for the hours component of the date/time date for the day component of the date/time month for the month component of the date/time year for the year component of the date/time ValidateTo check if a date string is valid use:import &#123; date &#125; from 'quasar'let dateString = 'Wed, 09 Aug 1995 00:00:00 GMT'if (date.isValid(dateString)) &#123; // Do something with date string&#125; Add/SubtractTo add/subtract some duration to/from a date use:import &#123; date &#125; from 'quasar'let newDate = new Date(2017, 2, 7)newDate = date.addToDate(newDate, &#123; days: 7, month: 1 &#125;)// `newDate` is now 2017-3-14 00:00:00newDate = date.subtractFromDate(newDate, &#123; hours: 24, milliseconds: 10000 &#125;)// `newDate` is now 2017-3-12 23:59:50 The object literal provided can contain the following keys (all are optional): Key Description milliseconds for a duration in milliseconds seconds for a duration in seconds minutes for a duration in minutes hours for a duration in hours days for a duration in days month for a duration in months year for a duration in years Set date/timeTo set a specified unit(s) of date/time:import &#123; date &#125; from 'quasar'let newDate = new Date(2017, 10, 2)let adjustedDate = date.adjustDate(newDate, &#123; year: 2010, month: 2 &#125;)// `adjustedDate` is 2010-2-2 You can pass a third argument (a Boolean) for setting UTC time (true) instead of local time. The object literal provided can contain the following keys (all are optional): Key Description milliseconds for the milliseconds component of the date/time seconds for the seconds component of the date/time minutes for the minutes component of the date/time hours for the hours component of the date/time day for the day component of the date/time month for the month component of the date/time year for the year component of the date/time Query datesMinimum/MaximumTo get the minimum/maximum date of a date set (i.e. array) use:import &#123; date &#125; from 'quasar'let dates = [ new Date(2017, 6, 24), new Date(2017, 5, 20), new Date(2017, 6, 26) ]let min = date.getMinDate(dates) // `min` is 2017-5-20let max = date.getMaxDate(dates) // `max` is 2017-6-26// Or simply use multiple parameters:let min = date.getMinDate(new Date(2017, 6, 24), new Date(2017, 5, 20), new Date(2017, 6, 26))// `min` is 2017-5-20let max = date.getMaxDate(new Date(2017, 6, 24), new Date(2017, 5, 20), new Date(2017, 6, 26))// `max` is 2017-6-26 Time rangeTo check if a date is in a given date/time range use:import &#123; date &#125; from 'quasar'let dateTarget = new Date()let dateFrom = new Date()let dateTo = new Date()// **strictly** (i.e. exclusive range)if (date.isBetweenDates(dateTarget, dateFrom, dateTo)) &#123; // Do something with dateTarget&#125;// including which margin you wantif (date.isBetweenDates(dateTarget, dateFrom, dateTo, &#123; inclusiveFrom: true, inclusiveTo: true &#125;)) &#123; // Do something with dateTarget&#125; To normalize a date in a given date/time range use:import &#123; date &#125; from 'quasar'let newDate = new Date()let dateMin = new Date(2010, 2, 23)let dateMax = new Date(2012, 4, 12)let dateNormalized = date.getDateBetween(newDate, dateMin, dateMax)// Returns `newDate` if it's between 2010-2-23 and 2012-4-12; `dateMin` if it's lower; `dateMax` if it's greater EqualityTo check if two dates’ unit are equal use:import &#123; date &#125; from 'quasar'let date1 = new Date(2017, 2, 5)let date2 = new Date(2017, 3, 8)let unit = 'year'if (date.isSameDate(date1, date2, /* optional */ unit)) &#123; // true because date1 and date2's year is the same&#125; Unit parameter can be omitted, in which case a full date/time comparison will occur, otherwise it allows to perform partial comparison: Unit Description second test if same second only minute test if same minute only hour test if same hour only day test if same day only month test if same month only year test if same year only DifferenceTo compute the difference between two dates use:import &#123; date &#125; from 'quasar'let date1 = new Date(2017, 4, 12)let date2 = new Date(2017, 3, 8)let unit = 'days'let diff = date.getDateDiff(date1, date2, unit)// `diff` is 34 (days) The unit parameter indicates the unit of measurement, if not specified then it is days by default: Unit Description seconds distance in seconds minutes distance in minutes hours distance in hours days distance in days months distance in months years distance in years CalendarTo get the ISO week number in year for a given date object use:import &#123; date &#125; from 'quasar'let newDate = new Date(2017, 0, 4)let week = date.getWeekOfYear(newDate) // `week` is 1 To get the day number in year for a given date object use:import &#123; date &#125; from 'quasar'let newDate = new Date(2017, 1, 4)let day = date.getDayOfYear(newDate) // `day` is 35 To get the day number in week for a given date object use:import &#123; date &#125; from 'quasar'let newDate = new Date(2017, 1, 9)let day = date.getDayOfWeek(newDate) // `day` is 4 To get the number of days in the month for the specified date:import &#123; date &#125; from 'quasar'let newDate = new Date()let days = date.daysInMonth(newDate) // e.g. 30 Start/End of timeTo mutate the original date object by setting it to the start of a unit of time use:import &#123; date &#125; from 'quasar'let newDate = new Date(2000)// set to beginning of year 2000 (January 1st, 2000, 00:00:00.000)newDate = date.startOfDate(newDate, 'year')// set to end of year 2000 (December 31st, 2000, 23:59:59.999)newDate = date.endOfDate(newDate, 'year') The second parameter indicates a unit to reset to (beginning of it or end of it): Unit Description second reset seconds minute reset minutes hour reset hours day reset days month reset months year reset years Get Formatimport &#123; date &#125; from 'quasar'date.inferDateFormat(new Date()) // 'date'date.inferDateFormat(35346363) // 'number'date.inferDateFormat('Mon Feb 05 2018 23:05:29') // string Cloning Dateimport &#123; date &#125; from 'quasar'const newDate = new Date()const clonedDate = date.clone(newDate)date.addToDate(newDate, &#123; days: 1 &#125;)console.log(newDate.getDate() === clonedDate.getDate()) // false"},{"title":"Datetime Input","updated":"2018-08-24T12:35:10.607Z","permalink":"https://quasar-framework.org/components/datetime-input.html","text":"The Datetime component provides a method to input dates and time or both. There is also one more version available: Datetime Picker. You’ll notice in the demos that the iOS and Material Datetime pickers look and act totally different, just like their native counterparts. Works well with QField for additional functionality such as a helper, error message placeholder and many others. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QDatetime']&#125; Basic Usage&lt;!-- Only Date --&gt;&lt;q-datetime v-model=\"model\" type=\"date\" /&gt;&lt;!-- Only Time --&gt;&lt;q-datetime v-model=\"model\" type=\"time\" /&gt;&lt;!-- Date &amp; Time --&gt;&lt;q-datetime v-model=\"model\" type=\"datetime\" /&gt; InternationalizationThe day and month names are taken care of by default through Quasar I18n. If your desired language pack is missing, please provide a PR for it. Vue PropertiesSupports v-model which must be a String, Number or Date Object. Vue Property Type Description type String One of date, time or datetime. Default is date. clearable Boolean If used, the component offers the user an actionable icon to reset the current value to clear-value (if it is set) or otherwise default-value. The icon appears only when the current value matches clear-value/default-value. default-value String/Object Default color for picker when model is not yet set. clear-value String/Object The value to which to reset the field model to when using clearable, unless default-value is specified. minimal Boolean (v0.15.9+) Don’t display header. readonly Boolean If set to true, component is displayed as read-only. min String Optional minimum value it can take. Has same format as Datetime model. max String Optional maximum value it can take. Has same format as Datetime model. default-view String One of ‘year’, ‘month’, ‘day’, ‘hour’, ‘minute’. default-value String/Number/Date Default date/time for picker when model is not yet set. display-value String Text to display on input frame. Supersedes ‘placeholder’. first-day-of-week Number 0-6, 0 - Sunday, 1 Monday, …. hide-underline Boolean Hides the bottom border. popover Boolean Always display with a Popover, regardless of Platform. modal Boolean Always display with a Modal, regardless of Platform. format String Format as described on Handling JS Date page under Format for display section. format-model String Data type of model (useful especially when starting out with undefined or null). One of ‘auto’, ‘date’, ‘number’, ‘string’. format24h Boolean Override default i18n setting. Use 24 hour time for Material picker instead of AM/PM system which is default. placeholder String Placeholder text for input frame to use when model is not set (empty). ok-label String Text for the button to accept the input (when using Modal). cancel-label String Text for the button to cancel input with no change (when using Modal). header-label String (v0.17.10+) Override weekday string on popup. Applies to Material theme only. Common input frame properties: Property Type Description prefix String A text that should be shown before the value of model. suffix String A text that should be shown after the value of model. float-label String A text label that will “float” up above the input field, once the input field gets focus. stack-label String A text label that will be shown above the input field and is static. color String One from Quasar Color Palette. inverted Boolean Inverted mode. Color is applied to background instead. inverted-light Boolean Inverted mode with a light color. Color is applied to background instead. dark Boolean Is component rendered on a dark background? align String One of ‘left’, ‘center’ or ‘right’ which determines the text align. disable Boolean If set to true, component is disabled and the user cannot change model. warning Boolean If set to true, the input fields colors are changed to show there is a warning. error Boolean If set to true, the input fields colors are changed to show there is an error. before Array of Objects Icon buttons on left side of input frame. Read below more details. after Array of Objects Icon buttons on right side of input frame. Read below more details. no-parent-field Boolean Avoid trying to connect to a parent QField. Lazy InputVue will soon supply the .lazy modifier for v-model on components too, but until then, you can use the longer equivalent form:&lt;q-datetime type=\"date\" :value=\"model\" @change=\"val =&gt; &#123; model = val &#125;\"/&gt; Icon buttonsThis section refers to before and after properties which can add additional buttons as icons to the component. Here is the structure of the two properties: &#123; // required icon icon: String, // required function to call when // icon is clicked/tapped handler: Function, // Optional. Show icon button // if model has a value content: Boolean, // Optional. Show icon button // if model is marked with error error: Boolean&#125; Examples:&lt;!-- Show an icon button (with 'warning' as icon) when there is an error on component (through \"error\" prop)--&gt;&lt;q-datetime v-model=\"date\" :error=\"error\" :after=\"[ &#123; icon: 'warning', error: true, handler () &#123; // do something... &#125; &#125; ]\"/&gt;&lt;!-- Show an icon button (with 'arrow_forward' as icon) when the model has a non empty value--&gt;&lt;q-datetime v-model=\"date\" :after=\"[ &#123; icon: 'arrow_forward', content: true, handler () &#123; // do something... &#125; &#125; ]\"/&gt; Vue Methods Vue Method Description show() Show Popover (on desktop) and Dialog (on mobile) to select date and/or time. Returns a Promise. hide() Hide Popover (on desktop) and Dialog (on mobile) to select date and/or time and execute Function after it’s been hidden. Returns a Promise. toggle() Toggle the Popover or Modal. clear() Sets model to empty string (removes current value). Vue Events Vue Event Description @input(newVal) Triggered on immediate model value change. @change(newVal) Triggered on lazy model value change. @clear(clearVal) Triggered when the model is cleared. @blur Triggered when the modal/ popup is closed. @focus Triggered when the modal/ popup is opened. The ModelQuasar uses its own date utility to work with date values within the model of the component. IMPORTANTThe model (variable binded to v-model) must either be empty (undefined) or a string in the form of a valid ISO 8601 datetime value, like 2016-10-24T10:40:14.674Z. It can also be a shorter derivative of this string, like 2016-10-24 or 2016-10-24T10:40. The value can also be a Unix Timestamp (including milliseconds), like 1477298414674. Last but not least, it can also be an instance of the Javascript Date Object, like new Date(). For more information about how Quasar works with dates, please refer to the Handling JS Date documentation page. Here are a few examples of setting up the value prop: &lt;template&gt; &lt;q-datetime v-model=\"model\" type=\"datetime\" /&gt;&lt;/template&gt;&lt;script&gt;// ....export default &#123; data () &#123; return &#123; model: undefined // empty value // OR model: new Date() // as in \"right this moment\" // OR model: 1477298414674 // Unix Timestamp with milliseconds // OR model: '2016-10-24T10:40:14.674Z' // full ISO 8601 compliant value // OR model: `2016-10-24` // Any derivative of a valid ISO 8601 datetime value will // also work, like '2016-10-24T10:40:14' // OR model: `2016-10-24T10:40`, // For an ISO 8601 value, the time must be included // A Unix Timestamp will also work. &#125; &#125;, // ...&#125;&lt;/script&gt; More ExamplesColoringUse the color and inverted/inverted-light props to control the color.&lt;q-datetime color=\"amber-7\" float-label=\"Float Label\" v-model=\"model\" type=\"date\"/&gt;&lt;q-datetime inverted color=\"primary\" float-label=\"Float Label\" v-model=\"model\" type=\"date\"/&gt; Also, if QDatetime is displayed on a dark background, add the dark property.&lt;q-datetime dark color=\"secondary\" /&gt; Usage Inside of a List&lt;q-list&gt; &lt;q-list-header&gt;Date or Time&lt;/q-list-header&gt; &lt;q-item&gt; &lt;q-item-side icon=\"access_time\" /&gt; &lt;q-item-main&gt; &lt;q-datetime v-model=\"model\" type=\"time\" /&gt; &lt;/q-item-main&gt; &lt;/q-item&gt; &lt;q-item&gt; &lt;q-item-side icon=\"update\" /&gt; &lt;q-item-main&gt; &lt;q-datetime v-model=\"model\" type=\"date\" /&gt; &lt;/q-item-main&gt; &lt;/q-item&gt; &lt;q-item-separator /&gt; &lt;q-list-header&gt;Date &amp; Time&lt;/q-list-header&gt; &lt;q-item&gt; &lt;q-item-side icon=\"notifications\" /&gt; &lt;q-item-main&gt; &lt;q-datetime v-model=\"model\" type=\"datetime\" /&gt; &lt;/q-item-main&gt; &lt;/q-item&gt;&lt;/q-list&gt;"},{"title":"Dialog","updated":"2018-07-25T14:14:24.663Z","permalink":"https://quasar-framework.org/components/dialog.html","text":"Quasar Dialogs are a great way to offer the user the ability to choose a specific action or list of actions. They also can provide the user with important information, or require them to make a decision (or multiple decisions). From a UI perspective, you can think of Dialogs as a type of “floating” modal, which covers only a portion of the screen. This means Dialogs should only be used for quick actions, like password verification, small App notifications or quick options. More in depth user flows should be reserved for ​Modals​. Dialogs can be used either as a component in your Vue file templates (for complex use-cases, like specific form components with validation etc), or as a globally available method (for some basic use cases, equivalent to native JS alert(), prompt(), …). Basic Usage as a MethodFirst, we install it: Edit /quasar.conf.js:framework: &#123; plugins: ['Dialog']&#125; Now let’s see how we can use it:// outside of a Vue fileimport &#123; Dialog &#125; from 'quasar'(Promise) Dialog.create(configObj)// inside of a Vue file(Promise) this.$q.dialog(configObj) Basic syntax for the config object:this.$q.dialog(&#123; title: 'Warning', message: 'You are about to run out of disk space.', // optional color: 'primary', // optional; we want an \"OK\" button ok: true, // takes i18n value, or String for \"OK\" button label // optional; we want a \"Cancel\" button cancel: true, // takes i18n value, or String for \"Cancel\" button label // optional; prevent user dismissal when not clicking on a Dialog button preventClose: true, noBackdropDismiss: false, // gets set to \"true\" automatically if preventClose is \"true\" noEscDismiss: false, // gets set to \"true\" automatically if preventClose is \"true\" // optional; stacks button vertically instead of horizontally (default) stackButtons: true, // optional; a position of the Dialog (top, bottom, left, right) position: 'top', // optional; show an input box (make Dialog similar to a JS prompt) prompt: &#123; model: '', type: 'text' // optional &#125;, // optional; show a radio, checkbox or toggle options: &#123; type: 'radio', // or 'checkbox' / 'toggle' model: 'opt2', // Array when checkbox/toggle! (like '[]') items: [ &#123;label: 'Option 1', value: 'opt1', color: 'secondary'&#125;, &#123;label: 'Option 2', value: 'opt2'&#125;, &#123;label: 'Option 3', value: 'opt3'&#125; ] &#125;&#125;) IMPORTANTWhen user hits the phone/tablet back button (only for Cordova apps), the Action Sheet will get closed automatically.Also, when on a desktop browser, hitting the &lt;ESCAPE&gt; key also closes the Action Sheet. Handling OutcomeThe returning object when creating an ActionSheet is a Promise, so you can leverage the Promise API to handle the outcome: this.$q.dialog(&#123;...&#125;) .then(() =&gt; &#123; // Picked \"OK\" &#125;) .catch(() =&gt; &#123; // Picked \"Cancel\" or dismissed &#125;)// OR with async/await:async showActionSheet () &#123; try &#123; await this.$q.dialog(&#123;...&#125;) // user picked \"OK\" &#125; catch () &#123; // Picked \"Cancel\" or dismissed &#125;&#125; ExamplesAlertthis.$q.dialog(&#123; title: 'Alert', message: 'Modern HTML5 front-end framework on steroids.'&#125;) Confirmthis.$q.dialog(&#123; title: 'Confirm', message: 'Modern HTML5 front-end framework on steroids.', ok: 'Agree', cancel: 'Disagree'&#125;).then(() =&gt; &#123; this.$q.notify('Agreed!')&#125;).catch(() =&gt; &#123; this.$q.notify('Disagreed...')&#125;) Promptthis.$q.dialog(&#123; title: 'Prompt', message: 'Modern front-end framework on steroids.', prompt: &#123; model: '', type: 'text' // optional &#125;, cancel: true, color: 'secondary'&#125;).then(data =&gt; &#123; this.$q.notify(`You typed: \"$&#123;data&#125;\"`)&#125;).catch(() =&gt; &#123; this.$q.notify('Ok, no mood for talking, right?')&#125;) Single Choice Selectionthis.$q.dialog(&#123; title: 'Options', message: 'Modern front-end framework on steroids.', options: &#123; type: 'radio', model: 'opt2', items: [ &#123;label: 'Option 1', value: 'opt1', color: 'secondary'&#125;, &#123;label: 'Option 2', value: 'opt2'&#125;, &#123;label: 'Option 3', value: 'opt3'&#125; ] &#125;, cancel: true, preventClose: true, color: 'secondary'&#125;).then(data =&gt; &#123; this.$q.notify(`You selected: $&#123;data&#125;`)&#125;) Multiple Choice Selectionthis.$q.dialog(&#123; title: 'Options', message: 'Modern front-end framework on steroids.', options: &#123; type: 'checkbox', model: [], items: [ &#123;label: 'Option 1', value: 'opt1', color: 'secondary'&#125;, &#123;label: 'Option 2', value: 'opt2'&#125;, &#123;label: 'Option 3', value: 'opt3'&#125; ] &#125;, cancel: true, preventClose: true, color: 'secondary'&#125;).then(data =&gt; &#123; this.$q.notify(`You selected: $&#123;JSON.stringify(data)&#125;`)&#125;) Stacked Buttonsthis.$q.dialog(&#123; title: 'Stacked buttons', message: 'Go to a movie.', ok: 'Yes, please!', cancel: 'Uhm, nope', stackButtons: true&#125;).then(() =&gt; &#123; this.$q.notify('Agreed!')&#125;).catch(() =&gt; &#123; this.$q.notify('Disagreed...')&#125;) Custom Buttonsthis.$q.dialog(&#123; title: 'Custom buttons', message: 'Go to a movie.', ok: &#123; push: true, label: 'Yes, please!' &#125;, cancel: &#123; push: true, color: 'negative', label: 'Uhm, nope' &#125;&#125;).then(() =&gt; &#123; this.$q.notify('Agreed!')&#125;).catch(() =&gt; &#123; this.$q.notify('Disagreed...')&#125;) Prevent accidental closethis.$q.dialog(&#123; title: 'Prevent close', message: 'This dialog cannot be dismissed by clicking/tapping on the background overlay.', ok: true, cancel: true, preventClose: true&#125;).then(() =&gt; &#123; this.$q.notify('You said OK!')&#125;).catch(() =&gt; &#123; this.$q.notify(`You didn't agree`)&#125;) Basic Usage As a ComponentFirst, we install it: Edit /quasar.conf.js:framework: &#123; components: ['QDialog']&#125; Now let’s see how we can use it:&lt;template&gt; &lt;q-dialog v-model=\"customDialogModel\" stack-buttons prevent-close @ok=\"onOk\" @cancel=\"onCancel\" @show=\"onShow\" @hide=\"onHide\" &gt; &lt;!-- This or use \"title\" prop on &lt;q-dialog&gt; --&gt; &lt;span slot=\"title\"&gt;Favorite Superhero&lt;/span&gt; &lt;!-- This or use \"message\" prop on &lt;q-dialog&gt; --&gt; &lt;span slot=\"message\"&gt;What is your superhero of choice?&lt;/span&gt; &lt;div slot=\"body\"&gt; &lt;q-field icon=\"account_circle\" helper=\"We need your name so we can send you to the movies.\" label=\"Your name\" :label-width=\"3\" &gt; &lt;q-input v-model=\"name\" /&gt; &lt;/q-field&gt; &lt;/div&gt; &lt;template slot=\"buttons\" slot-scope=\"props\"&gt; &lt;q-btn color=\"primary\" label=\"Choose Superman\" @click=\"choose(props.ok, 'Superman')\" /&gt; &lt;q-btn color=\"black\" label=\"Choose Batman\" @click=\"choose(props.ok, 'Batman')\" /&gt; &lt;q-btn color=\"negative\" label=\"Choose Spiderman\" @click=\"choose(props.ok, 'Spiderman')\" /&gt; &lt;q-btn flat label=\"No thanks\" @click=\"props.cancel\" /&gt; &lt;/template&gt; &lt;/q-dialog&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; // model for Dialog example customDialogModel: false, name: '' &#125; &#125;, methods: &#123; // when props.ok() gets called onOk (data) &#123; &#125;, // when props.cancel() gets called onCancel () &#123; &#125;, // when we show it to the user onShow () &#123; &#125;, // when it gets hidden onHide () &#123; &#125;, // custom handler async choose (okFn, hero) &#123; if (this.name.length === 0) &#123; this.$q.dialog(&#123; title: 'Please specify your name!', message: `Can't buy tickets without knowing your name.` &#125;) &#125; else &#123; await okFn() this.$q.notify(`Ok $&#123;this.name&#125;, going with $&#123;hero&#125;`) &#125; &#125; &#125;&#125;&lt;/script&gt; QDialog Vue Properties Vue Property Type Description title String Title of Dialog. message String Message of Dialog. prompt Object Check below table for details. options Object Check below table for details. ok Boolean/String/Object Do we have an OK button? Optionally specify which label to use for it OR the button props in an Object. cancel Boolean/String/Object Do we have a Cancel button? Optionally specify which label to use for it OR the button props in an Object. stack-buttons Boolean Stack buttons vertically instead of default horizontally. prevent-close Boolean Dialog can be dismissed only by clicking/tapping on OK/Cancel buttons. no-esc-dismiss Boolean “ESC” key won’t dismiss the Dialog. Overriden to “true” if “prevent-close” is “true”. no-backdrop-dismiss Boolean Click/Tap on backdrop won’t dismiss Dialog. Overriden to “true” if “prevent-close” is “true”. no-refocus Boolean (v0.17+) By default, when closing a Dialog, the previous focused element gets focused again. When property is set to true it disables this behaviour. position String Position of Dialog (top, bottom, left, right). color String A color from Quasar Color Palette. Prompt Object:&#123; model: '..' // String, type: 'text' // optional&#125; Options Object:&#123; type: 'radio', // or 'checkbox', 'toggle' model: 'opt2', // Array when checkbox / toggle (like '[]') items: [ &#123;label: 'Option 1', value: 'opt1', color: 'secondary'&#125;, &#123;label: 'Option 2', value: 'opt2'&#125;, &#123;label: 'Option 3', value: 'opt3'&#125; ]&#125; QDialog Vue Events Vue Property Description @ok When “props.ok()” got called. @cancel When “props.cancel()” got called. @show Dialog has just been showed to the user. @hide Dialog has been hidden (regardless of outcome). @escape-key Dialog dismissed with ESCAPE key."},{"title":"Datetime Picker","updated":"2018-08-24T12:35:10.607Z","permalink":"https://quasar-framework.org/components/datetime-picker.html","text":"The DatetimePicker component provides a method to input dates and time or both. There is also one more version available: Datetime Input. You’ll notice in the demos that the iOS and Material Datetime pickers look and act totally different, just like their native counterparts. Works well with QField for additional functionality such as a helper, error message placeholder and many others. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QDatetimePicker']&#125; Basic Usage&lt;!-- Only Date --&gt;&lt;q-datetime-picker v-model=\"model\" type=\"date\" /&gt;&lt;!-- Only Time --&gt;&lt;q-datetime-picker v-model=\"model\" type=\"time\" /&gt;&lt;!-- Date &amp; Time --&gt;&lt;q-datetime-picker v-model=\"model\" type=\"datetime\" /&gt; InternationalizationThe day and month names are taken care of by default through Quasar I18n. If your desired language pack is missing, please provide a PR for it. Vue PropertiesSupports v-model which must be a String, Number or Date Object. Vue Property Type Description type String One of date, time or datetime. Default is date. readonly Boolean If set to true, component is displayed as read-only. disable Boolean If set to true, component is disabled and the user cannot change model. minimal Boolean (v0.15.9+) Don’t display header. min String Optional minimum value it can take. Has same format as Datetime model. max String Optional maximum value it can take. Has same format as Datetime model. default-view String One of ‘year’, ‘month’, ‘day’, ‘hour’, ‘minute’. default-value String/Number/Date Default date/time for picker when model is not yet set. display-value String Text to display on input frame. Supersedes ‘placeholder’. first-day-of-week Number 0-6, 0 - Sunday, 1 Monday, …. format-model String Data type of model (useful especially when starting out with undefined or null). One of ‘auto’, ‘date’, ‘number’, ‘string’. color String One from Quasar Color Palette. dark Boolean Is component rendered on a dark background? format24h Boolean Override default i18n setting. Use 24 hour time for Material picker instead of AM/PM system which is default. no-parent-field Boolean Avoid trying to connect to a parent QField. header-label String (v0.17.10+) Override weekday string. Applies to Material theme only. Lazy InputVue will soon supply the .lazy modifier for v-model on components too, but until then, you can use the longer equivalent form:&lt;q-datetime-picker type=\"date\" :value=\"model\" @change=\"val =&gt; &#123; model = val &#125;\"/&gt; Vue Methods Vue Method Description setYear(val) Sets year. setMonth(val) Sets month. setDay(val) Sets day. setHour(val) Sets hour. setMinute(val) Sets minute. setView(val) Sets view. One of ‘year’, ‘month’, ‘day’, ‘hour’, ‘minute’. Notice that depending of type prop, some may not be available. clear() Sets model to empty string (removes current value). Vue Events Vue Event Description @input(newVal) Triggered on immediate model value change. @change(newVal) Triggered on lazy model value change. The ModelQuasar uses its own date utility to work with date values within the model of the component. IMPORTANTThe model (variable binded to v-model) must either be empty (undefined) or a string in the form of a valid ISO 8601 datetime value, like 2016-10-24T10:40:14.674Z. It can also be a shorter derivative of this string, like 2016-10-24 or 2016-10-24T10:40. The value can also be a Unix Timestamp (including milliseconds), like 1477298414674. Last but not least, it can also be an instance of the Javascript Date Object, like new Date(). For more information about how Quasar works with dates, please refer to the Handling JS Date documentation page. Here are a few examples of setting up the value prop: &lt;template&gt; &lt;q-datetime-picker v-model=\"model\" type=\"datetime\" /&gt;&lt;/template&gt;&lt;script&gt;// ....export default &#123; data () &#123; return &#123; model: undefined // empty value // OR model: new Date() // as in \"right this moment\" // OR model: 1477298414674 // Unix Timestamp with milliseconds // OR model: '2016-10-24T10:40:14.674Z' // full ISO 8601 compliant value // OR model: `2016-10-24` // Any derivative of a valid ISO 8601 datetime value will // also work, like '2016-10-24T10:40:14' // OR model: `2016-10-24T10:40`, // For an ISO 8601 value, the time must be included // A Unix Timestamp will also work. &#125; &#125;, // ...&#125;&lt;/script&gt; More ExamplesColoringUse the color and inverted/inverted-light props to control the color.&lt;q-datetime color=\"amber-7\" float-label=\"Float Label\" v-model=\"model\" type=\"date\"/&gt;&lt;q-datetime inverted color=\"primary\" float-label=\"Float Label\" v-model=\"model\" type=\"date\"/&gt; Also, if QDatetime is displayed on a dark background, add the dark property.&lt;q-datetime-picker dark color=\"secondary\" /&gt; Usage Inside of a List&lt;q-list&gt; &lt;q-list-header&gt;Date or Time&lt;/q-list-header&gt; &lt;q-item&gt; &lt;q-item-side icon=\"access_time\" /&gt; &lt;q-item-main&gt; &lt;q-datetime-picker v-model=\"model\" type=\"time\" /&gt; &lt;/q-item-main&gt; &lt;/q-item&gt; &lt;q-item&gt; &lt;q-item-side icon=\"update\" /&gt; &lt;q-item-main&gt; &lt;q-datetime-picker v-model=\"model\" type=\"date\" /&gt; &lt;/q-item-main&gt; &lt;/q-item&gt; &lt;q-item-separator /&gt; &lt;q-list-header&gt;Date &amp; Time&lt;/q-list-header&gt; &lt;q-item&gt; &lt;q-item-side icon=\"notifications\" /&gt; &lt;q-item-main&gt; &lt;q-datetime-picker v-model=\"model\" type=\"datetime\" /&gt; &lt;/q-item-main&gt; &lt;/q-item&gt;&lt;/q-list&gt;"},{"title":"DOM Utils","updated":"2018-07-25T14:14:24.664Z","permalink":"https://quasar-framework.org/components/dom-utils.html","text":"Helping Tree-ShakeYou will notice all examples import different parts of Quasar. However, if you need only one specific util method, then you can use ES6 destructuring to help Tree Shaking embed only that method and not all around it. Example with dom utils:import &#123; dom &#125; from 'quasar'const &#123; offset &#125; = dom// Offset on screenconsole.log(offset(DomElement))// &#123; top: 10, left: 100 &#125; You can also import all of dom utils and use whatever you need like this (but note that your bundle will contain unused methods too):import &#123; dom &#125; from 'quasar'// Offset on screenconsole.log(dom.offset(DomElement))// &#123; top: 10, left: 100 &#125; Offset on screen viewportimport &#123; dom &#125; from 'quasar'const &#123; offset &#125; = dom// Offset on screenconsole.log(offset(DomElement))// &#123; top: 10, left: 100 &#125; Get Computed StyleThis applies only when DomElement is visible! It returns the computed browser style, so the property you are asking for doesn’t necessary has to be applied within a style attribute. import &#123; dom &#125; from 'quasar'const &#123; style &#125; = dom// Get COMPUTED style (when DomElement is visible!)// Computed means a DomElement might not have \"height\" CSS property set,// but that does not mean it doesn't have a height when it's displayed.// The following method accesses the computed CSS provided by the browser:console.log(style(DomElement, 'height'))// '10px' &lt;&lt;&lt; notice it returns a String ending in 'px' Get Height / Widthimport &#123; dom &#125; from 'quasar'const &#123; height, width &#125; = dom// Some aliases of the previous method for \"width\" and \"height\" which// returns Numbers instead of Strings:console.log( height(DomElement), width(DomElement))// 10 100 Apply CSS Properties in Batchimport &#123; dom &#125; from 'quasar'const &#123; css &#125; = dom// Apply a list of CSS properties to a DomNodecss(DomElement, &#123; height: '10px', display: 'flex'&#125;) Execute when DOM is readyimport &#123; dom &#125; from 'quasar'const &#123; ready &#125; = dom// Execute a Function when DOM is ready:ready(function () &#123; // ....&#125;) Get Crossbrowser CSS Transform Propertyimport &#123; dom &#125; from 'quasar'const &#123; cssTransform &#125; = domlet props = cssTransform('rotateX(30deg)')// props = &#123;// transform: 'rotateX(30deg)',// '-webkit-transform': 'rotateX(30deg)',// '-ms-transform': 'rotateX(30deg)',// '-o-transform': 'rotateX(30deg)',// '-moz-transform': 'rotateX(30deg)'// &#125;// Then you can apply it with css(el, props)"},{"title":"Editor (WYSIWYG)","updated":"2018-08-08T06:08:55.516Z","permalink":"https://quasar-framework.org/components/editor---wysiwyg.html","text":"QEditor is a WYSIWYG (“what you see is what you get”) editor component. WARNINGUsing v-html on the resulting v-model renders you vulnerable to Cross Site Scripting attacks.If the content is user generated, be sure to sanitize it either on render or server side. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QEditor']&#125; Basic Usage&lt;q-editor v-model=\"model\" /&gt; InternationalizationThe tooltips content of QEditor are part of Quasar I18n. If your desired language pack is missing, please provide a PR for it. Vue PropertiesSupports v-model which you should bind to a String in your scope, which is essentially HTML code. Vue Property Type Description readonly Boolean Sets editor in readonly mode. disable Boolean Sets editor in disable mode. min-height String CSS unit for minimum height of the input area. max-height String CSS unit for maximum height of the input area. height String CSS unit for height of the input area. definitions Object Object with definitions (see next sections). fonts Object Object with fonts definitions (see next sections). toolbar Array Array of Arrays of Objects/Strings with toolbar commands (see next sections). toolbar-color String Color (from Quasar Palette) of toolbar commands. toolbar-text-color String Text color (from Quasar Palette) of toolbar commands. toolbar-toggle-color String Color (from Quasar Palette) of toolbar commands when in “active” state. toolbar-bg String Toolbar background color (from Quasar Palette). toolbar-flat Boolean Toolbar buttons become of “flat” type. toolbar-outline Boolean Toolbar buttons become of “outline” type. toolbar-push Boolean Toolbar buttons become of “push” type. toolbar-rounded Boolean Toolbar buttons become of “rounded” type. content-style Object CSS Style in Object format for the input area. content-class Object/Array/String CSS classes for the input area. DefinitionsBy default, QEditor offers most if not all the commands you’d need in a WYSIWYG editor: bold, italic, strike, underline, unordered (list), ordered (list), subscript, superscript, link, fullscreen, quote, left (align), center (align), right (align), justify (align), print, outdent, indent, removeFormat, hr, undo, redo, h1 to h6, p (paragraph), code (code paragraph), size-1 to size-7. Each of these commands are pre-configured with icons with tooltips. However, if you want to override some of their settings you can do so with the help of definitions Object property. &lt;!-- overriding \"bold\" command to include a label instead of an icon and also changing its tooltip--&gt;:definitions=\"&#123; bold: &#123;label: 'Bold', icon: null, tip: 'My bold tooltip'&#125;&#125;\" Example adding your own definition. In this case make sure you don’t overlap the default commands:&lt;!-- we can later use \"save\" and \"upload\" in \"toolbar\" prop --&gt;:definitions=\"&#123; save: &#123; tip: 'Save your work', icon: 'save', label: 'Save', handler: saveWork &#125;, upload: &#123; tip: 'Upload to cloud', icon: 'cloud_upload', label: 'Upload', handler: uploadIt &#125;&#125;\"&lt;!-- Notice the handlers. It references methods in your Vue scope for when toolbar commands using these definitions are clicked/tapped.--&gt; Command definitions properties: Property Name Type Description label String Label of button icon String Icon of button tip String Tooltip of button cmd String Either this or “handler” is required. One of the commands described at the beginning of this section. handler Function Either this or “cmd” is required. Function for when button gets clicked/tapped. disable Boolean/Function Is button disabled? If specifying a function, return a Boolean value. Another example of adding a definition using a QEditor command::definitions=\"&#123; customItalic: &#123; cmd: 'italic', icon: 'camera_enhance', tip: 'Italic' &#125;&#125;\" FontsExample of specifying fonts so that you can later use them as options in the toolbar. These become “commands” themselves, so make sure you don’t overlap any of the default commands.:fonts=\"&#123; arial: 'Arial', arial_black: 'Arial Black', comic_sans: 'Comic Sans MS'&#125;\" Then in toolbar, you can reference them. The example below creates a dropdown.:toolbar=\"[ ..., [&#123; label: $q.i18n.editor.defaultFont, icon: $q.icon.editor.font, fixedIcon: true, list: 'no-icons', options: ['default_font', 'arial', 'arial_black', 'comic_sans'] &#125;]]\" ToolbarThe toolbar property is the place where you configure how your toolbar looks like, based on your own commands and the default ones. It’s an Array of Arrays of Object/Strings. Each sub-array represents a Button Group. [ // array of button groups [ ... ], // button group [ ... ], // button group ...] :toolbar=\"[ ['bold', 'italic', 'strike', 'underline'], ['token', 'hr', 'link', 'custom_btn'], ['print', 'fullscreen']]\" Take a look at the demo and the examples below to see how you can also specify dropdowns. You can make dropdowns as single selection, meaning only one command from its list can have an “active” state.&lt;!-- Example of a dropdown with text alignment commands --&gt;:toolbar=\"[ [ &#123; label: $q.i18n.editor.align, icon: $q.icon.editor.align, fixedLabel: true, list: 'only-icons', options: ['left', 'center', 'right', 'justify'] &#125; ]]\" Vue Events Vue Event Description @input Triggered when input area content changes. @fullscreen(true/false) (v0.17.7+) Emitted when Fullscreen state gets toggled. ExamplesComplex Example&lt;q-editor v-model=\"model\" :toolbar=\"[ ['bold', 'italic', 'strike', 'underline', 'subscript', 'superscript'], ['token', 'hr', 'link', 'custom_btn'], ['print', 'fullscreen'], [ &#123; label: $q.i18n.editor.formatting, icon: $q.icon.editor.formatting, list: 'no-icons', options: ['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'code'] &#125;, &#123; label: $q.i18n.editor.fontSize, icon: $q.icon.editor.fontSize, fixedLabel: true, fixedIcon: true, list: 'no-icons', options: ['size-1', 'size-2', 'size-3', 'size-4', 'size-5', 'size-6', 'size-7'] &#125;, &#123; label: $q.i18n.editor.defaultFont, icon: $q.icon.editor.font, fixedIcon: true, list: 'no-icons', options: ['default_font', 'arial', 'arial_black', 'comic_sans', 'courier_new', 'impact', 'lucida_grande', 'times_new_roman', 'verdana'] &#125;, 'removeFormat' ], ['quote', 'unordered', 'ordered', 'outdent', 'indent'], [ &#123; label: $q.i18n.editor.align, icon: $q.icon.editor.align, fixedLabel: true, list: 'only-icons', options: ['left', 'center', 'right', 'justify'] &#125;, &#123; label: $q.i18n.editor.align, icon: $q.icon.editor.align, fixedLabel: true, options: ['left', 'center', 'right', 'justify'] &#125; ], ['undo', 'redo'] ]\" :fonts=\"&#123; arial: 'Arial', arial_black: 'Arial Black', comic_sans: 'Comic Sans MS', courier_new: 'Courier New', impact: 'Impact', lucida_grande: 'Lucida Grande', times_new_roman: 'Times New Roman', verdana: 'Verdana' &#125;\"/&gt; Overriding &amp; extending default toolbar buttons definitionsThis particular case: overrides bold &amp; italic default definitions (label, icon, their tooltips) adds a new custom command which basically is same as “italic” adds “save”, “upload” &amp; “spellcheck” commands adds a disabled button adds a custom “Import” button &lt;q-editor v-model=\"model\" :toolbar=\"[ ['bold', 'italic'], ['customItalic'], ['save', 'upload'], ['spellcheck'], ['disabledButton'], ['custom_btn'] ]\" :definitions=\"&#123; bold: &#123;cmd: 'bold', label: 'Bold', icon: null, tip: 'My bold tooltip'&#125;, italic: &#123;cmd: 'italic', icon: 'border_color', tip: 'My italic tooltip'&#125;, customItalic: &#123;cmd: 'italic', icon: 'camera_enhance', tip: 'Italic'&#125;, save: &#123;tip: 'Save your work', icon: 'save', label: 'Save', handler: saveWork&#125;, upload: &#123;tip: 'Upload to cloud', icon: 'cloud_upload', label: 'Upload', handler: upload&#125;, spellcheck: &#123;tip: 'Run spell-check', icon: 'spellcheck', handler: spellCheck&#125;, disabledButton: &#123;tip: 'I am disabled...', disable: true, icon: 'cloud_off'&#125; &#125;\"&gt; &lt;q-btn slot=\"custom_btn\" dense color=\"secondary\" icon=\"import_contacts\" label=\"Import\" @click=\"importSomething\" /&gt;&lt;/q-editor&gt; Custom Style&lt;q-editor v-model=\"model\" toolbar-text-color=\"white\" toolbar-toggle-color=\"yellow-8\" toolbar-flat toolbar-bg=\"primary\" :toolbar=\"[ ['bold', 'italic', 'underline'], [&#123; label: $q.i18n.editor.formatting, icon: $q.icon.editor.formatting, list: 'no-icons', options: ['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'code'] &#125;] ]\"/&gt; Types of dropdowns&lt;q-editor v-model=\"model\" :toolbar=\"[ [ &#123; label: 'Icons &amp; Label', icon: 'filter_1', fixedLabel: true, fixedIcon: true, options: ['bold', 'italic', 'strike', 'underline'] &#125; ], [ &#123; label: 'Only label', icon: 'filter_2', fixedLabel: true, fixedIcon: true, list: 'no-icons', options: ['bold', 'italic', 'strike', 'underline'] &#125; ], [ &#123; label: 'Only icons', icon: 'filter_3', fixedLabel: true, fixedIcon: true, list: 'only-icons', options: ['bold', 'italic', 'strike', 'underline'] &#125; ] ]\"/&gt; Dropdowns with exclusive optionsUser can pick only one option from each dropdown. First has icon and label changing based on current selection Second has fixed label but dynamic icon Third has fixed icon but dynamic label &lt;q-editor v-model=\"model\" :toolbar=\"[ [ &#123; label: 'Dynamic label', icon: 'help_outline', options: ['left', 'center', 'right', 'justify'] &#125; ], [ &#123; label: 'Static label', fixedLabel: true, options: ['left', 'center', 'right', 'justify'] &#125; ], [ &#123; label: 'Some label', icon: 'account_balance', fixedIcon: true, options: ['left', 'center', 'right', 'justify'] &#125; ] ]\"/&gt;"},{"title":"Element Resize Observable","updated":"2018-05-18T22:01:01.013Z","permalink":"https://quasar-framework.org/components/element-resize-observable.html","text":"QResizeObservable is a Quasar component that emits a resize event whenever the wrapping DOM element / component (defined as direct parent of QResizeObservable) changes its size. Note that no polling is involved, but overusing it is costly too. InstallationEdit /quasar.conf.js:framework: &#123; components: [ 'QResizeObservable' ]&#125; Basic Usage&lt;template&gt; &lt;!-- we listen for size changes on this next &lt;div&gt;, so we place the observer as direct child: --&gt; &lt;div&gt; &lt;q-resize-observable @resize=\"onResize\" /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; ..., methods: &#123; ..., onResize (size) &#123; console.log(size) // &#123; // width: 20 // width of container (in px) // height: 50 // height of container (in px) // &#125; &#125; &#125;&#125;&lt;/script&gt; Please note that QResizeObservable will issue an event as soon as it gets rendered and attached to DOM, so you can have the initial size of the container. Vue Properties Property Type Description debounce Number (Quasar v0.15.7+, default: 100) Debounce time in milliseconds"},{"title":"Flex CSS","updated":"2018-10-05T13:17:40.831Z","permalink":"https://quasar-framework.org/components/flex-css.html","text":"Quasar provides lots of CSS classes to help you build your UI easily with the help of Flexbox. Think of it like operating with rows and columns with many options at hand. The final section of this page will show you how to create responsive UIs. Also take a look at the demo (best viewed by clicking “Desktop View” when on a desktop, because that’s where you can resize the window width to see helper classes in action). Click on “View Source” too to see the demo’s source code. Background on FlexboxThe Flexbox Layout (Flexible Box) module (currently a W3C Last Call Working Draft) aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown and/or dynamic (thus the word “flex”). The main idea behind the flex layout is to give the container the ability to alter its items’ width/height (and order) to best fill the available space (mostly to accommodate to all kind of display devices and screen sizes). A flex container expands items to fill available free space, or shrinks them to prevent overflow. Most importantly, the flexbox layout is direction-agnostic as opposed to the regular layouts (block which is vertically-based and inline which is horizontally-based). While those work well for pages, they lack flexibility (no pun intended) to support large or complex applications (especially when it comes to orientation changing, resizing, stretching, shrinking, etc.). Getting StartedQuasar Flex CSS classes apply to either the Container (Parent) or the Container’s items (Children). Parent ClassesSetting DirectionOne of the following CSS classes is mandatory for the parent in order for the children ones (described in next sections) to have any effect. Class Name Description row Flex row row inline Inline Flex row column Flex column column inline Inline Flex column row reverse Flex row with flex-direction set to row-reverse column reverse Flex column with flex-direction set to column-reverse Example:&lt;div class=\"row\"&gt; &lt;div&gt;First column&lt;/div&gt; &lt;div&gt;Second column&lt;/div&gt; &lt;div&gt;Third column&lt;/div&gt;&lt;/div&gt; Wrapping by defaultBy default, all rows and columns are wrapping content. However if you explicitly do not want to wrap and by so doing you want to fit all content into one line, then add no-wrap CSS helper class. Also, if you want to wrap in reverse order, then reverse-wrap is available. Class Name Description wrap Wrap if necessary (“on” by default, no need to specify it) no-wrap Do NOT wrap even if necessary reverse-wrap Wrap backwards if necessary AlignmentFor alignment along the main axis, use classes below. It helps distribute extra free space left over when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. It also exerts some control over the alignment of items when they overflow the line. For alignment perpendicular to the main axis, use classes below. This defines the default behavior for how flex items are laid out along the cross axis on the current line. Think of it as the horizontal-* version for the cross-axis (perpendicular to the main-axis). The next classes align a flex container’s lines within when there is extra space in the cross-axis, similar to how horizontal-* aligns individual items within the main-axis. Children ClassesDistribution of SizeQuasar uses a 12 point column system for distributing size of row children. Here are some examples of the CSS helper classes available: &lt;div class=\"row\"&gt; &lt;div class=\"col-8\"&gt;two thirds&lt;/div&gt; &lt;div class=\"col-2\"&gt;one sixth&lt;/div&gt; &lt;div class=\"col-auto\"&gt;auto size based on content and available space&lt;/div&gt; &lt;div class=\"col\"&gt;fills remaining available space&lt;/div&gt;&lt;/div&gt; In the example above, col-8 fills two thirds (2/3) of the row width, because 8/12 = 2/3 = 66%, while col-2 occupies one sixth (2/12 = 1/6 ~ 16.67%). CSS helper class col-auto makes the cell fill only the space it needs to be rendered, with the possibility to shrink when not enough space is available. col, on the other hand, tries to fill all space available while also shrinking if needed. Another example with a visual representation below it:&lt;div class=\"row\"&gt; &lt;div class=\"col\"&gt;1&lt;/div&gt; &lt;div class=\"col\"&gt;1&lt;/div&gt; &lt;div class=\"col\"&gt;1&lt;/div&gt; &lt;!-- we have 3 children, so equivalent to above would be to use `col-4` on each of the children --&gt;&lt;/div&gt;&lt;div class=\"row\"&gt; &lt;div class=\"col-3\"&gt;1&lt;/div&gt; &lt;div class=\"col-6\"&gt;2&lt;/div&gt; &lt;div class=\"col-3\"&gt;1&lt;/div&gt;&lt;/div&gt; There’s also the possible to offset a cell. Example: offset-4 which offsets a third of space (4/12 = 1/3 = 33%). WrappingWrapping is a key feature in understanding Flex CSS classes. You are not bound to use exactly 12 points per row. You can use less or even more. This allows you, among other things, to dynamically stack rows vertically on smaller screens while displaying them on a single line on bigger screens. Read “Responsive Design” section. &lt;div class=\"row\"&gt; &lt;div class=\"col-2\"&gt;...&lt;/div&gt; &lt;!-- 2 + 6 &lt; 12, so next element is placed on same line --&gt; &lt;div class=\"col-6\"&gt;...&lt;/div&gt; &lt;!-- 2 + 6 + 10 &gt; 12, so next element wraps to next line --&gt; &lt;div class=\"col-10\"&gt;...&lt;/div&gt; &lt;!-- 10 + 3 &gt; 12, so next element wraps to next line. Note that we take into consideration the current line only (with col-10 only, since it was wrapped to its own line). --&gt; &lt;div class=\"col-3\"&gt;...&lt;/div&gt;&lt;/div&gt; Note that rows are wrappable by default. Should you wish to disable this, use no-wrap CSS helper class. Self AlignmentAn item can override the aligned specified on parent. This allows alignment to be overridden for individual flex items. Please see the Alignment explanation from Parent Classes to understand the available values (self-start, self-center, self-baseline, self-end, self-stretch). OrderYou can set the order of children elements by using order-first and order-last CSS helper classes. By default, flex items are laid out in the source order. However, the order property controls the order in which they appear in the flex container. If you need more granularity, use order CSS property and assign the desired value. Example:&lt;div class=\"row\"&gt; &lt;div style=\"order: 2\"&gt;Second column&lt;/div&gt; &lt;div class=\"order-last\"&gt;Third column&lt;/div&gt; &lt;div class=\"order-first\"&gt;First column&lt;/div&gt;&lt;/div&gt; Here is how the CSS order property works: Responsive DesignFlex CSS Helper classes can be applied based on the width of the screen, to help you in making a responsive UI. The 12 points grid is inspired by Bootstrap’s, so there are a lot of similarities. What we’ve learned so far is that, for example, we can size the columns regardless of window width. If we are to create a response UI, we need to dynamically change the sizing while taking into account how wide the window is. First, let’s learn about some tokens that you can inject at middle of col-*, offset-* and col-auto helper classes (look at table below for tokens). Token Max window width Description / When it applies xs 576px Extra small sized window sm 768px Small sized window md 992px Medium-sized window lg 1200px Large sized window xl Infinite Extra large sized window Example: col-md-7, offset-lg-3, col-xs-auto. Before diving into examples, make sure you read and understood Children Classes &gt; Wrapping because it is key to understanding how you can build a responsive design. A full example: let’s say we have a row with three children. On extra small windows, we need to stack the children vertically, on small windows we need to display them side by side (each having equal width), and starting with medium windows we should display them all on same line: &lt;div class=\"row\"&gt; &lt;div class=\"col-xs-12 col-sm-6 col-md-4\"&gt; col &lt;/div&gt; &lt;div class=\"col-xs-12 col-sm-6 col-md-4\"&gt; col &lt;/div&gt; &lt;div class=\"col-xs-12 col-sm-6 col-md-4\"&gt; col &lt;/div&gt;&lt;/div&gt; Notice in the above example that we used col-xs-12 (12/12 = 100% of row, so each child will take full width of the container making all children stack vertically, since rows are wrapping content by default), col-sm-6 (6/12 = 50% of row) and col-md-4 (4/12 = 33% of row). Like previously mentioned, rows wrap content by default, so when 12 (or more) grid points are used for a row, content is wrapped to the next line. If we have two &lt;div&gt;s and we use col-8 on both, they will also stack, since 8 + 8 = 16 and we can only display 12 points on a single line. &lt;div class=\"row\"&gt; &lt;!-- more than 12 grid points together, so second &lt;div&gt; will wrap on next line --&gt; &lt;div class=\"col-8\"&gt;col&lt;/div&gt; &lt;div class=\"col-8\"&gt;col&lt;/div&gt;&lt;/div&gt; Also check CSS Helpers &gt; Visibility page to see thresholds on window width and these tokens (xs, sm, md, lg, xl) used on their own to hide or show DOM elements. Customize breakpointsIf you want to customize existing responsive breakpoints or add new ones, you can edit the $size Stylus variable: $sizes = &#123; xs: 0, sm: 575px md: 767px lg: 991px xl: 1199px&#125; IMPORTANTWhen customizing breakpoints, the smallest one must always be zero. Flex Addonsv0.17+ When enabled (through quasar.conf &gt; framework &gt; cssAddon: true) it provides breakpoint aware versions for all flex (and display) related CSS classes. Note that there will be a noticeable bump in CSS footprint when enabling it. So only do it if you really need it. .flex-&lt;bp&gt;-(block|inline).(row|column|flex)-&lt;bp&gt;(|-inline).reverse-&lt;bp&gt;.(wrap|no-wrap|reverse-wrap)-&lt;bp&gt;.order-&lt;bp&gt;-(first|last|none).justify-&lt;bp&gt;-(start|end|center|between|around).items-&lt;bp&gt;-(start|end|center|baseline|stretch).content-&lt;bp&gt;-(start|end|center|between|around).self-&lt;bp&gt;-(start|end|center|baseline|stretch).flex-&lt;bp&gt;-center.gutter-&lt;bp&gt;(|-x|-y)-(xs|sm|md|lg|xl).(col|offset)-&lt;bp&gt;(|0..12) Starting with v0.17.6 the addon was enhanced with responsive classes for spacing, both for padding and for margin: .q-(p|m)(t|r|b|l|a|x|y)-&lt;bp&gt;-(none|auto|xs|sm|md|lg|xl).q-my-&lt;bp&gt;-form Examples: row-md items-lg-end q-pa-xs q-pa-sm-sm q-px-md-lg q-py-md-md Using GuttersThere are 5 types of gutter, depending on the amount of space that you want between your elements: Class Name Size Description gutter-xs 8px extra small gutter gutter-sm 16px small gutter gutter-md 32px medium gutter gutter-lg 48px large gutter gutter-xl 64px extra large gutter Let’s look at a basic example. Please take note of the structure. You need a wrapping &lt;div&gt; and your content must be inside the &lt;div&gt; which has col-* CSS helper classes. The gutter classes make use of negative margins, so if your flex grid content is contained within, for example, a q-collapsible with a clickable area immediately above the flex grid, you must specify class=&quot;overflow-hidden&quot; to avoid the contents overlapping the active area of the parent component. &lt;!-- Example with extra small gutter and two equal width cols --&gt;&lt;!-- wrapping &lt;div&gt; required --&gt;&lt;div class=\"overflow-hidden\"&gt; &lt;!-- the row with a type of gutter --&gt; &lt;div class=\"row gutter-xs\"&gt; &lt;div class=\"col-6\"&gt; &lt;!-- Your content here --&gt; &lt;/div&gt; &lt;div class=\"col-6\"&gt; &lt;!-- Your content here --&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; IMPORTANTSome components have default margins, like the form components. This will add to the gutter, which is probably not what you want. For such cases, use no-margin class on those components, like in the example below: &lt;div class=\"overflow-hidden\"&gt; &lt;div class=\"row gutter-xs\"&gt; &lt;div class=\"col-6\"&gt; &lt;q-input v-model=\"model\" class=\"no-margin\" /&gt; &lt;/div&gt; &lt;div class=\"col-6\"&gt; &lt;q-input v-model=\"model\" class=\"no-margin\" /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; By default, the gutter applies both horizontally and vertically. If for example you want different levels of gutter only horizontally or only vertically, use gutter-x-* and gutter-y-* CSS classes:&lt;!-- small gutter horizontally, large gutter vertically --&gt;&lt;div class=\"overflow-hidden\"&gt; &lt;div class=\"row gutter-x-sm gutter-y-lg\"&gt; &lt;div class=\"col-6\"&gt; &lt;q-input v-model=\"model\" class=\"no-margin\" /&gt; &lt;/div&gt; &lt;div class=\"col-6\"&gt; &lt;q-input v-model=\"model\" class=\"no-margin\" /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; QInput ExampleLet’s say we want to build something depicted in the two pictures below.… which becomes like below on xs windows: The template for this would look like below. Note we are using no-margin CSS helper class for QInputs to not add additional space to gutter.&lt;div&gt; &lt;div class=\"row gutter-sm\"&gt; &lt;div class=\"col-12\"&gt; &lt;q-input inverted v-model=\"model\" class=\"no-margin\" float-label=\"col-12\" /&gt; &lt;/div&gt; &lt;div class=\"col-xs-12 col-sm-6\"&gt; &lt;q-input inverted v-model=\"model\" class=\"no-margin\" float-label=\"col-xs-12 col-sm-6 TOP LEFT\" /&gt; &lt;/div&gt; &lt;div class=\"col-xs-12 col-sm-6\"&gt; &lt;q-input inverted v-model=\"model\" class=\"no-margin\" float-label=\"col-xs-12 col-sm-6 TOP RIGHT\" /&gt; &lt;/div&gt; &lt;div class=\"col-xs-12 col-sm-6\"&gt; &lt;q-input inverted v-model=\"model\" class=\"no-margin\" float-label=\"col-xs-12 col-sm-6 BOTTOM LEFT\" /&gt; &lt;/div&gt; &lt;div class=\"col-xs-12 col-sm-6\"&gt; &lt;q-input inverted v-model=\"model\" class=\"no-margin\" float-label=\"col-xs-12 col-sm-6 BOTTOM RIGHT\" /&gt; &lt;/div&gt; &lt;div class=\"col-12\"&gt; &lt;q-input inverted v-model=\"model\" class=\"no-margin\" float-label=\"col-12\" /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;"},{"title":"Field","updated":"2018-05-18T22:01:01.014Z","permalink":"https://quasar-framework.org/components/field.html","text":"Field component allows you to easily build your responsive Forms UI by wrapping each Form component (QInput, QSelect, QDatetime, QChipsInput and so on) to enrich it with a main label, an icon, error placeholder and error state, helper placeholder and/or item/character counter. On small windows, label and content will stack vertically, while on bigger windows label will be placed on the left of QField content. Icons are always placed at the left of label and content, regardless of window width. Works with ANY component, not only Form ones. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QField']&#125; Basic Usage&lt;q-field icon=\"cloud\" label=\"Your Gmail\" helper=\"Helper\" :error=\"mailHasError\" error-label=\"We need a valid email\" :count=\"10\"&gt; &lt;q-input suffix=\"@gmail.com\" v-model=\"model\" /&gt;&lt;/q-field&gt; Vue Properties Vue Property Type Description label String Main label to use. icon String An icon to use on left of label. icon-color String Optional color of icon. helper String Helper text which gets placed below your wrapped form component. error Boolean Highlight field and wrapped form component has an error. error-label String If error is specified and true, then field helper is replaced by this prop. Doesn’t depend on field helper existance. warning Boolean Highlight field and wrapped form component has a warning. warning-label String If warning is specified and true, then field helper is replaced by this prop. Doesn’t depend on field helper existance. count Number/Boolean Add a counter of characters or items (like Chips) in your wrapped form component. If Boolean, it just counts them. If Number, it also adds a maximum number to it, but doesn’t acts as a restraint. inset String Inset you field to align with other fields when current one is missing an icon and/or label. One of ‘icon’, ‘label’ or ‘full’ (inset for both icon and label). orientation String Overrides the responsive orientation. One of ‘vertical’ or ‘horizontal’. label-width Number Out of 12 grid points, how much should the label take? Default is 5. Minimum is 1 and maximum is 12. dark Boolean Is your field used on a dark background? ExamplesThe following are just a glimpse of what QField can do for you. Using Counter&lt;!-- 16 characters max. Notice \"count\" property (and optional max-length to enforce max number of characters)--&gt;&lt;q-field :count=\"16\"&gt; &lt;q-input type=\"password\" max-length=\"16\" v-model=\"model\" /&gt;&lt;/q-field&gt;&lt;!-- Counting Chips. Notice \"count\" property --&gt;&lt;q-field count icon=\"account_box\" helper=\"Some helper here\" :label-width=\"3\"&gt; &lt;q-chips-input float-label=\"Float Label\" v-model=\"model\" /&gt;&lt;/q-field&gt;&lt;!-- Counting selected options --&gt;&lt;q-field count&gt; &lt;q-select v-model=\"select\" :options=\"[ &#123; label: 'Google', icon: 'email', value: 'goog' &#125;, &#123; label: 'Facebook', description: 'Enables communication', value: 'fb' &#125;, &#123; label: 'Twitter', secondIcon: 'alarm', value: 'twtr' &#125; ]\" /&gt;&lt;/q-field&gt; Validations with VuelidateQuasar’s recommendation for doing form components validations is Vuelidate as it fits great with the overall architecture. It’s simple, lightweight and model-based. You need to have Vuelidate added to your project first. See here. &lt;template&gt; &lt;q-field icon=\"mail\" label=\"Email\" helper=\"Type the email we can use to contact you\" :error=\"$v.email.$error\" error-label=\"Please type a valid email\" count &gt; &lt;q-input type=\"email\" v-model=\"email\" @blur=\"$v.email.$touch\" /&gt; &lt;/q-field&gt;&lt;/template&gt;&lt;script&gt;import &#123; required, email &#125; from 'vuelidate/lib/validators'export default &#123; data () &#123; return &#123; email: '' &#125; &#125;, validations: &#123; email: &#123; required, email &#125; &#125;&#125;&lt;/script&gt; Float Label QInput&lt;q-field icon=\"cloud\" helper=\"Helper\"&gt; &lt;q-input v-model=\"model\" float-label=\"Float Label\" /&gt;&lt;/q-field&gt; Custom Label WidthIf you customize label width for one QField then it’s best to apply it to all its sibling QFields for UI consistency.Since Quasar is using a 12 point grid system, assign a number &gt;= 1 and &lt; 12 for the label width. Default is 5. &lt;q-field helper=\"Helper\" :label-width=\"3\" label=\"Label\"&gt; &lt;q-input v-model=\"model\" /&gt;&lt;/q-field&gt; Using InsetInset is useful to perfectly align all QFields when some have icons and labels and some are missing either or both of them. If, for example, no QField uses icon, then it makes sense to not add inset for any of the QFields. Same goes for label. &lt;!-- This example has icon and label. Since having both of them, it gets set as reference for the other QFields when adding inset to them.--&gt;&lt;q-field icon=\"cloud\" helper=\"Helper\" label=\"Horizontal\"&gt; &lt;q-input v-model=\"model\" /&gt;&lt;/q-field&gt;&lt;!-- This example has only label, so we inset for the icon (because there is at least one QField having icon too)--&gt;&lt;q-field helper=\"Helper\" label=\"Label\" inset=\"icon\"&gt; &lt;q-input v-model=\"model\" /&gt;&lt;/q-field&gt;&lt;!-- This example has no icon or label, so we inset for them both (as there is a sibling QField with both icon and label).--&gt;&lt;q-field helper=\"Helper\" inset=\"full\"&gt; &lt;q-input v-model=\"model\" /&gt;&lt;/q-field&gt; Wrapping Side by Side QInputsWe use Quasar CSS Flex to create a non wrappable row where we place two QInputs. When more than one Form component is wrapped by QField, avoid adding a counter to QField because only one will end up synching its length to it. Each Form component has its own length and there’s only one placeholder for the counter, so in the end you will only confuse the user. &lt;!-- Example featuring stacked labels --&gt;&lt;q-field icon=\"security\" helper=\"Helper\" label=\"Label\"&gt; &lt;!-- We create a row --&gt; &lt;div class=\"row no-wrap\"&gt; &lt;q-input class=\"col\" v-model=\"model\" stack-label=\"Input 1\" /&gt; &lt;q-input class=\"col\" v-model=\"model\" stack-label=\"Input 2\" /&gt; &lt;/div&gt;&lt;/q-field&gt; Dark BackgroundWhen placing a QField on a dark background, use dark property to inform QField it needs to adjust colors. &lt;!-- This example has a wrapping &lt;div&gt; with a dark background associated with it.--&gt;&lt;div class=\"bg-grey-9\" style=\"padding: 10px\"&gt; &lt;!-- Notice \"dark\" property --&gt; &lt;q-field dark label=\"Knob\" helper=\"Touch to change\" icon=\"cake\" :error=\"error\" &gt; &lt;q-knob v-model=\"knob\" :min=\"knobMin\" :max=\"knobMax\" &gt; &lt;q-icon class=\"on-left\" name=\"volume_up\" /&gt; &#123;&#123;knob&#125;&#125; &lt;/q-knob&gt; &lt;/q-field&gt;&lt;/div&gt; Option GroupHere’s an example with an Option Group component. &lt;q-field icon=\"flight_takeoff\" label=\"Flight\" helper=\"Pick the day when you want to go\"&gt; &lt;q-option-group type=\"radio\" v-model=\"option\" :options=\"[ &#123; label: 'Monday', value: 'monday' &#125;, &#123; label: 'Tuesday', value: 'tuesday' &#125;, &#123; label: 'Friday', value: 'friday' &#125; ]\" /&gt;&lt;/q-field&gt;"},{"title":"Floating Action Buttons","updated":"2018-10-05T13:17:40.832Z","permalink":"https://quasar-framework.org/components/floating-action-button.html","text":"A Floating Action Button (FAB) represents the primary action in an App Page. But, it’s not limited to only a single action. It can contain any number of sub-actions too. And more importantly, it can also be used inline in your Pages or Layouts. Note that you don’t need a QLayout to use FABs. InstallationEdit /quasar.conf.js:framework: &#123; components: [ 'QFab', 'QFabAction' ]&#125; Basic UsageThere are two types of FABs: expandable (has sub-actions) and non-expandable. Non-ExpandableIf you want a non-expandable FAB, all you need is a round button – wrapped in QPageSticky if used on a QLayout. &lt;!-- Non-expandable without being on a QLayout --&gt;&lt;q-btn round color=\"primary\" @click=\"method\" class=\"fixed\" icon=\"mail\" style=\"right: 18px; bottom: 18px\"/&gt;&lt;!-- Non-expandable on a QLayout --&gt;&lt;q-page-sticky position=\"bottom-right\" :offset=\"[18, 18]\"&gt; &lt;q-btn round color=\"primary\" @click=\"method\" icon=\"mail\" /&gt;&lt;/q-page-sticky&gt; ExpandableExpandable FABs are defined by two components: QFab (parent) and QFabAction (children).&lt;!-- Expandable --&gt;&lt;q-fab color=\"purple\" icon=\"keyboard_arrow_up\" direction=\"up\"&gt; &lt;q-fab-action color=\"primary\" @click=\"someMethod\" icon=\"mail\" /&gt; &lt;q-fab-action color=\"secondary\" @click=\"someMethod\" icon=\"alarm\" /&gt;&lt;/q-fab&gt;&lt;!-- Expandable, fixed position without a QLayout --&gt;&lt;q-fab class=\"fixed\" style=\"right: 18px; bottom: 18px\" color=\"primary\" icon=\"wifi\"&gt;....&lt;/q-fab&gt;&lt;!-- Expandable, fixed position on a QLayout --&gt;&lt;q-page-sticky position=\"bottom-right\" :offset=\"[18, 18]\"&gt; &lt;q-fab color=\"primary\" icon=\"wifi\" &gt;....&lt;/q-fab&gt;&lt;/q-page-sticky&gt; We’ll continue describing only the expandable FAB, as the non-expandable FAB is, as mentioned above, a simple round button. Toggle through v-model&lt;template&gt; &lt;div&gt; &lt;q-fab v-model=\"open\" color=\"primary\" icon=\"wifi\" &gt;....&lt;/q-fab&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; open: false &#125; &#125;, methods: &#123; toggleFab () &#123; this.open = !this.open &#125; &#125;&#125;&lt;/script&gt; Labeling with TooltipsNotice slot=&quot;tooltip&quot; for the Tooltip on main button and where are the Tooltips placed for the Fab action buttons.&lt;q-fab color=\"primary\" active-icon=\"alarm\" direction=\"up\"&gt; &lt;q-tooltip slot=\"tooltip\" anchor=\"center left\" self=\"center right\" :offset=\"[20, 0]\" &gt; Tooltip in FAB &lt;/q-tooltip&gt; &lt;q-fab-action color=\"purple\" @click=\"toast('mail')\" icon=\"mail\"&gt; &lt;q-tooltip anchor=\"center left\" self=\"center right\" :offset=\"[20, 0]\"&gt;Mail&lt;/q-tooltip&gt; &lt;/q-fab-action&gt; &lt;q-fab-action color=\"secondary\" @click=\"toast('alarm')\" icon=\"alarm\"&gt; &lt;q-tooltip anchor=\"center left\" self=\"center right\" :offset=\"[20, 0]\"&gt;Alarm&lt;/q-tooltip&gt; &lt;/q-fab-action&gt;&lt;/q-fab&gt; For more information about Tooltips, please refer to the Tooltip documentation. QFab (Parent)QFab Vue Properties Vue Property Type Default Value Description color String n/a The color of the button, from Quasar Color Palette. text-color String n/a The color of the button icon, from Quasar Color Palette. direction String “right” The direction in which to expand; one of the following values: “up”, “down”, “left”, “right”. icon String “add” Icon to use when not expanded active-icon String “close” The icon to change to when expanded. outline Boolean n/a Set true, for an outlined button. push Boolean n/a Set true, for a push styled button. flat Boolean n/a Set true, for a flat styled button. glossy Boolean n/a Make button “glossy”. persistent Boolean false (v0.17.17+) Do not hide when route changes. QFab Vue Methods Vue Method Description toggle() Toggle open/close state. show() Open FAB. hide() Close FAB. QFab Vue Events Vue Method Description @show Triggered when clicking/tapping on main FAB to open it. @hide Triggered when clicking/tapping on main FAB to close it. QFabAction (Child)The cool bit about FABs is, they give the user the ability to select from a number of actions. These actions can be offered through a list of QFabAction components witin the QFab. Basic Usage&lt;!-- a q-fab with two actions --&gt;&lt;q-fab color=\"purple\" icon=\"keyboard_arrow_up\" direction=\"up\"&gt; &lt;q-fab-action class=\"white\" @click=\"someMethod()\" icon=\"mail\" /&gt; &lt;q-fab-action class=\"white\" @click=\"someMethod()\" icon=\"alarm\" /&gt;&lt;/q-fab&gt; QFabAction Vue Properties Vue Property Type Description color String The color of the button. text-color String n/a The color of the button icon. icon String The icon of the button. outline Boolean Set true, for an outlined button. push Boolean Set true, for a push styled button. flat Boolean Set true, for a flat styled button. glossy Boolean Make button “glossy”. QFabAction Vue Events Vue Method Description @click Triggered when clicking/tapping on the small fab. NoteClicking on a QFabAction will automatically close the list of sub-actions and return the FAB to its original state."},{"title":"Form Validation","updated":"2018-08-24T12:35:10.608Z","permalink":"https://quasar-framework.org/components/form-validation.html","text":"Recommended package for Form Validations is Vuelidate.Get started with the documentation. Installation of Vuelidate$ yarn add vuelidate# or:$ npm install --save vuelidate$ quasar new plugin vuelidate An app plugin file got created: /src/plugins/vuelidate.js. We edit it:import Vuelidate from 'vuelidate'export default (&#123; Vue &#125;) =&gt; &#123; Vue.use(Vuelidate)&#125; We then edit /quasar.conf.js to add the app plugin file to the build:plugins: ['vuelidate'] Note: ensure you add this to the main plugins at the top of the file, not in the framework plugins section. Example&lt;template&gt; &lt;div&gt; &lt;q-input v-model=\"form.email\" @blur=\"$v.form.email.$touch\" @keyup.enter=\"submit\" :error=\"$v.form.email.$error\" /&gt; &lt;q-btn color=\"primary\" @click=\"submit\"&gt;Submit&lt;/q-btn&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123; required, email &#125; from 'vuelidate/lib/validators'export default &#123; data () &#123; return &#123; form: &#123; email: '' &#125; &#125; &#125;, validations: &#123; form: &#123; email: &#123; required, email &#125; &#125; &#125;, methods: &#123; submit () &#123; this.$v.form.$touch() if (this.$v.form.$error) &#123; this.$q.notify('Please review fields again.') return &#125; // ... &#125; &#125;&#125;&lt;/script&gt;"},{"title":"Formatter Utils","updated":"2018-05-18T22:01:01.017Z","permalink":"https://quasar-framework.org/components/formatter-utils.html","text":"Helping Tree-ShakeYou will notice all examples import format Object from Quasar. However, if you need only one formatter method from it, then you can use ES6 destructuring to help Tree Shaking embed only that method and not all of format. Example:// we import all of `date`import &#123; format &#125; from 'quasar'// destructuring to keep only what is neededconst &#123; capitalize, humanStorageSize &#125; = formatconsole.log( capitalize('some text') )// Some textconsole.log( humanStorageSize(13087) )// 12.78 kB You can also import all formatters and use whatever you need like this (but note that your bundle will probably contain unused methods too):import &#123; format &#125; from 'quasar'console.log( format.capitalize('some text') )console.log( format.humanStorageSize(13087) ) Capitalizeimport &#123; format &#125; from 'quasar'const &#123; capitalize &#125; = formatconsole.log( capitalize('some text') )// Some text Format to Human Readable Sizeimport &#123; format &#125; from 'quasar'const &#123; humanStorageSize &#125; = formatconsole.log( humanStorageSize(13087) )// 12.78 kB Normalize Number to Intervalimport &#123; format &#125; from 'quasar'const &#123; between &#125; = format// (Number) between(Number, Number min, Number max)console.log( between(50, 10, 20) )// 20 Pad Stringimport &#123; format &#125; from 'quasar'const &#123; pad &#125; = format// (String) pad(String toPad, Number length, String paddingCharacter)// length is default 2// paddingCharacter is default '0'console.log( pad('2', 4) )// '0002'"},{"title":"Global Event Bus","updated":"2018-11-07T17:15:51.799Z","permalink":"https://quasar-framework.org/components/global-event-bus.html","text":"Events are important for the inner workings of your App.Sometimes you need an event bus or a publish/subscribe channel. Vue already has an event bus for each component. For convenience, you can use the root Vue component for this through this.$root to register and listen for events. IMPORTANT!Not to be confused with events supported by Quasar Components. Those are Vue events emitted by the respective components and don’t interfere with the global event bus. Please check the Vue Instance Methods / Events page for the API. Then let’s see how, for example, to register an event on the root Vue component of your app: // callbackfunction cb (msg) &#123; console.log(msg)&#125;// listen for an eventthis.$root.$on('event_name', cb)// listen once (only) for an eventthis.$root.$once('event_name', cb)// Make sure you stop listening for an event// when your respective component gets destroyedthis.$root.$off('event_name', cb)// Emitting an event:this.$root.$emit('event_name', 'some message') Example using event to open drawer from another component or page // (1) This code is inside layout file that have a drawer// if this.leftDrawerOpen is true, drawer is displayed// (2) Listen for an event in createdcreated()&#123; this.$root.$on(\"openLeftDrawer\", this.openLeftDrawercb);&#125;,methods: &#123; openURL, // (3) Define the callback in methods openLeftDrawercb() &#123; this.leftDrawerOpen = !this.leftDrawerOpen; &#125;&#125;// (4) In another component or page, emit the event!// Call the method when clicking button etc.methods: &#123; openLeftDrawer() &#123; this.$root.$emit(\"openLeftDrawer\"); &#125;&#125;"},{"title":"Handling Back Button","updated":"2018-07-25T14:14:24.665Z","permalink":"https://quasar-framework.org/components/handling-back-button.html","text":"When writing reusable code for building a mobile App and a website, it’s important to know how to handle the “Back” button. More specifically, how to manage buttons on your layout/page that should make your App “go back” to the previous screen. If you have no knowledge of Vue Router, we highly recommend you read and understand how it works first. Cordova Use CaseQuasar handles the back button for you by default, so it can hide any opened Modals/Dialogs instead of the default behavior which is to return to the previous page (which is not a nice user experience). Also, when on the home route (‘/‘) and user presses the back button on the phone/tablet, Quasar will make your app exit. Should you wish to disable this behavior, then you can do so by configuring quasar.conf.js: // Quasar v0.17+ onlyreturn &#123; framework: &#123; config: &#123; cordova: &#123; backButtonExit: true/false &#125; &#125; &#125;&#125; Navigation ScenarioConsider this situation: We have an App with two pages (so two routes): a login page (route “/“) and another page with a list of items on multiple layout tabs - let’s call this page “List page” from now on, where each tab has a route like “/list/shoes”, “/list/hats”. The Login page redirects to List page and List page has a “Logout” button, which redirects the user to the Login page. How would you handle this situation? Normally, you’d write code like below for the Login and Logout button (we won’t go into details of handling the login information and communicating with a server as this is outside of the exercise here): &lt;!-- Login button --&gt;&lt;q-btn @click=\"$router.push('/list')\"&gt;Login&lt;/q-btn&gt;&lt;!-- Logout button --&gt;&lt;q-btn @click=\"$router.push('/login')\"&gt;Logout&lt;/q-btn&gt; Now you build your App and install it on a phone. You open up the App, hit login then logout, then the phone’s back button. What you most likely want is for your App to exit at this point… but it doesn’t! It goes to the “/list” route instead. It’s kind of obvious why. Web history builds up as you hit the buttons:# Start App--&gt; window.history.length is 1# Hit Login button--&gt; window.history.length is 2# Hit Logout button--&gt; window.history.length is 3! What you’d like instead, is when you hit the Logout button, the window.history.length to be 1 again. Quasar can handle this automatically for you. Read about the v-go-back Vue directive. Directive “v-go-back”Let’s rewrite the Logout button to act as we would actually want it to work, which is to make window.history.length be 1 again. First, we install the directive. Edit /quasar.conf.js:framework: &#123; directives: ['GoBack']&#125; Then we use it:&lt;!-- Logout button --&gt;&lt;q-btn v-go-back=\" '/' \" color=\"primary\" label=\"Logout\"/&gt; This directive determines if the Platform is Cordova, and if so, it performs a window.history.back() call instead of a $router.push(&#39;/&#39;). QuirksNow you may think everything will work smoothly, but you must be careful about how your app is stacking up the window history. Remember, we started out by saying that the List page has a layout with multiple tabs, each one with its own route (“/list/shoes”, “/list/hats”). If we’d use to=&quot;/list/shoes&quot; and to=&quot;/list/hats&#39;&quot; on your Tabs (read more about Tabs here), then window history will build up when switching between the tabs. This incorrect behavior for apps is due to Vue Router pushing routes to the history by default. What you’d like instead, is for your window history length to stay the same, even if routes change. Fortunately, Vue Router comes to the rescue with the replace property, which essentially replaces current route instead of pushing it as a new route. So, besides to=&quot; &#39;...route...&#39; &quot; you should add the replace attribute (becoming to=&quot; &#39;...route...&#39; &quot; replace). This will replace the current route in the window history rather than pushing it. The same applies to &lt;router-link&gt;s. Always think about how you redirect your App to a new route, depending on what you want to achieve. Think if you really want to push a new route to window history or if you want to “replace” the current route. Otherwise the phone/tablet/browser “Back” button won’t work quite as expected. Instead of finally exiting the App, it will make you go through all the routes in the reverse order they were visited. So when you hit back and go to the Login page, you’d expect another back to make the App exit, but it might make your App go to one of the List tabs, depending on the user’s navigation history."},{"title":"Icons","updated":"2018-11-07T17:15:51.799Z","permalink":"https://quasar-framework.org/components/icons.html","text":"The Quasar Icon component allows you to easily insert icons within other components or any other area of your pages, as you’d like.Quasar currently supports: Material Icons , Font Awesome, Ionicons, MDI and IcoMoon. Except for IcoMoon (which has a license), you can either choose to use only one of them or use multiple. Quasar just needs to know which icon set to use for its components. We’ll see how we can install an icon set in the following section.Please submit a request if your favorite font icon is not listed here. InstallingIf you are building a website only, then using a CDN (Content Delivery Network) approach can be an option you can follow. However, when building a mobile or Electron app, you most likely do not want to depend on an Internet connection, so it’s best that you follow the next steps. IMPORTANTDue to the license of IcoMoon and its custom build option, this icon font is not provided by out of the box. You will need to use their website to create your custom icon font files and then copy them to your app’s folder and import them in an app plugin ($ quasar new plugin icomoon). Adding an Icon SetFirst step is to make an icon set available in your website/app. For this, edit /quasar.conf.js: extras: [ 'material-icons'] Icon sets are available through quasar-extras package. You don’t need to import it in your app, just configure /quasar.conf.js as indicated. Adding more than one set (showing all options):extras: [ 'material-icons', 'mdi', 'ionicons', 'fontawesome'] Quasar Using an Icon SetUnless configured otherwise, Quasar uses Material Icons as its icon set for its components. You can however tell Quasar to use some other icon set, but be sure to include that set in your website/app (see step above: Adding an Icon Set). So let’s say we included Ionicons and we want Quasar to use it for its components. We edit /quasar.conf.js again: framework: &#123; iconSet: 'ionicons'&#125; Full ExampleHere is an example of including Ionicons &amp; Fontawesome and telling Quasar to use Fontawesome for its components. extras: [ 'ionicons', 'fontawesome'],framework: &#123; iconSet: 'fontawesome'&#125; This will enable you to use both Ionicons &amp; Fontawesome in your app, and all Quasar components will display Fontawesome icons. Including from CDNIf you want to make use of CDNs (Content Delivery Network), all you need is to include style tags in your index.template.html which point to the CDN URL. In case you follow this path, do not also add the icon sets that you want in /quasar.conf.js &gt; extras. Simply edit index.template.html as follows. The example link tag below would include Font Awesome v4.7.0 icons. Do a Google search for CDNs to make sure you include the latest version. Following are just examples. &lt;!-- in `/src/index.template.html` --&gt;&lt;head&gt; ... &lt;!-- CDN example for Material Icons --&gt; &lt;link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" &gt; &lt;!-- CDN example for Fontawesome 5.0.13 --&gt; &lt;link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.0.13/css/all.css\" integrity=\"sha384-DNOHZ68U8hZfKXOrtjWvjxusGo9WQnrNx2sqG0tfsghAvtVlRW3tvkXWZh58N9jp\" crossorigin=\"anonymous\" &gt; &lt;!-- CDN example for Ionicons --&gt; &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/ionicons@4.1.1/dist/css/ionicons.min.css\" &gt;&lt;/head&gt; Using Fontawesome-ProIf you have a Fontawesome 5 Pro license and want to use it instead Fontawesome Free version. Following this instructions. Open Linked Accounts section in Fontawesome’s user account page to grab npm TOKENID (login if necessary). Create or append TOKENID into file .npmrc (file path same as package.json): @fortawesome:registry=https://npm.fontawesome.com/TOKENID Install Fontawesome webfonts: $ yarn add @fortawesome/fontawesome-pro# or:$ npm install @fortawesome/fontawesome-pro Create new App plugin: $ quasar new plugin fontawesome-pro Edit /quasar.conf.js: plugins: [ ... 'fontawesome-pro' // Add app plugin],extras: [ // 'fontawesome' // Disable free version!],framework: &#123; // if you want Quasar to use Fontawesome for its icons iconSet: 'fontawesome-pro' // requires Quasar v0.15.6+&#125; Edit /src/plugins/fontawesome-pro.js: // requiredimport '@fortawesome/fontawesome-pro/css/fontawesome.min.css'import '@fortawesome/fontawesome-pro/css/light.min.css'// do you want these too?// import '@fortawesome/fontawesome-pro/css/brands.min.css'// import '@fortawesome/fontawesome-pro/css/solid.min.css'// import '@fortawesome/fontawesome-pro/css/regular.min.css'export default () =&gt; &#123; // Leave blank or make something cool.&#125; (Optional) Override default icons: Since the default font-weight for fontawesome-pro is light or fal, some icons used by the framework components may not be desirable. The best way to handle this is to override it in the plugin you created. For instance, to override the fal version of the close icon for chips, do this: First, find the icon used for chip close in Quasar’s quasar/icons/fontawesome-pro.js (Alternatively, you can check inside the render function of the component you are overriding.) chip: &#123; close: 'fal fa-times-circle'&#125;, Then, override it in your /src/plugins/fontawesome-pro.jsimport '@fortawesome/fontawesome-pro/css/fontawesome.min.css'import '@fortawesome/fontawesome-pro/css/solid.min.css'import '@fortawesome/fontawesome-pro/css/light.min.css'export default (&#123; Vue &#125;) =&gt; &#123; Vue.prototype.$q.icon.chip.close = 'fas fa-times-circle'&#125; Basic UsageLet’s take a look at how we can use QIcon component. Do not forget to check above how to Install Icon Sets, otherwise they won’t show up! &lt;!-- Material icons have no prefix --&gt;&lt;q-icon name=\"thumb_up\" /&gt;&lt;!-- Ionicons have \"ion-\", \"ion-logo\", \"ion-md-\" or \"ion-ios-\" as prefix --&gt;&lt;q-icon name=\"ion-heart\" /&gt;&lt;!-- Fontawesome icons have \"fa[s|r|l|b] fa-\" prefix --&gt;&lt;q-icon name=\"fas fa-id-card\" /&gt;&lt;!-- MDI icons have \"mdi-\" prefix --&gt;&lt;q-icon name=\"mdi-account-card-details\" /&gt;&lt;!-- IcoMoon icons have \"icon-\" prefix --&gt;&lt;q-icon name=\"icon-chrome\" /&gt;&lt;!-- or if you prefer the non self-closing tag version which allows to add a QPopover or QTooltip:--&gt;&lt;q-icon name=\"thumb_up\"&gt; &lt;q-tooltip&gt;Some tooltip&lt;/q-tooltip&gt;&lt;/q-icon&gt; For “icon” properties on different Quasar components you won’t have the means to specify an icon for each platform, but you can achieve the same effect with: &lt;q-item-side :icon=\"$q.theme === 'mat' ? 'settings' : 'ion-ios-gear-outline'\"/&gt; Vue Properties Vue Property Type Description name String The name of the icon to be used (for both Quasar themes). color String One color from the Quasar Color Palette. size String Example: ‘12px’, ‘3.2rem’, ‘14pt’. Size &amp; ColorsAll icons are font icons. This means that you can change size by manipulating font-size CSS property. And also, they inherit the current CSS color used. &lt;q-icon name=\"mail\" style=\"font-size: 25px\" /&gt;&lt;div style=\"color: #a2e2e3\"&gt; ... &lt;!-- inheriting color #a2e2e3: --&gt; &lt;q-icon name=\"alarm\" /&gt;&lt;/div&gt; Colors from the Quasar Color Palette can be specified in two ways:&lt;q-icon name=\"mail\" class=\"text-red\" /&gt;&lt;!-- or by using `color` prop: --&gt;&lt;q-icon name=\"alarm\" color=\"red\" /&gt;&lt;q-icon name=\"alarm\" color=\"green-2\" /&gt; There’s also a “size” property:&lt;q-icon name=\"wifi\" size=\"2rem\" /&gt;&lt;q-icon name=\"delete\" size=\"24px\" /&gt; Cheatsheet Name Prefix Examples Notes material-icons None thumb_up Notice the underline character instead of dash or space ionicons ion-, ion-md-, ion-ios-, ion-logo- ion-heart, ion-logo-npm, ion-md-airplane Use QIcon instead of &lt;ion-icon&gt; component; Logo icons require ‘ion-logo-‘ prefix fontawesome fa[s,r,l,b] fa- “fas fa-ambulance” QIcon “name” property is same as “class” attribute value in Fontawesome docs examples (where they show &lt;i&gt; tags) mdi mdi- mdi-alert-circle-outline Notice the use of dash characters More ExamplesWith HTML native style attribute: &lt;q-icon name=\"thumb_up\" style=\"font-size: 5rem;\" /&gt; With HTML native class attribute: &lt;q-icon name=\"thumb_up\" class=\"big-icon\" /&gt; NoteTo create the necessary CSS class, you would need to define the class within your component’s style section as below. Watch for CSS class clashes though. &lt;style lang=\"stylus\"&gt;.big-icon font-size: 5rem&lt;/style&gt; Adding a click event handle. Remember we want to capture a native DOM event and this is a Vue component, so we use the ‘.native’ modifier:&lt;q-icon name=\"map\" @click.native=\"handle\"/&gt;"},{"title":"Overview","updated":"2018-05-18T22:01:01.018Z","permalink":"https://quasar-framework.org/components/index.html","text":"Quasar Apps are made of high-level building blocks called components. Components allow you to quickly construct an interface for your App. Quasar comes with a number of components, including modals, action sheets, collapsibles, cards, dialogs, FAB, lists and many more. Quasar Components are written as Web Components, so they embed HTML, CSS and Javascript code that you can use by just including an HTML tag in your Page and Layout templates. IMPORTANTFor Vue &amp; Quasar developers (beginners or not), read Introduction for Beginners first. It’s mandatory in order to understand how you can use Vue properties, methods and so on. Check out the live demos for each Quasar theme to see what each component looks like and to learn how to use each one. If you widen your browser window enough then you’ll see a live demo on the right side of each component page. Live Component Demo: Material Theme iOS Theme"},{"title":"Infinite Scroll","updated":"2018-05-20T16:04:39.315Z","permalink":"https://quasar-framework.org/components/infinite-scroll.html","text":"When you want to progressively load new content as the user scrolls down your Page, use QInfiniteScroll component. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QInfiniteScroll']&#125; Basic Usage&lt;q-infinite-scroll :handler=\"loadMore\"&gt; &lt;!-- Content, in this case some &lt;p&gt; tags --&gt; &lt;p v-for=\"item in items\" class=\"caption\"&gt; Lorem ipsum dolor sit amet... &lt;/p&gt; &lt;!-- slot=\"message\" for DOM element to display (in this example a dots spinner) when loading additional content --&gt; &lt;q-spinner-dots slot=\"message\" :size=\"40\"&gt;&lt;/q-spinner-dots&gt;&lt;/q-infinite-scroll&gt; IMPORTANTInfinite Scroll loads items in advance when less than one screen height is left to be seen. If the content you fetch has height less than the container’s height on screen then Infinite Scroll will continue loading more content. So make sure you load enough content. IMPORTANTThis works best when placed as direct child of the Vue component rendering your Page. If you place it under an overflowed DOM element or component, don’t forget to set the inline prop. Vue Properties Vue Property Required Type Description handler Yes Function Method from VM to be called to load more content inline Empty Use it when you place your infinite scroll within an overflowed DOM element offset Number Offset (pixels) to bottom of Infinite Scroll container from which the component should start loading more content in advance. Default it’s one container height. Vue Methods Vue Method Description loadMore() Tells Infinite Scroll to load more content, regardless of the scroll position. reset() Resets calling index to 0. stop() Stops working, regardless of scroll position. resume() Starts working. Checks scroll position upon call and if trigger is hit, it loads more content. poll() Checks scroll position and loads more content if necessary. HandlerThe handler Function takes two parameters:loadMore: function(index, done) &#123; // index - called for nth time // done - Function to call when you made all necessary updates. // DO NOT forget to call it otherwise your loading message // will continue to be displayed. Has optional boolean // parameter that invokes stop() when true // make some Ajax call then call done()&#125; The index parameter can be used to make some sort of pagination on the content you load. It takes numeric values starting with 1 and incrementing with each call. Inline UsageUse it when you place your infinite scroll within an overflowed DOM element. &lt;q-infinite-scroll :handler=\"loadMore\" inline style=\"height: 400px; overflow: auto;\"&gt; ...&lt;/q-infinite-scroll&gt; Controlling Infinite ScrollIf for some reason you need to control the working state of Infinite Scroll component, use a Vue reference and call methods from above. &lt;q-infinite-scroll :handler=\"loadMore\" ref=\"infiniteScroll\"&gt; ... &lt;button @click=\"$refs.infiniteScroll.stop()\"&gt; Stop Loading More &lt;/button&gt; ...&lt;/q-infinite-scroll&gt;"},{"title":"Inner Loading","updated":"2018-05-18T22:01:01.020Z","permalink":"https://quasar-framework.org/components/inner-loading.html","text":"The QInnerLoading component allows you to add a progress animation within a component. Much like the Loading feature, it’s purpose is to offer visual confirmation to the user that some process is happening in the background, which takes an excessive amount of time. QInnerLoading will add an opaque overlay over the delayed element along with a Spinner. NoteIn order for the spinner to be properly placed in the center of the element you want the loading display to show over, that element must have the relative-position CSS class declared. NoteQInnerLoading must be the last element inside it’s parent so it can appear on top of the other content InstallationEdit /quasar.conf.js:framework: &#123; components: [ 'QInnerLoading', //... if using custom spinner, add it too //whatever that is 'QSpinnerGears' ]&#125; Basic Usage&lt;div class=\"row justify-center\" style=\"margin-top: 40px\"&gt; &lt;q-card style=\"width: 288px; height: 262px;\" color=\"grey-2\" class=\"text-dark relative-position\"&gt; &lt;q-card-title&gt; Lorem Ipsum &lt;/q-card-title&gt; &lt;q-card-main&gt; &lt;q-transition appear enter=\"fadeIn\" leave=\"fadeOut\" &gt; &lt;div v-show=\"showSimulatedReturnData\"&gt; Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent vel magna eu risus laoreet tristique. Nulla ut fermentum elit, nec consequat augue. Morbi et dolor nec metus tincidunt pellentesque. Nullam non semper ante. Fusce pellentesque sagittis felis quis porta. Aenean condimentum neque sed erat suscipit malesuada. Nulla eget rhoncus enim. Duis dictum interdum eros. &lt;/div&gt; &lt;/q-transition&gt; &lt;/q-card-main&gt; &lt;!-- Place QInnerLoading as the last child element. This is important for it to be displayed on top of the other content. --&gt; &lt;q-inner-loading :visible=\"visible\"&gt; &lt;q-spinner-gears size=\"50px\" color=\"primary\"&gt;&lt;/q-spinner-gears&gt; &lt;/q-inner-loading&gt; &lt;/q-card&gt;&lt;/div&gt; View the source of the demo for the full example. Use v-show or v-if and the Inner Loading component’s :visible prop to toggle between the animation and your content. Vue Properties Vue Property Type Description dark Boolean Darkens the color of the opaque overlay for darker designs visible Boolean The loading effect becomes visible when true size Number, String Changes the default size of the default spinner. The default is 42 pixels. color String Specify color of the default spinner. NoteIf you add your own spinner, use the spinner’s own size and color prop to change the size and color. To change the spinner, you can add your own as a child of QInnerLoading component. The below code would add a teal-variation gear spinner with the size of 50 pixels. &lt;q-inner-loading :visible=\"visible\"&gt; &lt;q-spinner-gears size=\"50px\" color=\"teal-4\" /&gt;&lt;/q-inner-loading&gt; In most cases, you’ll probably want to add your own spinner, color and size. For more information on spinner control, please refer to the Spinner section of the docs."},{"title":"Integrating Layout with Router","updated":"2018-05-18T22:01:01.021Z","permalink":"https://quasar-framework.org/components/integrating-layout-with-router.html","text":"You can benefit from Vue Router’s capabilities while structuring your routes with a Quasar Layout. The information below is just a recommendation and not mandatory to follow. Quasar allows you full freedom. Take the lines below only as an example. Layout is the component used to encapsulate pages, so that multiple pages will share the same header, left / right side and so on. However, you can also configure per page header/footer/left or right side, but they all must be children of QLayout component. In order to understand how this works, you need a little bit of reading on Vue Router nested routes. ExampleTo make it more clear, let’s take an example. We have one layout (‘user’) and two pages (‘user-feed’ and ‘user-profile’). We want to configure the website/app routes like this: /user/feed and /user/profile. First, we create the layout and its pages:$ quasar new layout user app:new Generated layout: src/layouts/user.vue +0ms app:new Make sure to reference it in src/router/routes.js +2ms$ quasar new page user-feed user-profile app:new Generated page: src/pages/user-feed.vue +0ms app:new Make sure to reference it in src/router/routes.js +2ms app:new Generated page: src/pages/user-profile.vue +1ms app:new Make sure to reference it in src/router/routes.js +0ms The commands above create the following folder structure:src/├── layouts│ └── user.vue # our QLayout definition└── pages ├── user-feed.vue # page for /user/feed route └── user-profile.vue # page for /user/profile route Our routes configuration (/src/router/routes.js) should look like this:export default [ &#123; path: '/user', // We point it to our component // where we defined our QLayout component: () =&gt; import('layouts/user'), // Now we define the sub-routes. // These are getting injected into // layout (from above) automatically // by using &lt;router-view&gt; placeholder // (need to specify it in layout) children: [ &#123; path: 'feed', component: () =&gt; import('pages/user-feed') &#125;, &#123; path: 'profile', component: () =&gt; import('pages/user-profile') &#125; ] &#125;] Please notice a few things: We are using lazy loading of layouts and pages (() =&gt; import(&lt;path&gt;)). If your website/app is small, then you can skip the lazy loading benefits as they could add more overhead than what it’s worth: import UserLayout from 'layouts/user'import UserFeed from 'pages/user-feed'import UserProfile from 'pages/user-profile'export default [ path: '/user', component: UserLayout, children: [ &#123; path: 'feed', component: UserFeed &#125;, &#123; path: 'profile', component: UserProfile &#125; ]] Quasar provides some out of the box Webpack aliases (‘layouts’ &amp; ‘pages’), which are used in the above examples. Pages of a Layout are declared as children of it in the Vue Router configuration so that &lt;router-view/&gt; will know what page component to inject. Remember to always use this Vue component whenever your Layout has pages attached to it. &lt;q-layout&gt; ... &lt;q-page-container&gt; &lt;!-- This is where your pages will get injected into your Layout --&gt; &lt;router-view /&gt; &lt;/q-page-container&gt; ...&lt;/q-layout&gt; Read all Vue Router documentation to fully understand the example above and how to configure the router and its routes for your app."},{"title":"Internationalization (I18n)","updated":"2019-01-01T13:13:27.940Z","permalink":"https://quasar-framework.org/components/internationalization.html","text":"Internationalization is a design process that ensures a product (a website or application) can be adapted to various languages and regions without requiring engineering changes to the source code. Think of internationalization as readiness for localization. The recommended package for handling website/app is vue-i18n. This package should be added as an App Plugin. See the specific example for plugging in vue-i18n. It should be noted that what is described below is the internationalization of quasar-framework components only. If you need to internationalize your own components, read the documentation indicated above and configure the project by editing the files located in &lt;project&gt;/src/i18n (you may need to create this directory). Quasar components have their own labels too. One option is to configure labels through the label properties on each instance of Quasar components like QTable or QDatetime. This is how you can customize the text to match the selected language. This however, also takes time and adds unnecessary complexity to your website/app. Instead, in many standard cases, you can use the Quasar I18n (applies to Quasar components only!) system, which has a number of standard label definitions translated for you, like “Cancel”, “Clear”, “Select”, “Update”, etc. No need to translate these again!! For a complete list of available languages and phrases, check Quasar I18n on Github.If your desired language is not on that list, then feel free to submit a PR to add it. It takes from 5 to 10 minutes at most. We kindly welcome any language! Configuring the Default LanguageEdit /quasar.conf.js:framework: &#123; i18n: 'de'&#125; Dynamically Changing LanguageExample with a QSelect to dynamically change the Quasar components language:&lt;template&gt; &lt;q-select stack-label=\"I18n\" :options=\"[ &#123; label: 'English (US)', value: 'en-us' &#125;, &#123; label: 'English (UK)', value: 'en-uk' &#125;, &#123; label: 'Romanian', value: 'ro' &#125;, &#123; label: 'Chinese (Simplified)', value: 'zh-hans' &#125;, &#123; label: 'Italian', value: 'it' &#125;, &#123; label: 'Spanish', value: 'es' &#125;, &#123; label: 'French', value: 'fr' &#125;, &#123; label: 'German', value: 'de' &#125;, &#123; label: 'Russian', value: 'ru' &#125;, ....... ]\" v-model=\"lang\" /&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; lang: this.$q.i18n.lang &#125; &#125;, watch: &#123; lang (lang) &#123; // dynamic import, so loading on demand only import(`quasar-framework/i18n/$&#123;lang&#125;`).then(lang =&gt; &#123; this.$q.i18n.set(lang.default) &#125;) &#125; &#125;&#125;&lt;/script&gt; Using Quasar I18n in App SpaceAlthough the Quasar I18n is designed only for Quasar components, you can still use it for your own website/app components too. \"Close\" label in current Quasar I18n language is:&#123;&#123; $q.i18n.label.close &#125;&#125; Detecting LocaleThere’s also a method to determine user locale which is supplied by Quasar out of the box:// outside of a Vue file// for when you don't specify quasar.conf &gt; framework: 'all'import &#123; Quasar &#125; from 'quasar'// OTHERWISE:import Quasar from 'quasar'Quasar.i18n.getLocale() // returns a string// inside of a Vue filethis.$q.i18n.getLocale() // returns a string Setting up Translation Blocks in your SFCsThe following is an example recipe for using vue-i18n embedded &lt;i18n&gt; template components in your vue files with vue-i18n-loader, which you have to add in your quasar.conf.js. In this case the translations are stored in yaml format in the block. // quasar.confbuild: &#123; // OR use the equivalent chainWebpack() // with its own chain statements (CLI v0.16.2+) extendWebpack (cfg) &#123; cfg.module.rules.push(&#123; resourceQuery: /blockType=i18n/, use: [ &#123;loader: '@kazupon/vue-i18n-loader'&#125;, &#123;loader: 'yaml-loader'&#125; ] &#125;) ... &#125;&#125; UPPERCASEMany languages, such as Greek, German and Dutch have non-intuitive rules for uppercase display, and there is an edge case that you should be aware of: QBtn component will use the CSS text-transform: uppercase rule to automatically turn its label into all-caps. According to the MDN webdocs, “The language is defined by the lang HTML attribute or the xml:lang XML attribute.” Unfortunately, this has spotty implementation across browsers, and the 2017 ISO standard for the uppercase German eszett ß has not really entered the canon. At the moment you have two options: use the prop no-caps in your label and write the string as it should appear use the prop no-caps in your label and rewrite the string with toLocaleUpperCase by using the locale as detected by this.$q.i18n.getLocale() Handling Quasar UMDTo add a Quasar language pack you need to include the language pack JS tag for your Quasar version and also tell Quasar to use it. Example: &lt;!-- include this after Quasar JS tag --&gt;&lt;script src=\"https://cdn.jsdelivr.net/npm/quasar-framework@latest/dist/umd/i18n.pt-br.umd.min.js\"&gt;&lt;/script&gt;&lt;script&gt; Quasar.i18n.set(Quasar.i18n.ptBr)&lt;/script&gt; Check what tags you need to include in your HTML files by generating a sample with $ vue init quasarframework/quasar-starter-kit-umd &lt;folder&gt; and specifying a language code for Quasar I18n (other than default “en-us”)."},{"title":"Input (Textfield)","updated":"2018-10-05T13:17:40.833Z","permalink":"https://quasar-framework.org/components/input-textfield.html","text":"Quasar’s Input component is the basis for text (we’ll call it “Singe Line Input”) and textarea (we’ll call it “Multiple Line Input”) form input. It can be used for regular text input, passwords, email addresses, numbers, telephone numbers, urls and auto-growing text areas. Works well with QField for additional functionality such as a helper, error message placeholder and many others. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QInput']&#125; Basic Usage&lt;!-- Single Line Input --&gt;&lt;q-input v-model=\"text\" /&gt;&lt;q-input v-model=\"text\" stack-label=\"Stack Label\" /&gt;&lt;q-input v-model=\"text\" float-label=\"Float Label\" placeholder=\"Gigi\" /&gt;&lt;!-- Multiple Line Input --&gt;&lt;q-input v-model=\"area\" type=\"textarea\" float-label=\"Textarea\" :max-height=\"100\" rows=\"7\"/&gt;&lt;!-- max-height refers to pixels --&gt; Vue PropertiesSupports v-model which should be bound to a String or Number (depending on type property used) in your scope. Property Type Description type String Must be one of the following: text (default), textarea, email, tel, number, password, url and search. This is important as it determines the keyboard type popping up on mobile devices. readonly Boolean If set to true, textfield is readonly and the user cannot change value. clearable Boolean If used, the component offers the user an actionable icon to reset the current value to clear-value (which is by default an empty string). The icon appears only when the current value matches clear-value. clear-value String The value to which to reset the field model to when using clearable. The default value is an empty string. no-pass-toggle Boolean If type is ‘password’ and set to true, then password toggle is not shown. initial-show-password Boolean If type is ‘password’ and set to true, then password is toggled to visible by default. upper-case Boolean Transform input to upper case. lower-case Boolean Transform input to lower case. When you set type to “number”, there are some additional properties that you can use: Property Type Description decimals Number Maximum number of decimals that should be displayed. numeric-keyboard-toggle Boolean Some mobile keyboards do not allow to type the dot to compose a floating number, so this property adds an icon that when clicked/tapped it toggles the keyboard to/from an alphanumeric one. Also note you can use the native DOM attributes of an input: “min”, “max”, “step”. When you set type to “textarea”, these is an additional property that you can use: Property Type Description max-height Number Number in pixels that determines the maximum height of textarea which auto-grows. There’s also the native DOM attribute of a textarea: ‘rows’. Common input field properties: Property Type Description autofocus Boolean Focus input field after rendering component. placeholder String A text to be shown on textfield, mainly to explain what should be entered. loading Boolean Place the default spinner of the theme after textfield to highlight some process takes place in the background. Common input frame properties: Property Type Description prefix String A text that should be shown before the textfield. suffix String A text that should be shown after the textfield. float-label String A text label that will “float” up above the input field, once the input field gets focus. stack-label String A text label that will be shown above the input field and is static. color String One from Quasar Color Palette. inverted Boolean Inverted mode. Color is applied to background instead. inverted-light Boolean Inverted mode with a light color. Color is applied to background instead. dark Boolean Is QInput rendered on a dark background? align String One of ‘left’, ‘center’ or ‘right’ which determines the text align within textfield. disable Boolean If set to true, textfield is disabled and the user cannot type anything. hide-underline Boolean Hides the bottom border. error Boolean If set to true, the input fields colors are changed to show there is an error. warning Boolean Same as error, the input field color is changed to show there is a warning. before Array of Objects Icon buttons on left side of textfield. Read below more details. after Array of Objects Icon buttons on right side of textfield. Read below more details. no-parent-field Boolean Avoid trying to connect to a parent QField. IMPORTANTAll DOM attributes that apply to a native &lt;input&gt; or &lt;textarea&gt; can be used. Example: maxlength, rows, min/max/step, autocomplete and so on. Icon buttonsThis section refers to before and after properties which can add additional buttons as icons to the textfield. Here is the structure of the two properties: &#123; // required icon icon: String, // required function to call when // icon is clicked/tapped handler: Function, // Optional. Show icon button // if textfield model has a value content: Boolean, // Optional. Show icon button // if condition is true condition: Boolean, // Optional. Show icon button // if textfield is marked with error error: Boolean, // Optional. Show icon button // if textfield is marked with warning warning: Boolean&#125; Examples:&lt;!-- Show an icon button (with 'warning' as icon) when there is an error on QInput (through \"error\" prop)--&gt;&lt;q-input v-model=\"text\" :error=\"error\" type=\"password\" :after=\"[ &#123; icon: 'warning', error: true, handler () &#123; // do something... &#125; &#125; ]\"/&gt;&lt;!-- Show an icon button (with 'arrow_forward' as icon) when the model has a non empty value--&gt;&lt;q-input v-model=\"text\" :after=\"[ &#123; icon: 'arrow_forward', content: true, handler () &#123; // do something... &#125; &#125; ]\"/&gt; LabelingQInput comes with two built-in labeling possibilities. You can use the float-label or the stack-label properties to add text for the labeling of the field. A stack-label is static in its position above the field, whereas the float-label is more dynamic. Check the examples to the right to see the difference. &lt;q-input v-model=\"text\" stack-label=\"Stack Label\" placeholder=\"Add some text...\" /&gt;&lt;q-input v-model=\"text\" float-label=\"Float Label\"/&gt; As shown above, you can also add a placeholder to help explain to the user what type of input should be entered. Password InputIf you use the input type password, the component will hide the characters entered by the user, but it will also offer the user a clickable icon to toggle the input, to make the input legible. &lt;q-input v-model=\"text\" type=\"password\" float-label=\"Password\" /&gt; Number InputThe below example shows a number input type.&lt;q-input v-model=\"number\" type=\"number\" float-label=\"Number\" /&gt; Prefixes and SuffixesYou can add a text before or after the field as part of an input mask, for instance, for showing Euro or US Dollar currency. &lt;!-- Notice prefix property --&gt;&lt;q-input v-model=\"number\" type=\"number\" prefix=\"$US\" stack-label=\"Number\" /&gt;&lt;!-- Notice suffix property --&gt;&lt;q-input v-model=\"number\" type=\"number\" suffix=\"€\" stack-label=\"Number\" /&gt;&lt;!-- Notice suffix property --&gt;&lt;q-input v-model=\"email\" type=\"email\" suffix=\"@gmail.com\" stack-label=\"Type Google Email\" /&gt; Error StateYou can control the color to show a mistake in user input or some other systematic error. To do this set the error prop to true. &lt;q-input :error=\"error\" v-model=\"text\" float-label=\"Colored Black\" color=\"black\" /&gt; If you’d like to show the user an explanatory text about the error condition, you can wrap the QInput in a QField component. &lt;!-- Notice error prop is now used on wrapper QField instead of on QInput now--&gt;&lt;q-field :error=\"error\" error-label=\"Oh buggers! You made a boo boo.\"&gt; &lt;q-input v-model=\"text\" float-label=\"Colored with Error\" color=\"amber\" /&gt;&lt;/q-field&gt; Please refer to the QField documentation for more info about its usage. Loading StateIf, for some reason, the input requires some longer term background action or process, you can add a spinner to indicate progress by setting the loading prop to true. &lt;q-input :loading=\"loading\" v-model=\"text\" placeholder=\"Add some text...\" /&gt; Vue Methods Vue Method Description clear() Clear the model. Sets it to empty String &#39;&#39;. togglePass() Applies to type “password” only. Toggles between showing legible password or not. focus() Focused the textfield. blur() Makes textfield lose focus. select() Selects all textfield text and focuses. Vue Events Vue Event Description @input(newVal) Triggered on immediate model value change. @change(newVal) Triggered on lazy model value change. @clear(clearVal) Triggered when the model is cleared. @focus Triggered on focus. @blur Triggered a blur. @keydown Triggered by keydown event on textfield. @keyup Triggered by keyup event on textfield. @click Triggered by a native click event on textfield. @paste (v0.17.10+) Triggered by a paste event on the textfield. FormattingIt is possible to add formatting to a QInput in two ways. One is for the basic component. The other is with the QField component. Both methods offer “inverted” coloring. Additional Vue Properties Property Type Description color String The color the QInput should have. The default is primary. inverted Boolean Set to true, to color field’s background set by the color prop. inverted-light Boolean Set to true, to color field’s background set by the color prop (when that color is light). dark Boolean Set to true, if the field is on a dark background. It will invert the text color to make it light. align Text Controls the ‘right’, ‘center’ or ‘left’ alignment of the input. The default is ‘left’. Basic Formatting ExamplesThis will color the field black. &lt;q-input v-model=\"text\" float-label=\"Colored\" color=\"black\" /&gt; This will show an inverted colored input field in amber. Here, the text is automatically inverted to a lighter color. &lt;q-input v-model=\"text\" inverted-light color=\"amber\" stack-label=\"Amber Colored Background\" /&gt; AlignmentYou can also align the input to the right, center or left. The default is left. The below example will show a field for Euro currency input. &lt;!-- Align textfield content to the right --&gt;&lt;q-input v-model=\"number\" align=\"right\" type=\"number\" suffix=\"€\" stack-label=\"Number\" /&gt; Basic Usage with QFieldIt is also possible to further enhance a QInput by wrapping it in a QField component. &lt;div class=\"bg-grey-9\" style=\"width: 500px; padding: 25px\"&gt; &lt;q-field icon=\"wifi\" label=\"Some Label\" :count=\"10\" helper=\"Some helper\" :error=\"error\" error-label=\"Some error\" &gt; &lt;q-input v-model=\"text\" dark color=\"yellow\" float-label=\"Textfield\" /&gt; &lt;/q-field&gt;&lt;/div&gt; The above usage of QField will show the input field within a dark grey background with an inverse white text. Notice the usage of the dark prop for QInput. This controls the inversion of the text color. Please refer to the QField documentation for more info about its usage. Validations with VuelidateQuasar’s recommendation for doing form components validations is Vuelidate as it fits great with the overall architecture. It’s simple, lightweight and model-based. You need to have Vuelidate added to your project first. See here. &lt;template&gt; &lt;q-input type=\"email\" :error=\"$v.email.$error\" v-model=\"email\" @blur=\"$v.email.$touch\" /&gt;&lt;/template&gt;&lt;script&gt;import &#123; required, email &#125; from 'vuelidate/lib/validators'export default &#123; data () &#123; return &#123; email: '' &#125; &#125;, validations: &#123; email: &#123; required, email &#125; &#125;&#125;&lt;/script&gt; For more options like displaying an error label, a helper or character counter, wrap QInput with a QField. Here is a more involved example. Directive Modifiers for v-modelVue comes with standard modifiers on v-model, which can be useful in conjunction with QInput. They are .lazy and .trim. .lazyVue will soon supply the .lazy modifier for v-model on components too, but until then, you can use the longer equivalent form:&lt;q-input :value=\"model\" @change=\"val =&gt; &#123; model = val &#125;\"/&gt; .trimIf you want the user’s input to be trimmed automatically, you can add the trim modifier to your v-model managed inputs: &lt;q-input v-model.trim=\"msg\" /&gt;"},{"title":"Introduction for Beginners","updated":"2018-05-20T16:04:39.316Z","permalink":"https://quasar-framework.org/components/introduction-for-beginners.html","text":"Before you begin with Quasar, it is a good idea to get acquainted with ES6 and have a fairly good knowledge about how Vue works. (quick overview of ES6 and full description – don’t worry, you don’t need to understand ALL of ES6). For devs experienced with reactive UIs, the Vue documentation itself takes half a day at most to read top-to-bottom and will help you understand how Quasar components can be used and configured. If you are a total beginner to Vue and reactive UI libraries and want a good tutorial, we recommend you take a look at the Udemy Course - Vue JS 2 - The Complete Guide. After reading the Vue documentation, let’s clear up some of the most frequently asked questions, like “How can I use Quasar components, Vue properties, methods and events”. Single File Vue ComponentsYou’ll be building your Quasar app using *.vue files which contain multiple sections: ‘template’ (HTML), ‘script’ (Javascript) and ‘style’ (CSS). &lt;template&gt; &lt;!-- you define your Vue template here --&gt;&lt;/template&gt;&lt;script&gt;// This is where your Javascript goes// to define your Vue component, which// can be a Layout, a Page or your own// component used throughout the app.export default &#123; //&#125;&lt;/script&gt;&lt;style&gt;/* This is where your CSS goes */&lt;/style&gt; CSS preprocessorsFor the &lt;style&gt; tag, you can also use whatever CSS preprocessor you want. Stylus is available out of the box. For SCSS/SASS or LESS, you’ll need to install their Webpack loaders (example: yarn add --dev less-loader or npm install --save-dev less-loader). After installing the loader you need (remember Stylus is already installed for you), you can specify you want your chosen preprocessor to handle the CSS code you’re writing: &lt;!-- notice lang=\"stylus\" --&gt;&lt;style lang=\"stylus\"&gt;.some-div font-size 15px&lt;/style&gt; In the above example, you would replace stylus with the preprocessor you’ve chosen. Using Quasar DirectiveQuasar comes with a few custom Vue Directives. These directives can be applied on almost any DOM element or Component. Example of a Quasar directive:&lt;div v-ripple&gt;Click Me&lt;/div&gt; Notice how Ripple is used in the HTML template as v-ripple. Vue directives are prefixed with v-. In order for you to use any of the directives that Quasar supplies, you first need to tell Quasar you want it embedded. Open /quasar.conf.js file and add the following reference: framework: &#123; directives: ['Ripple']&#125; Let’s take another example. We now also want TouchPan and TouchSwipe directives, so we add them too in /quasar.conf.js:framework: &#123; directives: ['Ripple', 'TouchPan', 'TouchSwipe']&#125; Now we can write in your Vue files template: &lt;div v-touch-pan=\"handler\"&gt;...&lt;/div&gt;&lt;div v-touch-swipe=\"handler\"&gt;...&lt;/div&gt;&lt;div v-ripple&gt;Click me. I got ripples.&lt;/div&gt; Using Quasar ComponentsQuasar components have names beginning with “Q” like “QBtn” or “QElementResizeObservable”. In order to use them, you need to add a reference to them in /quasar.conf.js. Let’s take the following example with a QBtn and QIcon and then we’ll see how to embed these components in our app:&lt;div&gt; &lt;q-btn @click=\"doSomething\"&gt;Do something&lt;/q-btn&gt; &lt;q-icon name=\"alarm\" /&gt;&lt;/div&gt; Notice how QBtn is used in the Vue HTML template as &lt;q-btn&gt;. If we’d import QElementResizeObservable, then we’d use it in template as &lt;q-element-resize-observable&gt;. Now on /quasar.conf.js, you would add:framework: &#123; components: ['QBtn', 'QIcon']&#125; Using Quasar PluginsQuasar Plugins are features that you can use both in your Vue files as well as outside of them, like Notify, ActionSheet, AppVisibility and so on. In order to use them, you need to add a reference to them in /quasar.conf.js:framework: &#123; plugins: ['Notify', 'ActionSheet']&#125; Let’s take Notify as an example and see how we can then use it. In a Vue file, you’d write something like this:&lt;template&gt; &lt;div&gt; &lt;q-btn @click=\"$q.notify('My message')\" color=\"primary\" label=\"Show a notification\" /&gt; &lt;q-btn @click=\"showNotification\" color=\"primary\" label=\"Show another notification\" /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; methods: &#123; showNotification () &#123; this.$q.notify('Some other message') &#125; &#125;&#125;&lt;/script&gt; Notice that in the template area we’re using $q.&lt;plugin-name&gt; and in our script we say this.$q.&lt;plugin-name&gt;. Now let’s see an example of Notify being used outside of a Vue file:import &#123; Notify &#125; from 'quasar'// ...Notify.create('My message') Importing All Components and Directives for Quick TestReferencing all Quasar Components, Directives and Plugins can be tiresome when you just want to do a quick test. In this case, you can tell Quasar to import them all by editing /quasar.conf.js like this: framework: 'all' IMPORTANTThis will not take advantage of tree shaking, causing your bundle to become bloated with unnescesary/unused code. Not recommended for production. Use this only for quick testing purposes. Self Closing TagsSome Quasar components do not need you to include HTML content inside of them. In this case, you can use them as self closing tags. One example with QIcon below: &lt;q-icon name=\"cloud\" /&gt; Self-closing means the above template is the equivalent to: &lt;q-icon name=\"cloud\"&gt;&lt;/q-icon&gt; Both forms are valid and can be used. It works the same with regular DOM elements: &lt;div class=\"col\" /&gt;&lt;!-- equivalent to: --&gt;&lt;div class=\"col\"&gt;&lt;/div&gt; Some eslint-plugin-vue linting rules actually enforce using the self-closing syntax. Handling Vue PropertiesYou will notice throughout the documentation that Quasar components have a section called “Vue Properties”. These are often called Props in Vue documentation. Example: Vue Property Type Description infinite Boolean Infinite slides scrolling size String Thickness of loading bar. speed Number How fast should loading bar update its value (in milliseconds). columns Object Object defining columns (see “Columns Definition” below). offset Array Array with two numbers. Offset on horizontal and vertical (in pixels). Let’s take some examples with a bogus Quasar component (we will call it QBogus) that supports the properties above. We will discuss each of the types of Vue properties in the below sections. Boolean PropertyA boolean property means it only accepts a strictly Boolean value. The values will not be cast to Boolean, so you must ensure you are using a true Boolean. If you are trying to control that property and change it dynamically at runtime, then bind it to a variable in your scope:&lt;template&gt; &lt;q-bogus :infinite=\"myInfiniteVariable\" /&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; myInfiniteVariable: false &#125; &#125;&#125;&lt;/script&gt; If, on the other hand, you know this Boolean value is not going to change, you can use the shorthand version of the variable like a component attribute and just specify it. In other words, if you don’t bind the variable to a variable in the component’s scope as it will always be true:&lt;template&gt; &lt;q-bogus infinite /&gt; &lt;!-- the following is perfectly valid, but it&apos;s a longer version --&gt; &lt;q-bogus :infinite=&quot;true&quot; /&gt;&lt;/template&gt; String PropertyAs you can imagine, Strings are required as a value for this type of property.&lt;template&gt; &lt;!-- direct assignment, no need for a variable in our scope --&gt; &lt;q-bogus size=\"24px\" /&gt; &lt;!-- we can also bind it to a variable in our scope so we can dynamically change it --&gt; &lt;q-bogus :size=\"mySize\" /&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; // notice String as value mySize: '16px' &#125; &#125;&#125;&lt;/script&gt; Number Property&lt;template&gt; &lt;!-- Case 1. Direct assignment. Notice the colon (\":\") before property name. --&gt; &lt;q-bogus :speed=\"50\" /&gt; &lt;!-- Case 2. Assignment through a scope variable --&gt; &lt;q-bogus :speed=\"myNumber\" /&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; // notice Number as value myNumber: 50 &#125; &#125;&#125;&lt;/script&gt; Object Property&lt;template&gt; &lt;!-- Case 1. Direct assignment. --&gt; &lt;q-bogus :columns=\"&#123;key: 'value', anotherKey: 'another value'&#125;\" /&gt; &lt;!-- or a more elegant way for Case 1: --&gt; &lt;q-bogus :columns=\"&#123; key: 'value', anotherKey: 'another value' &#125;\" /&gt; &lt;!-- Case 2. Assignment through a scope variable --&gt; &lt;q-bogus :columns=\"myColumns\" /&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; myColumns: &#123; key: 'value', anotherKey: 'another value' &#125; &#125; &#125;&#125;&lt;/script&gt; Array Property&lt;template&gt; &lt;!-- Case 1. Direct assignment. --&gt; &lt;q-bogus :offset=\"[10, 20]\" /&gt; &lt;!-- Case 2. Assignment through a scope variable --&gt; &lt;q-bogus :offset=\"myOffset\" /&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; myOffset: [10, 20] &#125; &#125;&#125;&lt;/script&gt; Handling Vue MethodsYou will notice throughout the documentation that some Quasar components have a section called “Vue Methods”. Example: Vue Method Description next() Goes to next slide. previous(doneFn) Goes to previous slide. toggleFullscreen() Toggles fullscreen mode. In order for you to access these methods, you will need to set a Vue reference on the component first. Here’s an example: &lt;template&gt; &lt;!-- Notice ref=\"myRef\". We will use the name assigned to \"ref\" in the script part below --&gt; &lt;q-bogus ref=\"myRef\" /&gt;&lt;/template&gt;&lt;script&gt;export default &#123; // we can now access `this.$refs.myRef` // an example on the mounted() Vue component hook mounted () &#123; // calling \"next()\" method: this.$refs.myRef.next() &#125; // calling before mount point might result in errors // as Vue hasn't yet prepared the Vue references&#125;&lt;/script&gt; Handling Vue EventsYou will notice throughout the documentation that some Quasar components have a section called “Vue Events”. Do not confuse these Vue events with the Global Event Bus as these two have nothing in common. Example of “Vue Events” section in docs: Event Name Description @open Triggered right after the Modal is opened. @close Triggered right after the Modal is closed. In order for you to catch these events, when they are triggered, you will need to add listeners for them on the component itself in the HTML template. Here’s an example: &lt;template&gt; &lt;q-bogus @open=\"doSomething\" @close=\"doSomethingElse\" /&gt;&lt;/template&gt;&lt;script&gt;export default &#123; methods: &#123; doSomething () &#123; // this method has been called (in this case) // because @open event was triggered by QBogus component &#125;, doSomethingElse () &#123; // this method has been called (in this case) // because @close event was triggered by QBogus component &#125; &#125;&#125;&lt;/script&gt; There are times when you need to access native DOM events on a Quasar component too, like the native @click. Do not confuse native events with the Vue events emitted by the component. They are different things. Let’s take an example: let’s say we have a component (QBogus) that emits @open and @close, but doesn’t emit a @click event. @click being a native DOM event, we can still catch it with the .native modifier: &lt;!-- Notice \"@click.native\" --&gt;&lt;q-bogus @click.native=\"myMethod\" /&gt;"},{"title":"JS Animations","updated":"2018-05-18T22:01:01.022Z","permalink":"https://quasar-framework.org/components/js-animations.html","text":"You can create animations through Javascript (using RAF - requestAnimationFrame()) with Quasar. import &#123; animate &#125; from 'quasar'let id = animate.start(&#123; name: 'unique-animation-name', // optional, if none is supplied a unique one is created and returned from: '0', // current position to: '100', // final position duration: 300, // duration of the animation done (finalPosition) &#123;...&#125;, // function to call when animation is done cancel (currentPosition) &#123;...&#125;, // function to call when animation is aborted apply (currentPosition) &#123;...&#125;, // function called on each step so you can apply changes easing (currentPosition) &#123; // custom easing function, see below // ...return transformation of currentPosition... &#125;&#125;)// Starting an animation with same name will abort the previous one// Stop an animation using its nameanimate.stop('unique-animation-name')// oranimate.stop(id) // id returned from above Example:import &#123; animate &#125; from 'quasar'animate.start(&#123; from: 6, to: 158, apply (pos) &#123; el.style.maxHeight = `$&#123;pos&#125;px` &#125;, done () &#123; console.log(`we're done!`) &#125;&#125;) Easing FunctionsEasing functions take the current percent progress of the animation (a float between 0 and 1) and return a position multiplier (0 being initial position and 1 being final position). The following easing functions are included: ease[In|Out|InOut][Quad|Cubic|Quart|Quint|Circ] For example, easeInCubic. Quad through Quint get progressively more exaggerated. Circ is slightly different (the graph is a quarter circle), it accelerates much faster at the end. overshoot Shoots past the end position and returns slowly Material Design Curves: standard Use for on-screen movement. Accelerates quickly, decelerates slowly decelerate Use for elements entering the screen. Flies in and slowly decelerates (easeOutCubic). accelerate Use for elements leaving the screen. Accelerates and then leaves at full velocity (easeInCubic). sharp Use for elements leaving the screen that may return (e.g. navigation bar). Accelerates and decelerates (easeInOutQuad) Example:import &#123; animate, easing &#125; from 'quasar'animate.start(&#123; from: 0, to: 100, easing: easing.standard ...&#125;) Or with the carousel:&lt;template&gt; &lt;q-carousel :swipe-easing=\"overshoot\"&gt; Slides... &lt;/q-carousel&gt;&lt;/template&gt;&lt;script&gt;import &#123; easing, QCarousel &#125; from 'quasar'export default &#123; components: &#123; QCarousel &#125;, data: () =&gt; (&#123; overshoot: easing.overshoot &#125;)&#125;&lt;/script&gt;"},{"title":"Layout Drawer","updated":"2018-08-30T14:23:50.833Z","permalink":"https://quasar-framework.org/components/layout-drawer.html","text":"QLayout allows you to configure your views as a 3x3 matrix, containing an optional Header and/or Footer. If you haven’t already, please read QLayout documentation page first. InstallationEdit /quasar.conf.js:framework: &#123; components: [ 'QLayoutDrawer' ]&#125; Basic Usage&lt;q-layout&gt; ... &lt;q-layout-drawer side=\"left\"&gt; &lt;!-- drawer content --&gt; &lt;/q-layout-drawer&gt; ...&lt;/q-layout&gt; QLayoutDrawer Vue Properties Vue Property Type Description side String One of ‘left’ or ‘right’, depending on the Drawer position on Layout. overlay Boolean Overlay mode breakpoint Number Breakpoint (in pixels, defining window width) at which point the Drawer will be placed directly over the layout and won’t act as a mobile drawer anymore. Default is 992 (up to “sm”, including). behavior String One of ‘default’, ‘desktop’, ‘mobile’. The last two override the breakpoint and makes Drawer act only as on desktop or only as on mobile modes, regardless of window width. no-hide-on-route-change Boolean (Quasar v0.15.7+) Disable hiding of Drawer during route changes. no-swipe-open Boolean Disable ability to open Drawer by touch actions. no-swipe-close Boolean Disable ability to close Drawer by touch actions. Useful if you have components in your Drawer which require touch actions. The backdrop will still work with touch actions. content-style Object CSS Style in Object format for the Drawer container element. content-class String/Object/Array CSS classes for the Drawer container element. mini Boolean (v0.15.11+) If drawer is in mini mode or not. mini-width Number (v0.17+) CSS unit for drawer width when in mini mode. Default: 60 width Number The width in pixels of the drawer (when not in mini mode). Default: 300 show-if-above Boolean (v0.17.11+) The initial state of the drawer when it gets rendered for first time, overriding the model (which might have been previously set to “false” by a user toggle). QLayoutDrawer Vue Methods Vue Property Description @on-layout(Boolean) String (v0.17.9+) Emitted when Drawer toggles using space on Layout. Styling Examples&lt;q-layout-drawer content-class=\"bg-grey-3\" :content-style=\"&#123;padding: '20px'&#125;\" side=\"left\"&gt; ...&lt;/q-layout-drawer&gt; The Vue Object notation for content-style is mandatory. &lt;q-layout-drawer :content-class=\"['bg-grey-3', 'q-pa-sm']\" side=\"left\"&gt; ...&lt;/q-layout-drawer&gt; The BreakpointIf you’ve played with the layout in desktop mode, you might notice how the left and right sides / drawers magically hide, as you decrease the screen width. This is part of the smart responsiveness designed into Quasar’s layout component. If you’d like to control how the left and right side / drawers work, you have a prop called breakpoint on each QLayoutDrawer. This value represents the minimum size of the screen in pixels, before the Drawer is forced to float above the Layout. This is a fantastic and important function in maximizing screen real estate for smaller devices. TipAlso take a look at the behavior property if you want the Drawer to act only as on a narrow screen or only as on a wide screen, effectively disable the breakpoint. Using v-modelThere’s the possibility to use v-model to control the state of Drawer (opened/showing and closed/hidden). &lt;template&gt; ... &lt;q-layout-drawer v-model=\"drawer\"&gt; ... &lt;/q-layout-drawer&gt; ... &lt;q-btn @click=\"drawer = !drawer\" flat round dense icon=\"menu\" /&gt; ...&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; // \"false\" means hidden // \"true\" means visible drawer: true &#125; &#125;&#125;&lt;/script&gt; Please note that the model can instantly get changed upon Drawer being rendered if the breakpoint requires it. Mini modeRequires Quasar v0.15.11+ Drawer can operate in two modes: ‘normal’ and ‘mini’, and you can switch between them by using the Boolean mini property on QLayoutDrawer. Please note that “mini” mode does not apply when in “mobile” behavior. CSS classesThere are some CSS classes that will help you customize the drawer when dealing with “mini” mode. These are very useful especially when using the “click” trigger: CSS Class Description q-mini-drawer-hide Hide when drawer is in “mini” mode. q-mini-drawer-only Show only when drawer is in “mini” mode. You can also write your own CSS classes based on the fact that QLayoutDrawer has q-layout-drawer-normal CSS class when in “normal” mode and q-layout-drawer-mini when in “mini” mode. Also, when drawer is in “mobile” behavior, it gets q-layout-drawer-mobile CSS class. SlotsBy default, when in “mini” mode, Quasar CSS hides a few DOM elements to provide a neat narrow drawer. But there may certainly be use-cases where you need a deep tweak. You can use the “mini” Vue slot of QLayoutDrawer just for that. The content of this slot will replace your drawer’s default content when in “mini” mode. &lt;template&gt; ... &lt;q-layout-drawer :mini=\"miniState\" &gt; &lt;!-- drawer content when not \"mini\" --&gt; &lt;div slot=\"mini\"&gt; &lt;!-- drawer content when in \"mini\" mode --&gt; &lt;/div&gt; &lt;/q-layout-drawer&gt; ...&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; miniState: false &#125; &#125;&#125;&lt;/script&gt; Example with mouseover/mouseout trigger&lt;template&gt; ... &lt;q-layout-drawer :mini=\"miniState\" @mouseover=\"miniState = false\" @mouseout=\"miniState = true\" &gt; &lt;!-- drawer content --&gt; &lt;/q-layout-drawer&gt; ...&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; miniState: false &#125; &#125;&#125;&lt;/script&gt; Example with click triggerWhen in “mini” mode, if user clicks on Drawer then we switch to normal mode. &lt;template&gt; ... &lt;q-layout-drawer :mini=\"miniState\" @click.capture=\"drawerClick\" &gt; &lt;!-- drawer content --&gt; &lt;!-- we also need a way for user to be able to switch back to \"mini\" mode, so here's an example with a button which gets hidden when on \"mini\" mode: --&gt; &lt;q-btn class=\"q-mini-drawer-hide\" label=\"Go to mini state\" @click=\"miniState = true\" /&gt; &lt;/q-layout-drawer&gt; ...&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; miniState: false &#125; &#125;, methods: &#123; drawerClick (e) &#123; // if in \"mini\" state and user // click on drawer, we switch it to \"normal\" mode if (this.miniState) &#123; this.miniState = false // notice we have registered an event with capture flag; // we need to stop further propagation as this click is // intended for switching drawer to \"normal\" mode only e.stopPropagation() &#125; &#125; &#125;&#125;&lt;/script&gt;"},{"title":"Knob","updated":"2018-07-25T14:14:24.668Z","permalink":"https://quasar-framework.org/components/knob.html","text":"Quasar Knob is another way of making the user select a Number value from a predefined range. With optional steps included. See demo. Works well with QField for additional functionality such as a helper, error message placeholder and many others. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QKnob']&#125; Basic Usage&lt;q-knob v-model=\"model\" :min=\"min\" :max=\"max\"/&gt;&lt;!-- With custom placeholder --&gt;&lt;q-knob v-model=\"model\" :min=\"min\" :max=\"max\" :placeholder=\"'$ ' + model\"/&gt;&lt;!-- Disabled state --&gt;&lt;q-knob disable v-model=\"model\" :min=\"min\" :max=\"max\"/&gt; Vue PropertiesSupports v-model which should be a Number. Vue Property Type Description size String CSS String determining the width and height of the Knob. Examples: “120px”, “12rem”. step Number Number representing difference between two values that the model can take. Default: 1. decimals Number Number of decimals to represent the model with, if no placeholder / default slot is used. min Number Minimum value that the model can take. max Number Maximum value that the model can take. color String One from Quasar Color Palette. track-color String One from Quasar Color Palette. line-width String Line width of Knob. Default is ‘6px’. readonly Boolean Sort of a “display” only mode. Model cannot be altered. disable Boolean When set to true the model cannot be altered. Vue Events Vue Event Description @input(newVal) Triggered immediately on model value change. @change(newVal) Triggered on lazy model value change. @drag-value(val) (v0.15.11+) Triggered while dragging (or clicking) on Knob. More ExamplesLazy InputVue will soon supply the .lazy modifier for v-model on components too, but until then, you can use the longer equivalent form:&lt;q-knob :value=\"model\" @change=\"val =&gt; &#123; model = val &#125;\" :min=\"min\" :max=\"max\"/&gt; We can go a step further and display the current value while dragging:&lt;!-- v0.15.11+ --&gt;&lt;q-knob :value=\"model\" @change=\"val =&gt; &#123; model = val &#125;\" @drag-value=\"val =&gt; &#123; currentValue = val &#125;\" :min=\"min\" :max=\"max\"&gt; &#123;&#123; currentValue &#125;&#125;&lt;/q-knob&gt; Multi-colored with a Euro icon. &lt;q-knob v-model=\"model\" size=\"120px\" style=\"font-size: 1.5rem\" color=\"secondary\" track-color=\"yellow-3\" line-width=\"5px\" :min=\"min\" :max=\"max\" :step=\"5\"&gt; &lt;q-icon class=\"on-left\" name=\"euro_symbol\" /&gt; &#123;&#123;model&#125;&#125;&lt;/q-knob&gt; Read-only state (different than disabled, as the mouse pointer doesn’t change).&lt;q-knob v-model=\"model\" :min=\"min\" :max=\"max\" color=\"primary\" readonly&gt; &lt;q-icon class=\"on-left\" name=\"volume_up\" /&gt; &#123;&#123;model&#125;&#125;&lt;/q-knob&gt; Using a QField to highlight error state.&lt;q-field label=\"Knob\" icon=\"cake\" helper=\"Touch to change\" :error=\"knobHasError\" error-label=\"Invalid value selected.\"&gt; &lt;q-knob v-model=\"model\" :min=\"min\" :max=\"max\" &gt; &lt;q-icon class=\"on-left\" name=\"volume_up\" /&gt; &#123;&#123;model&#125;&#125; &lt;/q-knob&gt;&lt;/q-field&gt;"},{"title":"Jumbotron","updated":"2018-07-25T14:14:24.668Z","permalink":"https://quasar-framework.org/components/jumbotron.html","text":"Quasar Jumbotron is similar to the one introduced by Bootstrap. It’s a big box for calling extra attention to some special content or information. Works great by using Quasar Typography CSS classes. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QJumbotron']&#125; ExamplesBasic:&lt;q-jumbotron&gt; &lt;div class=\"q-display-3\"&gt;Hello, world!&lt;/div&gt; &lt;div class=\"q-subheading\"&gt; This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured content or information. &lt;/div&gt; &lt;hr class=\"q-hr q-my-lg\"&gt; &lt;div class=\"q-title q-mb-md\"&gt;Check out Quasar Framework components.&lt;/div&gt; &lt;q-btn color=\"primary\" class=\"q-py-sm q-px-xl\" label=\"Learn more\" /&gt;&lt;/q-jumbotron&gt; Coloring, with a dark background:&lt;q-jumbotron class=\"bg-primary\" dark&gt; &lt;div class=\"q-display-3\"&gt;Hello, world!&lt;/div&gt; &lt;div class=\"q-subheading\"&gt; This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured content or information. &lt;/div&gt; &lt;hr class=\"q-hr q-my-lg\"&gt; &lt;div class=\"q-title q-mb-md\"&gt;Check out Quasar Framework components.&lt;/div&gt; &lt;q-btn color=\"white\" text-color=\"primary\" class=\"q-py-sm q-px-xl\" label=\"Learn more\" /&gt;&lt;/q-jumbotron&gt; Using a CSS gradient for background:&lt;q-jumbotron gradient=\"circle, rgba(34,193,195,1) 0%, rgba(253,187,45,1) 100%\"&gt; &lt;div class=\"q-display-3\"&gt;Hello, world!&lt;/div&gt; &lt;div class=\"q-subheading\"&gt; This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured content or information. &lt;/div&gt; &lt;hr class=\"q-hr q-my-lg\"&gt; &lt;div class=\"q-title q-mb-md\"&gt;Check out Quasar Framework components.&lt;/div&gt; &lt;q-btn color=\"primary\" class=\"q-py-sm q-px-xl\" label=\"Learn more\" /&gt;&lt;/q-jumbotron&gt; Using an image for background:&lt;q-jumbotron dark img-src=\"statics/mountains.jpg\"&gt; &lt;div class=\"q-display-3\"&gt;Hello, world!&lt;/div&gt; &lt;div class=\"q-subheading\"&gt; This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured content or information. &lt;/div&gt; &lt;hr class=\"q-hr q-my-lg\"&gt; &lt;div class=\"q-title q-mb-md\"&gt;Check out Quasar Framework components.&lt;/div&gt; &lt;q-btn color=\"primary\" class=\"q-py-sm q-px-xl\" label=\"Learn more\" /&gt;&lt;/q-jumbotron&gt; Vue Properties Vue Property Type Description dark Boolean Are we displaying it on a dark background? tag String HTML tag to use to render the component. Default: ‘div’ img-src String Background image URL to statics folder. gradient String CSS gradient value"},{"title":"Layout Header & Footer","updated":"2018-05-18T22:01:01.024Z","permalink":"https://quasar-framework.org/components/layout-header-and-footer.html","text":"QLayout allows you to configure your views as a 3x3 matrix, containing an optional Header and/or Footer. If you haven’t already, please read QLayout documentation page first. InstallationEdit /quasar.conf.js:framework: &#123; components: [ 'QLayoutHeader', 'QLayoutFooter' ]&#125; Basic Usage&lt;q-layout&gt; ... &lt;q-layout-header v-model=\"header\"&gt; &lt;!-- header content --&gt; &lt;/q-layout-header&gt; ... &lt;q-layout-footer v-model=\"footer\"&gt; &lt;!-- footer content --&gt; &lt;/q-layout-footer&gt; ...&lt;/q-layout&gt; QLayoutHeader/QLayoutFooter Vue Properties Vue Property Type Description reveal Boolean Scrolling hides header/footer. reveal-offset Number (Default: 250) Scrolling distance in pixels that triggers the hide. Reveal PropertyYou’ll notice in playing with the QLayout view configuration that if you set the header to “hhh” (all small letters), the header will be set to a static position at the top of the page. This in turn means, the header will move off the screen as the user scrolls down the page. If the user then needs to use the navigation in the header, he/she must scroll completely up to top of the page to get to it and this is bad UX. One way to help the user is to add a back-to-top button on the page. Another way is to use the reveal prop. The reveal prop overrides “H” in QLayout view prop, by fixing the header to the top of the screen. As the user scrolls down more than reveal-offset pixels, the header rolls up it’s own height above the top of the screen. As soon as the user scrolls back up (just 1 pixel), the header comes into view again immediately. Same goes for QLayoutFooter. Hiding Header/Footer CompletelyQLayoutHeader and QLayoutFooter support a Boolean v-model which determines if they take up space on screen or not. This does not interferes with the reveal property, which works only if the v-model is set to true. &lt;template&gt; ... &lt;q-layout-header v-model=\"state\"&gt; ... &lt;/q-layout-header&gt; ...&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; state: true &#125; &#125;, methods: &#123; toggleHeader () &#123; this.state = !this.state &#125; &#125;&#125;&lt;/script&gt; QLayoutHeader/QLayoutFooter Vue Events Vue Event Description @reveal(state) Emitted when reveal state changes. Handling Quasar ThemesYou can make some tweaks to distinguish between Material and iOS themes. You’ll notice in the demo that header and footer has different looks based on Quasar theme. Here’s an example how to do it below. Notice that in this example we also place navigational tabs in header (for Material) or footer (for iOS): &lt;!-- layout.vue --&gt;&lt;q-layout-header reveal&gt; &lt;q-toolbar :inverted=\"$q.theme === 'ios'\"&gt; .... &lt;/q-toolbar&gt; &lt;nav-tabs v-if=\"$q.theme === 'mat'\" /&gt;&lt;/q-layout-header&gt;&lt;q-layout-footer reveal v-if=\"$q.theme === 'ios'\"&gt; &lt;nav-tabs /&gt;&lt;/q-layout-footer&gt;&lt;!-- nav-tabs.vue --&gt;&lt;q-tabs :inverted=\"$q.theme === 'ios'\"&gt; &lt;q-route-tab......&lt;/q-tabs&gt;"},{"title":"Layout Page","updated":"2018-07-25T14:14:24.669Z","permalink":"https://quasar-framework.org/components/layout-page.html","text":"QLayout must contain page content. If you haven’t already, please read QLayout documentation page first. InstallationEdit /quasar.conf.js:framework: &#123; components: [ 'QPageContainer', 'QPage' ]&#125; Basic UsageA QPage must be encapsulated by QPageContainer, which in turn must be a child of QLayout. &lt;q-layout&gt; ... &lt;q-page-container&gt; &lt;q-page&gt; &lt;!-- page content --&gt; &lt;/q-page&gt; &lt;/q-page-container&gt;&lt;/q-layout&gt; Usually, the QPageContainer is part of the Layout template (where it contains a &lt;router-view /&gt; child only), and its content goes into separate vue files under /src/pages. If you haven’t already, please read Integrating Layout with Router. &lt;!-- vue file for Layout: --&gt;&lt;q-layout&gt; ... &lt;q-page-container&gt; &lt;router-view /&gt; &lt;/q-page-container&gt;&lt;/q-layout&gt;&lt;!-- vue file for a Page: --&gt;&lt;q-page padding&gt; &lt;!-- page content --&gt;&lt;/q-page&gt; QPage Vue Properties Vue Property Type Description padding Boolean Adds a default dynamic padding to the page. style-fn Function Described below. Style-fnA QPage needs a QLayout, because QLayout controls all the offsets of a page, keeping account of the space that header/footer/drawer use, according to its view property configuration. By default, your QPage component will have a min-height CSS property set on it to ensure that the content fills the screen at all times, even when the content is just a few lines. If you wish to tweak, or even remove this property, you can do so by using the style-fn property: &lt;template&gt; &lt;q-page :style-fn=\"myTweak\"&gt;...&lt;/q-page&gt;&lt;/template&gt;&lt;script&gt;export default &#123; // ... methods: &#123; myTweak (offset) &#123; // \"offset\" is a Number (pixels) that refers to the total // height of header + footer that occupies on screen, // based on the QLayout \"view\" prop configuration // this is actually what the default style-fn does in Quasar return &#123; minHeight: offset ? `calc(100vh - $&#123;offset&#125;px)` : '100vh' &#125; &#125; &#125;&#125;&lt;/script&gt;"},{"title":"Layout","updated":"2018-08-24T12:35:10.610Z","permalink":"https://quasar-framework.org/components/layout.html","text":"Layouts are the elements that wrap page content, like a navigational bar or drawer. Multiple pages can share the same Layout, so the code is reusable, which is one of their key points. Quasar Layouts are NOT mandatory, but they do help you better structure your website/app. They have a number of features which offer you major benefits in simplifying your app’s layout design, right out of the box. InstallationEdit /quasar.conf.js to embed the components (only add what you need from below):framework: &#123; components: [ 'QLayout', 'QPageContainer', 'QPage', 'QLayoutHeader', 'QLayoutFooter', 'QLayoutDrawer', 'QPageSticky' ]&#125; Basic UsageBelow is a scaffolding of a Layout so you can understand the structure. We’ll discuss about properties later&lt;!-- main wrapping component --&gt;&lt;q-layout&gt; &lt;!-- optional --&gt; &lt;q-layout-header&gt; &lt;!-- content; any --&gt; &lt;/q-layout-header&gt; &lt;!-- optional --&gt; &lt;q-layout-drawer side=\"left\"&gt; &lt;!-- content; any --&gt; &lt;/q-layout-drawer&gt; &lt;!-- optional --&gt; &lt;q-layout-drawer side=\"right\"&gt; &lt;!-- content; any --&gt; &lt;/q-layout-drawer&gt; &lt;!-- REQUIRED --&gt; &lt;q-page-container&gt; &lt;!-- Here it's where Vue Router injects children Page components. &lt;router-view/&gt; tag below can be replaced by an actual page content should you wish to do so. --&gt; &lt;router-view /&gt; &lt;!-- First child of QPageContainer must be a QPage, so make sure that your layout route children components encapsulate a QPage. --&gt; &lt;/q-page-container&gt; &lt;!-- optional --&gt; &lt;q-layout-footer&gt; &lt;!-- content; any --&gt; &lt;/q-layout-footer&gt;&lt;/q-layout&gt; Below is another example of a Layout, which contains some useful elements: a QToolbar (used for both header and footer, you can specify as many as you want) a navigation with QTabs a left side drawer panel (which is shown alongside page content on wide screens) and a right side drawer panel &lt;q-layout view=\"hHr LpR lFf\"&gt; &lt;!-- Header --&gt; &lt;q-layout-header&gt; &lt;!-- First row of header is a QToolbar --&gt; &lt;q-toolbar&gt; &lt;!-- showLeft is a model attached to left side drawer below --&gt; &lt;q-btn flat round dense @click=\"showLeft = !showLeft\" icon=\"menu\" /&gt; &lt;q-toolbar-title&gt; Layout Header &lt;span slot=\"subtitle\"&gt;Optional subtitle&lt;/span&gt; &lt;/q-toolbar-title&gt; &lt;!-- showRight is a model attached to right side drawer below --&gt; &lt;q-btn flat round dense @click=\"showRight = !showRight\" icon=\"menu\" /&gt; &lt;/q-toolbar&gt; &lt;!-- Second row of header is a QTabs --&gt; &lt;q-tabs&gt; &lt;q-route-tab slot=\"title\" icon=\"view_quilt\" to=\"/test-layout/about\" replace hide=\"icon\" label=\"About\" /&gt; &lt;q-route-tab slot=\"title\" icon=\"view_day\" to=\"/test-layout/toolbar\" replace hide=\"icon\" label=\"Toolbar\" /&gt; &lt;q-route-tab slot=\"title\" icon=\"view_day\" to=\"/test-layout/tabs\" replace label=\"Tabs\" /&gt; &lt;q-route-tab slot=\"title\" icon=\"input\" to=\"/test-layout/drawer\" replace label=\"Drawer\" /&gt; &lt;/q-tabs&gt; &lt;/q-layout-header&gt; &lt;!-- Left Side Drawer --&gt; &lt;q-layout-drawer side=\"left\" v-model=\"showLeft\"&gt; &lt;q-list no-border link inset-separator&gt; &lt;q-list-header&gt;Essential Links&lt;/q-list-header&gt; &lt;q-item to=\"/docs\"&gt; &lt;q-item-side icon=\"school\" /&gt; &lt;q-item-main label=\"Docs\" sublabel=\"quasar-framework.org\" /&gt; &lt;/q-item&gt; &lt;q-item to=\"/forum\"&gt; &lt;q-item-side icon=\"record_voice_over\" /&gt; &lt;q-item-main label=\"Forum\" sublabel=\"forum.quasar-framework.org\" /&gt; &lt;/q-item&gt; &lt;q-item to=\"/chat\"&gt; &lt;q-item-side icon=\"chat\" /&gt; &lt;q-item-main label=\"Discord Chat Channel\" sublabel=\"https://discord.gg/5TDhbDg\" /&gt; &lt;/q-item&gt; &lt;q-item to=\"/twitter\"&gt; &lt;q-item-side icon=\"rss feed\" /&gt; &lt;q-item-main label=\"Twitter\" sublabel=\"@quasarframework\" /&gt; &lt;/q-item&gt; &lt;/q-list&gt; &lt;/q-layout-drawer&gt; &lt;!-- Right Side Panel --&gt; &lt;q-layout-drawer side=\"right\" v-model=\"showRight\"&gt; Right Side of Layout &lt;/q-layout-drawer&gt; &lt;!-- sub-routes get injected here: --&gt; &lt;q-page-container&gt; &lt;router-view /&gt; &lt;/q-page-container&gt; &lt;!-- Footer --&gt; &lt;q-layout-footer&gt; &lt;q-toolbar-title&gt; Layout Footer &lt;/q-toolbar-title&gt; &lt;/q-layout-footer&gt;&lt;/q-layout&gt; You can also use QScrollArea for the left or right sides of the layout, if you want to control the scrollbar (but it’s not mandatory):&lt;!-- notice style tag --&gt;&lt;q-layout-drawer side=\"left\"&gt; &lt;q-scroll-area class=\"fit\"&gt; &lt;q-item to=\"/test-layout/toolbar\"&gt;Toolbar&lt;/q-item&gt; &lt;q-item to=\"/test-layout/tabs\"&gt;Tabs&lt;/q-item&gt; &lt;q-item to=\"/test-layout/drawer\"&gt;Drawer&lt;/q-item&gt; &lt;/q-scroll-area&gt;&lt;/q-layout-drawer&gt; Tips to Understanding QLayout Using margin CSS will break the layoutQLayout depends on taking up the whole screen and so QPageContainer, QLayoutHeader, QLayoutFooter and QLayoutDrawer positions are managed by it (through view prop). You cannot use CSS margins as a style neither on QLayout itself nor on any of the components mentioned above. However use can safely use CSS padding. RoutingIf your layout uses Vue Router sub-routes (recommended), then it makes sense to use Vue’s &lt;router-view /&gt; component, which is just a placeholder where sub-routes are injected. Toolbar PlacementA great place to use the Toolbars component is within the QLayoutHeader and QLayoutFooter. &lt;q-layout-header&gt; &lt;q-toolbar color=\"green\"&gt; ... toolbar content ... &lt;/q-toolbar&gt;&lt;/q-layout-header&gt; Search exampleBelow is an example of placing a Search bar in the header:&lt;q-layout&gt; ... &lt;!-- We place it on header --&gt; &lt;q-layout-header&gt; &lt;q-toolbar color=\"primary\"&gt; &lt;q-search inverted v-model=\"search\" color=\"none\" /&gt; &lt;/q-toolbar&gt; &lt;/q-layout-header&gt; ...&lt;/q-layout&gt; Fixed Positioning &amp; FABsAlso, read about the smart Page Sticky which helps you fix position DOM elements or components on a Layout page and learn how you can use it to also place a Floating Action Button. QLayout Vue Properties Vue Property Type Description view String Configuration string which defines how different parts of the layout get displayed on screen. Configuring the “view” propQuasar introduces a unique and excellent layout concept, which allows you to easily structure layouts to work in certain ways, by simply changing a short string notation. To explain how this works, imagine your Layout is a 3x3 matrix of containers. The first row of containers would be the header and the last row would be the footer. The first column of containers would be the “left” and last column would be the “right”. The center of the matrix, below the header and above the footer, would be the page or main content container. Now think about this. This matrix of containers or “QLayout View” can be represented by a string. This string contains only 11 characters: 3 defining the header row then a space 3 defining the middle row a space then 3 defining the footer The picture below offers a visual representation of the QLayout View, to help you understand how to configure its 3x3 matrix. The letters shown above are also case sensitive. For example, using at least one “L” (uppercase character instead of lowercase) will make your layout left side (drawer) be in a fixed position. Same applies for “H” (header), “F” (footer) and finally “R” (right side / drawer). For example, if you want your layout’s right side / drawer to be placed on the right of the header, page and footer, you’d use hhr lpr ffr. If you’d like to also make it fixed, just transform one r character to uppercase, like this: hhR lpr ffr, or hhr lpR ffr or hhr lpr ffR. These settings are completely up to you to use as you’d like. You could even go wild with a setup like this: Lhh lpR ffr. Try it out! Make sure you also go to the desktop view, to see it work properly. NOTEIt is important that you specify all sections of a layout, even if you don’t use them. For example, even if you don’t use footer or right side drawer, specify them within your layout’s view prop. QLayout Vue Events Event Name Description @resize Event emitted on window resize. @scroll Event emitted on page scroll. @scrollHeight Event emitted on page scroll height change. Containerized QLayoutv0.17.9+ WARNINGNot supported in IE11. Please note that it requires a CSS height/width (or min-height/min-width) being set explicitly, otherwise it can’t work. Example:&lt;q-layout view=\"LHh lpR fff\" container style=\"height: 500px; width: 300px\" class=\"shadow-2\"&gt; &lt;q-layout-header reveal&gt; &lt;q-toolbar&gt; &lt;q-btn flat @click=\"drawer = !drawer\" round dense icon=\"menu\" /&gt; &lt;q-toolbar-title&gt;Header&lt;/q-toolbar-title&gt; &lt;/q-toolbar&gt; &lt;/q-layout-header&gt; &lt;q-layout-footer&gt; &lt;q-toolbar&gt; &lt;q-btn flat @click=\"drawer = !drawer\" round dense icon=\"menu\" /&gt; &lt;q-toolbar-title&gt;Footer&lt;/q-toolbar-title&gt; &lt;/q-toolbar&gt; &lt;/q-layout-footer&gt; &lt;q-layout-drawer v-model=\"drawer\" :width=\"200\" :breakpoint=\"300\"&gt; &lt;div v-for=\"n in 50\" :key=\"n\"&gt;Drawer&lt;/div&gt; &lt;/q-layout-drawer&gt; &lt;q-page-container&gt; &lt;q-page style=\"padding-top: 50px\"&gt; &lt;div v-for=\"n in 50\" :key=\"n\"&gt;My page&lt;/div&gt; &lt;/q-page&gt; &lt;/q-page-container&gt;&lt;/q-layout&gt; Example in a QModal:&lt;q-modal v-model=\"modal\"&gt; &lt;q-layout view=\"LHh lpR fff\" container style=\"min-height: 60vh; min-width: 60vw;\"&gt; &lt;q-layout-header reveal&gt; &lt;q-toolbar&gt; &lt;q-btn flat @click=\"drawer2 = !drawer2\" round dense icon=\"menu\" /&gt; &lt;q-toolbar-title&gt;Header&lt;/q-toolbar-title&gt; &lt;q-btn flat @click=\"modal = false\" round dense icon=\"close\" /&gt; &lt;/q-toolbar&gt; &lt;/q-layout-header&gt; &lt;q-layout-footer&gt; &lt;q-toolbar&gt; &lt;q-btn flat @click=\"drawer2 = !drawer2\" round dense icon=\"menu\" /&gt; &lt;q-toolbar-title&gt;Footer&lt;/q-toolbar-title&gt; &lt;/q-toolbar&gt; &lt;/q-layout-footer&gt; &lt;q-layout-drawer v-model=\"drawer2\" :width=\"200\" :breakpoint=\"900\"&gt; &lt;div v-for=\"n in 50\" :key=\"n\"&gt;Drawer&lt;/div&gt; &lt;/q-layout-drawer&gt; &lt;q-page-container&gt; &lt;q-page style=\"padding-top: 50px\"&gt; &lt;div v-for=\"n in 50\" :key=\"n\"&gt;My page&lt;/div&gt; &lt;/q-page&gt; &lt;/q-page-container&gt; &lt;/q-layout&gt;&lt;/q-modal&gt;"},{"title":"Loading","updated":"2018-07-25T14:14:24.671Z","permalink":"https://quasar-framework.org/components/loading.html","text":"Loading is a feature that you can use to display an overlay with a spinner on top of your App’s content to inform the user that a background operation is taking place. No need to add complex logic within your Pages for global background operations. InstallationEdit /quasar.conf.js:framework: &#123; plugins: ['Loading'], config: &#123; // optional (v0.17+) loading: &#123; // Loading defaults &#125; &#125;&#125; Basic UsageLoading uses a delay (500ms) to display itself so that quick operations won’t make the screen flicker. This happens by showing and then quickly hiding the progress spinner without the user having a chance to see what happens. The delay before showing it eliminates confusion. Show LoadingInside a Vue component:this.$q.loading.show(&#123; delay: 400 // ms&#125;) Outside of a Vue component:import &#123; Loading, // optional!, for example below // with custom spinner QSpinnerGears&#125; from 'quasar'// default optionsLoading.show()// with a custom delayLoading.show(&#123; delay: 300 // milliseconds&#125;)// customizable (all props available)Loading.show(&#123; spinner: QSpinnerGears, message: 'Some message', messageColor: 'blue', spinnerSize: 250, // in pixels spinnerColor: 'white', customClass : 'bg-primary'&#125;) Hide LoadingInside a Vue component:this.$q.loading.hide() Outside of a Vue component:import &#123; Loading &#125; from 'quasar'Loading.hide() Check StatusChecking whether the Loading is active is easy. Inside a Vue component:this.$q.loading.isActive Outside of a Vue component:import &#123; Loading &#125; from 'quasar'(Boolean) Loading.isActive Setting Up DefaultsQuasar v0.17+ Should you wish to set up some defaults, rather than specifying them each time, you can do so by using quasar.conf &gt; framework &gt; config &gt; loading: {…} or by calling Loading.setDefaults({...}) or this.$q.loading.setDefaults({...})."},{"title":"LoadingBar","updated":"2018-07-25T14:14:24.670Z","permalink":"https://quasar-framework.org/components/loading-bar.html","text":"The Quasar LoadingBar plugin offers an easy way to set up your app with a QAjaxBar in case you don’t want to handle a QAjaxBar component yourself. For a demo, please visit the QAjaxBar documentation page. InstallationEdit /quasar.conf.js:framework: &#123; plugins: ['LoadingBar'], config: &#123; // optional (v0.17+) loadingBar: &#123; // QAjaxBar properties &#125; &#125;&#125; QAjaxBar properties can be found here. Basic UsageInside Vue components:this.$q.loadingBar.start()this.$q.loadingBar.stop()this.$q.loadingBar.increment(value) Outside of Vue components:import &#123; LoadingBar &#125; from &apos;quasar&apos;LoadingBar.start()LoadingBar.stop()LoadingBar.increment(value) Setting Up DefaultsQuasar v0.17+ Should you wish to set up some defaults, rather than specifying them each time, you can do so by using quasar.conf &gt; framework &gt; config &gt; loadingBar: {…} or by calling LoadingBar.setDefaults({...}) or this.$q.loadingBar.setDefaults({...})."},{"title":"Material Ripples","updated":"2018-05-18T22:01:01.028Z","permalink":"https://quasar-framework.org/components/material-ripples.html","text":"Material Ripple effect can easily be added to any DOM element (or component) through the v-ripple Quasar directive. Following these steps: Make sure your DOM element or component has CSS position: relative or Quasar CSS helper class relative-position attached to it. Add v-ripple directive to it. The color of the ripples are determined by the text color (CSS ‘color’ prop) of the DOM element. InstallingEdit /quasar.conf.js:framework: &#123; directives: ['Ripple']&#125; Basic Usage&lt;div class=\"relative-position\" v-ripple&gt; ....&lt;/div&gt; Trigger only for one Quasar themeFor this you need to specify mat or ios directive modifiers like this: &lt;!-- Only for Quasar Material theme --&gt;&lt;div v-ripple.mat class=\"relative-position\"&gt;...&lt;/div&gt;&lt;!-- Only for Quasar iOS theme --&gt;&lt;div v-ripple.ios class=\"relative-position\"&gt;...&lt;/div&gt; Dynamic DisableIf for some reason you have a scenario where the ripples need to be disabled, then you can assign a Boolean as value for the directive. &lt;template&gt; &lt;div v-ripple=\"rippleEnabled\" class=\"relative-position\" &gt; &lt;q-checkbox v-model=\"rippleEnabled\" label=\"Enable Ripples\" /&gt; ..... &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; rippleEnabled: true &#125; &#125;&#125;&lt;/script&gt; When your Vue scope variable rippleEnabled becomes Boolean false then the ripple will be disabled.You can also combine this with the mat and ios modifiers."},{"title":"Lists and List Items","updated":"2018-07-25T14:14:24.670Z","permalink":"https://quasar-framework.org/components/lists-and-list-items.html","text":"Quasar Lists and List Items are a group of components which can work together to present multiple line items vertically as a single continuous element. They are best suited for displaying similar data types as rows of information, such as a contact list, a playlist, or menu. Each row is called an Item. Items can also be used outside of a List. Lists can encapsulate Items or Item-like components, for example QCollapsible. List Items have following content areas: left side and right side (usually equipped for supplemental actions represented by icons, avatars, images or letters, but not limited to only these) main content which usually is filled with a label (title) and sublabel (subtitle), form components, or anything else for that matter. InstallationEdit /quasar.conf.js:framework: &#123; components: [ 'QList', 'QListHeader', 'QItem', 'QItemMain', 'QItemSeparator', 'QItemSide', 'QItemTile' ], // if you use v-close-overlay: directives: ['CloseOverlay']&#125; Basic UsageWe’ll cover each component on its own section later on, but for now, take a look to get a glimpse of how to structure your templates when using Lists. &lt;q-list highlight&gt; &lt;q-list-header&gt;Recent chats&lt;/q-list-header&gt; &lt;q-item&gt; &lt;q-item-side&gt; &lt;q-item-tile avatar&gt; &lt;img src=\"statics/boy-avatar.png\"&gt; &lt;/q-item-tile&gt; &lt;/q-item-side&gt; &lt;q-item-main label=\"John Doe\" /&gt; &lt;q-item-side right&gt; &lt;q-item-tile icon=\"chat_bubble\" color=\"green\" /&gt; &lt;/q-item-side&gt; &lt;/q-item&gt; &lt;q-item&gt; &lt;q-item-side avatar=\"statics/linux-avatar.png\" /&gt; &lt;q-item-main label=\"Jim Doe\" /&gt; &lt;q-item-side right icon=\"chat_bubble\" /&gt; &lt;/q-item&gt; &lt;q-item-separator /&gt; &lt;q-list-header&gt;Previous chats&lt;/q-list-header&gt; &lt;q-item&gt; &lt;q-item-side avatar=\"statics/guy-avatar.png\" /&gt; &lt;q-item-main label=\"Jack Doe\" /&gt; &lt;/q-item&gt;&lt;/q-list&gt; Notice that QItemMain and QItemSide can contain QItemTiles, or for convenience, you can use their own properties to define the content. Due to how Webpack works in creating the bundle for your App, in some cases you may need to use QItemTile, like for avatars or images. The reason is simple: if you use QItemSide avatar property, you must supply the path to the statics folder and cannot use the assets folder or relative paths. Instead, the latter two can be used with a QItemTile wrapping an &lt;img&gt; HTML tag. Look closely at image paths in the example above (statics/guy-avatar.png vs ~assets/boy-avatar.png). Also read about App Handling Static Assets to understand how Webpack includes assets into the bundle. ComponentsBelow is a list of Quasar components that you can use to define lists and list items: QList (encapsulating QItems and all other List related components) QListHeader (header of a section in QList) QItemSeparator (external Item separator/separator) QItem (encapsulating everything an Item contains) QItemSide (left or right side) QItemMain (for main content of an Item) QItemTile (for individual parts of QItemSide and QItemMain, like label, icon, avatar, image, …) QListQList encapsulates all other components mentioned. It’s not mandatory, but does help with maintaining a good design and can also define some properties that will be applied to all QItems (or QItem-like components) like multiline, separator, link, highlight and so on. Vue Property Type Description striped Boolean Apply highlight to QItems intermittently, starting with second QItem. striped-odd Boolean Apply highlight to QItems intermittently, starting with first QItem. highlight Boolean Apply highlight to all QItems. This works only on desktop when user hovers QItems. link Boolean Apply highlight and a pointer cursor to all QItems. dense Boolean Make QItems dense. sparse Boolean Make QItems sparse. multiline Boolean Make QItems multiline. separator Boolean Make QItems have a separator between them. inset-separator Boolean Make QItems have an inset separator between them. dark Boolean When you component is rendered on a dark background no-border Boolean Remove the default border around QList. QListHeaderWithin QList, you can display a section header / title. Vue Property Type Description inset Boolean Place an inset separator. &lt;q-list&gt; &lt;q-list-header&gt;Folders&lt;/q-list-header&gt; &lt;!-- insert QItems... --&gt; &lt;q-list-header&gt;Files&lt;/q-list-header&gt; &lt;!-- insert QItems... --&gt;&lt;/q-list&gt; QItemSeparatorIf you want QItem external separators (there are internal ones too as you can see on QItem’s description later on this page), use the QItemSeparator component. It’s useful also to separate different sections of your QList, like for example, before a QListHeader. Vue Property Type Description inset Boolean Place an inset separator. &lt;q-list&gt; &lt;q-list-header&gt;Folders&lt;/q-list-header&gt; &lt;!-- insert QItems... --&gt; &lt;q-item-separator /&gt; &lt;q-list-header&gt;Files&lt;/q-list-header&gt; &lt;!-- insert QItems... --&gt;&lt;/q-list&gt;&lt;!-- and/or --&gt;&lt;q-list&gt; &lt;q-item ...&gt;...&lt;/q-item&gt; &lt;!-- Inset separator example --&gt; &lt;q-item-separator inset /&gt; &lt;q-item ...&gt;...&lt;/q-item&gt; &lt;q-item-separator /&gt; &lt;q-item ...&gt;...&lt;/q-item&gt; &lt;q-item-separator /&gt; &lt;q-list-header&gt;Files&lt;/q-list-header&gt; &lt;q-item ...&gt;...&lt;/q-item&gt;&lt;/q-list&gt; QItem Vue Property Type Description dense Boolean Make QItem dense (narrow paddings). sparse Boolean Make QItem sparse (large paddings). separator Boolean Make QItem have a separator between it and previous QItem. inset-separator Boolean Make QItem have an inset separator between it and previous QItem. multiline Boolean Make QItem multiline. Vertically aligns QItem sides to top. Useful for more than 2-3 lines QItem content. highlight Boolean Apply highlight to QItem. Works only on desktop when user hovers it. link Boolean Apply highlight and a pointer cursor to QItem. tag String Default HTML tag used is ‘div’, but this can be any HTML tag if you need to. Read below for more information. dark Boolean When rendered on a dark background Also check the next section for more properties and to learn about how you can use your QItem as a Router Link. Using QItem as a Router LinkIf you want your QItem to act the same as Vue’s &lt;router-link&gt;, then you can use these additional properties (which work exactly the same as &lt;router-link&gt;): Property Type Description to String / Object Route to navigate to exact Boolean Match the exact route specified (and not also its children) when adding router-link-active CSS class. append Boolean Append route definition to current route when navigating. replace Boolean Replaces current route with the new one instead of adding it to the window history queue. For more details on these properties, please refer to the Vue Router documentation. Render with specific HTML tagPlease refer to the example on how to use the tag property shown below. In this example, we take advantage of the &lt;label&gt; tag that browsers automatically connect to checkboxes (QCheckbox, QToggle) or radio inputs (QRadio). When a &lt;label&gt; is clicked/tapped, then the wrapped checkboxes toggle their state (check / uncheck) and wrapped radios are being selected.&lt;!-- We want a click/tap on the whole QItem to toggle the checkbox, so we use tag=\"label\" to make QItem render with &lt;label&gt; tag.--&gt;&lt;q-item tag=\"label\"&gt; &lt;q-item-side&gt; &lt;q-checkbox v-model=\"checkboxModel\" /&gt; &lt;/q-item-side&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Notifications&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;Notify me about updates to apps or games that I downloaded&lt;/q-item-tile&gt; &lt;/q-item-main&gt;&lt;/q-item&gt; QItemSide Vue Property Type Description color String Use a color from Quasar Color Palette. text-color String Override text color, one from Quasar Color Palette. inverted Boolean Invert colors. right Boolean Applies necessary design tweaks for right side of QItem. icon String Icon to use. Either use an icon, image, avatar or letter. image String URL to image to use (point to statics). Either use an icon, image, avatar or letter. avatar String URL to avatar to use (point to statics). Either use an icon, image, avatar or letter. letter String One character String to define a letter. Either use an icon, image, avatar or letter. stamp String For right side only. One character String to define a letter. Either use an icon, image, avatar or letter. tag String Default HTML tag that QItemTile gets rendered with is ‘div’, but this can be any HTML tag if you need to. Use the icon, image, avatar, letter or stamp properties or, for more control, insert QItemTiles instead. Use only one method or the other. QItemMain Vue Property Type Description label String Label to use as title. sublabel String Label to use as subtitle. label-lines String / Number Number of lines the label can span to. sublabel-lines String / Number Number of lines the sublabel can span to. inset Boolean Useful when QItem has no left side, but you want to align your content as if it had a left side. tag String Default HTML tag that QItemTile gets rendered with is ‘div’, but this can be any HTML tag if you need to. Use the label properties or, for more control, insert QItemTiles to define the label and sublabel. Use only one method or the other. QItemTileQItemTile can be used for more control over the content of the left, right side or main content of QItem. Vue Property Type Description color String Use a color from Quasar Color Palette. text-color String Override text color, one from Quasar Color Palette. inverted Boolean Invert colors. icon String Icon to use. Either use an icon, image, avatar or letter as props. image Boolean Encapsulates an image. Its content must be an &lt;img&gt; with src attribute pointing to statics. Either use an icon, image, avatar or letter as props. avatar Boolean Encapsulates an avatar image. Its content must be an &lt;img&gt; with src attribute pointing to statics. Either use an icon, image, avatar or letter as props. letter Boolean Encapsulates the “letter” of QItem. stamp Boolean Encapsulates the “stamp” of QItem. tag String Default HTML tag that QItemTile gets rendered with is ‘div’, but this can be any HTML tag if you need to. There are more props available for QItemTile, but only use the following when QItemTile is wrapped with QItemMain: Vue Property Type Description label Boolean Encapsulates the label / title of QItem. sublabel Boolean Encapsulates the sub-label / sub-title of QItem. lines String / Number Number of lines the label/sublabel can span to. Ellipsis are used when overflowing. Use only in conjunction with label and sublabel. Using QCollapsible with QItemsQCollapsible is a QItem wrapper, so you can use them as (and along) QItems within a QList. Here are two examples: &lt;!-- Notice we use QCollapsibles and QItems as direct children of QList. We are basically building a menu.--&gt;&lt;q-list separator&gt; &lt;!-- collapsible to hide sub-level menu entries --&gt; &lt;q-collapsible icon=\"inbox\" label=\"Inbox\" sublabel=\"Where your email is\"&gt; &lt;q-item link to=\"/inbox/1\"&gt; &lt;q-item-side icon=\"mail\" /&gt; &lt;q-item-main label=\"Email 1\" /&gt; &lt;/q-item&gt; &lt;q-item link to=\"/inbox/2\"&gt; &lt;q-item-side icon=\"mail\" /&gt; &lt;q-item-main label=\"Email 2\" /&gt; &lt;/q-item&gt; &lt;q-collapsible icon=\"favorite\" label=\"Favorites\"&gt; &lt;q-item link to=\"/inbox/favorites/1\"&gt; &lt;q-item-side icon=\"mail\" /&gt; &lt;q-item-main label=\"Favorite 1\" /&gt; &lt;/q-item&gt; &lt;q-item to=\"/inbox/favorites/2\"&gt; &lt;q-item-side icon=\"mail\" /&gt; &lt;q-item-main label=\"Favorite 2\" /&gt; &lt;/q-item&gt; &lt;/q-collapsible&gt; &lt;q-item to=\"/inbox/3\"&gt; &lt;q-item-side icon=\"mail\" /&gt; &lt;q-item-main label=\"Email 3\" /&gt; &lt;/q-item&gt; &lt;/q-collapsible&gt; &lt;!-- menu link --&gt; &lt;q-item link to=\"/snoozed\"&gt; &lt;q-item-side icon=\"schedule\" /&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Snoozed&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;/q-item&gt; &lt;!-- collapsible to hide sub-level menu entries --&gt; &lt;q-collapsible icon=\"send\" label=\"Sent\"&gt; &lt;q-item to=\"/sent/1\"&gt; &lt;q-item-side icon=\"mail\" /&gt; &lt;q-item-main label=\"Email 1\" /&gt; &lt;/q-item&gt; &lt;/q-collapsible&gt; &lt;!-- menu link --&gt; &lt;q-item link to=\"/trash\"&gt; &lt;q-item-side icon=\"delete\" /&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Trash&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;/q-item&gt;&lt;/q-list&gt; More ExamplesEmail list&lt;q-list highlight inset-separator&gt; &lt;q-item&gt; &lt;q-item-side avatar=\"statics/boy-avatar.png\" /&gt; &lt;q-item-main label=\"Brunch this weekend? Brunch this weekend? Brunch this weekend?\" label-lines=\"1\" /&gt; &lt;q-item-side right stamp=\"1 min\" /&gt; &lt;/q-item&gt; &lt;q-item multiline&gt; &lt;q-item-side avatar=\"statics/boy-avatar.png\" /&gt; &lt;q-item-main label=\"Brunch this weekend? Brunch this weekend? Brunch this weekend?\" label-lines=\"1\" sublabel=\"John Doe John Doe John Doe John Doe John Doe John Doe John Doe John Doe John Doe\" sublabel-lines=\"2\" /&gt; &lt;q-item-side right&gt; &lt;q-item-tile stamp&gt;1 week ago&lt;/q-item-tile&gt; &lt;/q-item-side&gt; &lt;/q-item&gt; &lt;q-item multiline&gt; &lt;q-item-side avatar=\"statics/boy-avatar.png\" /&gt; &lt;q-item-main label=\"Brunch this weekend? Brunch this weekend? Brunch this weekend?\" label-lines=\"2\" sublabel=\"John Doe John Doe John Doe John Doe John Doe John Doe John Doe John Doe John Doe\" /&gt; &lt;q-item-side right stamp=\"10 min\" /&gt; &lt;/q-item&gt; &lt;q-item multiline&gt; &lt;q-item-side&gt; &lt;q-item-tile avatar&gt; &lt;img src=\"statics/boy-avatar.png\"&gt; &lt;/q-item-tile&gt; &lt;/q-item-side&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Brunch &lt;span&gt;5&lt;/span&gt;&lt;/q-item-tile&gt; &lt;q-item-tile sublabel lines=\"2\"&gt; John Doe John Doe John Doe John Doe John Doe John Doe John Doe John Doe John Doe John Doe John Doe John Doe John Doe John Doe John Doe John Doe &lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;q-item-side right&gt; &lt;q-item-tile stamp&gt;10 min&lt;/q-item-tile&gt; &lt;q-item-tile icon=\"star\" color=\"yellow\" /&gt; &lt;/q-item-side&gt; &lt;/q-item&gt; &lt;q-item multiline&gt; &lt;q-item-side avatar=\"statics/boy-avatar.png\" /&gt; &lt;q-item-main&gt; &lt;q-item-tile label lines=\"1\"&gt;Brunch this weekend? Yeah, this weekend. Really. This one.&lt;/q-item-tile&gt; &lt;q-item-tile sublabel lines=\"2\"&gt; &lt;span&gt;John Doe&lt;/span&gt; -- I'll be in your neighborhood doing errands this weekend. Do you want to grab brunch? &lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;q-item-side right&gt; &lt;q-item-tile stamp&gt;2 years&lt;/q-item-tile&gt; &lt;q-item-tile icon=\"mail\" color=\"primary\" /&gt; &lt;/q-item-side&gt; &lt;/q-item&gt;&lt;/q-list&gt;&lt;q-list inset-separator class=\"q-mt-md\"&gt; &lt;q-item&gt; &lt;q-item-side avatar=\"statics/boy-avatar.png\" /&gt; &lt;q-item-main label=\"Brunch this weekend?\" /&gt; &lt;q-item-side right&gt; &lt;q-btn flat round dense icon=\"more_vert\"&gt; &lt;q-popover&gt; &lt;q-list link&gt; &lt;q-item v-close-overlay&gt; &lt;q-item-main label=\"Reply\" /&gt; &lt;/q-item&gt; &lt;q-item v-close-overlay&gt; &lt;q-item-main label=\"Forward\" /&gt; &lt;/q-item&gt; &lt;q-item v-close-overlay&gt; &lt;q-item-main label=\"Delete\" /&gt; &lt;/q-item&gt; &lt;/q-list&gt; &lt;/q-popover&gt; &lt;/q-btn&gt; &lt;/q-item-side&gt; &lt;/q-item&gt; &lt;q-item&gt; &lt;q-item-side avatar=\"statics/boy-avatar.png\" /&gt; &lt;q-item-main label=\"Brunch this weekend?\" /&gt; &lt;q-item-side right&gt; &lt;q-chip square color=\"primary\" class=\"shadow-2\"&gt;10k&lt;/q-chip&gt; &lt;/q-item-side&gt; &lt;/q-item&gt; &lt;q-item&gt; &lt;q-item-side avatar=\"statics/boy-avatar.png\" /&gt; &lt;q-item-main label=\"Brunch this weekend?\" /&gt; &lt;q-item-side right&gt; &lt;q-item-tile stamp&gt;10 min ago&lt;/q-item-tile&gt; &lt;span class=\"text-amber\"&gt; &lt;q-item-tile icon=\"star\" v-for=\"n in 2\" :key=\"n\" /&gt; &lt;/span&gt; &lt;/q-item-side&gt; &lt;/q-item&gt;&lt;/q-list&gt; Chat List&lt;q-list highlight&gt; &lt;q-list-header&gt;Recent chats&lt;/q-list-header&gt; &lt;q-item&gt; &lt;q-item-side&gt; &lt;q-item-tile avatar&gt; &lt;img src=\"statics/boy-avatar.png\"&gt; &lt;/q-item-tile&gt; &lt;/q-item-side&gt; &lt;q-item-main label=\"John Doe\" /&gt; &lt;q-item-side right&gt; &lt;q-item-tile icon=\"chat_bubble\" color=\"green\" /&gt; &lt;/q-item-side&gt; &lt;/q-item&gt; &lt;q-item&gt; &lt;q-item-side avatar=\"statics/linux-avatar.png\" /&gt; &lt;q-item-main label=\"Jim Doe\" /&gt; &lt;q-item-side right icon=\"chat_bubble\" /&gt; &lt;/q-item&gt; &lt;q-item-separator /&gt; &lt;q-list-header&gt;Previous chats&lt;/q-list-header&gt; &lt;q-item&gt; &lt;q-item-side avatar=\"statics/guy-avatar.png\" /&gt; &lt;q-item-main label=\"Jack Doe\" /&gt; &lt;/q-item&gt;&lt;/q-list&gt; One more example:&lt;q-list inset-separator&gt; &lt;q-item&gt; &lt;q-item-side icon=\"voice_chat\" color=\"secondary\" /&gt; &lt;q-item-main label=\"Voice Chat with Joe\" /&gt; &lt;q-item-side right icon=\"voice_chat\" color=\"secondary\" /&gt; &lt;/q-item&gt; &lt;q-item&gt; &lt;q-item-side inverted icon=\"voice_chat\" color=\"secondary\" /&gt; &lt;q-item-main label=\"Voice Chat with Joe\" /&gt; &lt;q-item-side right inverted icon=\"voice_chat\" color=\"secondary\" /&gt; &lt;/q-item&gt; &lt;q-item&gt; &lt;q-item-side inverted icon=\"voice_chat\" color=\"amber\" text-color=\"black\" /&gt; &lt;q-item-main label=\"Voice Chat with Joe\" /&gt; &lt;q-item-side right inverted icon=\"voice_chat\" color=\"amber\" text-color=\"black\" /&gt; &lt;/q-item&gt; &lt;q-item&gt; &lt;q-item-side letter=\"J\" color=\"secondary\" /&gt; &lt;q-item-main label=\"John Doe\" /&gt; &lt;q-item-side right letter=\"J\" color=\"secondary\" /&gt; &lt;/q-item&gt; &lt;q-item&gt; &lt;q-item-side inverted letter=\"J\" color=\"secondary\" /&gt; &lt;q-item-main label=\"John Doe\" /&gt; &lt;q-item-side right inverted letter=\"J\" color=\"secondary\" /&gt; &lt;/q-item&gt; &lt;q-item&gt; &lt;q-item-side inverted letter=\"J\" color=\"amber\" text-color=\"black\" /&gt; &lt;q-item-main label=\"John Doe\" /&gt; &lt;q-item-side right inverted letter=\"J\" color=\"amber\" text-color=\"black\" /&gt; &lt;/q-item&gt;&lt;/q-list&gt; Folders and Files&lt;q-list&gt; &lt;q-list-header inset&gt;Folders&lt;/q-list-header&gt; &lt;q-item&gt; &lt;q-item-side icon=\"folder\" inverted color=\"primary\" /&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Photos&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;February 22, 2016&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;q-item-side right icon=\"info\" color=\"green\" /&gt; &lt;/q-item&gt; &lt;q-item-separator inset /&gt; &lt;q-list-header inset&gt;Files&lt;/q-list-header&gt; &lt;q-item&gt; &lt;q-item-side icon=\"assignment\" inverted color=\"grey-6\" /&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Expenses spreadsheet&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;March 2nd, 2016&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;q-item-side right icon=\"info\" /&gt; &lt;/q-item&gt;&lt;/q-list&gt; Settings (Embedding Form Components)&lt;q-list link&gt; &lt;q-list-header&gt;User controls&lt;/q-list-header&gt; &lt;q-item&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Content filtering&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;Set the content filtering level to restrict apps that can be downloaded&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;/q-item&gt; &lt;q-item&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Password&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;Require password for purchase or use password to restrict purchase&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;/q-item&gt; &lt;q-item-separator /&gt; &lt;q-list-header&gt;General&lt;/q-list-header&gt; &lt;q-item tag=\"label\"&gt; &lt;q-item-side&gt; &lt;q-checkbox v-model=\"checked_one\" /&gt; &lt;/q-item-side&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Notifications&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;Notify me about updates to apps or games that I downloaded&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;/q-item&gt; &lt;q-item tag=\"label\"&gt; &lt;q-item-side&gt; &lt;q-checkbox v-model=\"checked_two\" color=\"secondary\" /&gt; &lt;/q-item-side&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Sound&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;Auto-update apps at anytime. Data charges may apply&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;/q-item&gt; &lt;q-item tag=\"label\"&gt; &lt;q-item-side&gt; &lt;q-checkbox v-model=\"checked_three\" color=\"red\" /&gt; &lt;/q-item-side&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Auto-add widgets&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;Automatically add home screen widgets&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;/q-item&gt;&lt;/q-list&gt;&lt;q-list class=\"q-mt-md\"&gt; &lt;q-list-header&gt;Radios&lt;/q-list-header&gt; &lt;q-item link tag=\"label\"&gt; &lt;q-item-side&gt; &lt;q-radio v-model=\"option\" val=\"opt1\" /&gt; &lt;/q-item-side&gt; &lt;q-item-main label=\"Option 1\" /&gt; &lt;/q-item&gt; &lt;q-item link tag=\"label\"&gt; &lt;q-item-side&gt; &lt;q-radio color=\"secondary\" v-model=\"option\" val=\"opt2\" /&gt; &lt;/q-item-side&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Option 2&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;Allows notifications&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;/q-item&gt; &lt;q-item link tag=\"label\"&gt; &lt;q-item-side&gt; &lt;q-radio color=\"amber\" v-model=\"option\" val=\"opt3\" /&gt; &lt;/q-item-side&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Option 3&lt;/q-item-tile&gt; &lt;q-item-tile sublabel lines=\"3\"&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;/q-item&gt; &lt;q-item-separator /&gt; &lt;q-list-header&gt;Toggles&lt;/q-list-header&gt; &lt;q-item link tag=\"label\"&gt; &lt;q-item-main label=\"Events and reminders\" /&gt; &lt;q-item-side right&gt; &lt;q-toggle v-model=\"checked_one\" /&gt; &lt;/q-item-side&gt; &lt;/q-item&gt; &lt;q-item link tag=\"label\" multiline&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Events and reminders&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;Lorem ipsum&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;q-item-side right&gt; &lt;q-toggle v-model=\"checked_two\" color=\"secondary\" /&gt; &lt;/q-item-side&gt; &lt;/q-item&gt; &lt;q-item link tag=\"label\" multiline&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Events and reminders&lt;/q-item-tile&gt; &lt;q-item-tile sublabel lines=\"3\"&gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute &lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;q-item-side right&gt; &lt;q-toggle v-model=\"checked_three\" color=\"amber\" /&gt; &lt;/q-item-side&gt; &lt;/q-item&gt; &lt;q-item-separator /&gt; &lt;q-list-header&gt;Selects&lt;/q-list-header&gt; &lt;q-item&gt; &lt;q-item-side icon=\"supervisor_account\" /&gt; &lt;q-item-main&gt; &lt;q-select hide-underline class=\"q-ma-none full-width\" v-model=\"select\" :options=\"selectOptions\" /&gt; &lt;/q-item-main&gt; &lt;/q-item&gt; &lt;q-item&gt; &lt;q-item-side icon=\"supervisor_account\" /&gt; &lt;q-item-main&gt; &lt;q-select hide-underline class=\"q-ma-none full-width\" multiple toggle v-model=\"multipleSelect\" :options=\"selectOptions\" /&gt; &lt;/q-item-main&gt; &lt;/q-item&gt; &lt;q-item-separator /&gt; &lt;q-list-header&gt;Ranges&lt;/q-list-header&gt; &lt;q-item&gt; &lt;q-item-side icon=\"volume_down\" /&gt; &lt;q-item-main&gt; &lt;q-slider v-model=\"range\" :min=\"0\" :max=\"50\" label /&gt; &lt;/q-item-main&gt; &lt;q-item-side right icon=\"volume_up\" /&gt; &lt;/q-item&gt; &lt;q-item&gt; &lt;q-item-side icon=\"volume_down\" /&gt; &lt;q-item-main&gt; &lt;q-slider v-model=\"range\" :min=\"0\" :max=\"50\" label color=\"amber\" /&gt; &lt;/q-item-main&gt; &lt;q-item-side right icon=\"volume_up\" /&gt; &lt;/q-item&gt; &lt;q-item&gt; &lt;q-item-side icon=\"monetization_on\" /&gt; &lt;q-item-main&gt; &lt;q-range v-model=\"doubleRange\" :min=\"0\" :max=\"50\" label color=\"secondary\" /&gt; &lt;/q-item-main&gt; &lt;/q-item&gt;&lt;/q-list&gt; Movies List&lt;q-list&gt; &lt;q-list-header&gt;Documentaries&lt;/q-list-header&gt; &lt;q-item&gt; &lt;q-item-side image=\"statics/mountains.jpg\" /&gt; &lt;q-item-main label=\"Mountains Documentary\" /&gt; &lt;q-item-side right icon=\"movie\" /&gt; &lt;/q-item&gt; &lt;q-item&gt; &lt;q-item-side image=\"statics/quasar-logo.png\" /&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Quasar&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;Empower your development skills&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;q-item-side right icon=\"movie\" /&gt; &lt;/q-item&gt; &lt;q-item-separator /&gt; &lt;q-list-header&gt;Movies&lt;/q-list-header&gt; &lt;q-item multiline&gt; &lt;q-item-side image=\"statics/parallax1.jpg\" /&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Must-see places&lt;/q-item-tile&gt; &lt;q-item-tile sublabel lines=\"3\"&gt; The world in which we live is full of wonderful places that most of us do not know they really exist. Here you can see some of those breathtaking places around the world. Enjoy! &lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;q-item-side right icon=\"movie\" /&gt; &lt;/q-item&gt; &lt;q-item multiline&gt; &lt;q-item-side image=\"statics/parallax2.jpg\" /&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Building a Bridge&lt;/q-item-tile&gt; &lt;q-item-tile sublabel lines=\"5\"&gt; A bridge is one of those things that are often taken for granted until you don’t have one, especially if you live on a rural property and there’s a creek between your house and the county road. John Doe had plans to build a new bridge along with building a new house on his property, but plans for the bridge were made top priority when a wayward truck carried too much weight over the old bridge and it collapsed. &lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;q-item-side right icon=\"movie\" /&gt; &lt;/q-item&gt;&lt;/q-list&gt; Phonebook List&lt;q-list&gt; &lt;q-item&gt; &lt;q-item-side icon=\"phone\" color=\"primary\" /&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;(650) 555 - 1234&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;Mobile&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;q-item-side right icon=\"chat_bubble\" color=\"green\" /&gt; &lt;/q-item&gt; &lt;q-item&gt; &lt;q-item-main inset&gt; &lt;q-item-tile label&gt;(650) 555 - 2345&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;Office&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;q-item-side right icon=\"chat_bubble\" /&gt; &lt;/q-item&gt; &lt;q-item&gt; &lt;q-item-main inset&gt; &lt;q-item-tile label&gt;(650) 555 - 3456&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;Home&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;q-item-side right icon=\"chat_bubble\" /&gt; &lt;/q-item&gt; &lt;q-item-separator inset /&gt; &lt;q-item&gt; &lt;q-item-side icon=\"mail\" color=\"primary\" /&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;john@doe.com&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;Personal&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;/q-item&gt; &lt;q-item&gt; &lt;q-item-main inset&gt; &lt;q-item-tile label&gt;john.doe@some-company.com&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;Office&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;/q-item&gt;&lt;/q-list&gt;"},{"title":"Modal","updated":"2018-07-25T14:14:24.671Z","permalink":"https://quasar-framework.org/components/modal.html","text":"The Quasar Modal component is a UI overlay, which offers extended screen space to allow the user to get more work done. Modals are used for such things as login or signup dialogs, for message composition windows or extended option selections, like offering a list of users to be friends with. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QModal'], // optional if you want to use // directive `v-close-overlay` directives: ['CloseOverlay']&#125; Basic UsageBelow you’ll find the code for a very basic modal: &lt;template&gt; &lt;q-modal v-model=\"opened\"&gt; &lt;h4&gt;Basic Modal&lt;/h4&gt; &lt;q-btn color=\"primary\" @click=\"opened = false\" label=\"Close\" /&gt; &lt;/q-modal&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; opened: false &#125; &#125;&#125;&lt;/script&gt; Modals are responsive to the width of the window (see demo on a desktop and resize browser window). Sometimes you need to always have a Modal maximized or minimized regardless of window width, so to do this, Quasar offers the minimized and maximized props: &lt;q-modal maximized&gt; ...&lt;/q-modal&gt; Vue Properties Property Type Description minimized Boolean Always minimized regardless of screen width. maximized Boolean Always maximized regardless of screen width. no-route-dismiss Boolean By default, when route changes, the modal gets closed. This prop inhibits the behavior. no-esc-dismiss Boolean Disable Modal dismissal by hitting Escape key. no-backdrop-dismiss Boolean Disable Modal dismissal by clicking/tapping on backdrop. content-css Object/Array/String Applies CSS style to Modal container. Use Object or Array of Object when also specifying position prop. content-classes Object/Array/String Classes to apply to Modal inner content. position String Stick Modal to one of the screen edges (top, right, bottom, left). position-classes String Space delimited CSS classes that overwrite the default ‘items-center justify-center’ classes. Gets overridden by position if present. transition String Vue transition to use. Quasar comes with a q-modal transition out of the box. But you can write your own Vue transitions using CSS and use them. enter-class String enter transition class name leave-class String leave transition class name no-refocus Boolean (v0.17+) By default, when closing the Modal, the previous focused element gets focused again. When property is set to true it disables this behaviour. Vue Methods Method Description show Open Modal. Takes one optional Function parameter to trigger after Modal is opened. hide Close Modal. Takes one optional Function parameter to trigger after Modal is closed. toggle Toggle open/close Modal state. Takes one optional Function parameter to trigger after Modal is toggled. Vue Events Event Name Description @show Triggered right after Modal is opened. @hide Triggered right after Modal is closed. @escape-key Triggered if the Modal is dismissed with the Escape key on desktops. ExamplesStyling Modal&lt;q-modal content-css=\"padding: 50px\"&gt; ...&lt;/q-modal&gt; Sticking Modal to an Edge&lt;q-modal position=\"left\"&gt; ...&lt;/q-modal&gt; Modal with LayoutWhen making layout inside a modal, Quasar has a special component called QModalLayout (described in next section), which takes care of any needed structure. Do NOT use QLayout inside a QModal. Instead, use the simplified QModalLayout. &lt;q-modal v-model=\"opened\" :content-css=\"&#123;minWidth: '80vw', minHeight: '80vh'&#125;\"&gt; &lt;q-modal-layout&gt; &lt;q-toolbar slot=\"header\"&gt; &lt;q-btn flat round dense v-close-overlay icon=\"keyboard_arrow_left\" /&gt; &lt;q-toolbar-title&gt; Header &lt;/q-toolbar-title&gt; &lt;/q-toolbar&gt; &lt;q-toolbar slot=\"header\"&gt; &lt;q-search inverted v-model=\"search\" color=\"none\" /&gt; &lt;/q-toolbar&gt; &lt;q-toolbar slot=\"footer\"&gt; &lt;q-toolbar-title&gt; Footer &lt;/q-toolbar-title&gt; &lt;/q-toolbar&gt; &lt;div class=\"layout-padding\"&gt; &lt;h1&gt;Modal&lt;/h1&gt; &lt;q-btn color=\"primary\" v-close-overlay label=\"Close\" /&gt; &lt;p&gt;This is a Modal presenting a Layout.&lt;/p&gt; &lt;/div&gt; &lt;/q-modal-layout&gt;&lt;/q-modal&gt; QModalLayoutQModalLayout has two slots (header and footer) and the following properties which can be either String, Object or Array: Property Type Description header-style String/Object/Array Style applied to header. header-class String/Object/Array CSS classes applied to header. content-style String/Object/Array Style applied to content (between header and footer). content-class String/Object/Array CSS classes applied to content (between header and footer). footer-style String/Object/Array Style applied to footer. footer-class String/Object/Array CSS classes applied to footer. Example: &lt;q-modal .....&gt; &lt;q-modal-layout header-style=\"min-height: 100px\" content-class=\"&#123;'bg-primary': isPrimary, 'some-class': someBoolean&#125;\" footer-class=\"bg-primary some-class\" footer-style=\"&#123;fontSize: '24px', fontWeight: 'bold'&#125;\" &gt; &lt;!-- inject header and/or footer slots here examples: 1. &lt;div slot=\"header\"&gt;...&lt;/div&gt; 2. &lt;q-toolbar slot=\"header\"&gt;...&lt;/q-toolbar&gt; --&gt; ... &lt;!-- all other elements not using header or footer slot is considered content --&gt; .... &lt;/q-modal-layout&gt;&lt;/q-modal&gt;"},{"title":"Notify","updated":"2019-01-01T13:12:57.790Z","permalink":"https://quasar-framework.org/components/notify.html","text":"Notify is a Quasar plugin that can display animated QAlerts (floating above everything in your pages) to users in the form of a notification. They are useful for alerting the user of an event and can even engage the user through actions. InstallationEdit /quasar.conf.js:framework: &#123; plugins: ['Notify'], config: &#123; // optional (v0.17+) notify: &#123; // Notify defaults &#125; &#125;&#125; Basic Usage// outside of a Vue fileimport &#123; Notify &#125; from 'quasar'Notify.create('Danger, Will Robinson! Danger!')// or with a config object:Notify.create(&#123; message: 'Danger, Will Robinson! Danger!'&#125;)// inside of a Vue filethis.$q.notify('Message')// or with a config object:this.$q.notify(&#123;...&#125;) You can see this notification at the bottom of the demo page screen. Please notice the defaults: The notification is red. It has a timeout of 5000ms. It appears floating at the bottom of the screen. The animation is determined by the position of the notification on screen. Config ObjectLet’s go deeper and analyze the different optional properties available for a notification. this.$q.notify(&#123; // only required parameter is the message: message: `A text with your nofification's awesome message`, /* * All parameters below are optional: */ timeout: 3000, // in milliseconds; 0 means no timeout // \"type\" adds a color and icon, // so you don't need to specify them. // Available values: 'positive', 'negative', 'warning', 'info' type: 'positive', color: 'positive', textColor: 'black', // if default 'white' doesn't fit icon: 'wifi', // or avatar: 'statics/boy-avatar.png', detail: 'Optional detail message.', position: 'top-right', // 'top', 'left', 'bottom-left' etc. closeBtn: true, // or string as button message e.g. 'dismiss' actions: [ &#123; label: 'Snooze', icon: 'timer', // optional noDismiss: true, // optional, v0.15.11+ handler: () =&gt; &#123; console.log('acting') &#125; &#125;, &#123; label: 'Dismiss', handler: () =&gt; &#123; console.log('dismissed') &#125; &#125; ], onDismiss () &#123; // v0.15.11+ //... &#125;&#125;) NoteIf you define any actions, the notification will automatically be dismissed when the user picks it. Setting Up DefaultsQuasar v0.17+ Should you wish to set up some defaults, rather than specifying them each time, you can do so by using quasar.conf &gt; framework &gt; config &gt; notify: {…} or by calling Notify.setDefaults({...}) or this.$q.notify.setDefaults({...}). Programmatically Closing AlertNotifications are meant to be dismissed only by the user, however for exceptional cases you can do it programmatically. Especially useful when you set indefinite timeout (0). const dismiss = this.$q.notify(&#123;...&#125;)...dismiss() Types of NotificationsQuasar offers the possibility to create out of the box notifications for different types of success or failure messages. The Notify types have specific icons and colors. The types of Notify we are talking about are: positive (for success), negative (for errors), warning and info. Here’s how to create them: this.$q.notify(&#123; type: 'positive', ...&#125;)"},{"title":"QNoSsr","updated":"2018-07-25T14:14:24.671Z","permalink":"https://quasar-framework.org/components/no-ssr.html","text":"This component makes sense only if you are creating a SSR website/app. It avoids rendering its content on the server and leaves that for client only. Useful when you got code that is not isomorphic and can only run on the client side, in a browser. Alternatively, you can also use it to render content only on server-side and it automatically removes it if it ends up running on a client browser. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QNoSsr']&#125; ExamplesBasic:&lt;q-no-ssr&gt; &lt;div&gt;This won't be rendered on server&lt;/div&gt;&lt;/q-no-ssr&gt; Multiple client nodes:&lt;q-no-ssr&gt; &lt;div&gt;This won't be rendered on server.&lt;/div&gt; &lt;div&gt;This won't either.&lt;/div&gt;&lt;/q-no-ssr&gt; Multiple client nodes with tag prop:&lt;q-no-ssr tag=\"blockquote\"&gt; &lt;div&gt;This won't be rendered on server.&lt;/div&gt; &lt;div&gt;This won't either.&lt;/div&gt;&lt;/q-no-ssr&gt; Placeholder property:&lt;q-no-ssr placeholder=\"Rendered on server\"&gt; &lt;div&gt;This won't be rendered on server&lt;/div&gt;&lt;/q-no-ssr&gt; Placeholder slot:&lt;q-no-ssr&gt; &lt;div&gt;This won't be rendered on server&lt;/div&gt; &lt;div slot=\"placeholder\"&gt;Rendered on server&lt;/div&gt;&lt;/q-no-ssr&gt; Multiple placeholder slot:&lt;q-no-ssr&gt; &lt;div&gt;This won't be rendered on server&lt;/div&gt; &lt;div slot=\"placeholder\"&gt;Rendered on server (1/2)&lt;/div&gt; &lt;div slot=\"placeholder\"&gt;Rendered on server (2/2)&lt;/div&gt;&lt;/q-no-ssr&gt; Only placeholder slot:&lt;q-no-ssr&gt; &lt;div slot=\"placeholder\"&gt;Rendered on server&lt;/div&gt;&lt;/q-no-ssr&gt; Vue Properties Vue Property Type Description tag String HTML tag to use to render the component. Default: ‘div’ placeholder String String to display on server, before the client takeover."},{"title":"Quasar Meta Plugin","updated":"2018-07-28T14:23:34.704Z","permalink":"https://quasar-framework.org/components/meta-plugin.html","text":"Better SEO for your website! The Meta plugin can dynamically change page title, manage &lt;meta&gt; tags, manage &amp; DOM element attributes, add/remove/change &lt;style&gt; and &lt;script&gt; tags in the head of your document (useful for CDN stylesheets or for json-ld markup, for example), or manage &lt;noscript&gt; tags. Installation// quasar.conf.jsframework: &#123; // ... plugins: ['Meta']&#125; UsageWhat the Meta plugin does is that it enables the use of a special property in your Vue components called meta. Take a look at the example below, with almost all of its features: // some .vue fileexport default &#123; // ... meta: &#123; // sets document title title: 'Index Page', // optional; sets final title as \"Index Page - My Website\", useful for multiple level meta titleTemplate: title =&gt; `$&#123;title&#125; - My Website`, // meta tags meta: &#123; description: &#123; name: 'description', content: 'Page 1' &#125;, keywords: &#123; name: 'keywords', content: 'Quasar website' &#125;, equiv: &#123; 'http-equiv': 'Content-Type' content: 'text/html; charset=UTF-8' &#125; &#125;, // CSS tags link: &#123; material: &#123; rel: 'stylesheet', href: 'https://fonts.googleapis.com/icon?family=Material+Icons' &#125; &#125;, // JS tags script: &#123; ldJson: &#123; type: 'application/ld+json', innerHTML: `&#123; \"@context\": \"http://schema.org\" &#125;` &#125; &#125;, // &lt;html&gt; attributes htmlAttr: &#123; 'xmlns:cc': 'http://creativecommons.org/ns#' // generates &lt;html xmlns:cc=\"http://creativecommons.org/ns#\"&gt;, empty: undefined // generates &lt;html empty&gt; &#125;, // &lt;body&gt; attributes bodyAttr: &#123; 'action-scope': 'xyz', // generates &lt;body action-scope=\"xyz\"&gt; empty: undefined // generates &lt;body empty&gt; &#125;, // &lt;noscript&gt; tags noscript: &#123; default: 'This is content for browsers with no JS (or disabled JS)' &#125; &#125;&#125; How It WorksMetas are computed from .vue files in the order they are activated by Vue Router (let’s call this a chain for further explanations). Example: App.vue &gt; SomeLayout.vue &gt; IndexPage.vue &gt; …? When a component that contains the meta property gets rendered or destroyed, it is added/removed to/from the chain and metas are updated accordingly. Notice that all properties (except for title and titleTemplate) are Objects; you can override meta props defined in previous Vue components in the chain by using the same keys again. Example: // first loaded Vue componentmeta: &#123; meta: &#123; myKey: &#123; name: 'description', content: 'My Website' &#125; &#125;&#125;// a subsequent Vue component in the chain;// this will override the first definition on \"myKey\"meta: &#123; meta: &#123; myKey: &#123; name: 'description', content: 'Page 1' &#125; &#125;&#125; Just make sure not to duplicate content that already exists in /src/index.template.html. If you want to use the Meta plugin, the recommended way is to remove the same tags from the html template. But on use-cases where you know a tag will never change and you always want it rendered, then it’s better to have it only on the html template instead. In the examples above, you noticed all of the meta props are “static”. But they can be dynamic instead, should you wish. This is how you can bind to the Vue scope with them. Think of them as a Vue computed property. // some .vue fileexport default &#123; data () &#123; return &#123; title: 'Some title' // we define the \"title\" prop &#125; &#125;, // NOTICE meta is a function here, which is the way // for you to reference properties from the Vue component's scope meta () &#123; return &#123; // this accesses the \"title\" property in your Vue \"data\"; // whenever \"title\" prop changes, your meta will automatically update title: this.title &#125; &#125;, methods: &#123; setAnotherTitle () &#123; this.title = 'Another title' // will automatically trigger a Meta update due to the binding &#125; &#125; // ...&#125;"},{"title":"Option Group","updated":"2018-07-25T14:14:24.672Z","permalink":"https://quasar-framework.org/components/option-group.html","text":"The Quasar Option Group component is a helper component, which allows you to better control the grouping of binary (as in on or off, true or false, 1 or 0) form input components like checkboxes, radios or toggles. A good usage for this component is for offering the user a set of options or settings to turn on and off, and thus the name of the component. Works well with QField for additional functionality such as a helper, error message placeholder and many others. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QOptionGroup']&#125; Basic UsageExample on a group of checkboxes: &lt;template&gt; &lt;q-option-group color=\"secondary\" type=\"checkbox\" v-model=\"group\" :options=\"[ &#123; label: 'Option 1', value: 'op1' &#125;, &#123; label: 'Option 2', value: 'op2' &#125;, &#123; label: 'Option 3', value: 'op3' &#125; ]\" /&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; // `v-model` binded to `group`, // which must be an array for checkboxes and toggles group: ['opt1'] &#125; &#125;&#125;&lt;/script&gt; Example on a group of radios: &lt;template&gt; &lt;q-option-group color=\"secondary\" type=\"radio\" v-model=\"group\" :options=\"[ &#123; label: 'Option 1', value: 'op1' &#125;, &#123; label: 'Option 2', value: 'op2' &#125;, &#123; label: 'Option 3', value: 'op3' &#125; ]\" /&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; // `v-model` binded to `group`, // which must be a String when using radios group: 'opt1' &#125; &#125;&#125;&lt;/script&gt; Vue PropertiesSupports v-model, which is required. For “radio” type it must be a String, otherwise (“checkbox” or “toggle” type) your scope variable that you bind to v-model must be an Array. Vue Property Type Description type String The type of input component to be used. The default is radio. The other choices are checkbox and toggle. options Array An array of objects with value and label properties. The binary components will be created according to this array. left-label Boolean When set to true, the labels will be put on the left side. inline Boolean Adjusts the display of the binary components fill out the row, instead of being stacked vertically. color String Color from Quasar Color Palette. keep-color Boolean Keep color when not selected/truthy too. readonly Boolean Set to true, to make the binary components read-only. disable Boolean When set to true, the binary components are not selectable thus cannot change your v-model. dark Boolean Set to true when background is dark. no-parent-field Boolean Avoid trying to connect to a parent QField. Vue Events Vue Event Description @input Triggered immediately when model changes. @change Fired when the component model changes. @focus Fired when the component gets focus. @blur Fired when the component loses focus. Lazy InputVue will soon supply the .lazy modifier for v-model on components too, but until then, you can use the longer equivalent form:&lt;q-option-group type=\"radio\" :value=\"model\" @change=\"val =&gt; &#123; model = val &#125;\" :options=\"[ &#123; label: 'Option 1', value: 'op1' &#125;, &#123; label: 'Option 2', value: 'op2' &#125;, &#123; label: 'Option 3', value: 'op3' &#125; ]\"/&gt; Other ExamplesA group of radios with different colors.&lt;q-option-group type=\"radio\" v-model=\"group\" :options=\"[ &#123; label: 'Option 1', value: 'op1' &#125;, &#123; label: 'Option 2', value: 'op2', color: 'secondary' &#125;, &#123; label: 'Option 3', value: 'op3', color: 'amber' &#125; ]\"/&gt; And a group of toggles, but not stacked vertically when possible. We add inline Boolean property. &lt;q-option-group inline type=\"toggle\" v-model=\"group\" :options=\"[ &#123; label: 'Option 1', value: 'op1' &#125;, &#123; label: 'Option 2', value: 'op2' &#125;, &#123; label: 'Option 3', value: 'op3' &#125; ]\"/&gt; You would normally also add this component inside a QField component as shown below. &lt;q-field icon=\"cloud\" helper=\"Choose your option\" label=\"Pick something\" :error=\"hasError\" error-label=\"Select at least one option\"&gt; &lt;q-option-group type=\"radio\" v-model=\"group\" :options=\"[ &#123; label: 'Option 1', value: 'op1' &#125;, &#123; label: 'Option 2', value: 'op2' &#125;, &#123; label: 'Option 3', value: 'op3' &#125; ]\" /&gt;&lt;/q-field&gt;"},{"title":"Other CSS Helper Classes","updated":"2018-05-18T22:01:01.030Z","permalink":"https://quasar-framework.org/components/other-helper-classes.html","text":"There are a lot of CSS classes that you can use while writing your Vue templates. Very handy to ease the complexity of your VueModels and templates. The list below is not complete. Also check the other CSS documentation pages like Typography, Visibility, Shadows, Positioning. Mouse Related Class Name Description non-selectable User won’t be able to select DOM node along with its text scroll Applies CSS tweaks to make scroll work at its best on ALL platforms no-scroll Hides scrollbars on the DOM node no-pointer-events DOM element does not become a target of mouse events - clicks, hover and so on all-pointer-events The opposite of no-pointer-events cursor-pointer Change mouse pointer on DOM element to look as if on a clickable link Size Related Class Name Description fit Width and Height is set to 100% full-height Height is set to 100% full-width Width is set to 100% window-height Height is set to 100vh with top and bottom margins 0 window-width Width is set to 100vw with left and right margins 0 block Sets display property set to block Orientation Related Class Name Description rotate-45 Rotate by 45 degrees rotate-90 Rotate by 90 degrees rotate-135 Rotate by 135 degrees rotate-180 Rotate by 180 degrees rotate-205 Rotate by 205 degrees rotate-270 Rotate by 270 degrees rotate-315 Rotate by 315 degrees flip-horizontal Flip DOM element horizontally flip-vertical Flip DOM element vertically Border Related Class Name Description no-border Removes any border round-borders Applies a generic border radius based on theme GroupsThere are two special CSS class named group and generic-margin. group applies a small margin to all children DOM elements, while generic-margin applies same margin to the respective DOM element (this varies with each theme). The recommended way to go is by using CSS Flex Gutter though."},{"title":"Other Utils","updated":"2018-08-30T14:23:50.834Z","permalink":"https://quasar-framework.org/components/other-utils.html","text":"Open External URLimport &#123; openURL &#125; from 'quasar'openURL('http://...') It will take care of the quirks involved when running under Cordova or on a browser, including notifying the user he/she has to acknowledge opening popups. Debounce FunctionIf your App uses JavaScript to accomplish taxing tasks, a debounce function is essential to ensuring a given task doesn’t fire so often that it bricks browser performance. Debouncing a function limits the rate at which the function can fire. Debouncing enforces that a function not be called again until a certain amount of time has passed without it being called. As in “execute this function only if 100 milliseconds have passed without it being called.” A quick example: you have a resize listener on the window which does some element dimension calculations and (possibly) repositions a few elements. That isn’t a heavy task in itself but being repeatedly fired after numerous resizes will really slow your App down. So why not limit the rate at which the function can fire? // Returns a function, that, as long as it continues to be invoked, will not// be triggered. The function will be called after it stops being called for// N milliseconds. If `immediate` is passed, trigger the function on the// leading edge, instead of the trailing.import &#123; debounce &#125; from 'quasar'(Debounced Function) debounce(Function fn, Number milliseconds_to_wait, Boolean immediate)// Example:window.addEventListener( 'resize', debounce(function() &#123; .... things to do ... &#125;, 300 /*ms to wait*/)) There’s also a frameDebounce available which delays calling your function until next browser frame is scheduled to run (read about requestAnimationFrame). import &#123; frameDebounce &#125; from 'quasar'(Debounced Function) frameDebounce(Function fn)// Example:window.addEventListener( 'resize', frameDebounce(function() &#123; .... things to do ... &#125;)) Throttle FunctionThrottling enforces a maximum number of times a function can be called over time. As in “execute this function at most once every X milliseconds.” import &#123; throttle &#125; from 'quasar'(Throttled Function) throttle(Function fn, Number limit_in_milliseconds)// Example:window.addEventListener( 'resize', throttle(function() &#123; .... things to do ... &#125;, 300 /* execute at most once every 0.3s */)) (Deep) Copy ObjectsA basic respawn of jQuery.extend(). Takes same parameters:import &#123; extend &#125; from 'quasar'let newObject = extend([Boolean deepCopy], targetObj, obj, ...) Watch out for methods within objects. Generate UIDGenerate unique identifiers:import &#123; uid &#125; from 'quasar'let uid = uid()// Example: 501e7ae1-7e6f-b923-3e84-4e946bff31a8 Handling event on a DOM event handlerIt’s cross-browser. import &#123; event &#125; from 'quasar'node.addEventListener('click', evt =&gt; &#123; // left clicked? (Boolean) event.leftClick(evt) // middle clicked? (Boolean) event.middleClick(evt) // right clicked? (Boolean) event.rightClick(evt) // key in number format (Number) event.getEventKey(evt) // Mouse wheel distance (in pixels) (Object &#123;x, y&#125;) event.getMouseWheelDistance(evt) // position on viewport // works both for mouse and touch events! (Object &#123;top, left&#125;) event.position(evt) // get target DOM Element on which mouse or touch // event has fired upon (DOM Element) event.targetElement(evt) // call stopPropagation and preventDefault event.stopAndPrevent(evt)&#125;) FilterFilter out an array of Objects based on a certain field: import &#123; filter &#125; from 'quasar'let data = [&#123;fee: 5, desc: 'Bla bla'&#125;, &#123;fee: 10, desc: 'Bla bla'&#125;, &#123;fee: 1, desc: 'Bla bla'&#125;]console.log(filter('5', &#123;field: 'fee', list: data&#125;))// [&#123;fee: 5, desc: 'Bla bla'&#125;]"},{"title":"Parallax","updated":"2018-08-18T15:39:58.738Z","permalink":"https://quasar-framework.org/components/parallax.html","text":"Parallax scrolling is a technique in computer graphics and web design, where background images move by the camera slower than foreground images, creating an illusion of depth in a 2D scene and adding to the immersion. Quasar provides an out of the box Vue Component you can use. It takes care of a lot of quirks, including image size which can actually be smaller than the window width/height. Starting with Quasar v0.17.9+, you can also use videos as background content. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QParallax']&#125; Basic UsageSpecifying image with src property. Notice we are referencing an image from statics folder.&lt;q-parallax src=\"statics/mountains.jpg\"&gt; &lt;!-- The rest of DOM elements get displayed on top of the Parallax image after it's loaded --&gt; &lt;h1&gt;Parallax&lt;/h1&gt;&lt;/q-parallax&gt; Specifying an image through media slot. This way you can have more control on the image and also reference it from assets folder which is handled directly by Webpack.&lt;q-parallax&gt; &lt;img slot=\"media\" src=\"assets/parallax2.jpg\"&gt; &lt;h1&gt;Slot&lt;/h1&gt;&lt;/q-parallax&gt; Specifying a video with media slot. This way you can have more control on the video tag and also reference it from assets folder which is handled directly by Webpack.&lt;q-parallax&gt; &lt;video slot=\"media\" poster=\"http://www.markhillard.com/sandbox/media/polina.jpg\" autoplay loop muted&gt; &lt;source type=\"video/webm\" src=\"http://www.markhillard.com/sandbox/media/polina.webm\"&gt; &lt;source type=\"video/mp4\" src=\"http://www.markhillard.com/sandbox/media/polina.mp4\"&gt; &lt;/video&gt; &lt;h1&gt;Video&lt;/h1&gt;&lt;/q-parallax&gt; WarningOn some iOS platforms there may be problems regarding the autoplay feature of the native &lt;video&gt; tag. Reference. QParallax and Quasar are not interfering in any way with the client browser’s ability/restrictions on the &lt;video&gt; tag. As you noticed in the examples above, you can display some content on top of the Parallax image/video (in the example above an &lt;h1&gt; tag). Vue Properties Param Attributes Type Description src String (Optional) Source for the image. height Number Height of Parallax in pixels. Default value is 500. speed Number Float between 0 and 1. Another example:&lt;!-- VueModel contains data property \"imageURL\" --&gt;&lt;q-parallax :src=\"imageURL\" :height=\"300\"&gt; &lt;h1&gt;Parallax&lt;/h1&gt;&lt;/q-parallax&gt;"},{"title":"Page Sticky","updated":"2018-05-18T22:01:01.031Z","permalink":"https://quasar-framework.org/components/page-sticky.html","text":"The PageSticky component helps in placing DOM elements / components wrapped by it into a static position within the content area of your Layout, no matter where the user scrolls. A good example of this would be a “Back to top” button, which would first appear at the bottom of the screen, once the user scrolls down to a certain level on the screen. The great advantage of this is that the elements wrapped by this component will never overlap the layout header, footer or left/right sides, even if those are not configured to be fixed. In the latter case, the position will be offsetted so that the overlap won’t occur.Try it out with a non fixed footer for example. When user reaches bottom of screen and footer comes into view, the component will shift up so it won’t overlap with the footer. Important!In order for QPageSticky to work, it must be placed within a QLayout component NoteQPageSticky must be the last child element within it’s parent, so it can display on top of other content InstallationEdit /quasar.conf.js:framework: &#123; components: ['QPageSticky']&#125; Basic Usage&lt;q-layout&gt; ... &lt;!-- Place QPageSticky as the last child element of your page. This is important for it to be displayed on top of the other page content. --&gt; &lt;q-page-sticky position=\"top-right\" :offset=\"[18, 18]\"&gt; &lt;q-btn round color=\"primary\" @click=\"alert\" icon=\"alarm\" /&gt; &lt;/q-page-sticky&gt;&lt;/q-layout&gt; The above would position a circular button at the top right corner of the content area of a layout. It would also pad the button with 18 pixels from the top and right edges of the layout. Expand mode Needs Quasar v0.15.4+Beware that you need to manually set the according padding to your QPage element so that your sticky elements won’t overlap page content. By default, QPageSticky shrinks to the size of its content. In case you want to place something like a QToolbar (works with any element/component) in a QPageSticky with position set to “top” (works for top/right/bottom/left), you can use the expand Boolean property: &lt;!-- Example of a toolbar placed at top of the page --&gt;&lt;q-page-sticky expand position=\"top\"&gt; &lt;q-toolbar&gt; &lt;q-btn flat round dense icon=\"menu\" /&gt; &lt;q-toolbar-title&gt;Title&lt;/q-toolbar-title&gt; &lt;/q-toolbar&gt;&lt;/q-page-sticky&gt;&lt;!-- Example of placing something on the right side of the page --&gt;&lt;q-page-sticky expand position=\"left\"&gt; &lt;div class=\"fit bg-tertiary\"&gt; ....content... &lt;/div&gt;&lt;/q-page-sticky&gt; Tip: For left/right positions you can use the Quasar Flex CSS classes to center content. Vue Properties Vue Property Type Description position String Check below for valid values. expand Boolean (v0.15.4+) Expand mode. Overrides default “shrinking” mode where Page Sticky shrinks to the size of content. offset Array (2 integers) Optional. The offset of the content, relative to the corner. First is offset on X axis, then on Y axis.Example: [0, 18] (offset 0 on X axis and 18px on Y axis). Valid values for “position” property: top-right, top-left, bottom-right, bottom-left, top, right, bottom, left."},{"title":"Platform Detection","updated":"2018-07-25T14:14:24.674Z","permalink":"https://quasar-framework.org/components/platform-detection.html","text":"Helpers are built-in to detect the Platform (and its capabilities) in which the code is running: // For usage inside a Vue component JS:this.$q.platform.is.mobile// or usage inside a Vue component template:$q.platform.is.cordova// Only for usage outside a Vue component you need to import it:import &#123; Platform &#125; from 'quasar' Property Type Meaning Platform.is.mobile boolean Is the code running on a mobile device? Platform.is.cordova boolean Is the code running within Cordova? Platform.is.electron boolean Is the code running within Electron? Platform.is.desktop boolean Is the code running on a desktop browser? Platform.is.chromeExt boolean Is the code running is a Chrome extension environment? Platform.has.touch boolean Is the code running on a touch capable screen? Platform.within.iframe boolean Is the App running within an IFRAME? NOTERunning on mobile means you can have this code running on a mobile device (phone or tablet) but with a browser, not within a Cordova wrapper. Other Platform.is specific properties:android, blackberry, cros, ios, ipad, iphone, ipod, kindle, linux, mac, playbook, silk, chrome, opera, safari, win (Windows), winphone (Windows Phone) and more… Example when running Chrome on a Linux desktop machine:// Describing Platform.is&#123; chrome: true, desktop: true, linux: true, name: \"chrome\", platform: \"linux\", version: \"47.0.2526.80\", versionNumber: 47, webkit: true&#125; UsageLet’s say we want to render different components or DOM elements, based on the platform that the code is running under. We want to show something on desktop and something else on mobile. We would proceed like this: &lt;div v-if=\"$q.platform.is.desktop\"&gt; I'm only rendered on desktop!&lt;/div&gt;&lt;div v-if=\"$q.platform.is.mobile\"&gt; I'm only rendered on mobile!&lt;/div&gt;&lt;div v-if=\"$q.platform.is.electron\"&gt; I'm only rendered on Electron!&lt;/div&gt; NOTEBased on your needs, you might want to also check Design Helpers &gt; Visibility page to see how you can achieve the same effect using CSS alone. This latter method will render your DOM elements or components regardless of platform though, so choose wisely on how you want to handle the performance of your app. Note about SSRWhen building for SSR, use only the $q.platform form. If you need to use the import { Platform } from &#39;quasar&#39; (when on server-side), then you’ll need to do it like this: import &#123; Platform &#125; from 'quasar'// you need access to `ssrContext`function (ssrContext) &#123; const platform = process.env.SERVER ? Platform.parseSSR(ssrContext) : Platform // otherwise we're on client // platform is equivalent to the global import as in non-SSR builds&#125; The ssrContext is available in App Plugins or preFetch feature where it is supplied as parameter. The reason for all this is that in a client-only app, every user will be using a fresh instance of the app in their browser. For server-side rendering we want the same: each request should have a fresh, isolated app instance so that there is no cross-request state pollution. So Platform needs to be bound to each request separately."},{"title":"Pagination","updated":"2018-07-19T13:04:56.787Z","permalink":"https://quasar-framework.org/components/pagination.html","text":"The Quasar Pagination component is available for whenever a pagination system is required. It offers the user a simple UI to help you in moving between pages/items. There are two modes in which QPagination operates: with buttons only or with an inputbox. The latter mode allows the user to go to a specific page by clicking/tapping on the inputbox, typing the page number then hitting Enter key and if the new page number is within valid limits, the model will be changed accordingly. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QPagination']&#125; Basic Usage&lt;q-pagination v-model=\"page\" :max=\"17\" /&gt; Vue PropertiesSupports v-model. Vue Property Type Description min Number Number of the first page; Default: 1 max Number (Required) Number of last page color String One from Quasar Color Palette text-color String Text color of current selection button, one from Quasar Color Palette size String Button size (check “size” prop from Buttons) input Boolean Use inputbox mode instead of buttons boundary-links Boolean Show boundary button links boundary-numbers Boolean Show boundary number buttons direction-links Boolean Show direction buttons ellipses Boolean Show ellipses when pages available &gt; “max-pages” prop. max-pages Number Maximum number of page links to display at a time. disable Boolean If no value is provided (empty attribute), then it’s considered as set to true. If you’d like to set the minimum starting page or the max number of pages, you can do so, as in the example below. &lt;template&gt; &lt;q-pagination v-model=\"page\" :min=\"minPages\" :max=\"maxPages\" /&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; page: 4, minPages: 4, maxPages: 27 &#125; &#125;&#125;&lt;/script&gt; This will cause the pagination to initially render to page 4 and not allow the user to go below page 4. Vue Events Vue Event Description @input(newVal) Triggered immediately on model value change. @change(newVal) Triggered on lazy model value change. ExamplesWith buttons&lt;q-pagination v-model=\"page\" :min=\"1\" :max=\"6\"/&gt; With inputbox&lt;q-pagination input v-model=\"page\" :min=\"1\" :max=\"6\"/&gt; With maximum number of links &amp; custom color&lt;q-pagination v-model=\"page2\" color=\"secondary\" :min=\"1\" :max=\"15\" :max-pages=\"6\"/&gt; With no ellipses&lt;q-pagination v-model=\"page2\" color=\"amber\" text-color=\"black\" :min=\"1\" :max=\"15\" :max-pages=\"6\" :ellipses=\"false\"/&gt; With boundary links&lt;q-pagination v-model=\"page2\" color=\"purple\" :min=\"1\" :max=\"15\" :max-pages=\"6\" boundary-links/&gt; With direction links&lt;q-pagination v-model=\"page2\" color=\"teal\" :min=\"1\" :max=\"15\" :max-pages=\"6\" direction-links/&gt; With custom interval&lt;q-pagination v-model=\"page3\" :min=\"5\" :max=\"10\"/&gt; Mix and match&lt;q-pagination v-model=\"page4\" color=\"tertiary\" :min=\"7\" :max=\"18\" :max-pages=\"8\" boundary-links direction-links/&gt;"},{"title":"Popover","updated":"2018-10-05T13:17:40.834Z","permalink":"https://quasar-framework.org/components/popover.html","text":"QPopover should be used when you want a menu (or any content) to be displayed on a popup as a result of user clicking/tapping on a DOM element / component. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QPopover'], // optional if you want to use // directive `v-close-overlay` directives: ['CloseOverlay']&#125; Basic UsageIn the example below we use a Button (as a target) and when clicking/tapping on it Quasar will display a List. You can replace the QBtn and the List with any DOM elements or components you like. &lt;!-- The target button (can be anything else) must be direct parent of QPopover on the DOM hierarchy.--&gt;&lt;q-btn label=\"Email\"&gt; &lt;!-- Direct child of target --&gt; &lt;q-popover&gt; &lt;!-- The DOM element(s) that make up the popup, in this case a list: --&gt; &lt;q-list separator link&gt; &lt;!-- notice `v-close-overlay` which closes popover --&gt; &lt;q-item v-close-overlay @click.native=\"doSomething\"&gt; ... &lt;/q-item&gt; &lt;/q-list&gt; &lt;/q-popover&gt;&lt;/q-btn&gt; The idea is to place QPopover inside your DOM element / component that you want to be the trigger as direct child. Don’t worry about QPopover content inheriting CSS from the container as the QPopover will be injected as a direct child of &lt;body&gt;. IMPORTANTWhen on a browser, hitting the &lt;ESCAPE&gt; key also closes the QPopover. Toggle through v-model&lt;template&gt; &lt;div&gt; &lt;q-btn color=\"primary\" @click=\"showing = true\" label=\"Show\" /&gt; &lt;q-btn color=\"primary\" @click=\"showing = false\" label=\"Hide\" /&gt; &lt;div&gt; ... &lt;q-popover v-model=\"showing\"&gt;...&lt;/q-popover&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; showing: false &#125; &#125;&#125;&lt;/script&gt; Vue Properties Vue Property Type Description anchor Object String of form bottom left (vertical horizontal) anchor-click Boolean Disable triggering the Popover by clicking/tapping on the parent element. no-focus Boolean (v0.17+) By default, for accessibility purposes, Popover focuses its content when it will be displayed. For use-cases when you need to keep focus on your current element, set this to true. no-refocus Boolean (v0.17+) By default, for accessibility purposes, Popover refocuses the previously active element. Set to true to disable this behaviour. self Object String of form top left (vertical horizontal) max-height String Optional maximum height of Popover content. Example: 500px touch-position Boolean Open Popover from the position where user clicked/tapped on anchor, and keep the same relative position on scroll. fit Boolean Popover has min-width set as same as the width of the container. disable Boolean When set to true, Popover won’t be triggered. offset Array of 2 Numbers Offset on horizontal and vertical (in pixels). Example: [18, 18]. cover Boolean (v0.17.10+) Popover will cover its parent element. persistent Boolean (v0.17.10+) Popover will not be closed if clicking/tapping outside of it, like it happens by default. keep-on-screen Boolean (v0.17.13+) Popover will not be closed if the parent element gets out of screen. Vue Methods Method Description show Open Popover. Takes one optional Function parameter to trigger after Popover is opened. hide Close Popover. Takes one optional Function parameter to trigger after Popover is closed. toggle Toggle open/close Popover state. Takes one optional Function parameter to trigger after Popover is toggled. Vue Events Vue Method Description @show Triggered after opening Popover. @hide Triggered after closing Popover. Handling Popover DismissalBy default, clicking/tapping outside the QPopover content will close it. But if you’d like elements from the QPopover content to close it, then use the v-close-overlay Quasar directive. Handling PositioningPosition of the QPopover can be customized. It keeps account of the optional anchor and self Vue properties. See the demo and play with them. The final position of the QPopover popup is calculated so that it will be displayed on the available screen real estate, switching to right-side and/or top-side when necessary. If you would like the QPopover to appear from the touch/click point triggering the QPopover open, then use the Boolean touch-position Vue property:&lt;q-popover touch-position&gt; ...&lt;/q-popover&gt; The demo has touch-position specified for the big image on the center of the page."},{"title":"Popup Edit","updated":"2018-09-13T11:16:30.856Z","permalink":"https://quasar-framework.org/components/popup-edit.html","text":"QPopupEdit is a component that can be used to edit a value “in place”, like for example a cell in a QTable. By default, a cell is displayed as a String, then if you are using QPopupEdit and user clicks/taps on the table cell, a popup will open where user will be able to edit the value using a textfield. This component injects a QPopover into its parent DOM element and enables the behavior described above, so it can be used anywhere, not only in QTable. InstallationQuasar v0.17.10+ Edit /quasar.conf.js:framework: &#123; components: ['QPopupEdit']&#125; Basic UsageBelow is an example with a QTable. Please note that we are using the “body” scoped slot. QPopupEdit won’t work with cell scoped slots.&lt;q-table :data=\"data\" :columns=\"columns\" :filter=\"filter\" :title=\"title\" row-key=\"name\"&gt; &lt;q-tr slot=\"body\" slot-scope=\"props\" :props=\"props\"&gt; &lt;q-td key=\"desc\" :props=\"props\"&gt; &#123;&#123; props.row.name &#125;&#125; &lt;q-popup-edit v-model=\"props.row.name\"&gt; &lt;q-field count&gt; &lt;q-input v-model=\"props.row.name\" /&gt; &lt;/q-field&gt; &lt;/q-popup-edit&gt; &lt;/q-td&gt; &lt;q-td key=\"calories\" :props=\"props\"&gt; &#123;&#123; props.row.calories &#125;&#125; &lt;q-popup-edit v-model=\"props.row.calories\" title=\"Update calories\" buttons&gt; &lt;q-input type=\"number\" v-model=\"props.row.calories\" /&gt; &lt;/q-popup-edit&gt; &lt;/q-td&gt; &lt;q-td key=\"fat\" :props=\"props\"&gt;&#123;&#123; props.row.fat &#125;&#125;&lt;/q-td&gt; &lt;q-td key=\"carbs\" :props=\"props\"&gt;&#123;&#123; props.row.carbs &#125;&#125;&lt;/q-td&gt; &lt;q-td key=\"protein\" :props=\"props\"&gt;&#123;&#123; props.row.protein &#125;&#125;&lt;/q-td&gt; &lt;q-td key=\"sodium\" :props=\"props\"&gt;&#123;&#123; props.row.sodium &#125;&#125;&lt;/q-td&gt; &lt;q-td key=\"calcium\" :props=\"props\"&gt;&#123;&#123; props.row.calcium &#125;&#125;&lt;/q-td&gt; &lt;q-td key=\"iron\" :props=\"props\"&gt;&#123;&#123; props.row.iron &#125;&#125;&lt;/q-td&gt; &lt;/q-tr&gt;&lt;/q-table&gt; Vue PropertiesSupports v-model which should be bound to a String or Number (depending on type property used) in your scope. Vue Property Type Description title String (Optional) Title to display buttons Boolean (Optional) Show Set &amp; Cancel buttons label-set String Override label for “Set” button label-cancel String Override label for “Cancel” button color String One from Quasar Color Palette to apply for inner input and buttons validate(val) Function Function to determine if input is correct, and in such case the value is saved, otherwise the edit is cancelled persistent Boolean Do not close popup if clicking outside of it disable Boolean Disable popup Vue Events Vue Method Description @show Triggered after opening popup. @hide Triggered after closing popup. @save(val, initialValue) Edit is successful and the value gets saved @cancel(val, initialValue) Edit has been cancelled and the value gets reverted to its original form"},{"title":"CSS Positioning Classes","updated":"2018-05-18T22:01:01.033Z","permalink":"https://quasar-framework.org/components/positioning.html","text":"There are CSS classes supplied by Quasar to help you position a DOM element easily: Class Name Description fullscreen Fix position covering all window real-estate fixed Set position to fixed without specifying top, left, right or bottom properties fixed-center Set position to fixed but in the middle of window. absolute Set position to absolute without specifying top, left, right or bottom properties absolute-center Set position to absolute but in the middle of the container (container needs relative position). fixed-top, absolute-top Fixed or absolute position to top of screen fixed-right, absolute-right Fixed or absolute position to the right edge of screen fixed-bottom, absolute-bottom Fixed or absolute position to bottom of screen fixed-left, absolute-left Fixed or absolute position to the left edge of screen fixed-top-left, absolute-top-left Fixed or absolute position to top left of screen fixed-top-right, absolute-top-right Fixed or absolute position to top right of screen fixed-bottom-left, absolute-bottom-left Fixed or absolute position to bottom left of screen fixed-bottom-right, absolute-bottom-right Fixed or absolute position to bottom right of screen relative-position Set position to relative Alignment Class Name Description float-left Float to the left float-right Float to the right on-left Sets a small margin to the right; commonly used for icon elements with other siblings on-right Sets a small margin to the left; commonly used for icon elements with other siblings Vertical alignment: Class Name Description vertical-top Set CSS vertical alignment to top vertical-middle Set CSS vertical alignment to middle vertical-bottom Set CSS vertical alignment to bottom"},{"title":"Pull Down to Refresh","updated":"2018-07-25T14:14:24.674Z","permalink":"https://quasar-framework.org/components/pull-to-refresh.html","text":"When you want to allow the user to refresh the content or retrieve the newest content. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QPullToRefresh']&#125; Basic UsageUse QPullToRefresh component as direct child of your page component, to encapsulate all its content. Refer to the source of the demo for a more detailed example. &lt;q-pull-to-refresh :handler=\"refresher\"&gt; &lt;!-- Content, whatever you like --&gt; &lt;p v-for=\"item in items\"&gt; Lorem ipsum dolor sit amet... &lt;/p&gt;&lt;/q-pull-to-refresh&gt; IMPORTANTDo not wrap &lt;q-pull-to-refresh&gt; by a &lt;div class=&quot;layout-padding&quot;&gt;. If you must, place that &lt;div&gt; as direct child of &lt;q-pull-to-refresh&gt;. Vue Properties Vue Property Type Default Value Description handler Function Required Method from VM to be called to load more content distance Number 35 Minimum threshold distance in pixels to determine if releasing will determine a refresh color String (v0.17+) One from Quasar Color Palette. pull-message String ‘Pull down to refresh’ Message to display before hitting the threshold above release-message String ‘Release to refresh’ Message to display after hitting the threshold above and before releasing refresh-message String ‘Refreshing…’ Message to display when refreshing content refresh-icon String ‘refresh’ Icon to display when refreshing the content, besides the text above inline Boolean false If the component is not direct child of QPage, set this to “true”. disable Boolean false When set to true it disables its functionality. If no value is provided (empty attribute), then it’s considered as set to true. Vue Methods Vue Method Description @trigger Triggers a refresh, calling your handler. HandlerThe handler Function (specified as DOM element property) takes one parameter:&#123; methods: &#123; refresher (done) &#123; // done - Function to call when you made all necessary updates. // DO NOT forget to call it otherwise the refresh message // will continue to be displayed // make some Ajax call then call done() &#125; &#125;&#125;"},{"title":"Progress Bar (QProgress)","updated":"2018-05-18T22:01:01.034Z","permalink":"https://quasar-framework.org/components/progress-bar.html","text":"A Progress bar is used to show a process is being worked on, so the user isn’t staring at a static page, even though the system is working in the background. It is a good visual indicator (i.e. good UX) for the user, when waiting for longer term operations to be accomplished. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QProgress']&#125; Basic usage&lt;q-progress :percentage=\"progressModel\" /&gt;&lt;!-- with buffering; 4px height looks best --&gt;&lt;q-progress :percentage=\"progressBuffer\" :buffer=\"buffer\" style=\"height: 4px\"/&gt; Vue Properties Property Type Description percentage Number Progress (in percentage). buffer Number Buffer (in percentage). color String The Quasar CSS color value the bar should be. stripe Boolen If set to true, the progress bar will be striped. animate Boolean If set to true, the progress bar will be animated. indeterminate Boolean If set to true, the state is indeterminate, meaning it is unknown when the progress will stop. height String CSS unit for height of QProgress. Percentage and buffer, being percentage values, must be between 0 and 100, and percentage + buffer must be lower or equal to 100. If percentage is outside this interval the component will parse it and make it be within the interval. For color, use one from the Quasar Color Palette. Examples:&lt;q-progress :percentage=\"progress\" color=\"teal-4\" /&gt;&lt;q-progress :percentage=\"progress\" color=\"positive\" /&gt;&lt;q-progress :percentage=\"progress\" color=\"info\" /&gt;&lt;q-progress :percentage=\"progress\" color=\"warning\" /&gt; For stripes, just add the stripe prop. Examples:&lt;q-progress :percentage=\"progress\" color=\"positive\" stripe /&gt;&lt;q-progress :percentage=\"progress\" color=\"info\" stripe /&gt;&lt;q-progress :percentage=\"progress\" color=\"warning\" stripe /&gt; For buffering, use the buffer prop. &lt;q-progress :percentage=\"progress\" color=\"positive\" stripe :buffer=\"buffer\" /&gt;&lt;q-progress :percentage=\"progress\" color=\"info\" stripe :buffer=\"buffer\" /&gt;&lt;q-progress :percentage=\"progress\" color=\"warning\" stripe :buffer=\"buffer\" /&gt; If you cannot calculate the progress in percent, use the indeterminate prop. &lt;q-progress indeterminate /&gt;&lt;q-progress indeterminate color=\"positive\" /&gt;&lt;q-progress indeterminate color=\"warning\" /&gt;&lt;q-progress indeterminate color=\"negative\" /&gt; If you’d like to set a specific height of the progress bar, add inline styling to the component:&lt;q-progress :percentage=\"progress\" stripe animate height=\"45px\"/&gt;"},{"title":"Radio","updated":"2018-07-25T14:14:24.674Z","permalink":"https://quasar-framework.org/components/radio.html","text":"The Quasar Radio component is another basic element for user input. You can use this to supply a way for the user to pick an option from multiple choices. Please also refer to the Option Group documentation on other possibilities for creating groups of Toggles. Works well with QField for additional functionality such as a helper, error message placeholder and many others. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QRadio']&#125; Basic Usage&lt;!-- Three choices for the user --&gt;&lt;q-radio v-model=\"option\" val=\"opt1\" label=\"Option 1\" /&gt;&lt;q-radio v-model=\"option\" val=\"opt2\" label=\"Option 2\" /&gt;&lt;q-radio v-model=\"option\" val=\"opt3\" label=\"Option 3\" /&gt; Vue PropertiesSupports v-model which you should bind to a String in your scope. Choosing one option (clicking/tapping on a radio) makes your v-model change to Radio’s val. Vue Property Type Description val Object Used to modify the v-model of the Radio. label String The text label for the Radio. left-label Boolean Set to true, if the label should be placed to the left of the radio. checked-icon String The icon to use, when the radio is checked. Default is a simple radio icon. unchecked-icon String The icon to use, when the radio is not checked. Default is simple unchecked radio icon. color String Color from Quasar Color Palette of the Radio. keep-color Boolean Keep color when not selected. readonly Boolean Set to true, to make the radio read-only. disable Boolean Set to true, to disable the radio. dark Boolean Set to true when background is dark. no-focus Boolean (v0.17+) Disable accessibility for this component so that it can’t receive focus. Vue Events Vue Event Description @input Triggered when Radio gets selected. @blur Triggered, when Radio loses focus. @focus Triggered, when Radio gains focus. More ExamplesThere are a number of props, which are available to help you quickly format a Radio. An interesting feature of Radio is the ripple effect that user sees when clicking/tapping on it to change its state. Specific State IconsInstead of the default radio icon, you can also use the checked-icon and unchecked-icon props to display a different icon. &lt;q-radio v-model=\"option\" val=\"opt1\" unchecked-icon=\"visibility_off\" checked-icon=\"visibility\" label=\"Show only Area 1\"/&gt;&lt;q-radio v-model=\"option\" val=\"opt2\" unchecked-icon=\"visibility_off\" checked-icon=\"visibility\" label=\"Show only Area 2\"/&gt;&lt;q-radio v-model=\"option\" val=\"opt3\" unchecked-icon=\"visibility_off\" checked-icon=\"visibility\" label=\"Show only Area 3\"/&gt; ColoringUse the color prop to control the Radio color. &lt;!-- Default color, which is \"primary\" --&gt;&lt;q-radio v-model=\"option\" val=\"opt2\" /&gt;&lt;!-- Teal --&gt;&lt;q-radio v-model=\"option\" val=\"opt3\" color=\"teal\" /&gt;&lt;!-- Orange-7 --&gt;&lt;q-radio v-model=\"option\" val=\"opt4\" color=\"orange-7\" /&gt; Label PositionUse the left-label prop, to move the label to the left of the radio. &lt;q-radio v-model=\"option\" val=\"opt2\" left-label label=\"Option 2\"/&gt; Usage Inside of a List&lt;q-list link&gt; &lt;!-- Rendering a &lt;label&gt; tag (notice tag=\"label\") so the whole QItem will respond to clicks to change Toggle state. --&gt; &lt;q-item tag=\"label\"&gt; &lt;q-item-side&gt; &lt;q-radio v-model=\"option\" val=\"opt1\" /&gt; &lt;/q-item-side&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Option 1&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;/q-item&gt; &lt;q-item tag=\"label\"&gt; &lt;q-item-side&gt; &lt;q-radio v-model=\"option\" val=\"opt2\" /&gt; &lt;/q-item-side&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Option 2&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;Allows notifications&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;/q-item&gt; &lt;q-item tag=\"label\"&gt; &lt;q-item-side&gt; &lt;q-radio v-model=\"option\" val=\"opt3\" /&gt; &lt;/q-item-side&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Option 3&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. &lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;/q-item&gt;&lt;/q-list&gt;"},{"title":"Range","updated":"2018-05-18T22:01:01.036Z","permalink":"https://quasar-framework.org/components/range.html","text":"The Quasar Range component is a great way to offer the user the selection of a sub-range of values between a minimum and maximum value, with optional steps to select those values. An example use case for the Range component would be to offer a price range selection. Also check out its “sibling”, the Slider component.Remember you can use QRange wrapped by a QField too. Works well with QField for additional functionality such as a helper, error message placeholder and many others. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QRange']&#125; Basic UsageNotice we are using an object for the selection, which holds values for both the lower value of the selected range - rangeValues.min and the higher value - rangeValues.max. &lt;template&gt; &lt;q-range v-model=\"rangeValues\" :min=\"0\" :max=\"10\" :step=\"1\" /&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; // our model here rangeValues: &#123; min: 2, max: 4 &#125; &#125; &#125;&#125;&lt;/script&gt; Example with step, label and snap:&lt;q-range v-model=\"rangeValues\" :min=\"0\" :max=\"10\" :step=\"2\" label snap/&gt; Vue PropertiesSupports v-model which should be binded to an Object in your scope with “min” and “max” properties. Vue Property Type Description min Number (Required) Minimum value for beginning of interval. max Number (Required) Maximum value for end of interval. label Boolean Popup a label when user clicks/taps on the Range. label-always Boolean Always display the label. left-label-value String Override default left label value. right-label-value String Override default right label value. left-label-color String Color from Quasar Palette for left label background. right-label-color String Color from Quasar Palette for right label background. fill-handle-always Boolean Fill handle even if at minimum value. step Number Specify step amount between valid values. decimals Number Specify maximum number of decimals. snap Boolean Range handler will snap on values, rather than walking freely; good to use along step; also displays step markers on the Range. markers Boolean Display markers on background, one for each possible value for the model. square Boolean When true. the slider buttons are square instead of round. color String One of Quasar Color Palette. error Boolean If set to true, the range is turned red. warning Boolean If set to true, the slider is turned yellowish. readonly Boolean If set to true, the user cannot change model value. disable Boolean If set to true, the user cannot change model value. drag-range Boolean User can also drag the range (while maintaining interval in this case). drag-only-range Boolean When true, the user can only drag a predetermined range. Range limit values cannot be changed independently. IMPORTANTMake sure you choose the min, max and step values correctly. step must be a divisor of max - min, of v-model.min and of v-model.max, otherwise the component won’t work right. This is because all valid steps must be able to hold an equal position within the min-max values. ColoringUse one of the Quasar colors from the Color Palette, like primary, secondary, orange-9, teal-4 within the color prop: &lt;q-range color=\"teal\" v-model=\"rangeValues\" :min=\"0\" :max=\"50\" label/&gt; Lazy InputVue will soon supply the .lazy modifier for v-model on components too, but until then, you can use the longer equivalent form:&lt;q-range :value=\"model\" @change=\"val =&gt; &#123; model = val &#125;\" :min=\"0\" :max=\"20\"/&gt; Draging the RangeUse the drag-range or drag-only-range props, to allow the user to move the selected range or only a predetermined range as a whole. &lt;q-range drag-range v-model=\"rangeValues\" :min=\"0\" :max=\"100\" label /&gt;&lt;q-range drag-only-range v-model=\"rangeValues\" :min=\"0\" :max=\"100\" label /&gt; Adding MarkersUse the markers prop, to show the steps available for the range selection.&lt;q-range markers v-model=\"rangeValues\" :min=\"-6\" :max=\"10\" :step=\"2\" label snap /&gt; Overriding LabelsIn the example below we add a “px” suffix to labels.&lt;q-range v-model=\"model\" :min=\"-20\" :max=\"20\" :left-label-value=\"`$&#123;model.min&#125;px`\" :right-label-value=\"`$&#123;model.max&#125;px`\"/&gt; Vue Events Vue Event Description @input(newVal) Triggered immediately on model value change. @change(newVal) Triggered on lazy model value change. Usage Inside of a List&lt;q-list&gt; &lt;q-item&gt; &lt;q-item-side icon=\"local_atm\" /&gt; &lt;q-item-main&gt; &lt;q-range v-model=\"standalone\" :min=\"0\" :max=\"50\" label /&gt; &lt;/q-item-main&gt; &lt;/q-item&gt; &lt;q-item&gt; &lt;q-item-side icon=\"euro symbol\" /&gt; &lt;q-item-main&gt; &lt;q-range v-model=\"standalone\" :min=\"0\" :max=\"50\" label /&gt; &lt;/q-item-main&gt; &lt;/q-item&gt;&lt;/q-list&gt;"},{"title":"Rating","updated":"2018-08-18T15:39:58.738Z","permalink":"https://quasar-framework.org/components/rating.html","text":"Quasar Rating is a Component which allows users to rate items, usually known as “Star Rating”. Works well with QField for additional functionality such as a helper, error message placeholder and many others. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QRating']&#125; Basic Usage&lt;q-rating v-model=\"ratingModel\" :max=\"3\" /&gt;&lt;!-- Disabled State --&gt;&lt;q-rating disable v-model=\"ratingModel\" :max=\"3\"/&gt; Vue PropertiesSupports v-model which should be binded to a Number in your scope. Vue Property Type Description max Number Number of icons to display. icon String Icon to use as grade. Default value: grade. color String One of Quasar Color Palette. size String CSS size String. Examples: ‘12px’, ‘2rem’. readonly Boolean Display as readonly. disable Boolean When set to true user can not change model value and Rating is faded. Vue Methods Vue Method Description set(value) Parses and sets that value. Vue Events Vue Event Description @input(newVal) Triggered on model value change. @change(newVal) Triggered on model value change. ColoringUse one of the Quasar colors from the Color Palette, like primary, secondary, orange-7, teal-2 as color property: &lt;q-rating color=\"orange\" v-model=\"ratingModel\" :max=\"5\"/&gt;"},{"title":"RTL Support","updated":"2018-05-18T22:01:01.037Z","permalink":"https://quasar-framework.org/components/rtl-support.html","text":"RTL is referring to “right to left” UI for languages that need it. You need Quasar v0.15.5+. Enabling RTL supportTo enable it, you need to edit /quasar.conf.js:build: &#123; rtl: true&#125; How it worksRTL is tightly coupled to Quasar I18n. When Quasar is set to use an RTL language (language pack has “rtl” prop set to “true”) and RTL support is enabled (check step above for quasar.conf.js), then the UI will dynamically transform Quasar &amp; your website/app code for RTL. Let’s discuss about each of these two requirements: Quasar needs to be set to use an RTL languageSee Internationalization on how you can set a language. You can set a language as default or dynamically set one. RTL support needs to be enabledYou need to set “rtl” to “true” under quasar.conf.js &gt; “build”. What this does is it compiles CSS for both your website/app code and for Quasar components and add corresponding RTL CSS rules automatically. Your CSS bundle will slightly increase in size due to the addition of these CSS rules. Things to keep in mind Both RTL and non-RTL Quasar language packs will work together and dynamically switch to/from RTL. So only choosing an RTL Quasar language pack will trigger the RTL UI for you. You don’t need separate builds of your app (one for non-RTL and one for RTL-only). The RTL is dynamical. You can dynamically detect if you are on RTL mode by taking a look at Boolean this.$q.i18n.rtl. More info on Vue Prototype Injections. You need to be careful when writing your own CSS. Like mentioned above, Quasar will automatically add RTL rules based on your CSS code. So writing: .my-class &#123; margin-left: 10px; right: 5px;&#125; …will add this rule for RTL: [dir=rtl] .my-class &#123; margin-right: 10px; left: 5px;&#125; Any CSS rule that refers to “left” or “right” is automatically triggering an equivalent RTL CSS rule to be added. Marking CSS rules as exceptionsIf you need an exception so your CSS code will not add a corresponding RTL rule, then add this comment:.my-class &#123; margin-left: 10px /* rtl:ignore */;&#125; Now both RTL and non-RTL UI mode will have margin-left prop. Sometimes you’ll need to make exceptions for whole DOM elements / components. In this case, add dir=&quot;ltr&quot; or dir=&quot;rtl&quot; HTML attribute to the outermost DOM element / component template: &lt;div dir=\"ltr\"&gt; &lt;!-- this DIV and all its content will use RTL mode regardless of Quasar language pack RTL settings --&gt;&lt;/div&gt; Or, if you need your RTL UI to use left-to-right (ltr) mode for a DOM element / component:&lt;div dir=\"ltr\"&gt; &lt;!-- this DIV and all its content will use non-RTL mode regardless of Quasar language pack RTL settings --&gt;&lt;/div&gt; Handling Quasar UMDTo enable RTL UIs in UMD you need to include the RTL equivalent CSS tag for your Quasar version and also pack in a Quasar RTL language pack (like Hebrew or Farsi). Example: &lt;html&gt; &lt;head&gt; ... &lt;link href=\"https://cdn.jsdelivr.net/npm/quasar-framework@latest/dist/umd/quasar.mat.rtl.min.css\" rel=\"stylesheet\" type=\"text/css\"&gt; &lt;/head&gt; &lt;body&gt; ... &lt;!-- we also need an RTL Quasar language pack; let's take Hebrew as example; include this after Quasar JS tag --&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/quasar-framework@latest/dist/umd/i18n.he.umd.min.js\"&gt;&lt;/script&gt; &lt;script&gt; Quasar.i18n.set(Quasar.i18n.he) &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; Check what tags you need to include in your HTML files by generating a sample with $ vue init quasarframework/quasar-starter-kit-umd &lt;folder&gt; and answering with “Yes” to the RTL question and specifying an RTL language for Quasar I18n.Also notice the &lt;html dir=&quot;rtl&quot;&gt; tag at the beginning of the generated html file – you’ll need that too. CaveatQuasar CLI automatically adds equivalent RTL CSS rules for your website/app code, but this is not the case for UMD where Quasar CLI is not being used. You’ll have to manage writing the RTL equivalent of your website/app CSS code by yourself. It’s only Quasar components that will have this handled automatically."},{"title":"Screen Plugin","updated":"2018-05-20T16:04:39.318Z","permalink":"https://quasar-framework.org/components/screen-plugin.html","text":"The Quasar Screen plugin allows you to have a dynamic and responsive UI when dealing with your Javascript code. When possible, it is recommended to use the responsive CSS classes instead, for performance reasons. Installation// quasar.conf.jsframework: &#123; plugins: ['Screen']&#125; Basic UsageNotice $q.screen below. This is just a simple usage example. &lt;q-list :dense=\"$q.screen.lt.md\" :sparse=\"$q.screen.gt.lg\"&gt; &lt;q-item&gt; &lt;q-item-main label=\"John Doe\" /&gt; &lt;/q-item&gt; &lt;q-item&gt; &lt;q-item-main label=\"Jim Doe\" /&gt; &lt;/q-item&gt;&lt;/q-list&gt; // script part of a Vue componentexport default &#123; computed: &#123; buttonColor () &#123; return this.$q.screen.lt.md ? 'primary' : 'secondary' &#125; &#125;&#125; We can also use Screen plugin outside of a Vue component:import &#123; Screen &#125; from 'quasar'// Screen.gt.md// Screen.md ConfigurationThere are a few methods that can be used to tweak how Screen plugin works: Method Description Example setSizes(Object) Change window breakpoints; does NOT also changes CSS breakpoints. setSizes({ lg: 1024, xl: 2000 }) setDebounce(Number) Change the default 100ms debounce to some other value. setDebounce(500) // 500ms Examples:// inside a Vue component:this.$q.screen.setSizes(&#123; sm: 300, md: 500, lg: 1000, xl: 2000 &#125;)// outside of a Vue component:import &#123; Screen &#125; from &apos;quasar&apos;Screen.setSizes(&#123; sm: 300, md: 500, lg: 1000, xl: 2000 &#125;)"},{"title":"Scroll Area","updated":"2018-05-18T22:01:01.038Z","permalink":"https://quasar-framework.org/components/scroll-area.html","text":"Quasar offers a neat way of customizing the scrollbars with the help of QScrollArea component which can encapsulate your content. Think of it as a DOM element which has overflow: auto, but with your own custom styled scrollbar instead of browser’s default one and a few nice features on top. This is especially useful for desktop as scrollbars are hidden on a mobile device. When on a mobile device, QScrollArea simply wraps the content in a &lt;div&gt; configured for default browser scrolling. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QScrollArea']&#125; Basic UsageQScrollArea supports scrolling by user dragging the custom scrollbars or by using the mousewheel. If on a desktop that has a touch screen then scrolling will work with touch actions too. &lt;!-- In this example we set a height to force custom scrollbars to appear--&gt;&lt;q-scroll-area style=\"width: 400px; height: 100px;\"&gt; &lt;div v-for=\"n in 10\"&gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. &lt;/div&gt;&lt;/q-scroll-area&gt; Vue Properties Property Description thumb-style Object with CSS properties and values for styling the thumb of custom scrollbar. content-style Object with CSS properties and values for styling the container of QScrollArea. content-active-style Object with CSS properties and values for styling the container of QScrollArea when scroll area becomes active (is mouse hovered). delay Number (in milliseconds, default is 1000) defining a delay before custom scrollbars become visible after mouse is hovering the container. Custom Scrollbar Example&lt;!-- Custom scrollbar thumb with a delay of 1.5 seconds before appearing after hovering the mouse over the scrollable content--&gt;&lt;q-scroll-area style=\"height: 200px\" :thumb-style=\"&#123; right: '4px', borderRadius: '5px', background: 'red', width: '10px', opacity: 1 &#125;\" :delay=\"1500\"&gt; ...Scrollable.Content...&lt;/q-scroll-area&gt; Vue Methods Method Description setScrollPosition(offset[, duration]) Set scroll position to an offset. If a duration (in milliseconds) is specified then the scroll is animated."},{"title":"Directive \"v-scroll\"","updated":"2019-01-01T13:12:57.792Z","permalink":"https://quasar-framework.org/components/scroll-directive.html","text":"This is a Vue directive which takes one parameter (a Function) and fires when user scrolls the page containing that DOM node. One alternative to using this directive is to place a QScrollObservable component on your page. InstallationEdit /quasar.conf.js:framework: &#123; directives: ['Scroll']&#125; Basic Usage&lt;!-- Template for VueModel below --&gt;...&lt;div v-scroll=\"scrolled\"&gt;...&lt;/div&gt;... // VueModel for template above&#123; ..., methods: &#123; ..., scrolled (position) &#123; // when this method is invoked then it means user // has scrolled the page to `position` // // `position` is an Integer designating the current // scroll position in pixels. &#125; &#125;&#125; IMPORTANTPlease note that by default the method called is not debounced. For that you have to do it yourself, by wrapping your method with Quasar’s debouncer (as an example) like in example below.As per the example below, you need to use function (position) {} or position =&gt; {}.bind(this) to be able to access the Vue component inside the debounce function.Read more about debouncing here. import &#123; debounce &#125; from 'quasar'export default &#123; ..., methods: &#123; ..., scrolled: debounce(function (position) &#123; // when this method is invoked then it means user // has scrolled the Page to `position` // // `position` is an Integer designating the current // scroll position in pixels. &#125;, 200) // debounce for 200ms &#125;&#125; NOTEThere is one more scrolling-related directive available called “Scroll Fire” described on its own documentation page. Read more here. Determining Scrolling ContainerPlease read here about how Quasar determines the container to attach scrolling events to."},{"title":"Scrolling Utils","updated":"2019-01-01T13:12:57.792Z","permalink":"https://quasar-framework.org/components/scrolling-utils.html","text":"Determine Scrolling ContainerMight be worthwhile to read how this is done hereimport &#123; scroll &#125; from 'quasar'const &#123; getScrollTarget &#125; = scroll// Get parent DomNode that handles page scrolling// Usually this is element with classname \".layout-view\" or \"window\"(DOM Element) getScrollTarget(DomElement) Get/Set Scroll Positionimport &#123; scroll &#125; from 'quasar'const &#123; getScrollPosition, setScrollPosition &#125; = scroll// Get scroll position of a element or page. Use it in conjunction with `getScrollTarget()`(Number pixels) getScrollPosition(scrollTargetDomElement)// Setting scroll position of an element or page:setScrollPosition (scrollTargetElement, offset[, duration])// if \"duration\" is specified then it will animate the scrolling Scrolling to an elementA full example using the scroll utils to scroll to an element: import &#123; scroll &#125; from 'quasar'const &#123; getScrollTarget, setScrollPosition &#125; = scroll// takes an element objectfunction scrollToElement (el) &#123; let target = getScrollTarget(el) let offset = el.offsetTop let duration = 1000 setScrollPosition(target, offset, duration)&#125; Determine Scroll Heightimport &#123; scroll &#125; from 'quasar'const &#123; getScrollHeight &#125; = scroll// get scrolling container inner height(Number) getScrollHeight(scrollTargetDomElement)console.log( getScrollHeight(el) )// 824 (it's in pixels always) Determining Scrollbar WidthComputes the width of scrollbar in pixels. import &#123; scroll &#125; from 'quasar'const &#123; getScrollbarWidth &#125; = scrollconsole.log(getScrollbarWidth()) // 16 (it's in pixels)"},{"title":"Scroll Fire","updated":"2018-05-18T22:01:01.038Z","permalink":"https://quasar-framework.org/components/scroll-fire.html","text":"“Scroll Fire” is a feature that enables a method to be called (once and only once) when user scrolls current page and the DOM element (or component) that it is applied to comes into the viewport. For ease of use, its implementation is through a Vue Directive called v-scroll-fire. NOTEThere is also a v-scroll directive which fires whenever user scrolls the page, available to read here.. InstallationEdit /quasar.conf.js:framework: &#123; directives: ['ScrollFire']&#125; Basic Usage&lt;!-- Template for VueModel below --&gt;....&lt;div v-scroll-fire=\"bounceImage\"&gt;...&lt;/div&gt; // VueModel for template above&#123; ..., methods: &#123; bounceImage (element) &#123; // in this example, when the `&lt;div&gt;` comes into view, // we bounce it for 2 seconds // we add helper `nimate-bounce` Quasar CSS class element.classList.add('animate-bounce') setTimeout(() =&gt; &#123; // we make sure the node is still in DOM // (user hasn't navigated away from the Vue component // rendering our `&lt;div&gt;`) // so we don't generate an error if (document.body.contains(element)) &#123; // then remove the helper class to // stop bouncing element.classList.remove('animate-bounce') &#125; &#125;, 2000) &#125; &#125;&#125; IMPORTANTFor performance purposes, the scroll listener function injected is by default debounced by 50ms. Read more about debouncing here. Determining Scrolling ContainerPlease read here about how Quasar determines the container to attach scrolling events to."},{"title":"Scroll Observable","updated":"2018-07-25T14:14:24.675Z","permalink":"https://quasar-framework.org/components/scroll-observable.html","text":"QScrollObservable is a Quasar component that emits a scroll event whenever the user scrolls the page or overflowed container with .scroll CSS class applied to it. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QScrollObservable']&#125; Basic Usage&lt;template&gt; ... &lt;q-scroll-observable @scroll=\"userHasScrolled\" /&gt; ...&lt;/template&gt;&lt;script&gt;export default &#123; ..., methods: &#123; ..., userHasScrolled (scroll) &#123; console.log(scroll) // &#123; // position: 56, // pixels from top // direction: 'down', // 'down' or 'up' // directionChanged: false, // has direction changed since this handler was called? // inflexionPosition: 56 // last scroll position where user changed scroll direction // &#125; &#125; &#125;&#125;&lt;/script&gt; Vue Properties Property Type Description debounce Number (v0.17+) Emitting the event with a custom debounce. “0” means no debounce. Determining Scrolling ContainerAll components or directives in Quasar have a simple algorithm to determine the container that supports the scroll: it searches for a parent DOM element which has the scroll Quasar CSS Helper class attached to it. If none is found, then it considers that the scrolling takes place on the document itself. Components like QScrollArea, for example, respect this design and have the scroll class embedded into it, so that QScrollObservable (or any other scrolling component or directive) can succesfully detect it and attach the necessary event handlers to it. Please note that simply attaching scroll CSS class to a DOM element or on a Vue component will have no effect if the respective element is not overflowed (example, with: CSS overflow: hidden and a height smaller than its inner content height). Example of good container:&lt;!-- Quasar CSS helper 'overflow-hidden' is equivalent to style=\"overflow: hidden\"--&gt;&lt;div class=\"scroll overflow-hidden\" style=\"height: 100px\"&gt; ...content expanding over the 100px height from container... &lt;q-scroll-observable @scroll=\"scrollHandler\" /&gt; &lt;!-- example with `v-scroll` directive --&gt; &lt;div v-scroll=\"scrollHandler\"&gt;...&lt;/div&gt;&lt;/div&gt; One more example with QScrollArea:&lt;q-scroll-area style=\"width: 400px; height: 500px;\" class=\"bg-yellow\"&gt; ...content expanding over the 500px height from container... &lt;q-scroll-observable @scroll=\"scrollHandler\" /&gt;&lt;/q-scroll-area&gt; Layout ScrollingWhen scrolling on a Layout with a Page, rather than injecting a QScrollObservable (and by so doing registering additional scroll events) you can take advantage of QLayout´s @scroll event directly on your component defining the Layout. &lt;q-layout @scroll=\"scrollHandler\"&gt;...&lt;/q-layout&gt;"},{"title":"Search (Textfield)","updated":"2018-09-19T16:29:58.446Z","permalink":"https://quasar-framework.org/components/search.html","text":"The Search component offers the user an input field with additional features for searching purposes. For autocomplete functionality, also refer to QAutocomplete documentation. Works well with QField for additional functionality such as a helper, error message placeholder and many others. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QSearch']&#125; Basic Usage&lt;q-search v-model=\"search\" /&gt; Vue PropertiesSupports v-model which you should bind to a String or Number (depending on type property used) in your scope. Vue Property Type Description icon String Icon to use. no-icon Boolean Hide the icon type String Must be one of the following: text (default), email, tel, number and url. This is important as it determines the keyboard type popping up on mobile devices. debounce Number Number of ms to debounce input. Default is 300. readonly Boolean If set to true, textfield is readonly and the user cannot change value. clearable Boolean If used, the component offers the user an actionable icon to reset the current value to clear-value (which is by default an empty string). The icon appears only when the current value matches clear-value. clear-value String The value to which to reset the field model to when using clearable. The default value is an empty string. A more involved example:&lt;q-search v-model=\"searchModel\" :debounce=\"600\" placeholder=\"Hotels\" icon=\"local_hotel\" float-label=\"What is your hotel?\"/&gt; Common input field properties: Property Type Description autofocus Boolean Focus input field after rendering component. placeholder String A text to be shown on textfield, mainly to explain what should be entered. upper-case Boolean Transform input to upper case. lower-case Boolean Transform input to lower case. Also note you can use the native DOM attributes of an input: “name”, “maxlength”, “autocomplete” and so on. Common input frame properties: Property Type Description prefix String A text that should be shown before the textfield. suffix String A text that should be shown after the textfield. float-label String A text label that will “float” up above the input field, once the input field gets focus. stack-label String A text label that will be shown above the input field and is static. color String One from Quasar Color Palette. inverted Boolean Inverted mode. Color is applied to background instead. inverted-light Boolean Inverted mode with a light color. Color is applied to background instead. hide-underline Boolean Hides the bottom border. dark Boolean Is QSearch rendered on a dark background? align String One of ‘left’, ‘center’ or ‘right’ which determines the text align within textfield. disable Boolean If set to true, textfield is disabled and the user cannot type anything. warning Boolean If set to true, the input fields colors are changed to show there is a warning. error Boolean If set to true, the input fields colors are changed to show there is an error. before Array of Objects Icon buttons on left side of input frame. Read below more details. after Array of Objects Icon buttons on right side of input frame. Read below more details. no-parent-field Boolean Avoid trying to connect to a parent QField. Icon buttonsThis section refers to before and after properties which can add additional buttons such as icons to the textfield. Here is the structure of the two properties: &#123; // required icon icon: String, // required function to call when // icon is clicked/tapped handler: Function, // Optional. Show icon button // if model has a value content: Boolean, // Optional. Show icon button // if textfield is marked with error error: Boolean&#125; Examples:&lt;!-- Show an icon button (with 'warning' as icon) when there is an error on QInput (through \"error\" prop)--&gt;&lt;q-search v-model=\"text\" :after=\"[ &#123; icon: 'warning', error: true, handler () &#123; // do something... &#125; &#125; ]\"/&gt;&lt;!-- Show an icon button (with 'attach_file' as icon) when the model has a non empty value--&gt;&lt;q-search v-model=\"text\" :after=\"[ &#123; icon: 'attach_file', content: true, handler () &#123; // do something... &#125; &#125; ]\"/&gt; Lazy InputVue will soon supply the .lazy modifier for v-model on components too, but until then, you can use the longer equivalent form:&lt;q-search :value=\"model\" @change=\"val =&gt; &#123; model = val &#125;\"/&gt; Vue Methods Vue Method Description clear() Resets the model to an empty string. clearAndFocus() Resets the model to an empty string and gives the input focus. focus() Focused the textfield. blur() Makes textfield lose focus. select() Selects all textfield text and focuses. Vue Events Vue Event Description @input(newVal) Triggered immediately on model value change. @change(newVal) Triggered on lazy model value change. @clear(clearVal) Triggered when the model is cleared. @focus Triggered on focus. @blur Triggered a blur. @keydown Triggered by keydown event on textfield. @keyup Triggered by keyup event on textfield. @click Triggered by a native click event on textfield. @paste (v0.17.10+) Triggered by a paste event on the textfield. ColoringUse the color prop with one of the Quasar colors from the Color Palette, like primary, secondary, orange-7, teal-2: &lt;q-search color=\"orange\" v-model=\"search\" /&gt; Use the inverted prop, to change the background of the input to the color. &lt;q-search inverted color=\"orange\" v-model=\"search\" /&gt; Error StateUse the error prop to show there has been an error. This will turn the component color to red.&lt;q-search error v-model=\"search\" /&gt;&lt;q-search :error=\"hasError\" inverted v-model=\"search\" /&gt; DisableUse the disable prop to stop user input.&lt;q-search disable v-model=\"search\" color=\"primary\" /&gt; Usage with LayoutIf you’d like to set search within a QToolbar on QLayout:&lt;q-layout&gt; ... &lt;!-- Notice we set a color for QToolbar and QSearch has \"inverted\" and color=\"none\" specified. This makes QSearch use background color set by QToolbar. --&gt; &lt;q-toolbar slot=\"header\" color=\"primary\"&gt; &lt;q-search inverted color=\"none\" v-model=\"search\" /&gt; &lt;/q-toolbar&gt; ...&lt;/q-layout&gt; FormattingIt is possible to add formatting to a QSearch in two ways. One is for the basic component. The other is with the QField component. Both methods offer “inverted” coloring. Additional Vue Properties Property Type Description color String The color the QInput should have. The default is primary. inverted Boolean Set to true, to color field’s background set by the color prop. dark Boolean Set to true, if the field is on a dark background. It will invert the text color to make it light. align Text Controls the ‘right’, ‘center’ or ‘left’ alignment of the input. The default is ‘left’. Basic Formatting ExamplesThis will color the field black. &lt;q-search v-model=\"text\" float-label=\"Colored\" color=\"black\" /&gt; This will show an inverted colored input field in amber. Here, the text is automatically inverted to a lighter color. &lt;q-search v-model=\"text\" inverted color=\"amber\" stack-label=\"Amber Colored Background\" /&gt; AlignmentYou can also align the input to the right, center or left. The default is left. The example below will show a field for Euro currency input. &lt;!-- Align textfield content to the right --&gt;&lt;q-search v-model=\"text\" align=\"right\" /&gt; Basic Usage with QFieldIt is also possible to further enhance a QInput by wrapping it in a QField component. &lt;div class=\"bg-grey-9\" style=\"width: 500px; padding: 25px\"&gt; &lt;q-field icon=\"wifi\" label=\"Some Label\" :count=\"10\" helper=\"Some helper\" :error=\"error\" error-label=\"Some error\" &gt; &lt;q-search v-model=\"text\" dark inverted color=\"black\" float-label=\"Textfield\" /&gt; &lt;/q-field&gt;&lt;/div&gt; The above usage of QField will show the input field within a dark grey background and an inverse white text. Notice the usage of the dark prop for QInput. This controls the inversion of the text color. Please refer to the QField documentation for more info about its usage."},{"title":"CSS Shadows (Elevation)","updated":"2018-05-18T22:01:01.041Z","permalink":"https://quasar-framework.org/components/shadows.html","text":"Simple yet effective way to add shadows to create a depth/elevation effect.The shadows are in accordance to Material Design specifications (24 levels of depth). Don’t forget to check the demo. CSS Class Name Description no-shadow Remove any shadow inset-shadow Set an inset shadow shadow-1 Set a depth of 1 shadow-2 Set a depth of 2 shadow-N Where N is an integer from 1 to 24. shadow-transition Apply a CSS transition on the shadow; best use in conjunction with hoverable classes Example:&lt;div class=\"shadow-1\"&gt;...&lt;/div&gt; The shadows above point towards the bottom of the element. If you want them to point towards the top of the element, add up before the number: CSS Class Name Description shadow-up-1 Set a depth of 1 shadow-up-2 Set a depth of 2 shadow-up-N Where N is an integer from 1 to 24."},{"title":"Slide Transition","updated":"2018-09-13T11:16:30.858Z","permalink":"https://quasar-framework.org/components/slide-transition.html","text":"QSlideTransitions slides the DOM element (or component) up or down, based on its visibility: works alongside v-show and v-if on a single element, similar to Vue’s Transition component with the only difference being that it’s not a group transition too (it only applies to one DOM element or component). InstallationEdit /quasar.conf.js:framework: &#123; components: ['QSlideTransition']&#125; Basic Usage&lt;template&gt; &lt;div&gt; &lt;q-slide-transition&gt; &lt;img v-show=\"visible\" src=\"~assets/quasar.jpg\" &gt; &lt;/q-slide-transition&gt; &lt;q-btn @click=\"toggleVisibility\"&gt; Toggle &lt;/q-btn&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; ..., data: &#123; ..., visible: true &#125;, methods: &#123; ..., toggleVisibility () &#123; this.visible = !this.visible &#125; &#125;&#125;&lt;/script&gt; You can also trigger the animation when rendering the component for first time (on appearance) too, by specifying the appear Boolean prop:&lt;q-slide-transition appear&gt; ...&lt;/q-slide-transition&gt; (v0.15.13+) You can also use @show and @hide Vue events if you want to trigger something after animation is over. Vue Properties Vue Property Type Description appear Boolean Apply animation when first rendered too. duration Number (v0.17.13+) Animation duration in milliseconds. Default: 300"},{"title":"Slider","updated":"2018-09-13T11:16:30.859Z","permalink":"https://quasar-framework.org/components/slider.html","text":"Quasar Slider is a great way to make the user specify a number value between a minimum and maximum value, with optional steps between valid values. The slider also has a focus indicator (highlighted slider button), which allows for keyboard adjustments of the slider. Also check its “sibling”, the Range component.Remember you can use QSlider wrapped by a QField too. Works well with QField for additional functionality such as a helper, error message placeholder and many others. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QSlider']&#125; Basic Usage&lt;q-slider v-model=\"selectedValue\" :min=\"1\" :max=\"7\" /&gt; Example with step, label and snap:&lt;q-slider v-model=\"selectedValue\" :min=\"0\" :max=\"10\" :step=\"2\" label snap/&gt; Example with square slider button:&lt;q-slider v-model=\"selectedValue\" :min=\"0\" :max=\"10\" square/&gt; Vue PropertiesSupports v-model which should be binded to a Number in your scope. Vue Property Type Description min Number Minimum value of the model. Default is 1. max Number Maximum value of the model. Default is 5. label Boolean Popup a label when user clicks/taps on the Range and moves it. label-always Boolean Always display the label. label-value String Override default label value. fill-handle-always Boolean Fill handle even if at minimum value. step Number Specify step amount between valid values. decimals Number Specify maximum number of decimals. snap Boolean Range handler will snap on values, rather than sliding freely; good to use along step; also displays step markers on the Range. markers Boolean Display markers on background, one for each possible value for the model. square Boolean When true. the slider button is square instead of round. color String One of Quasar Color Palette. error Boolean If set to true, the slider is turned red. warning Boolean If set to true, the slider is turned yellowish. readonly Boolean If set to true, the user cannot change model value. disable Boolean If set to true, the user cannot change model value. IMPORTANTMake sure you choose the min, max and step value correctly. step must be a divisor of max - min, otherwise the component won’t work right. This is because all valid steps must be able to hold an equal position within the min and max values. Overriding LabelIn the example below we add a “px” suffix to the label.&lt;q-slider v-model=\"model\" label-always :min=\"-20\" :max=\"20\" :label-value=\"`$&#123;model&#125;px`\"/&gt; Lazy InputVue will soon supply the .lazy modifier for v-model on components too, but until then, you can use the longer equivalent form:&lt;q-slider :value=\"model\" @change=\"val =&gt; &#123; model = val &#125;\" :min=\"0\" :max=\"20\"/&gt; ColoringUse one of the Quasar colors from the Color Palette with the color prop, like primary, secondary, orange-8, teal-4: &lt;q-slider color=\"orange\" v-model=\"standalone\" :min=\"0\" :max=\"50\" label/&gt; Vue Events Vue Event Description @input(newVal) Triggered immediately on model value change. @change(newVal) Triggered on lazy model value change. Usage Inside of a List&lt;q-list&gt; &lt;q-item&gt; &lt;q-item-side icon=\"volume_up\" /&gt; &lt;q-item-main&gt; &lt;q-slider v-model=\"standalone\" :min=\"0\" :max=\"50\" label /&gt; &lt;/q-item-main&gt; &lt;/q-item&gt; &lt;q-item&gt; &lt;q-item-side icon=\"brightness_medium\" /&gt; &lt;q-item-main&gt; &lt;q-slider v-model=\"standalone\" :min=\"0\" :max=\"50\" label /&gt; &lt;/q-item-main&gt; &lt;/q-item&gt; &lt;q-item&gt; &lt;q-item-side icon=\"mic\" /&gt; &lt;q-item-main&gt; &lt;q-slider v-model=\"standalone\" :min=\"0\" :max=\"50\" label /&gt; &lt;/q-item-main&gt; &lt;/q-item&gt;&lt;/q-list&gt;"},{"title":"Select","updated":"2019-01-04T15:26:01.002Z","permalink":"https://quasar-framework.org/components/select.html","text":"Select component has two types of selection: single selection (using Radios or Lists) or multiple selection (using Checkboxes or Toggles). This component opens up a Popover for the selection list and action. A filter can also be used for longer lists. Works well with QField for additional functionality such as a helper, error message placeholder and many others. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QSelect']&#125; Basic Usage&lt;template&gt; &lt;div&gt; &lt;!-- Single Selection using Radios --&gt; &lt;q-select v-model=\"select\" float-label=\"Is Quasar Awesome?\" radio :options=\"selectOptions\" /&gt; &lt;!-- Single Selection as a simple List --&gt; &lt;q-select v-model=\"select\" :options=\"selectOptions\" /&gt; &lt;!-- Multiple Selection using Checkboxes by default --&gt; &lt;q-select multiple v-model=\"multipleSelect\" :options=\"selectOptions\" /&gt; &lt;!-- Multiple Selection using Toggles --&gt; &lt;q-select multiple toggle v-model=\"multipleSelect\" :options=\"selectOptions\" @change=\"inputChange\" /&gt; &lt;!-- Advanced Select List Object Example--&gt; &lt;q-select v-model=\"select\" :options=\"selectAdvancedListOptions\" /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; selectOptions: [ &#123; label: 'Google', value: 'goog' &#125;, &#123; label: 'Facebook', value: 'fb' &#125; ], selectAdvancedListOptions: [ &#123; label: 'Google', icon: 'search', value: 'goog' &#125;, &#123; label: 'Facebook', inset: true, sublabel: 'Enables communication', value: 'fb' &#125;, &#123; label: 'Oracle', sublabel: 'Some Java for today?', icon: 'mail', leftColor: 'secondary', // color for left side, whatever it is (icon, letter, ...) rightIcon: 'alarm', rightColor: 'negative', // color for right side, whatever it is (icon, letter, ...) value: 'ora' &#125;, &#123; label: 'Apple Inc.', inset: true, stamp: '10 min', value: 'appl' &#125; ] &#125; &#125;&#125;&lt;/script&gt; IMPORTANTStarting with Quasar v0.17.10+, please make sure the labels are sanitized, otherwise your app might be a target for XSS attacks. Vue PropertiesSupports v-model which should be the String for single selection and Array for multiple selection. Vue Property Type Description options Array (Required) A list of objects to present as the selection’s options. See below for the data format for the array. multiple Boolean If set to true, multiple selections will be allowed. radio Boolean If set to true, the selection will be through radios. For single selection only. toggle Boolean If set to true, the selection options will offer a toggle to select them. chips Boolean If set to true, the selections will appear as chips (instead of comma separated strings) on the input frame (works for multiple selection only). chips-color String Override default children chips text color. chips-bg-color String Override default children chips background color. readonly Boolean If set to true, select is readonly and the user cannot change model. filter Boolean/Function(terms,obj) If set to true or supplying a filter function, the selections will offer an input to filter the selection options. autofocus-filter Boolean Auto-focus on the filter input field (if available) when opening selection. filter-placeholder String A text to show in the filter input field. Default is “Filter”. separator Boolean If set to true, the selection options will be separated by a line. display-value String Overrides text displayed in input frame. See “Working with Display Value” section below. placeholder String Placeholder text. clearable Boolean If used, the component offers the user an actionable icon to reset the current value to clear-value (which is by default null for single selection and [] for multiple selection). The icon appears only when the current value matches clear-value. clear-value String The value to which to reset the field model to when using clearable. The default value is null for single selection and [] for a multiple selection. no-icon Boolean Use no icon on left side popup-max-height String (v0.17.13+) Maximum height of popup described in CSS units. popup-cover Boolean (v0.17.19+) Popup should cover the QSelect when opened. Default: true Common input frame properties: Property Type Description prefix String A text that should be shown before the textfield. suffix String A text that should be shown after the textfield. float-label String A text label that will “float” up above the input field, once the input field gets focus. stack-label String A text label that will be shown above the input field and is static. color String One from Quasar Color Palette. inverted Boolean Inverted mode. Color is applied to background instead. inverted-light Boolean Inverted mode with a light color. Color is applied to background instead. hide-underline Boolean Hides the bottom border. dark Boolean Is it rendered on a dark background? align String One of ‘left’, ‘center’ or ‘right’ which determines the text align within the textfield. disable Boolean If set to true, the field is disabled and the user cannot select anything. warning Boolean If set to true, the component colors are changed to show there is a warning. error Boolean If set to true, the input field’s colors are changed to show there is an error. before Array of Objects Icon buttons positioned on the left side of field. after Array of Objects Icon buttons on the right side of the field. no-parent-field Boolean Avoid trying to connect to a parent QField. Icon buttonsThis section refers to before and after properties which can add additional buttons as icons to the textfield. Here is the structure of the two properties: &#123; // required icon icon: String, // required function to call when // icon is clicked/tapped handler: Function, // Optional. Show icon button // if model has a value content: Boolean, // Optional. Show icon button // if textfield is marked with error error: Boolean&#125; Examples:&lt;!-- Show an icon button (with 'warning' as icon)--&gt;&lt;q-select v-model=\"selection\" :options=\"selectListOptions\" :after=\"[ &#123; icon: 'warning', handler () &#123; // do something... &#125; &#125; ]\"/&gt;&lt;!-- Show an icon button (with 'arrow_forward' as icon) when the model has a non empty value (like something has been selected).--&gt;&lt;q-select v-model=\"selection\" :options=\"selectListOptions\" :after=\"[ &#123; icon: 'arrow_forward', content: true, handler () &#123; // do something... &#125; &#125; ]\"/&gt; Selection TypesYou have a number of possible selection types to choose from. They are straight text with optional icons and stamp values, radios, checkboxes, and toggles. Text is default for single selections and checkboxes are default for multiple selections. Use the radio prop for single selections. These checkboxes are inserted where the icons would be, so you cannot have icons and checkboxes for multiple selections. If you still want icons with your multiple selections, use the toggle prop. This would, however, replace the stamp option. &lt;!-- Radios for single selections --&gt;&lt;q-select radio v-model=\"select\" float-label=\"Gogu\" :options=\"selectListOptions\"/&gt;&lt;!-- Toggles for Multiple Selection --&gt;&lt;q-select toggle multiple v-model=\"multipleSelect\" :options=\"selectListOptions\"/&gt; The Options Array FormatBelow are examples of the array of options you must use to create the selection options: Select options object:selectOptions: [ &#123; label: 'Google', value: 'goog' &#125;, &#123; label: 'Facebook', value: 'fb' &#125;, ...] More advanced select list object example: selectListOptions: [ &#123; label: 'Google', icon: 'search', value: 'goog' &#125;, &#123; label: 'Facebook', inset: true, sublabel: 'Enables communication', value: 'fb' &#125;, &#123; label: 'Oracle', sublabel: 'Some Java for today?', icon: 'mail', leftColor: 'secondary', // color for left side, whatever it is (icon, letter, ...) rightIcon: 'alarm', rightColor: 'negative', // color for right side, whatever it is (icon, letter, ...) value: 'ora' &#125;, &#123; label: 'Apple Inc.', inset: true, stamp: '10 min', value: 'appl' &#125;, ...] NoteSet “inset” to true, instead of an icon, so the label text is properly aligned with the other options that use icons or avatars. Use an Object for each option like above (notice that it uses some properties from List and List Items components, like “label”, “sublabel”, “stamp”, “icon”, “rightIcon” and so on. Here is the full list of properties that can be used for each option: Property Type Description leftColor String Color for left side from Quasar Color Palette. icon String Icon on the left to use. avatar String URL pointing to statics for an avatar. letter String One character String. leftInverted Boolean Invert mode, but only for icon and letter. leftTextColor String Override default “white” text-color when using an icon or letter only. image String URL pointing to statics for an image. label String Main label of the selection. sublabel String Sub-label of the selection. labelLines String/Number Number of lines that label can expand to. sublabelLines String/Number Number of lines that the sublabel can expand to. inset Boolean Inset Label if no left-side is specified (no icon, avatar, letter or image). rightColor String Color for right side from Quasar Color Palette. rightIcon String Icon on the right to use. rightAvatar String URL pointing to statics for an avatar on right side. rightLetter String One character String for right side. rightImage String URL pointing to statics for an image on right side. rightInverted Boolean Invert mode, but only for icon and letter. rightTextColor String Override default “white” text-color when using an icon or letter only. stamp String Stamp to use for right side. Example: ‘10 min ago’. className String Class to be added to options to enable custom styling Working with Display ValueIf for some reason you want to have total control over the text in the input frame (replacing the comma delimited option strings), then use display-value property: &lt;q-select :display-value=\"`$&#123; multipleSelect.length &#125; item$&#123; multipleSelect.length !== 1 ? 's' : '' &#125; selected`\" multiple v-model=\"multipleSelect\" float-label=\"Select a company\" :options=\"selectLongListOptions\"/&gt; For a more elegant solution (and more efficient too), use a computed property:&lt;template&gt; &lt;!-- Notice \"display-value\" is binded to \"text\" variable --&gt; &lt;q-select :display-value=\"text\" multiple v-model=\"multipleSelect\" float-label=\"Select a company\" :options=\"selectLongListOptions\" /&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; multipleSelect: /* value */, selectOptions: /* options */ &#125; &#125;, computed: &#123; text () &#123; // in this example we want to show how many items are selected, // so we need to check model (multipleSelect) length return `$&#123;this.multipleSelect.length&#125; item$&#123;this.multipleSelect.length &gt; 1 ? 's' : ''&#125; selected` &#125; &#125;&#125;&lt;/script&gt; Lazy InputVue will soon supply the .lazy modifier for v-model on components too, but until then, you can use the longer equivalent form:&lt;q-select :value=\"model\" @change=\"val =&gt; &#123; model = val &#125;\" :options=\"selectOptions\"/&gt; Vue Methods Vue Method Description show() Opens the Popover hide() Closes the Popover clear() Resets the model to an empty string. Vue Events Vue Event Description @input(newVal) Triggered immediately on model value change. @change(newVal) Triggered on lazy model value change. @clear(clearVal) Triggered when the model is cleared. @focus Triggered when the field gets focus. @blur Triggered when the field loses focus. More ExamplesError StateUse the error prop, to change the color of the component to red:&lt;q-select error multiple v-model=\"multipleSelect\" :options=\"selectOptions\"/&gt; DisableUse the disable prop, to stop access to the field.&lt;!-- Disabled state --&gt; &lt;q-select disable float-label=\"Disabled Select\" multiple v-model=\"multipleSelect\" :options=\"selectOptions\"/&gt; LabelingAs with any input, you have two options for labels. Stack and Floating. Unless you wrap it with a QField which has its own label.&lt;!-- Floating Label --&gt;&lt;q-select float-label=\"This Label Floats\" multiple v-model=\"multipleSelect\" :options=\"selectOptions\"/&gt;&lt;!-- Stack Label --&gt;&lt;q-select static-label=\"Company\" multiple v-model=\"multipleSelect\" :options=\"selectOptions\"/&gt; ColoringUse the color, inverted and frame-color props to control the coloring of the component.&lt;!-- Color --&gt;&lt;q-select color=\"amber\" v-model=\"select\" :options=\"selectListOptions\"/&gt;&lt;!-- Inverted Color --&gt;&lt;q-select inverted color=\"secondary\" v-model=\"select\" :options=\"selectListOptions\"/&gt;&lt;!-- With custom colors for Chips.--&gt;&lt;q-select color=\"amber\" chips-color=\"yellow\" chips-bg-color=\"black\" inverted-light multiple chips v-model=\"multipleSelect\" :options=\"selectListOptions\" float-label=\"Some label\"/&gt; NoteThe optional frame-color prop is useful when using chips as selected values, so the chips stand out from the background color. Usage Inside of a List&lt;q-list&gt; &lt;q-list-header&gt;Single Selection&lt;/q-list-header&gt; &lt;q-item&gt; &lt;q-item-side icon=\"supervisor_account\" /&gt; &lt;q-item-main&gt; &lt;q-select class=\"no-margin\" v-model=\"select\" :options=\"selectOptions\" /&gt; &lt;/q-item-main&gt; &lt;/q-item&gt; &lt;q-item-separator /&gt; &lt;q-list-header&gt;Multiple Selection&lt;/q-list-header&gt; &lt;q-item&gt; &lt;q-item-side icon=\"supervisor_account\" /&gt; &lt;q-item-main&gt; &lt;q-select multiple class=\"no-margin\" v-model=\"multipleSelect\" :options=\"selectOptions\" /&gt; &lt;/q-item-main&gt; &lt;/q-item&gt;&lt;/q-list&gt;"},{"title":"CSS Spacing Classes","updated":"2018-10-05T13:17:40.835Z","permalink":"https://quasar-framework.org/components/spacing.html","text":"There are CSS classes supplied by Quasar to help you with spacing for DOM elements or components. Syntaxq-[p|m][t|r|b|l|a|x|y]-[none|auto|xs|sm|md|lg|xl] T D ST - type - values: p (padding), m (margin)D - direction - values: t (top), r (right), b (bottom), l (left), a (all), x (both left &amp; right), y (both top &amp; bottom)S - size - values: none, auto (just for margin), xs (extra small), sm (small), md (medium), lg (large), xl (extra large)q-my-form - applies the default vertical margins for form controls, according to material specification. Examples&lt;!-- small padding in all directions --&gt;&lt;div class=\"q-pa-sm\"&gt;...&lt;/div&gt;&lt;!-- medium margin to top, small margin to right --&gt;&lt;q-card class=\"q-mt-md q-mr-sm\"&gt;...&lt;/q-card&gt; Flex Addonsv0.17.6+ When enabled (through quasar.conf &gt; framework &gt; cssAddon: true) it provides breakpoint aware versions for all spacing related CSS classes. Note that there will be a noticeable bump in CSS footprint when enabling it. So only do it if you really need it. .q-(p|m)(t|r|b|l|a|x|y)-&lt;bp&gt;-(none|auto|xs|sm|md|lg|xl).q-my-&lt;bp&gt;-form Examples: q-pa-xs q-pa-sm-sm q-px-md-lg q-py-md-md See more details about the Flex Addons"},{"title":"Spinners","updated":"2018-05-18T22:01:01.042Z","permalink":"https://quasar-framework.org/components/spinner.html","text":"A Spinner is used to show the user a timely process is currently taking place. It is an important UX feature, which gives the user the feeling the system is continuing to work for longer term activities, like grabbing data from the server or some heavy calculations. InstallationEdit /quasar.conf.js:framework: &#123; components: [ 'QSpinner', 'QSpinnerAudio', ... ]&#125; Basic Usage&lt;!-- Default platform spinner--&gt;&lt;q-spinner /&gt;&lt;!-- Spinner with options --&gt;&lt;q-spinner color=\"secondary\" :size=\"30\" /&gt;&lt;q-spinner color=\"teal-4\" size=\"40px\" /&gt;&lt;!-- Alternatively, you can set CSS colo prop on a container or directly with `style` attribute on spinner--&gt;&lt;q-spinner style=\"color: #e2aa6f\" /&gt; Vue Properties Vue Property Type Description size Number / String Number (defining the size in pixels) or String (CSS size with unit). color String CSS color from Quasar Color Palette. You can change the spinner’s size without a loss of quality, because SVGs are used. Using Specific SpinnersIf you’d like to use a different spinner than the default, use a specific spinner component, which inherits the same props as specified above. The following specific spinners components are available. The name of these components is q-spinner-*name*, where name is one of ‘audio’, ‘ball’, ‘bars’, ‘circles’, ‘comment’, ‘cube’, ‘dots’, ‘grid’, ‘hearts’, ‘ios’, ‘mat’, ‘oval’, ‘puff’, ‘rings’, ‘tail’, ‘facebook’, ‘gears’, ‘hourglass’, ‘infinity’, ‘pie’, ‘radio’. Example: &lt;!-- Specific spinner icon --&gt;&lt;q-spinner-audio /&gt;&lt;!-- Specific spinner icon with options --&gt;&lt;q-spinner-audio color=\"primary\" :size=\"30\" /&gt; NoteHaving to use an extra component to identify specific spinners might seem like extra work, however, the goal is to be able to remove all other spinner components in your final build, in order to keep the overall package size of your application down to a minimum. The spinners are used in components such as the QInnerLoading and QBtn components or within the Loading feature, just to name a few examples."},{"title":"Quasar Stepper","updated":"2018-07-25T14:14:24.677Z","permalink":"https://quasar-framework.org/components/stepper.html","text":"Quasar Stepper conveys progress through numbered steps. Steppers display progress through a sequence of logical and numbered steps. They may also be used for navigation. It’s usually useful when the user has to follow steps to complete a process, like in a wizard. The stepper component is built from three different child components: QStepper - main Stepper encapsulating component QStep - individual steps QStepperNavigation - helper for encapsulating Stepper navigation buttons (within QStep or globally for the stepper as direct child of QStepper) InstallationEdit /quasar.conf.js:framework: &#123; components: [ 'QStepper', 'QStep', 'QStepperNavigation' ]&#125; Basic UsageHere’s a small example showcasing a very basic Stepper to understand how components fit together.&lt;q-stepper ref=\"stepper\"&gt; &lt;!-- Step: --&gt; &lt;q-step default title=\"First Step\" subtitle=\"Here we go\"&gt; ...Step content, components, ... &lt;/q-step&gt; &lt;!-- Step: --&gt; &lt;q-step title=\"Step 2\"&gt;...&lt;/q-step&gt; &lt;!-- Step: --&gt; &lt;q-step title=\"Step 3\" subtitle=\"Review and submit\"&gt;...&lt;/q-step&gt; &lt;!-- Optional. \"Globally\" available Stepper navigation which means that it will be visible regardless of the current step. If we'd put QStepperNavigation under a QStep then we'd be using it for that step only. --&gt; &lt;q-stepper-navigation&gt; &lt;q-btn flat @click=\"$refs.stepper.previous()\" label=\"Back\" /&gt; &lt;q-btn @click=\"$refs.stepper.next()\" label=\"Next\" /&gt; &lt;/q-stepper-navigation&gt;&lt;/q-stepper&gt; A more involved example. This one doesn’t uses QStepperNavigation as direct child of QStepper because each step has navigation configured. Notice the additional attributes on each component below. They will be detailed in next sections.&lt;q-stepper color=\"secondary\" ref=\"stepper\" alternative-labels&gt; &lt;q-step default name=\"first\" title=\"Ad style\"&gt; &lt;div v-for=\"n in 10\"&gt;Step 1&lt;/div&gt; &lt;!-- Navigation for this step at the end of QStep--&gt; &lt;q-stepper-navigation&gt; &lt;q-btn color=\"secondary\" @click=\"$refs.stepper.next()\" label=\"Continue\" /&gt; &lt;/q-stepper-navigation&gt; &lt;/q-step&gt; &lt;q-step error name=\"second\" title=\"Custom channels\" subtitle=\"Alert message\"&gt; &lt;div v-for=\"n in 10\"&gt;Step 2&lt;/div&gt; &lt;q-stepper-navigation&gt; &lt;q-btn color=\"secondary\" @click=\"$refs.stepper.next()\" label=\"Next\" /&gt; &lt;q-btn color=\"secondary\" flat @click=\"$refs.stepper.previous()\" label=\"Back\" /&gt; &lt;/q-stepper-navigation&gt; &lt;/q-step&gt; &lt;q-step name=\"third\" title=\"Get code\"&gt; &lt;div v-for=\"n in 3\"&gt;Step 3&lt;/div&gt; &lt;q-stepper-navigation&gt; &lt;q-btn color=\"secondary\" @click=\"$refs.stepper.next()\" label=\"Next\" /&gt; &lt;q-btn color=\"secondary\" flat @click=\"$refs.stepper.previous()\" label=\"Back\" /&gt; &lt;/q-stepper-navigation&gt; &lt;/q-step&gt; &lt;q-step name=\"fifth\" disable title=\"Disabled\"&gt; &lt;div v-for=\"n in 3\"&gt;Step 4&lt;/div&gt; &lt;q-stepper-navigation&gt; &lt;q-btn color=\"secondary\" @click=\"$refs.stepper.next()\" label=\"Next\" /&gt; &lt;q-btn color=\"secondary\" flat @click=\"$refs.stepper.previous()\" label=\"Back\" /&gt; &lt;/q-stepper-navigation&gt; &lt;/q-step&gt; &lt;q-step name=\"fourth\" title=\"Review and Finalize\"&gt; &lt;div v-for=\"n in 3\"&gt;Step 5&lt;/div&gt; &lt;q-stepper-navigation&gt; &lt;q-btn color=\"secondary\" @click=\"$refs.stepper.next()\" label=\"Next\" /&gt; &lt;q-btn color=\"secondary\" flat @click=\"$refs.stepper.previous()\" label=\"Back\" /&gt; &lt;/q-stepper-navigation&gt; &lt;/q-step&gt;&lt;/q-stepper&gt; QStepper (Parent) Vue Property Type Description color String Main color of Stepper, from Quasar Color Palette. vertical Boolean Set Stepper as vertical instead of default horizontal. alternative-labels Boolean Use alternative labels (applies only to horizontal Stepper). contractable Boolean Labels are hidden on narrow windows. no-header-navigation Boolean (Quasar v0.15.7+) Disable ability to navigate to previous steps through header. done-icon String, Boolean Used to change the display of the Step icon, when the step is finished. Default is the “check” icon. active-icon String, Boolean Used to change the icon, when a Step is selected. Default is the “edit” icon. error-icon String / Boolean Used to change the icon, when there is an error in a Step. Default is the “warning” icon. You can also control the current step by using v-model on QStep. More details in next section. Vue Method Description goToStep(String) Moves the user to the given Step, defined by Step’s “name” property. next() Stepper goes to the next step. previous() Stepper goes to the previous step. reset() Returns the stepper back to the first step. Component events: Vue Event Description @step Emitted when navigating to another step. Using v-modelEach QStep has a name prop (which is optional). Use this prop along with v-model to control the current step. The example below shows how you can use v-model alone to control navigation. Notice the @click events. If you dynamically insert/remove Steps it’s better to use a Vue reference on QStepper and call next() or previous() methods since these methods are not binded to specific Step names. &lt;template&gt; &lt;q-stepper v-model=\"currentStep\"&gt; &lt;q-step name=\"first\"&gt; ... &lt;q-stepper-navigation&gt; &lt;q-btn color=\"primary\" @click=\"currentStep = 'second'\" label=\"Go to Step 2\" /&gt; &lt;/q-stepper-navigation&gt; &lt;/q-step&gt; &lt;q-step name=\"second\"&gt; ... &lt;q-stepper-navigation&gt; &lt;q-btn color=\"primary\" @click=\"currentStep = 'first'\" label=\"Go Back\" /&gt; &lt;/q-stepper-navigation&gt; &lt;/q-step&gt; &lt;/q-stepper&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; // we initialize it with first step's name currentStep: 'first' &#125; &#125;&#125;&lt;/script&gt; QStep (Child) Vue Property Type Description name Number, String Step name, used by QStepper’s v-model or goToStep() method. default Boolean (Optional) Use it on only one Step. Becomes default selected one. error Boolean Mark Step as having an error. default Boolean Use on only one Step to make it be the active one by default. Previous steps will be marked as done. Useful when refreshing page. title String Step title. subtitle String Step’s additional information along the title. icon String Step’s icon when Step isn’t finished yet. If no active-icon is specified, then this icon will be used when Step is currently active too. active-icon String The icon used for the Step when it’s currently active. Defaults to icon prop value when active-icon isn’t specified. done-icon String The icon to use for Step when it’s finished. error-icon String The icon to use for Step when it’s marked as having an error. disable Boolean Step is disabled. order Number / String If you add/remove Steps dynamically, it’s good to use this prop to specify the order in which Steps should be displayed. Methods for this component: Vue Method Description select() Stepper selects this step as current one. QStepperNavigation (Child of QStepper or QStep)This component allows you to place buttons within QStepper or QStep to navigate through the steps. It is up to you to add whatever buttons you require. &lt;q-stepper ref=\"myStepper\"&gt; ... &lt;q-stepper-navigation&gt; &lt;q-btn color=\"secondary\" @click=\"$refs.myStepper.next()\" label=\"Next\" /&gt; &lt;q-btn color=\"secondary\" @click=\"$refs.myStepper.previous()\" label=\"Back\" /&gt; &lt;/q-stepper-navigation&gt;&lt;/q-stepper&gt; More ExamplesVertical StepperIt is also possible to build a stepper, which presents itself in a vertical fashion. To do this, simply use vertical property on QStepper: &lt;q-stepper vertical&gt; &lt;q-step&gt;..&lt;/q-step&gt; &lt;q-step&gt;..&lt;/q-step&gt; ...&lt;/q-stepper&gt; When using a vertical Stepper, it doesn’t really make sense to use a “global” QStepper navigation. Instead, use navigation within each QStep. Displaying ProgressA common case is where you need to take an asynchronouse action (like an Ajax call) before going to next step. Make use of QInnerLoading component for this: &lt;q-stepper&gt; &lt;!-- Steps... --&gt; ........ &lt;!-- Create a Boolean scope variable (here it's \"inProgress\") and binded to \"visible\" prop. Then toggle it whenever you need to display that the Stepper has a background process going. --&gt; &lt;q-inner-loading :visible=\"inProgress\" /&gt;&lt;/q-stepper&gt; Specific Steps OrderIf you dynamically add/remove Steps, then you need to specify the order property (for ALL QSteps) so that the Stepper will know the actual order of Steps. By using v-if or v-for directives, Vue &amp; Quasar can’t ensure Steps will be registered in the order they are placed in DOM. IMPORTANTJust make sure that when you use order you apply it to all QSteps and don’t leave out any step without it. Either use order for all QSteps or don’t use it at all. &lt;q-stepper&gt; &lt;!-- Will come as second step --&gt; &lt;q-step :order=\"2\"&gt;..&lt;/q-step&gt; &lt;!-- Will come as first step --&gt; &lt;q-step :order=\"1\"&gt;..&lt;/q-step&gt; &lt;!-- Will come as third step --&gt; &lt;q-step :order=\"3\"&gt;..&lt;/q-step&gt;&lt;/q-stepper&gt; The order property applied to all QStep doesn’t has to be strictly growing consecutively. Setting order as 10, 100 and 52 will work too."},{"title":"Stylus Variables","updated":"2018-05-18T22:01:01.043Z","permalink":"https://quasar-framework.org/components/stylus-variables.html","text":"Quasar CSS is a blank slate that you can easily customize and modify to fit your brand, while still following the standards of each platform. The best apps in the app stores are fully customized and Quasar makes it easy to do the same with your App. Quasar is built on top of Stylus, which allows it to set some default styles for your App but makes it extremely easy for you to change the defaults in your App code. Customizing a theme means overriding Stylus variables which can hold colors, sizes, border types and so on. To understand how and where to make use of the full list of variables below, read Guide &gt; Theming. Variables List"},{"title":"Timeline","updated":"2019-01-01T13:12:57.796Z","permalink":"https://quasar-framework.org/components/timeline.html","text":"A Timeline is a display of a list of events in chronological order. It is typically a graphic design showing a long bar labelled with dates alongside itself and usually events. Timelines can use any time scale, depending on the subject and data. QTimeline has 3 media breakpoints (if responsive property is used). View on a desktop and click the “View Desktop” link on the right side, then resize the browser window to see the media breakpoints in action. InstallationEdit /quasar.conf.js:framework: &#123; components: [ 'QTimeline', 'QTimelineEntry' ]&#125; Basic Usage&lt;q-timeline responsive color=\"secondary\"&gt; &lt;q-timeline-entry heading&gt; Timeline Subject &lt;/q-timeline-entry&gt; &lt;q-timeline-entry title=\"Event Title\" subtitle=\"February 22, 1986\" side=\"left\" &gt; &lt;div&gt; Lorem ipsum dolor sit amet. &lt;/div&gt; &lt;/q-timeline-entry&gt;&lt;/q-timeline&gt; Customize Entries Titles via slotsQuasar v0.17.18+ &lt;q-timeline responsive color=\"secondary\"&gt; &lt;q-timeline-entry subtitle=\"April 22, 1991\" side=\"left\" &gt; &lt;div&gt; Lorem ipsum dolor sit amet. &lt;/div&gt; &lt;!-- Use the class q-timeline-title to stick to original styling when using slots --&gt; &lt;h3 slot=\"title\" class=\"q-timeline-title\"&gt; &lt;q-icon name=\"account_balance\" /&gt; &lt;span&gt;Event&lt;/span&gt; &lt;em&gt;Title&lt;/em&gt; &lt;/h3&gt; &lt;!-- Use the class q-timeline-subtitle to stick to original styling when using slots --&gt; &lt;h5 slot=\"subtitle\" class=\"q-timeline-subtitle\"&gt; &lt;q-icon name=\"warning\" /&gt; &lt;span&gt;April 22,&lt;/span&gt; &lt;em&gt;1991&lt;/em&gt; &lt;/h5&gt; &lt;/q-timeline-entry&gt;&lt;/q-timeline&gt; QTimeline (Parent) Vue Properties Vue Property Type Description responsive Boolean (v0.17.7+) Enable responsive mode color String Color of the timeline element no-hover Boolean Don’t apply any hover effects dark Boolean When rendering on a dark background. QTimelineEntry (Child) Vue Properties Vue Property Type Description heading Boolean Display a timeline subject which helps group timeline entries into separate chunks. tag String HTML tag to use to render the timeline entry DOM element. side String On wider windows, you can choose on which side to display this entry (left or right). Default is on the right side. icon String Icon to use. color String Color to use for this entry. title String Title of the entry. subtitle String Addition to title of the entry."},{"title":"Tabs","updated":"2018-08-30T14:23:50.836Z","permalink":"https://quasar-framework.org/components/tabs.html","text":"Quasar Tabs are a way of displaying more information using less window real estate.One common use case for this component is in Layout’s header/footer in a QToolbar. Please refer to Layouts and Toolbar for references. InstallationEdit /quasar.conf.js:framework: &#123; components: [ 'QTabs', 'QTab', 'QTabPane', 'QRouteTab' ]&#125; Basic UsageBelow is a basic example of the Tabs component using many of its features. &lt;q-tabs&gt; &lt;!-- Tabs - notice slot=\"title\" --&gt; &lt;q-tab default count=\"5\" slot=\"title\" name=\"tab-1\" icon=\"message\" /&gt; &lt;q-tab disable slot=\"title\" name=\"tab-2\" icon=\"fingerprint\" /&gt; &lt;q-tab alert slot=\"title\" name=\"tab-3\" icon=\"account_box\" /&gt; &lt;q-tab slot=\"title\" name=\"tab-4\" icon=\"accessibility\" /&gt; &lt;q-tab slot=\"title\" name=\"tab-5\" icon=\"build\" /&gt; &lt;!-- Targets --&gt; &lt;q-tab-pane name=\"tab-1\"&gt;Tab One&lt;/q-tab-pane&gt; &lt;q-tab-pane name=\"tab-2\"&gt;Tab Two&lt;/q-tab-pane&gt; &lt;q-tab-pane name=\"tab-3\"&gt;Tab Three&lt;/q-tab-pane&gt; &lt;q-tab-pane name=\"tab-4\"&gt;Tab Four&lt;/q-tab-pane&gt; &lt;q-tab-pane name=\"tab-5\"&gt;Tab Five&lt;/q-tab-pane&gt;&lt;/q-tabs&gt; The above example is using QTabPane component as the content container (or target container) for the tabs. There is also the ability to use Vue Router for each tab instead of targeting a QTabPane. Also, QTabPanes are optional and you can use v-model on QTabs. We’ll cover those features later. The name prop on QTab and QTabPane links the tab to the targets (panes). As you can see from the example, we have a main Tab container with (QTabs) and singular Tabs themselves with (QTab). Let’s look at the Tabs container first: QTabs (Container Component)Use the QTabs component to wrap your Tabs. Vue Properties Vue Property Type Description animated Boolean (v0.17.10+) Animate panes when switching from one to another. swipeable Boolean (v0.17.10+) Enables user to swipe on tab pane to switch to adjacent tabs. align String The type of the alignment for the tabs within the tabs container. The allowed values are left (default), center, right or justify. position String The screen position of the tabs. The allowed values are top or bottom. color String A Quasar standard CSS color. text-color String (v0.15.7+) One from Quasar Palette to override color of text inverted Boolean Set to true, to invert the tab color. two-lines Boolean Set to true, should a tab’s label wrap to a second line. no-pane-border Boolean Avoid drawing a border around QTabPanes. glossy Boolean Apply a glossy effect panes-container-class String Custom classes for tab panes container. underline-color String (v0.17.11+) One from Quasar Palette to override color of the underline. There is support for v-model (which is optional). In this case, you need a Vue variable in your scope which will contain the name of the current selected tab (through name prop on QTab). Changing the value will also make QTabs select the according QTab. Basic usage with v-model:&lt;template&gt; &lt;div&gt; &lt;q-tabs v-model=\"selectedTab\"&gt; &lt;q-tab slot=\"title\" name=\"tab-1\" icon=\"message\" /&gt; &lt;q-tab slot=\"title\" name=\"tab-2\" icon=\"fingerprint\" /&gt; &lt;q-tab slot=\"title\" name=\"tab-3\" icon=\"account_box\" /&gt; ...optional `QTabPane`s... &lt;/q-tabs&gt; &lt;q-btn @click=\"selectThirdTab\"&gt;Select Third Tab&lt;/q-btn&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123; QTabs, QTab, QBtn &#125; from 'quasar'export default &#123; components: &#123; QTabs, QTab, QBtn &#125;, data () &#123; return &#123; // initializing for second tab to be selected by default selectedTab: 'tab-2' &#125; &#125;, methods: &#123; selectThirdTab () &#123; // we select third tab which has `name` set to 'tab-3' this.selectedTab = 'tab-3' &#125; &#125;&#125;&lt;/script&gt; Vue Methods Vue Method Description selectTab(name) Set the active Tab using its name. previous() (v0.17.10+) Switch to Tab on the left of current active one. next() (v0.17.10+) Switch to Tab on the right of current active one. go(offset) (v0.17.10+) Switch to Tab + offset as current active one. next() is alias to go(1) and previous() is alias to go(-1). Vue Events Event Description @select Triggered when selected Tab changes. Overflow BehaviorOn a desktop, if the Tabs cannot be displayed completely, the user will be offered a scroll action in the form of an opaque gradient fill. When hovered over, it turns to an arrow button. The user can press continually on the button, and the unseen Tabs will scroll by. If the user is on a device with a small screen (like a phone) and all Tabs can fit on the screen, they will be automatically justify aligned and share the complete screen width. If the Tabs do not fit, then the user will also see the arrow to indicate the user can swipe through the Tabs. QTab (Child Component)QTab component is used to define a title for your Tab. Can be linked to a QTabPane through name prop.If you want to use Vue Router with a Tab (clicking on a Tab triggers a route change in your app), then please refer to QRouteTab component in next section. IMPORTANT. Do not forget to specify slot=&quot;title&quot; on QTab. Vue Properties Vue Property Type Description default Boolean Set to true on the tab which you want to be selected by default. label String Label to use for the tab. icon String Icon to use for the tab. disable Boolean If disabled, the user won’t be able to select the tab. hidden Boolean If set to true, it hides the tab. hide String Possible values: icon or label. On narrow screens one of the two will be hidden. name String The id of the tab. Default is a uid added by Quasar. alert Boolean When true, the tab has a red dot, which is meant to get the user’s attention. count Number, String A number to indicate there is a list of unread or unseen items in the tab’s content. color String The color of the tab’s icon or text, should it be different than the default. tabindex Number Accessibility; Native HTML “tabindex” attribute value for Tab. Vue Methods Vue Method Description select() Make this Tab the selected one. Vue Events Event Description @select Triggered when QTab gets selected. @click Triggered when user clicks/taps on Tab. Usage with “v-model”Best way to programmatically switch between Tabs is by using a v-model. Here’s another example, a little bit more complex which includes a QSelect to explain the effects of using a v-model. &lt;q-select type=\"radio\" v-model=\"tabsModel\" :options=\"tabsOptions\"&gt;&lt;/q-select&gt;&lt;q-tabs v-model=\"tabsModel\"&gt; &lt;q-tab name=\"xtab-1\" icon=\"message\" slot=\"title\" /&gt; &lt;q-tab name=\"xtab-2\" icon=\"account_box\" slot=\"title\" /&gt; &lt;q-tab name=\"xtab-3\" icon=\"mail\" slot=\"title\" /&gt; &lt;q-tab-pane name=\"xtab-1\"&gt;Tab One&lt;/q-tab-pane&gt; &lt;q-tab-pane name=\"xtab-2\"&gt;Tab Two&lt;/q-tab-pane&gt; &lt;q-tab-pane name=\"xtab-3\"&gt;Tab Three&lt;/q-tab-pane&gt;&lt;/q-tabs&gt; // Data for template abovedata () &#123; return &#123; tabsModel: 'xtab-2', tabsOptions: [ &#123;label: 'Tab 1', value: 'xtab-1'&#125;, &#123;label: 'Tab 2', value: 'xtab-2'&#125;, &#123;label: 'Tab 3', value: 'xtab-3'&#125; ] &#125;&#125; NoteWhen the tabs are initially rendered, the value stored in the v-model used by your component, as with tabsModel above, will also indicate to the user a selected tab. If you aren’t using v-model, you can set the initially active tab with the default prop. QTabPane (Child Component)The Tabs Pane component is useful, when the content of each tab is relatively small or simple. If you have complex content, you’ll propably want to use the Tabs Router Component below. Vue Properties Vue Property Type Description name String Required The name of the tab and also the target id. keep-alive Boolean Keeps components alive even if current selected Tab changes. In order to show the proper content for each tab in each pane, the names of the tabs and panes should match. QRouteTab (Child Component)The Tabs Router component is just like the QTab component and shares the same properties, however it also has Vue Router properties bound to it. These allow the triggering of your specific routing. Additional Vue Router Properties. Vue Property Type Description to String, Object The literal path or vue-router object the tab should route to. exact Boolean If true, the router will be forced into “exact match mode” append Boolean If true, the to path will be appended to the current path. replace Boolean If true, there will be no history of the used route. Please refer to Vue-Router Link documentation to get a feeling how to use these props. Usage&lt;!-- Tabs --&gt;&lt;q-tabs&gt; &lt;q-route-tab icon=\"mail\" to=\"/mails\" exact slot=\"title\" /&gt; &lt;q-route-tab icon=\"alarm\" to=\"/alarms\" exact slot=\"title\" /&gt;&lt;/q-tabs&gt; Your Tabs will be auto-selected when user navigates to the specified routes. DO NOT use v-model or selectTab() method on QTabs if using QRouteTab. Tabs in a LayoutYou will, in most cases, want to use tabs within a layout component. Below is an example of how this would be done. &lt;q-layout&gt; ... &lt;q-layout-header&gt; &lt;q-tabs&gt; &lt;q-route-tab icon=\"mail\" to=\"/mails\" exact slot=\"title\" /&gt; &lt;q-route-tab icon=\"alarm\" to=\"/alarms\" exact slot=\"title\" /&gt; &lt;/q-tabs&gt; &lt;/q-layout-header&gt; ...&lt;/q-layout&gt; Please refer to the following documentation for more information: Quasar Layout Component ColoringUse one of the Quasar colors from the Color Palette, like “primary”, “secondary”, “orange”, “teal” or variants (“teal-4”, “orange-10”) for color/text-color properties: &lt;!-- Applied to all tabs: --&gt;&lt;q-tabs color=\"orange\"&gt;...&lt;/q-tabs&gt;&lt;!-- Applied only to a specific tab. In this case you can color Tabs differently:--&gt;&lt;q-tab slot=\"title\" color=\"orange\" /&gt; You can also invert the colors (see demo for example) by adding the Boolean inverted prop (works only on QTabs and NOT on QTab or QRouteTab): &lt;!-- default color, on `inverted` color mode --&gt;&lt;q-tabs color=\"orange\" inverted&gt;...&lt;/q-tabs&gt; Example of transparent background with green text color (v0.15.7+):&lt;q-tabs color=\"transparent\" text-color=\"green\"&gt;...&lt;/q-tabs&gt; Example of light color with custom text color (v0.15.7+):&lt;q-tabs color=\"amber\" text-color=\"dark\"&gt;...&lt;/q-tabs&gt; Alignment of Tabs in the HeaderBy default, on large width windows the Tabs are aligned to the left. If you wish to maintain a justify alignment (filling all available space on the width), then add justify to the align prop: &lt;q-tabs align=\"justify\"&gt;...&lt;/q-tabs&gt; To align center or to the right, use align=&quot;center&quot; or align=&quot;right&quot;. Full height of Tabs in the HeaderBy adding the class q-py-none to the q-toolbar, the tabs will take the full height: &lt;q-layout-header&gt; &lt;q-toolbar color=\"primary\" class=\"q-py-none\"&gt; &lt;q-toolbar-title&gt; &lt;img alt=\"Logo\" src=\"~assets/your-logo.png\"&gt; &lt;/q-toolbar-title&gt; &lt;q-tabs&gt; &lt;q-route-tab :to=\"&#123;name:'home'&#125;\" slot=\"title\" label=\"Home\"/&gt; &lt;q-route-tab :to=\"&#123;name:'user'&#125;\" slot=\"title\" label=\"User\"/&gt; &lt;/q-tabs&gt; &lt;/q-toolbar&gt;&lt;/q-layout-header&gt;"},{"title":"Toggle","updated":"2018-07-25T14:14:24.680Z","permalink":"https://quasar-framework.org/components/toggle.html","text":"The Quasar Toggle component is another basic element for user input. You can use this for turning settings, features or true/ false inputs on and off. Please also refer to the Option Group documentation on other possibilities for creating groups of Toggles. Works well with QField for additional functionality such as a helper, error message placeholder and many others. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QToggle']&#125; Basic Usage&lt;q-toggle v-model=\"checked\" label=\"Toggle Label\" /&gt;&lt;!-- With no label --&gt;&lt;q-toggle v-model=\"checked\" /&gt;&lt;!-- With a specific color --&gt;&lt;q-toggle v-model=\"checked\" color=\"teal-8\" /&gt;&lt;!-- With icon --&gt;&lt;q-toggle v-model=\"checked\" icon=\"alarm\" label=\"Toggle Label\" /&gt;&lt;!-- Disabled state --&gt;&lt;q-toggle v-model=\"checked\" disable label=\"Toggle Label\" /&gt; Check “Vue Properties” for even more options. Vue PropertiesSupports v-model which you should bind to a Boolean or Array in your scope. Vue Property Type Description val Object Used to modify the v-model of the Toggle when using an Array as v-model. true-value Any Gets into “true” state when model has this value. false-value Any Gets into “false” state when model has this value. label String The text label for the Toggle. left-label Boolean Set to true, if the label should be placed to the left of the Toggle. icon String Optional icon to use. Overriden by checked-icon and unchecked-icon if the latter are used. checked-icon String The icon to use, when the Toggle is checked. unchecked-icon String The icon to use, when the Toggle is not checked. color String Color from Quasar Color Palette. keep-color Boolean Keep color when not truthy too. readonly Boolean Set to true, to make the toggle read-only. disable Boolean Set to true, to disable the toggle. dark Boolean Set to true when background is dark. no-focus Boolean (v0.17+) Disable accessibility for this component so that it can’t receive focus. Vue Events Vue Event Description @input(newVal) Triggered immediately on model value change. @change(newVal) Triggered on lazy model value change. @blur Triggered, when Toggle loses focus. @focus Triggered, when Toggle gains focus. Array as ModelIf you have a number of toggles for a selection, use can also use an Array as the model object and the val prop for the inserted value into the Array. &lt;template&gt; &lt;div&gt; &lt;q-toggle v-model=\"selection\" val=\"one\" label=\"One\" /&gt; &lt;q-toggle v-model=\"selection\" val=\"two\" label=\"Two\" /&gt; &lt;q-toggle v-model=\"selection\" val=\"three\" label=\"Three\" /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; selection: ['two'] &#125; &#125;&#125;&lt;/script&gt; Ticking all toggles will make selection scope variable to be [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;]. Unticking all toggles will result in selection being an empty array []. More ExamplesThere are a number of props, which are available to help quickly format a Toggle. An interesting feature of Toggle is the ripple effect that user sees when clicking/tapping on it to change its state. Custom Model ValuesInstead of the default true/false values, you can use custom ones:&lt;q-toggle v-model=\"customModel\" color=\"secondary\" label=\"Do you agree with the terms &amp; conditions?\" true-value=\"yes\" false-value=\"no\"/&gt; Specific State IconsFor a more informational Toggle, you can also use the checked-icon and unchecked-icon props to display an inset icon in the toggle. &lt;q-toggle v-model=\"checked\" unchecked-icon=\"visibility_off\" checked-icon=\"visibility\" label=\"Toggle Label\"/&gt; Specifying checked-icon and unchecked-icon overrides icon property if you’ve also used it. ColoringUse the color prop to control the toggle’s color. &lt;q-toggle v-model=\"checked\" color=\"orange\" /&gt;&lt;q-toggle v-model=\"checked\" color=\"teal\" /&gt;&lt;q-toggle v-model=\"checked\" color=\"dark\" /&gt; Label PositionUse the left-label prop, to move the label to the left of Toggle. &lt;q-toggle v-model=\"checked\" left-label label=\"Checkbox Label\"/&gt; Usage Inside of a ListIn the following example we use the right side of QItems to insert Toggle, but it works anywhere. &lt;q-list link&gt; &lt;!-- Rendering a &lt;label&gt; tag (notice tag=\"label\") so the whole QItem will respond to clicks to change Toggle state. --&gt; &lt;q-item tag=\"label\"&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Events and reminders&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;q-item-side right&gt; &lt;q-toggle v-model=\"checked\" /&gt; &lt;/q-item-side&gt; &lt;/q-item&gt; &lt;q-item tag=\"label\" multiline&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Events and reminders&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;Lorem ipsum&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;q-item-side right&gt; &lt;q-toggle v-model=\"checked\" class=\"purple\" /&gt; &lt;/q-item-side&gt; &lt;/q-item&gt; &lt;q-item tag=\"label\" multiline&gt; &lt;q-item-main&gt; &lt;q-item-tile label&gt;Events and reminders&lt;/q-item-tile&gt; &lt;q-item-tile sublabel&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/q-item-tile&gt; &lt;/q-item-main&gt; &lt;q-item-side right&gt; &lt;q-toggle v-model=\"checked\" class=\"red\" /&gt; &lt;/q-item-side&gt; &lt;/q-item&gt;&lt;/q-list&gt;"},{"title":"Toolbar","updated":"2018-05-18T22:01:01.045Z","permalink":"https://quasar-framework.org/components/toolbar.html","text":"A Quasar Layout can have headers and/or footers (also called “marginals”) and this is a great place to use Toolbars, but note that you can also place Toolbars anywhere else you want. One QToolbar will represent a row in your marginals, usually used for navigation buttons and a title (but not limited to only this). InstallationEdit /quasar.conf.js:framework: &#123; components: [ 'QToolbar', 'QToolbarTitle' ]&#125; Basic Usage&lt;q-toolbar color=\"primary\"&gt; &lt;!-- For Toolbar title, we use QToolbarTitle component --&gt; &lt;q-toolbar-title&gt; Title &lt;/q-toolbar-title&gt; &lt;!-- In a Toolbar, buttons are best configured as \"flat, round, dense\" and with an icon, but any button will do --&gt; &lt;q-btn flat round dense icon=\"mail\" /&gt;&lt;/q-toolbar&gt;&lt;!-- A color \"inverted\" Toolbar --&gt;&lt;q-toolbar color=\"primary\" inverted&gt; ...&lt;/q-toolbar&gt;&lt;!-- A color \"inverted\" Toolbar with custom text color --&gt;&lt;q-toolbar color=\"amber\" text-color=\"dark\" inverted&gt; ...&lt;/q-toolbar&gt;&lt;!-- A Toolbar with a title and subtitle --&gt;&lt;q-toolbar color=\"primary\" inverted&gt; &lt;q-toolbar-title&gt; Title &lt;span slot=\"subtitle\"&gt; Subtitle &lt;/span&gt; &lt;/q-toolbar-title&gt;&lt;/q-toolbar&gt;&lt;!-- A Toolbar with light color and overriden text color --&gt;&lt;q-toolbar color=\"amber\" text-color=\"black\"&gt;...&lt;/q-toolbar&gt;&lt;!-- A Toolbar with transparent background and green text color --&gt;&lt;q-toolbar color=\"transparent\" text-color=\"green\"&gt;...&lt;/q-toolbar&gt; Example on using a Toolbar on Layout header: &lt;q-layout&gt; ... &lt;q-layout-header&gt; &lt;q-toolbar color=\"secondary\"&gt; &lt;!-- Toggles QLayout left side (Assuming the Drawer has a model bound to \"leftSide\") --&gt; &lt;q-btn flat round dense icon=\"menu\" @click=\"leftSide = !leftSide\" /&gt; &lt;q-toolbar-title&gt; Title &lt;/q-toolbar-title&gt; &lt;q-btn flat round dense icon=\"mail\" /&gt; &lt;q-btn flat round dense icon=\"alarm\" /&gt; &lt;/q-toolbar&gt; &lt;/q-layout-header&gt; ...&lt;/q-layout&gt; QToolbar Vue Props Property Type Description color String A color from Quasar Color Palette text-color String One from Quasar Palette to override color of text inverted Boolean Invert color: background becomes “white” while text has color glossy Boolean Apply a glossy effect shrink Boolean Check Shrink section QToolbarTitleQToolbarTitle is a component used to wrap the “title” of your Toolbar. It spreads horizontally to the full real estate space it can get. If not enough space to cover the full extent of the content then ending ellipsis are used. &lt;!-- A Toolbar with a title and subtitle --&gt;&lt;q-toolbar color=\"primary\" inverted&gt; ... &lt;q-toolbar-title&gt; Title &lt;span slot=\"subtitle\"&gt; Subtitle &lt;/span&gt; &lt;/q-toolbar-title&gt;&lt;/q-toolbar&gt; ShrinkBy default, QToolbarTitle is set to grow to the available space. However, you can change that with the shrink Boolean prop:&lt;q-toolbar-title shrink&gt; Title&lt;/q-toolbar-title&gt;"},{"title":"Tooltip","updated":"2018-09-17T10:11:13.871Z","permalink":"https://quasar-framework.org/components/tooltip.html","text":"QTooltip should be used when you want to offer the user more information about a certain area in your App. When hovering the mouse over the target element (or quickly tapping on mobile platforms), the Tooltip will appear. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QTooltip']&#125; Basic UsageIn the example below we use a QBtn (as a target) and when hovering over it, Quasar will display some text. You can replace QBtn and the QPopover content with any DOM elements or components you like. &lt;!-- The target button (can be anything else) must be direct parent of QTooltip on the DOM hierarchy.--&gt;&lt;q-btn label=\"Email\"&gt; &lt;!-- Direct child of target --&gt; &lt;q-tooltip&gt; &lt;!-- The DOM element(s) that make up the tooltip, in this case a simple text: --&gt; Some text as content of Tooltip &lt;/q-tooltip&gt;&lt;/q-btn&gt; The idea is to place QTooltip inside your DOM element / component (as direct child in DOM hierarchy), when you want it to be the trigger for the QTooltip. Don’t worry about QTooltip content inheriting CSS from the container. This won’t occur, since QTooltip will be injected as a direct child of &lt;body&gt;. Toggle through v-model&lt;template&gt; &lt;div&gt; &lt;q-btn color=\"primary\" @click=\"showing = true\" label=\"Show\" /&gt; &lt;q-btn color=\"primary\" @click=\"showing = false\" label=\"Hide\" /&gt; &lt;div&gt; ... &lt;q-tooltip v-model=\"showing\"&gt;...&lt;/q-tooltip&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; showing: false &#125; &#125;&#125;&lt;/script&gt; Vue Properties Vue Property Type Description anchor Object String of form bottom left (vertical horizontal). self Object String of form top left (vertical horizontal). offset Array of 2 Numbers Offset on horizontal and vertical (in pixels). Example: [18, 18]. max-height String Optional maximum height of Tooltip content. Example: 500px delay Number Set the delay, when tooltip should appear. disable Boolean When set to true, Tooltip won’t be triggered. Vue Methods Vue Method Description show() Open Tooltip. hide() Close Tooltip. toggle() Toggle open/close state. Handling PositioningThe position of QTooltip can be customized. It keeps account of the anchor and self optional Vue properties. Check out the demo and play with them. The final position of QTooltip popup is calculated so that it will be displayed on the available screen real estate, switching to the right-side and/or top-side when necessary."},{"title":"Touch/Mouse Hold Action","updated":"2018-05-18T22:01:01.046Z","permalink":"https://quasar-framework.org/components/touch-hold.html","text":"Quasar offers full-featured Vue directives that can totally replace libraries like Hammerjs: v-touch-pan, v-touch-swipe and v-touch-hold. These directives also work with mouse events, not only touch events, so you are able to build cool functionality for your App on desktops too. We will be describing v-touch-hold on the lines below. InstallationEdit /quasar.conf.js:framework: &#123; directives: ['TouchHold']&#125; Basic Usage&lt;div v-touch-hold=\"handler\"&gt;...&lt;/div&gt; “handler“ is a Function which receives an Object as parameter.Please note that the default “hold” duration is 600ms. This means that your handler function will run after 600ms. Handler ParameterThe handler function/method is called by the directive when user taps/clicks and holds on the DOM element and it receives the following parameter:&#123; evt, // JS Native Event position: // &#123;x, y&#125; offset on screen duration // Number in ms&#125;// example:handler (obj) &#123; console.log(obj.position) // &#123;x: 22, y: 451&#125; console.log(obj.duration) // 600&#125; Modifiers Property Description noMouse Avoid capturing mouse events too. stop Stop event propagation once holding has been detected. prevent Prevent default browser behavior of the event once holding has been detected. Avoid Capturing Mouse EventsWhen you don’t want to capture mouse actions too, use the noMouse modifier:&lt;!-- directive won't be triggered by mouse actions; it's exclusively triggered by touch actions now:--&gt;&lt;div v-touch-hold.noMouse=\"userHasHold\"&gt;...&lt;/div&gt; Preventing Scroll (on touch capable devices)By default, the directive does not block page scrolling. If you want to prevent scrolling, then use the prevent modifier.&lt;div v-touch-hold.prevent=\"userHasHold\"&gt;...&lt;/div&gt; Custom Duration&lt;div v-touch-hold:1000=\"userHasHold\"&gt;...&lt;/div&gt;"},{"title":"Panning Touch/Mouse Action","updated":"2018-05-18T22:01:01.047Z","permalink":"https://quasar-framework.org/components/touch-pan.html","text":"Quasar offers full-featured Vue directives that can totally replace libraries like Hammerjs: v-touch-pan, v-touch-swipe and v-touch-hold. These directives also work with mouse events, not only touch events, so you are able to build cool functionality for your App on desktops too. We will be describing v-touch-pan on the lines below. InstallationEdit /quasar.conf.js:framework: &#123; directives: ['TouchPan']&#125; Basic Usage&lt;div v-touch-pan=\"handler\"&gt;...&lt;/div&gt;// \"handler\" is a Function which receives an Object as parameter Handler ParameterThe handler function/method will be called by the directive when a pan touch (or with mouse) action is taking place (any change in touch position triggers a call) on the DOM element and it receives the following parameter: &#123; evt, // JS Native Event position, // &#123;top, left&#125; Position in pixels // where the user's finger is currently at direction, // \"left\", \"right\", \"up\" or \"down\" duration, // Number in ms since \"pan\" started distance, // &#123;x, y&#125; Distance in pixels covered by panning // on horizontal and vertical delta, // &#123;x, y&#125; Distance in pixels since last called handler isFirst, // Boolean; Has panning just been started? isFinal // Boolean; Is panning over?&#125;// example:handler (obj) &#123; console.log(obj.direction) // \"right\" console.log(obj.duration) // 78 console.log(obj.distance.x) // 273&#125; Modifiers Property Description horizontal Capture only horizontal panning. vertical Capture only vertical panning. noMouse Avoid capturing mouse events too. stop Stop event propagation once panning has been detected. prevent Prevent default browser behavior of the event once panning has been detected. mightPrevent If not using prevent prop, but you might call event.preventDefault(), specify this modifier otherwise you’ll get console warnings. Use horizontal or vertical when you only want to capture horizontal or vertical swipes.&lt;div v-touch-pan.horizontal=\"userHasPanned\"&gt;...&lt;/div&gt; Avoid Capturing Mouse EventsWhen you don’t want to capture mouse actions too, use the noMouse modifier:&lt;!-- directive won't be triggered by mouse actions; it's exclusively triggered by touch actions now:--&gt;&lt;div v-touch-pan.noMouse=\"userHasPanned\"&gt;...&lt;/div&gt; Preventing Scroll (on touch capable devices)By default, the directive does not block page scrolling. If you want to prevent scrolling, then use the prevent modifier.&lt;div v-touch-pan.prevent=\"userHasPanned\"&gt;...&lt;/div&gt;"},{"title":"Swipe Touch/Mouse Action","updated":"2018-07-25T14:14:24.681Z","permalink":"https://quasar-framework.org/components/touch-swipe.html","text":"Quasar offers full-featured Vue directives that can totally replace libraries like Hammerjs: v-touch-pan, v-touch-swipe and v-touch-hold. These directives also work with mouse events, not only touch events, so you are able to build cool functionality for your App on desktops too. We will be describing v-touch-swipe on the lines below. InstallationEdit /quasar.conf.js:framework: &#123; directives: ['TouchSwipe']&#125; Basic Usage&lt;div v-touch-swipe=\"handler\"&gt;...&lt;/div&gt;// \"handler\" is a Function which receives an Object as parameter Handler ParameterThe handler function/method is called by the directive when a swipe touch action took place on the DOM element and it receives the following parameter:&#123; evt, // JS Native Event direction, // \"left\", \"right\", \"up\" or \"down\" duration, // Number in ms distance // &#123;x, y&#125; Distance in pixels covered by swipe on horizontal and vertical&#125;// example:handler (obj) &#123; console.log(obj.direction) // \"right\" console.log(obj.duration) // 78 console.log(obj.distance.x) // 273&#125; Modifiers Property Description horizontal Capture only horizontal swipe. vertical Capture only vertical swipe. up, right, down, left Capture swipe on the respective direction. noMouse Avoid capturing mouse events too. Use horizontal or vertical when you only want to capture horizontal or vertical swipes, or specify which directions are of interest:&lt;div v-touch-swipe.horizontal=\"userHasSwiped\"&gt; Capturing only horizontal swipes.&lt;/div&gt;&lt;div v-touch-swipe.up.right=\"userHasSwiped\"&gt; Capturing only swipes to \"up\" or \"right\".&lt;/div&gt; Avoid Capturing Mouse EventsWhen you don’t want to capture mouse actions too, use the noMouse modifier:&lt;!-- directive won't be triggered by mouse actions; it's exclusively triggered by touch actions now:--&gt;&lt;div v-touch-swipe.noMouse=\"userHasSwiped\"&gt;...&lt;/div&gt;"},{"title":"CSS Transitions","updated":"2018-11-07T17:15:51.800Z","permalink":"https://quasar-framework.org/components/transition.html","text":"CSS Transitions can be handled by the Vue Transition Component. The transitions are used for entering (appearing) or leaving (disappearing) animations. However, Quasar can supply a big list of ready to use CSS animations. The animation effects are borrowed from Animate.css. So there are 12 general, 32 entering (In) and 32 leaving (Out) animation types currently available for you to use out of the box. Check the list either on Animate.css website or on the demo available for this page. Please refer to Vue Documentation Website for learning on how to use the Vue supplied &lt;transition&gt; component. InstallationEdit /quasar.conf.js.// embedding all animationsanimations: 'all'// or embedding only specific animationsanimations: [ 'bounceInLeft', 'bounceOutRight'] If you are building a website, you can also skip configuring quasar.conf.js and use a CDN link which points to Animate.css like this (following is just an example, Google for latest link). Remember this will require an Internet connection for your user, as opposed to bundling from within quasar.conf.js. &lt;!-- index.template.html --&gt;&lt;head&gt; ... &lt;!-- CDN example for Animate.css --&gt; &lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.5.2/animate.min.css\" &gt;&lt;/head&gt; Basic UsageNotice the string “animated” in front of the actual animation name.&lt;!-- Example with wrapping only one DOM element / component --&gt;&lt;transition appear enter-active-class=\"animated fadeIn\" leave-active-class=\"animated fadeOut\"&gt; &lt;!-- Wrapping only one DOM element, defined by QBtn --&gt; &lt;q-btn color=\"secondary\" icon=\"mail\" label=\"Email\" /&gt;&lt;/transition&gt; Wrapping Multiple ElementsYou can also group components or DOM elements in a transition so that the same effects are applied to all of them simultaneously. &lt;!-- Example with wrapping multiple DOM elements / components --&gt;&lt;transition-group appear enter-active-class=\"animated fadeIn\" leave-active-class=\"animated fadeOut\"&gt; &lt;!-- We wrap a \"p\" tag and a QBtn --&gt; &lt;p key=\"text\"&gt; Lorum Ipsum &lt;/p&gt; &lt;q-btn key=\"email-button\" color=\"secondary\" icon=\"mail\" label=\"Email\" /&gt;&lt;/transition-group&gt; Please note some things in the above example: Note &lt;transition-group&gt; instead of &lt;transition&gt;. The components and DOM elements must be keyed, like key=&quot;text&quot; or key=&quot;email-button&quot; in the example above. Both examples above have the Boolean property appear specified, which makes the entering animation kick in right after component(s) have been rendered. This property is optional."},{"title":"Tree","updated":"2018-09-13T11:16:30.860Z","permalink":"https://quasar-framework.org/components/tree.html","text":"Quasar Tree represents a highly configurable component that displays hierarchical data, such as a table of contents in a tree structure. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QTree']&#125; Basic UsageThis is the simplest Tree that you can write:&lt;template&gt; &lt;q-tree :nodes=\"simple\" node-key=\"label\" /&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data: () =&gt; (&#123; simple: [ &#123; label: 'Satisfied customers', children: [ &#123; label: 'Good food', children: [ &#123; label: 'Quality ingredients' &#125;, &#123; label: 'Good recipe' &#125; ] &#125;, &#123; label: 'Good service (disabled node)', disabled: true, children: [ &#123; label: 'Prompt attention' &#125;, &#123; label: 'Professional waiter' &#125; ] &#125;, &#123; label: 'Pleasant surroundings', children: [ &#123; label: 'Happy atmosphere' &#125;, &#123; label: 'Good table presentation' &#125;, &#123; label: 'Pleasing decor' &#125; ] &#125; ] &#125; ] &#125;)&#125;&lt;/script&gt; Notice that nodes must have a unique key defined by a property of each key. In the example above, labels are unique so we’re using label prop to define these keys. However, you can add any property to the nodes (like ‘id’ or anything you want) and then use that property (like node-key=&quot;id&quot;). Vue Properties Vue Property Type Description nodes Array Vue model for the Tree node-key String Property of node to use as unique key. label-key String (v0.17.11+) Property of node to use as label. color String Color of the connector lines. control-color String Color of checkboxes. text-color String Color of text. dark Boolean When rendering on a dark background. icon String Connector icon for each node. selected Any Use .sync. The unique key value of the selected node. tick-strategy String One of ‘leaf’, ‘leaf-filtered’, ‘strict’, ‘none’. ticked Array Use .sync. Node unique keys of ticked nodes. expanded Array Use .sync. Node unique keys of expanded nodes. default-expand-all Boolean Expan all nodes on first render. accordion Boolean Expanding a node closes its siblings. filter String String to be used when filtering nodes. filter-method Function Custom filtering method. no-nodes-label String Override default i18n of message when no nodes are available. no-results-label String Override default i18n of message when no nodes are available after filtering. duration Number (v0.17.13+) Toggle animation duration in milliseconds. Default: 300 Nodes model structureThe following describes a node’s properties that are taken into account by QTree’s v-model. Node Property Type Description label String Node’s label icon String Node’s icon iconColor String (v0.17.9+) Node’s icon color. One from Quasar Color Palette. img String Node’s image. Use statics folder. Example: ‘statics/mountains.png’ avatar String Node’s avatar. Use statics folder. Example: ‘statics/boy-avatar.png’ children Array Array of nodes as children. disabled Boolean Is node disabled? expandable Boolean Is node expandable? tickable Boolean When using a tick strategy, each node shows a checkbox. Should a node’s checkbox be disabled? noTick Boolean When using a tick strategy, should node display a checkbox? tickStrategy String Override global tick strategy for this node only. One of ‘leaf’, ‘leaf-filtered’, ‘strict’, ‘none’. lazy Boolean Should children be lazy loaded? In this case also don’t specify ‘children’ prop. header String Node header scoped slot name, without the required ‘header-‘ prefix. Example: ‘story’ refers to ‘header-story’ scoped slot. body String Node body scoped slot name, without the required ‘body-‘ prefix. Example: ‘story’ refers to ‘body-story’ scoped slot. Selection vs Ticking, Expansion Selection (through QTree selected prop) refers to the currently selected node (gets highlighted with different background). Ticking (through QTree ticked prop) refers to the checkbox associated with each node. Expansion (through QTree expanded prop) refers to the nodes that are expanded. All properties above require the .sync modifier in order for them to work correctly. Example:&lt;!-- DO NOT forget about adding \".sync\" --&gt;&lt;q-tree selected.sync=\"selection\" ... Tick StrategyThere are three ticking strategy: ‘leaf’, ‘leaf-filtered’, ‘strict’ with an additional (and default) ‘none’ which disables ticking. Strategy Description leaf Ticked nodes are only the leaves. Ticking a node influences the parent’s ticked state too (parent becomes partially ticked or ticked), as well as its children (all tickable children become ticked). leaf-filtered Same concept as leaf, only that this strategy applies only to filtered nodes (the nodes that remain visible after filtering). strict Ticked nodes are independent of parent or children tick state. You can apply a global tick strategy for a QTree and locally change the ticking strategy for a certain node by specifying the tickStrategy in the nodes model. Custom Filter MethodYou can customize the filtering method by specifying the filter-method prop. The method below is actually the default filtering strategy:&lt;template&gt; &lt;q-tree :filter-method=\"myFilterMethod\" ...&gt;&lt;/template&gt;&lt;script&gt;export default &#123; methods: &#123; myFilterMethod (node, filter) &#123; const filt = filter.toLowerCase() return node.label &amp;&amp; node.label.toLowerCase().indexOf(filt) &gt; -1 &#125; &#125;&#125;&lt;/script&gt; Vue Methods Vue Property Description getNodeByKey(key) Get a node by specifying its unique key. collapseAll() Collapses all nodes. Useful if not using a synched expanded bind, otherwise just set expanded to an empty array. expandAll() Expands all nodes. Useful if not using a synched expanded bind. isTicked(key) Returns a boolean specifying if node with key is ticked. isExpanded(key) Returns a boolean specifying if node with key is expanded. getTickedNodes() Returns an array with keys of nodes that are ticked. Useful if not using a synched ticked bind. getExpandedNodes() Returns an array with keys of nodes that are expanded. Useful if not using a synched expanded bind. ExamplesNode icon/avatar/image, controlling expansion and colored&lt;template&gt; &lt;div&gt; &lt;q-btn color=\"secondary\" @click=\"togglePropsGoodServiceExpand\" label=\"Toggle 'Good service' expansion\" /&gt; &lt;q-tree :nodes=\"props\" :expanded.sync=\"propsExpanded\" color=\"red\" node-key=\"label\" /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data: () =&gt; (&#123; propsExpanded: ['Satisfied customers', 'Pleasant surroundings'], props: [ &#123; label: 'Satisfied customers', avatar: 'statics/boy-avatar.png', children: [ &#123; label: 'Good food', icon: 'restaurant_menu', children: [ &#123; label: 'Quality ingredients' &#125;, &#123; label: 'Good recipe' &#125; ] &#125;, &#123; label: 'Good service', icon: 'room_service', children: [ &#123; label: 'Prompt attention' &#125;, &#123; label: 'Professional waiter' &#125; ] &#125;, &#123; label: 'Pleasant surroundings', icon: 'photo', children: [ &#123; label: 'Happy atmosphere', img: 'statics/parallax1.jpg' &#125;, &#123; label: 'Good table presentation', img: 'statics/parallax2.jpg' &#125;, &#123; label: 'Pleasing decor', img: 'statics/mountains.jpg' &#125; ] &#125; ] &#125; ] &#125;), methods: &#123; togglePropsGoodServiceExpand () &#123; const index = this.propsExpanded.indexOf('Good service') if (index &gt; -1) &#123; this.propsExpanded.splice(index, 1) &#125; else &#123; this.propsExpanded.push('Good service') &#125; &#125; &#125;&#125;&lt;/script&gt; Customizing nodes (header and body slots)&lt;template&gt; &lt;q-tree :nodes=\"customize\" node-key=\"label\" default-expand-all &gt; &lt;div slot=\"header-root\" slot-scope=\"prop\" class=\"row items-center\"&gt; &lt;img src=\"~assets/quasar-logo.svg\" class=\"avatar q-mr-sm\"&gt; &lt;div&gt; &#123;&#123; prop.node.label &#125;&#125; &lt;q-chip color=\"orange\" small&gt;New!&lt;/q-chip&gt; &lt;/div&gt; &lt;/div&gt; &lt;div slot=\"header-generic\" slot-scope=\"prop\" class=\"row items-center\"&gt; &lt;q-icon :name=\"prop.node.icon || 'star'\" color=\"orange\" size=\"28px\" class=\"q-mr-sm\" /&gt; &lt;div class=\"text-weight-bold text-primary\"&gt;&#123;&#123; prop.node.label &#125;&#125;&lt;/div&gt; &lt;/div&gt; &lt;div slot=\"body-story\" slot-scope=\"prop\"&gt; &lt;span class=\"text-weight-thin\"&gt;The story is:&lt;/span&gt; &#123;&#123; prop.node.story &#125;&#125; &lt;/div&gt; &lt;div slot=\"body-toggle\" slot-scope=\"prop\"&gt; &lt;p class=\"caption\"&gt;&#123;&#123; prop.node.caption &#125;&#125;&lt;/p&gt; &lt;q-toggle v-model=\"prop.node.enabled\" label=\"I agree to the terms and conditions\" /&gt; &lt;/div&gt; &lt;/q-tree&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data: () =&gt; (&#123; customize: [ &#123; label: 'Satisfied customers', header: 'root', children: [ &#123; label: 'Good food', icon: 'restaurant_menu', header: 'generic', children: [ &#123; label: 'Quality ingredients', header: 'generic', body: 'story', story: 'Lorem ipsum dolor sit amet.' &#125;, &#123; label: 'Good recipe', body: 'story', story: 'A Congressman works with his equally conniving wife to exact revenge on the people who betrayed him.' &#125; ] &#125;, &#123; label: 'Good service', header: 'generic', body: 'toggle', caption: 'Why are we as consumers so captivated by stories of great customer service? Perhaps it is because...', enabled: false, children: [ &#123; label: 'Prompt attention' &#125;, &#123; label: 'Professional waiter' &#125; ] &#125;, &#123; label: 'Pleasant surroundings', children: [ &#123; label: 'Happy atmosphere' &#125;, &#123; label: 'Good table presentation', header: 'generic' &#125;, &#123; label: 'Pleasing decor' &#125; ] &#125; ] &#125; ] &#125;)&#125;&lt;/script&gt; Applying a default header and body slot&lt;template&gt; &lt;q-tree :nodes=\"customize\" node-key=\"label\" default-expand-all &gt; &lt;div slot=\"default-header\" slot-scope=\"prop\" class=\"row items-center\"&gt; &lt;q-icon :name=\"prop.node.icon || 'share'\" color=\"orange\" size=\"28px\" class=\"q-mr-sm\" /&gt; &lt;div class=\"text-weight-bold text-primary\"&gt;&#123;&#123; prop.node.label &#125;&#125;&lt;/div&gt; &lt;/div&gt; &lt;div slot=\"default-body\" slot-scope=\"prop\"&gt; &lt;div v-if=\"prop.node.story\"&gt; &lt;span class=\"text-weight-thin\"&gt;This node has a story&lt;/span&gt;: &#123;&#123; prop.node.story &#125;&#125; &lt;/div&gt; &lt;span v-else class=\"text-weight-thin\"&gt;This is some default content.&lt;/span&gt; &lt;/div&gt; &lt;/q-tree&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data: () =&gt; (&#123; customize: [ &#123; label: 'Satisfied customers', header: 'root', children: [ &#123; label: 'Good food', icon: 'restaurant_menu', header: 'generic', children: [ &#123; label: 'Quality ingredients', header: 'generic', body: 'story', story: 'Lorem ipsum dolor sit amet.' &#125;, &#123; label: 'Good recipe', body: 'story', story: 'A Congressman works with his equally conniving wife to exact revenge on the people who betrayed him.' &#125; ] &#125;, &#123; label: 'Good service', header: 'generic', body: 'toggle', caption: 'Why are we as consumers so captivated by stories of great customer service? Perhaps it is because...', enabled: false, children: [ &#123; label: 'Prompt attention' &#125;, &#123; label: 'Professional waiter' &#125; ] &#125;, &#123; label: 'Pleasant surroundings', children: [ &#123; label: 'Happy atmosphere' &#125;, &#123; label: 'Good table presentation', header: 'generic' &#125;, &#123; label: 'Pleasing decor' &#125; ] &#125; ] &#125; ] &#125;)&#125;&lt;/script&gt; Filtering nodes&lt;template&gt; &lt;div&gt; &lt;q-input v-model=\"filter\" stack-label=\"Filter\" clearable class=\"q-mb-sm\" /&gt; &lt;q-tree :nodes=\"simple\" :filter=\"filter\" default-expand-all node-key=\"label\" /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data: () =&gt; (&#123; filter: '', simple: [ &#123; label: 'Satisfied customers', children: [ &#123; label: 'Good food', children: [ &#123; label: 'Quality ingredients' &#125;, &#123; label: 'Good recipe' &#125; ] &#125;, &#123; label: 'Good service (disabled node)', disabled: true, children: [ &#123; label: 'Prompt attention' &#125;, &#123; label: 'Professional waiter' &#125; ] &#125;, &#123; label: 'Pleasant surroundings', children: [ &#123; label: 'Happy atmosphere' &#125;, &#123; label: 'Good table presentation' &#125;, &#123; label: 'Pleasing decor' &#125; ] &#125; ] &#125; ] &#125;)&#125;&lt;/script&gt; Accordion mode (sibling nodes get contracted when one gets expanded)&lt;q-tree :nodes=\"simple\" accordion node-key=\"label\"/&gt; Selectable nodes&lt;template&gt; &lt;div&gt; &lt;div class=\"q-mb-sm\"&gt; &lt;q-btn size=\"sm\" color=\"primary\" @click=\"selectGoodService\" label=\"Select 'Good service'\" /&gt; &lt;q-btn v-if=\"selected\" size=\"sm\" color=\"red\" @click=\"unselectNode\" label=\"Unselect node\" /&gt; &lt;/div&gt; &lt;q-tree :nodes=\"props\" default-expand-all :selected.sync=\"selected\" node-key=\"label\" /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data: () =&gt; (&#123; selected: null, props: [ &#123; label: 'Satisfied customers', avatar: 'statics/boy-avatar.png', children: [ &#123; label: 'Good food', icon: 'restaurant_menu', children: [ &#123; label: 'Quality ingredients' &#125;, &#123; label: 'Good recipe' &#125; ] &#125;, &#123; label: 'Good service', icon: 'room_service', children: [ &#123; label: 'Prompt attention' &#125;, &#123; label: 'Professional waiter' &#125; ] &#125;, &#123; label: 'Pleasant surroundings', icon: 'photo', children: [ &#123; label: 'Happy atmosphere', img: 'statics/parallax1.jpg' &#125;, &#123; label: 'Good table presentation', img: 'statics/parallax2.jpg' &#125;, &#123; label: 'Pleasing decor', img: 'statics/mountains.jpg' &#125; ] &#125; ] &#125; ] &#125;), methods: &#123; selectGoodService () &#123; if (this.selected !== 'Good service') &#123; this.selected = 'Good service' &#125; &#125;, unselectNode () &#123; this.selected = null &#125;, &#125;&#125;&lt;/script&gt; Tickable nodes &amp; strategies&lt;template&gt; &lt;div&gt; &lt;div class=\"q-mb-sm row no-wrap items-center\"&gt; &lt;q-select v-model=\"tickStrategy\" color=\"secondary\" stack-label=\"Tick Strategy\" :options=\"[ &#123;label: 'None', value: 'none'&#125;, &#123;label: 'Leaf', value: 'leaf'&#125;, &#123;label: 'Leaf Filtered', value: 'leaf-filtered'&#125;, &#123;label: 'Strict', value: 'strict'&#125; ]\" class=\"q-ma-none q-mr-sm\" style=\"width: 150px\" /&gt; &lt;q-input v-if=\"tickStrategy === 'leaf-filtered'\" color=\"secondary\" stack-label=\"Filter\" v-model=\"tickFilter\" class=\"q-ma-none\" clearable /&gt; &lt;/div&gt; &lt;q-tree :nodes=\"tickable\" color=\"secondary\" default-expand-all :ticked.sync=\"ticked\" :tick-strategy=\"tickStrategy\" :filter=\"tickFilter\" node-key=\"label\" /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data: () =&gt; (&#123; ticked: [], tickStrategy: 'leaf', tickFilter: null, tickable: [ &#123; label: 'Satisfied customers', avatar: 'statics/boy-avatar.png', children: [ &#123; label: 'Good food', icon: 'restaurant_menu', children: [ &#123; label: 'Quality ingredients' &#125;, &#123; label: 'Good recipe' &#125; ] &#125;, &#123; label: 'Good service', icon: 'room_service', children: [ &#123; label: 'Prompt attention' &#125;, &#123; label: 'Professional waiter' &#125; ] &#125;, &#123; label: 'Pleasant surroundings', icon: 'photo', children: [ &#123; label: 'Happy atmosphere (not tickable)', tickable: false, img: 'statics/parallax1.jpg' &#125;, &#123; label: 'Good table presentation (disabled node)', disabled: true, img: 'statics/parallax2.jpg' &#125;, &#123; label: 'Pleasing decor', img: 'statics/mountains.jpg' &#125; ] &#125;, &#123; label: 'Extra information (has no tick)', noTick: true, icon: 'photo' &#125;, &#123; label: 'Forced tick strategy (to \"strict\" in this case)', tickStrategy: 'strict', icon: 'school', children: [ &#123; label: 'Happy atmosphere', img: 'statics/parallax1.jpg' &#125;, &#123; label: 'Good table presentation', img: 'statics/parallax2.jpg' &#125;, &#123; label: 'Very pleasing decor', img: 'statics/mountains.jpg' &#125; ] &#125; ] &#125; ] &#125;)&#125;&lt;/script&gt; Lazy loading nodes&lt;template&gt; &lt;q-tree :nodes=\"lazy\" default-expand-all node-key=\"label\" @lazy-load=\"onLazyLoad\" /&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data: () =&gt; (&#123; lazy: [ &#123; label: 'Node 1', children: [ &#123; label: 'Node 1.1', lazy: true &#125;, &#123; label: 'Node 1.2', lazy: true &#125; ] &#125;, &#123; label: 'Node 2', lazy: true &#125;, &#123; label: 'Lazy load empty', lazy: true &#125;, &#123; label: 'Node is not expandable', expandable: false, children: [ &#123; label: 'Some node' &#125; ] &#125; ] &#125;), methods: &#123; onLazyLoad (&#123; node, key, done, fail &#125;) &#123; // call fail() if any error occurs setTimeout(() =&gt; &#123; // simulate loading and setting an empty node if (key.indexOf('Lazy load empty') &gt; -1) &#123; done([]) return &#125; const label = node.label done([ &#123; label: `$&#123;label&#125;.1` &#125;, &#123; label: `$&#123;label&#125;.2`, lazy: true &#125;, &#123; label: `$&#123;label&#125;.3`, children: [ &#123; label: `$&#123;label&#125;.3.1`, lazy: true &#125;, &#123; label: `$&#123;label&#125;.3.2`, lazy: true &#125; ] &#125; ]) &#125;, 1000) &#125; &#125;&#125;&lt;/script&gt;"},{"title":"Quasar Typography","updated":"2018-05-18T22:01:01.048Z","permalink":"https://quasar-framework.org/components/typography.html","text":"See how headings, blockquotes, definitions lists and more are displayed in the demo. At the end of this page you can read about CSS helper classes. Headings&lt;h1&gt;Light 112sp&lt;/h1&gt;&lt;!-- or: --&gt;&lt;div class=\"q-display-4\"&gt;Light 112sp&lt;/div&gt;&lt;h2&gt;Regular 56sp&lt;/h2&gt;&lt;!-- or: --&gt;&lt;div class=\"q-display-3\"&gt;Regular 56sp&lt;/div&gt;&lt;h3&gt;Regular 45sp&lt;/h3&gt;&lt;!-- or: --&gt;&lt;div class=\"q-display-2\"&gt;Regular 45sp&lt;/div&gt;&lt;h4&gt;Regular 34sp&lt;/h4&gt;&lt;!-- or: --&gt;&lt;div class=\"q-display-1\"&gt;Regular 34sp&lt;/div&gt;&lt;h5&gt;Regular 24sp&lt;/h5&gt;&lt;!-- or: --&gt;&lt;div class=\"q-headline\"&gt;Regular 24sp&lt;/div&gt;&lt;h6&gt;Medium 20sp&lt;/h6&gt;&lt;!-- or: --&gt;&lt;div class=\"q-title\"&gt;Medium 20sp&lt;/div&gt;&lt;div class=\"q-subheading\"&gt;Regular 16sp&lt;/div&gt;&lt;div class=\"q-body-2\"&gt;Medium 14sp&lt;/div&gt;&lt;div class=\"q-body-1\"&gt;Regular 14sp&lt;/div&gt;&lt;div class=\"q-caption\"&gt;Regular 12sp&lt;/div&gt; Weights Class Name text-weight-thin text-weight-light text-weight-regular text-weight-medium text-weight-bold text-weight-bolder Text TypesYou can display text in a variety of ways. &lt;!-- Small and Big text --&gt;&lt;small&gt;Text&lt;/small&gt;&lt;big&gt;Text&lt;/big&gt;&lt;!-- sub and sup --&gt;&lt;sub&gt;Subtext&lt;/sub&gt;&lt;sup&gt;Supertext&lt;/sup&gt;&lt;!-- Bold or italic --&gt;&lt;p class=\"text-bold\"&gt;Bold text&lt;/p&gt;&lt;!-- or: --&gt;&lt;strong&gt;Bold text&lt;/strong&gt;&lt;p class=\"text-italic\"&gt;Italic text&lt;/p&gt;&lt;!-- or: --&gt;&lt;em&gt;Italic text&lt;/em&gt;&lt;!-- Quotes --&gt;&lt;div class=\"quote\"&gt; Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.&lt;/div&gt;&lt;div class=\"quote text-right\"&gt; Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.&lt;/div&gt;&lt;!-- Blockquotes --&gt;&lt;blockquote&gt; &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.&lt;/p&gt; &lt;small&gt;Someone famous for &lt;cite title=\"Quasar Framework\"&gt;Quasar Framework&lt;/cite&gt;&lt;/small&gt;&lt;/blockquote&gt;&lt;blockquote class=\"text-right\"&gt; &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.&lt;/p&gt; &lt;small&gt;Someone famous for &lt;cite title=\"Quasar Framework\"&gt;Quasar Framework&lt;/cite&gt;&lt;/small&gt;&lt;/blockquote&gt;&lt;!-- Definition Lists --&gt;&lt;dl&gt; &lt;dt&gt;Description lists&lt;/dt&gt; &lt;dd&gt;A description list is perfect for defining terms.&lt;/dd&gt; &lt;dt&gt;Euismod&lt;/dt&gt; &lt;dd&gt;Vestibulum id ligula porta felis euismod semper eget lacinia odio sem nec elit.&lt;/dd&gt;&lt;/dl&gt;&lt;dl class=\"horizontal\"&gt; &lt;dt&gt;Description lists&lt;/dt&gt; &lt;dd&gt;A description list is perfect for defining terms.&lt;/dd&gt; &lt;dt&gt;Euismod&lt;/dt&gt; &lt;dd&gt;Vestibulum id ligula porta felis euismod semper eget lacinia odio sem nec elit.&lt;/dd&gt;&lt;/dl&gt; CSS Helper Classes Class Name Description text-right Align text to the right text-left Align text to the left text-center Align text to the center text-justify Text will be justified text-truncate Applies all CSS tweaks to truncate text when container is too small text-bold Text will be in bold text-italic Text will be in italic text-no-wrap Non wrapable text (applies white-space: nowrap) uppercase Transform text to uppercase lowercase Transform text to lowercase capitalize Capitalize first letter of the text round-borders Every Quasar Theme has a generic border radius. This radius is applied to the DOM node block display property set to block no-margin Margins are set to 0 no-padding Padding is set to 0 no-outline Outline is set to 0 Default MD FontThe default font embedded in Quasar App when built with Material Design Theme is Roboto. But it is not required. You can use whatever font(s) you like. Roboto comes with 5 different font weights you can use: 100, 300, 400, 500, 700. Below is an image from Google’s Roboto Specimen document displaying the different font weights: This is where Roboto font comes embedded by default, if you are looking to remove it: // file: /quasar.conf.jsextras: [ ctx.theme.mat ? 'roboto-font' : null] Notice that the font is only included when developing/building with Material Theme."},{"title":"Uploader","updated":"2019-01-01T13:12:57.797Z","permalink":"https://quasar-framework.org/components/uploader.html","text":"Quasar supplies a way for you to upload files through QUploader component. Works well with QField for additional functionality such as a helper, error message placeholder and many others. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QUploader']&#125; Basic Usage&lt;q-uploader :url=\"url\" /&gt; Vue Properties Vue Property Type Description url String (Required) URL or path to the server which handles the upload name String Name of the file, if it should be different than the file’s name. headers Object Specify what headers need to be added to the XHR request url-factory Function Function (with file object received as parameter) which returns a Promise that resolves to a URL. upload-factory Function (v0.17+) Function defining a custom upload method which returns a Promise that resolves with a file. Check section below. no-content-type Boolean (v0.17+) Avoid setting Content-Type header when uploading. with-credentials Boolean (v0.17+) Sets xhr.withCredentials to true (doesn’t apply when using upload-factory). method String HTTP method to use (POST/PUT). Defaults to POST. filter Function (v0.17+) Function defining a custom filter method which returns a list of filtered files. Check section below. extensions String Extensions to allow for uploading. Example: &#39;.gif,.jpg,.jpeg,.png&#39; multiple Boolean Allow multiple file uploads hide-upload-button Boolean Hides the Upload button. You can then trigger it manually by calling upload() on the Vue ref hide-upload-progress Boolean Hides the upload progress. Useful when you want some other means of signaling upload progress to the user. additional-fields Array Additional fields to send along the upload request. Useful for authentication and so on. Array of Objects containing name and value props. no-thumbnails Boolean Don’t display thumbnails when files are images. auto-expand Boolean Auto-expand the list of files when some are added to the queue. expand-style String/Array/Object Style of the expanded file list container. expand-class String/Array/Object Classes of the expanded file list container. send-raw Boolean Don’t use multipart/form-data and send the file content inside the request body. If using this approach you will need to specify the correct Content-Type header. Defaults to false. readonly Boolean If set to true, Uploader is displayed as read-only. clearable Boolean If set to true, the component offers the user an actionable icon to remove the current selection. Common input frame properties: Property Type Description prefix String A text that should be shown before the textfield. suffix String A text that should be shown after the textfield. float-label String A text label that will “float” up above the input field, once the input field gets focus. stack-label String A text label that will be shown above the input field and is static. color String One from Quasar Color Palette. inverted Boolean Inverted mode. Color is applied to background instead. inverted-light Boolean Inverted mode with a light color. Color is applied to background instead. dark Boolean Is QUploader rendered on a dark background? hide-underline Boolean Hides the bottom border. align String One of ‘left’, ‘center’ or ‘right’ which determines the text align within textfield. disable Boolean If set to true, Uploader is disabled and the user cannot change anything. error Boolean If set to true, the input fields colors are changed to show there is an error. warning Boolean Same as error, the input field color is changed to show there is a warning. before Array of Objects Icon buttons on left side of input frame. Read below more details. after Array of Objects Icon buttons on right side of input frame. Read below more details. no-parent-field Boolean Avoid trying to connect to a parent QField. Upload FactorySometimes you need to define your own upload method. You can do this through upload-factory parameter, as below: &lt;template&gt; &lt;q-uploader url=\"\" :upload-factory=\"uploadFile\" /&gt;&lt;/template&gt;&lt;script&gt;export default &#123; methods: &#123; uploadFile (file, updateProgress) &#123; // \"file\" is an Object containing file's props, including content // for updating progress (as 0-1 floating number), we need to call: // updateProgress (bytesTransferred / totalBytes) // we need to return a Promise // (resolves when upload is done, rejects when there's an error) &#125; &#125;&#125;&lt;/script&gt; Filter filesSometimes you need to filter files before upload. You can do this through filter parameter.Below an example with max file size check: &lt;template&gt; &lt;q-uploader url=\"\" :filter=\"filterFiles\" /&gt;&lt;/template&gt;&lt;script&gt;export default &#123; methods: &#123; filterFiles (files) &#123; const MAX_FILE_SIZE = 3 * 1024 * 1024 /* =3M */ // returns an Array containing allowed files return files.filter((file) =&gt; &#123; return file.size &lt;= MAX_FILE_SIZE &#125;) &#125; &#125;&#125;&lt;/script&gt; Icon buttonsThis section refers to before and after properties which can add additional buttons as icons to the textfield. Here is the structure of the two properties: &#123; // required icon icon: String, // required function to call when // icon is clicked/tapped handler: Function, // Optional. Show icon button // if model has a value content: Boolean, // Optional. Show icon button // if textfield is marked with error error: Boolean&#125; Examples:&lt;!-- Show an icon button (with 'warning' as icon)--&gt;&lt;q-uploader :url=\"url\" :after=\"[ &#123; icon: 'warning', handler () &#123; // do something... &#125; &#125; ]\"/&gt; Vue Methods Vue Method Description upload() Start file(s) upload. abort() Abort uploading file(s). reset() Reset uploader state. Vue Events Vue Event Description @add(files) Triggered when file is picked for upload @remove:abort(file) Triggered when file is removed from upload queue while uploading. @remove:cancel(file) Triggered when file is removed from upload queue before uploading. @remove:done(file) Triggered when file is removed from upload list after it has been uploaded. @uploaded(file, xhr) Triggered individually for each file that has just been uploaded @fail(file, xhr) Triggered individually for each file that has encountered error while uploading @start Triggered when upload has started @finish Triggered when upload of file(s) has ended (with success or failure) ExamplesAWS S3 - Uploading Using Pre-Signed URLs&lt;!-- x-amz-acl and content-type headers must match the ACL and ContentType specified when generating the signed url.--&gt;&lt;q-uploader url=\"\" method=\"PUT\" :headers=\"&#123; 'x-amz-acl': &lt;acl&gt;, 'content-type': &lt;file-type&gt; &#125;\" :url-factory=\"getSignedUrl\" :send-raw=\"true\"/&gt; async getSignedUrl (file) &#123; const contentType = file.type // To send the correct Content-Type const fileName = file.name // If you want to use this value to calculate the S3 Key. const response = await api.getSignedUrl(&#123; fileName, contentType &#125;) // Your api call to a sever that calculates the signed url. return response.data.url&#125;"},{"title":"Video Embedding","updated":"2018-05-18T22:01:01.049Z","permalink":"https://quasar-framework.org/components/video-embedding.html","text":"Embedding a video like Youtube is easy. It also resizes to fit the container by default. InstallationEdit /quasar.conf.js:framework: &#123; components: ['QVideo']&#125; Using QVideo&lt;q-video src=\"https://www.youtube.com/embed/k3_tw44QsZQ?rel=0\" style=\"width: 853px; height: 480px\"/&gt; Or, if you prefer the “raw” version for more control:&lt;div class=\"q-video\"&gt; &lt;iframe width=\"853\" height=\"480\" src=\"https://www.youtube.com/embed/k3_tw44QsZQ?rel=0\" frameborder=\"0\" allowfullscreen &gt;&lt;/iframe&gt;&lt;/div&gt;"},{"title":"Vue Prototype Injections","updated":"2018-05-18T22:01:01.050Z","permalink":"https://quasar-framework.org/components/vue-prototype-injections.html","text":"Quasar injects Vue prototype with $q object: Injection Type Description $q.version String Quasar version. $q.theme String Theme being used. Examples: mat, ios $q.platform Object Same object as Platform import from Quasar. $q.i18n Object Internationalisation for Quasar, containing labels etc (one of i18n files). Designed for Quasar components, but you can use in your app components too. $q.cordova Object Reference to Cordova global object. Available only when running under a Cordova app. $q.electron Object Reference to Electron global object. Available only when running under an Electron app. You can use it globally inside a Vue context (component script or template) like this: &lt;!-- inside a Vue template --&gt;&lt;template&gt; &lt;div&gt; &lt;div v-if=\"$q.platform.is.ios\"&gt; Gets rendered only on iOS platform. &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;// not available here outside// of the exportexport default &#123; // inside a Vue component script ..., // showing an example on a method, but // can be any part of Vue script methods: &#123; show () &#123; // prints out Quasar version console.log(this.$q.version) &#125; &#125;&#125;&lt;/script&gt;"},{"title":"CSS Visibility","updated":"2018-05-18T22:01:01.049Z","permalink":"https://quasar-framework.org/components/visibility.html","text":"There are some CSS classes that you can use out of the box for common functionality. Class Name Description disabled Cursor is changed to notify a ‘disable’ and opacity is set to a lower value. hidden Set display to none. Compare with below - the class hidden means the element will not show and will not take up space in the layout. invisible Set visibility to hidden. Compare with above - the class invisible means the element will not show, but it will still take up space in the layout. transparent Background color is transparent. dimmed Apply dark transparent overlay on top of your element. Do not use on elements which already have :after pseudoelement. light-dimmed Apply white transparent overlay on top of your element. Do not use on elements which already have :after pseudoelement. highlight-and-fade Adds a yellow background color and fades it away upon element is displayed. ellipsis Truncates text and shows ellipsis when not enough space available. ellipsis-2-lines Truncates text and shows ellipsis when not enough space available on two lines (works only on Webkit browsers). ellipsis-3-lines Truncates text and shows ellipsis when not enough space available on three lines (works only on Webkit browsers). z-top Positions your element on top of any other component, but behind Popovers, Tooltips, Notifications. z-max Positions your element on top of any other component (including Drawer, Modals, Notifications, Layout header/footer, …) Window Width RelatedFirst of all, let’s define what does a small, medium, big or large window means: Window Size Prefix Width threshold in pixels Extra Small xs Up to 576px Small sm Up to 768px Medium md Up to 992px Large lg Up to 1200px Extra Large xl Bigger than 1200px Now on to the window width related CSS classes. Class Name Description xs Display only on extra small windows sm Display only on small windows md Display only on medium-sized windows lg Display only on large windows xl Display only on extra large windows You can also show some DOM element or component if it’s lower than one of the sizes. Same for greater than one of the sizes. Just attach lt- or gt- prefixes, which come from “lower than” and “greater than”. Example: lt-md (display on xs and sm only), lt-xl (display on xs, sm, md and lg windows only), gt-md (display on greater than medium windows: lg and xl). NOTEYou can combine the visibility classes with the inline class for inline-blocks.Example : &lt;span class=&quot;gt-sm inline&quot;&gt;&amp;nbsp;and here is the end of this long sentence.&lt;/span&gt; Platform RelatedVisible only on: Class Name Description desktop-only Visible only on desktop mobile-only Visible only on mobile cordova-only Visible only on Cordova wrapped Apps electron-only Visible only on Electron wrapped Apps touch-only Visible only on touch capable platforms mat-only Visible only for Material Quasar Theme ios-only Visible only for iOS Quasar Theme platform-ios-only Visible only on an iOS platform platform-android-only Visible only on an Android platform within-iframe-only Visible only when entire website is under an IFRAME tag Hide on: Class Name Description desktop-hide Hide on desktop mobile-hide Hide on mobile cordova-hide Hide on Cordova wrapped Apps electron-hide Hide on Electron wrapped Apps touch-hide Hide on touch capable platforms mat-hide Hide for Material Quasar Theme ios-hide Hide for iOS Quasar Theme platform-ios-hide Hide on iOS platform platform-android-hide Hide on Android platform within-iframe-hide Hide only when entire website is under an IFRAME tag Also check Quasar Theming &gt; Platform Specific Styles. NOTEBased on your needs, you might want to also check Javascript &gt; Environment page to see how you can achieve the same effect using Javascript. This latter method allows you to not even render a DOM element or component. It is useful when the rendering process is expensive. Orientation Related Class Name Description orientation-portrait Visible only when screen orientation is Portrait orientation-landscape Visible only when screen orientation is Landscape Printing Related Class Name Description print-only Visible only on print media - hidden on screen media print-hide Visible on screen media - hidden on print media"},{"title":"Window Resize Observable","updated":"2018-07-25T14:14:24.684Z","permalink":"https://quasar-framework.org/components/window-resize-observable.html","text":"QWindowResizeObservable is a Quasar component that emits a resize event whenever the document viewport (window) changes its size, with no polling involved. InstallationEdit /quasar.conf.js:framework: &#123; components: [ 'QWindowResizeObservable' ]&#125; Basic Usage&lt;template&gt; ... &lt;!--can be placed anywhere within your template --&gt; &lt;q-window-resize-observable @resize=\"onResize\" /&gt; ...&lt;/template&gt;&lt;script&gt;export default &#123; ..., methods: &#123; ..., onResize (size) &#123; console.log(size) // &#123; // width: 1200 // width of viewport (in px) // height: 920 // height of viewport (in px) // &#125; &#125; &#125;&#125;&lt;/script&gt; Please note that QWindowResizeObservable will issue an event as soon as it gets rendered and attached to DOM, so you can have the initial size of the window. Vue Properties Property Type Description debounce Number (v0.17+) Emitting the event with a custom debounce. “0” means no debounce."},{"title":"Quasar Web Storage","updated":"2018-07-25T14:14:24.683Z","permalink":"https://quasar-framework.org/components/web-storage.html","text":"Quasar provides a wrapper over Web Storage API. NOTEWeb Storage API only retrieves strings. Quasar retrieves data with its original data type. You tell it to store a Number then to retrieve it and it will still be a Number, not a string representation of the number as with Web Storage API. Same for JSON, Regular Expressions, Dates, Booleans and so on. Read below. InstallationEdit /quasar.conf.js:framework: &#123; plugins: [ 'LocalStorage', 'SessionStorage' ]&#125; Note about SSRWhen running the code server-side on SSR builds, this feature can’t work. Web Storage is a browser API only. You can however make use of it on the client-side with SSR. Getting StartedQuasar supports both Local and Session Storage. // outside of a Vue fileimport &#123; LocalStorage, SessionStorage &#125; from 'quasar'LocalStorage.set(key, value)let value = LocalStorage.get.item(key)SessionStorage.set(key, value)let value = SessionStorage.get.item(key) // inside of a Vue filethis.$q.localStorage.set(key, value)let value = this.$q.localStorage.get.item(key)this.$q.sessionStorage.set(key, value)let value = this.$q.sessionStorage.get.item(key) Before we jump to discuss on the API, let’s see what data types are supported out of the box. Data TypesQuasar Storage supports (but not limited to) the following data types out of the box. If you store one of these types, the retrieved data will have the same data type. Dates Regular Expressions Numbers Booleans Strings Plain Javascript Objects If you store any other data type, the returned value will be a String. So you can even store functions, but be careful that you need to eval() the returned value (which is a String representation of the function). MethodsStoring Data// outside of a Vue fileimport &#123; LocalStorage, SessionStorage &#125; from 'quasar'LocalStorage.set(key, value)SessionStorage.set(key, value) // inside of a Vue filethis.$q.localStorage.set(key, value)this.$q.sessionStorage.set(key, value) Retrieving DataOne item:// outside of a Vue fileimport &#123; LocalStorage, SessionStorage &#125; from 'quasar'let item = LocalStorage.get.item(key)let item = SessionStorage.get.item(key)// inside of a Vue filelet item = this.$q.localStorage.get.item(key)let item = this.$q.sessionStorage.get.item(key) All items:// outside of a Vue fileimport &#123; LocalStorage, SessionStorage &#125; from 'quasar'let item = LocalStorage.get.all()let item = SessionStorage.get.all()// inside of a Vue filelet item = this.$q.localStorage.get.all()let item = this.$q.sessionStorage.get.all() Iterating through StoreGetting length of store:// outside of a Vue fileimport &#123; LocalStorage, SessionStorage &#125; from 'quasar'let length = LocalStorage.get.length()let length = SessionStorage.get.length()// inside of a Vue filelet length = this.$q.localStorage.get.length()let length = this.$q.sessionStorage.get.length() Getting item at index:// outside of a Vue fileimport &#123; LocalStorage, SessionStorage &#125; from 'quasar'let item = LocalStorage.get.index(index)let item = SessionStorage.get.index(index)// inside of a Vue filelet item = this.$q.localStorage.get.index(index)let item = this.$q.sessionStorage.get.index(index) Now you know how to loop through the store. Removing DataOne item:// outside of a Vue fileimport &#123; LocalStorage, SessionStorage &#125; from 'quasar'LocalStorage.remove(key)SessionStorage.remove(key)// inside of a Vue filethis.$q.localStorage.remove(key)this.$q.sessionStorage.remove(key) All items (clear the store):// outside of a Vue fileimport &#123; LocalStorage, SessionStorage &#125; from 'quasar'LocalStorage.clear()SessionStorage.clear()// inside of a Vue filethis.$q.localStorage.clear()this.$q.sessionStorage.clear() Is Store Empty?// outside of a Vue fileimport &#123; LocalStorage, SessionStorage &#125; from 'quasar'(boolean) LocalStorage.isEmpty()(boolean) SessionStorage.isEmpty()// inside of a Vue file(boolean) this.$q.localStorage.isEmpty()(boolean) this.$q.sessionStorage.isEmpty() Is Key in Store?// outside of a Vue fileimport &#123; LocalStorage, SessionStorage &#125; from 'quasar'(boolean) LocalStorage.has(key)(boolean) SessionStorage.has(key)// inside of a Vue file(boolean) this.$q.localStorage.has(key)(boolean) this.$q.sessionStorage.has(key)"}]